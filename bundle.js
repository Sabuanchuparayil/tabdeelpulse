(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to2, from2, except, desc) => {
    if (from2 && typeof from2 === "object" || typeof from2 === "function") {
      for (let key of __getOwnPropNames(from2))
        if (!__hasOwnProp.call(to2, key) && key !== except)
          __defProp(to2, key, { get: () => from2[key], enumerable: !(desc = __getOwnPropDesc(from2, key)) || desc.enumerable });
    }
    return to2;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/react/cjs/react.production.js
  var require_react_production = __commonJS({
    "node_modules/react/cjs/react.production.js"(exports) {
      "use strict";
      var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_MEMO_TYPE2 = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
        return "function" === typeof maybeIterable ? maybeIterable : null;
      }
      var ReactNoopUpdateQueue = {
        isMounted: function() {
          return false;
        },
        enqueueForceUpdate: function() {
        },
        enqueueReplaceState: function() {
        },
        enqueueSetState: function() {
        }
      };
      var assign2 = Object.assign;
      var emptyObject = {};
      function Component5(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      Component5.prototype.isReactComponent = {};
      Component5.prototype.setState = function(partialState, callback) {
        if ("object" !== typeof partialState && "function" !== typeof partialState && null != partialState)
          throw Error(
            "takes an object of state variables to update or a function which returns an object of state variables."
          );
        this.updater.enqueueSetState(this, partialState, callback, "setState");
      };
      Component5.prototype.forceUpdate = function(callback) {
        this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
      };
      function ComponentDummy() {
      }
      ComponentDummy.prototype = Component5.prototype;
      function PureComponent5(props, context, updater) {
        this.props = props;
        this.context = context;
        this.refs = emptyObject;
        this.updater = updater || ReactNoopUpdateQueue;
      }
      var pureComponentPrototype = PureComponent5.prototype = new ComponentDummy();
      pureComponentPrototype.constructor = PureComponent5;
      assign2(pureComponentPrototype, Component5.prototype);
      pureComponentPrototype.isPureReactComponent = true;
      var isArrayImpl = Array.isArray;
      var ReactSharedInternals = { H: null, A: null, T: null, S: null, V: null };
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      function ReactElement(type, key, self2, source, owner, props) {
        self2 = props.ref;
        return {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref: void 0 !== self2 ? self2 : null,
          props
        };
      }
      function cloneAndReplaceKey(oldElement, newKey) {
        return ReactElement(
          oldElement.type,
          newKey,
          void 0,
          void 0,
          void 0,
          oldElement.props
        );
      }
      function isValidElement15(object) {
        return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
      }
      function escape(key) {
        var escaperLookup = { "=": "=0", ":": "=2" };
        return "$" + key.replace(/[=:]/g, function(match) {
          return escaperLookup[match];
        });
      }
      var userProvidedKeyEscapeRegex = /\/+/g;
      function getElementKey(element, index) {
        return "object" === typeof element && null !== element && null != element.key ? escape("" + element.key) : index.toString(36);
      }
      function noop$1() {
      }
      function resolveThenable(thenable) {
        switch (thenable.status) {
          case "fulfilled":
            return thenable.value;
          case "rejected":
            throw thenable.reason;
          default:
            switch ("string" === typeof thenable.status ? thenable.then(noop$1, noop$1) : (thenable.status = "pending", thenable.then(
              function(fulfilledValue) {
                "pending" === thenable.status && (thenable.status = "fulfilled", thenable.value = fulfilledValue);
              },
              function(error) {
                "pending" === thenable.status && (thenable.status = "rejected", thenable.reason = error);
              }
            )), thenable.status) {
              case "fulfilled":
                return thenable.value;
              case "rejected":
                throw thenable.reason;
            }
        }
        throw thenable;
      }
      function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
        var type = typeof children;
        if ("undefined" === type || "boolean" === type) children = null;
        var invokeCallback = false;
        if (null === children) invokeCallback = true;
        else
          switch (type) {
            case "bigint":
            case "string":
            case "number":
              invokeCallback = true;
              break;
            case "object":
              switch (children.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  invokeCallback = true;
                  break;
                case REACT_LAZY_TYPE:
                  return invokeCallback = children._init, mapIntoArray(
                    invokeCallback(children._payload),
                    array,
                    escapedPrefix,
                    nameSoFar,
                    callback
                  );
              }
          }
        if (invokeCallback)
          return callback = callback(children), invokeCallback = "" === nameSoFar ? "." + getElementKey(children, 0) : nameSoFar, isArrayImpl(callback) ? (escapedPrefix = "", null != invokeCallback && (escapedPrefix = invokeCallback.replace(userProvidedKeyEscapeRegex, "$&/") + "/"), mapIntoArray(callback, array, escapedPrefix, "", function(c2) {
            return c2;
          })) : null != callback && (isValidElement15(callback) && (callback = cloneAndReplaceKey(
            callback,
            escapedPrefix + (null == callback.key || children && children.key === callback.key ? "" : ("" + callback.key).replace(
              userProvidedKeyEscapeRegex,
              "$&/"
            ) + "/") + invokeCallback
          )), array.push(callback)), 1;
        invokeCallback = 0;
        var nextNamePrefix = "" === nameSoFar ? "." : nameSoFar + ":";
        if (isArrayImpl(children))
          for (var i = 0; i < children.length; i++)
            nameSoFar = children[i], type = nextNamePrefix + getElementKey(nameSoFar, i), invokeCallback += mapIntoArray(
              nameSoFar,
              array,
              escapedPrefix,
              type,
              callback
            );
        else if (i = getIteratorFn(children), "function" === typeof i)
          for (children = i.call(children), i = 0; !(nameSoFar = children.next()).done; )
            nameSoFar = nameSoFar.value, type = nextNamePrefix + getElementKey(nameSoFar, i++), invokeCallback += mapIntoArray(
              nameSoFar,
              array,
              escapedPrefix,
              type,
              callback
            );
        else if ("object" === type) {
          if ("function" === typeof children.then)
            return mapIntoArray(
              resolveThenable(children),
              array,
              escapedPrefix,
              nameSoFar,
              callback
            );
          array = String(children);
          throw Error(
            "Objects are not valid as a React child (found: " + ("[object Object]" === array ? "object with keys {" + Object.keys(children).join(", ") + "}" : array) + "). If you meant to render a collection of children, use an array instead."
          );
        }
        return invokeCallback;
      }
      function mapChildren(children, func, context) {
        if (null == children) return children;
        var result = [], count = 0;
        mapIntoArray(children, result, "", "", function(child) {
          return func.call(context, child, count++);
        });
        return result;
      }
      function lazyInitializer(payload) {
        if (-1 === payload._status) {
          var ctor = payload._result;
          ctor = ctor();
          ctor.then(
            function(moduleObject) {
              if (0 === payload._status || -1 === payload._status)
                payload._status = 1, payload._result = moduleObject;
            },
            function(error) {
              if (0 === payload._status || -1 === payload._status)
                payload._status = 2, payload._result = error;
            }
          );
          -1 === payload._status && (payload._status = 0, payload._result = ctor);
        }
        if (1 === payload._status) return payload._result.default;
        throw payload._result;
      }
      var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
        if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
          var event = new window.ErrorEvent("error", {
            bubbles: true,
            cancelable: true,
            message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
            error
          });
          if (!window.dispatchEvent(event)) return;
        } else if ("object" === typeof process && "function" === typeof process.emit) {
          process.emit("uncaughtException", error);
          return;
        }
        console.error(error);
      };
      function noop6() {
      }
      exports.Children = {
        map: mapChildren,
        forEach: function(children, forEachFunc, forEachContext) {
          mapChildren(
            children,
            function() {
              forEachFunc.apply(this, arguments);
            },
            forEachContext
          );
        },
        count: function(children) {
          var n = 0;
          mapChildren(children, function() {
            n++;
          });
          return n;
        },
        toArray: function(children) {
          return mapChildren(children, function(child) {
            return child;
          }) || [];
        },
        only: function(children) {
          if (!isValidElement15(children))
            throw Error(
              "React.Children.only expected to receive a single React element child."
            );
          return children;
        }
      };
      exports.Component = Component5;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.Profiler = REACT_PROFILER_TYPE;
      exports.PureComponent = PureComponent5;
      exports.StrictMode = REACT_STRICT_MODE_TYPE;
      exports.Suspense = REACT_SUSPENSE_TYPE;
      exports.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = ReactSharedInternals;
      exports.__COMPILER_RUNTIME = {
        __proto__: null,
        c: function(size) {
          return ReactSharedInternals.H.useMemoCache(size);
        }
      };
      exports.cache = function(fn) {
        return function() {
          return fn.apply(null, arguments);
        };
      };
      exports.cloneElement = function(element, config, children) {
        if (null === element || void 0 === element)
          throw Error(
            "The argument must be a React element, but you passed " + element + "."
          );
        var props = assign2({}, element.props), key = element.key, owner = void 0;
        if (null != config)
          for (propName in void 0 !== config.ref && (owner = void 0), void 0 !== config.key && (key = "" + config.key), config)
            !hasOwnProperty.call(config, propName) || "key" === propName || "__self" === propName || "__source" === propName || "ref" === propName && void 0 === config.ref || (props[propName] = config[propName]);
        var propName = arguments.length - 2;
        if (1 === propName) props.children = children;
        else if (1 < propName) {
          for (var childArray = Array(propName), i = 0; i < propName; i++)
            childArray[i] = arguments[i + 2];
          props.children = childArray;
        }
        return ReactElement(element.type, key, void 0, void 0, owner, props);
      };
      exports.createContext = function(defaultValue) {
        defaultValue = {
          $$typeof: REACT_CONTEXT_TYPE,
          _currentValue: defaultValue,
          _currentValue2: defaultValue,
          _threadCount: 0,
          Provider: null,
          Consumer: null
        };
        defaultValue.Provider = defaultValue;
        defaultValue.Consumer = {
          $$typeof: REACT_CONSUMER_TYPE,
          _context: defaultValue
        };
        return defaultValue;
      };
      exports.createElement = function(type, config, children) {
        var propName, props = {}, key = null;
        if (null != config)
          for (propName in void 0 !== config.key && (key = "" + config.key), config)
            hasOwnProperty.call(config, propName) && "key" !== propName && "__self" !== propName && "__source" !== propName && (props[propName] = config[propName]);
        var childrenLength = arguments.length - 2;
        if (1 === childrenLength) props.children = children;
        else if (1 < childrenLength) {
          for (var childArray = Array(childrenLength), i = 0; i < childrenLength; i++)
            childArray[i] = arguments[i + 2];
          props.children = childArray;
        }
        if (type && type.defaultProps)
          for (propName in childrenLength = type.defaultProps, childrenLength)
            void 0 === props[propName] && (props[propName] = childrenLength[propName]);
        return ReactElement(type, key, void 0, void 0, null, props);
      };
      exports.createRef = function() {
        return { current: null };
      };
      exports.forwardRef = function(render) {
        return { $$typeof: REACT_FORWARD_REF_TYPE2, render };
      };
      exports.isValidElement = isValidElement15;
      exports.lazy = function(ctor) {
        return {
          $$typeof: REACT_LAZY_TYPE,
          _payload: { _status: -1, _result: ctor },
          _init: lazyInitializer
        };
      };
      exports.memo = function(type, compare) {
        return {
          $$typeof: REACT_MEMO_TYPE2,
          type,
          compare: void 0 === compare ? null : compare
        };
      };
      exports.startTransition = function(scope) {
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        try {
          var returnValue = scope(), onStartTransitionFinish = ReactSharedInternals.S;
          null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
          "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && returnValue.then(noop6, reportGlobalError);
        } catch (error) {
          reportGlobalError(error);
        } finally {
          ReactSharedInternals.T = prevTransition;
        }
      };
      exports.unstable_useCacheRefresh = function() {
        return ReactSharedInternals.H.useCacheRefresh();
      };
      exports.use = function(usable) {
        return ReactSharedInternals.H.use(usable);
      };
      exports.useActionState = function(action, initialState12, permalink) {
        return ReactSharedInternals.H.useActionState(action, initialState12, permalink);
      };
      exports.useCallback = function(callback, deps) {
        return ReactSharedInternals.H.useCallback(callback, deps);
      };
      exports.useContext = function(Context) {
        return ReactSharedInternals.H.useContext(Context);
      };
      exports.useDebugValue = function() {
      };
      exports.useDeferredValue = function(value, initialValue) {
        return ReactSharedInternals.H.useDeferredValue(value, initialValue);
      };
      exports.useEffect = function(create, createDeps, update) {
        var dispatcher = ReactSharedInternals.H;
        if ("function" === typeof update)
          throw Error(
            "useEffect CRUD overload is not enabled in this build of React."
          );
        return dispatcher.useEffect(create, createDeps);
      };
      exports.useId = function() {
        return ReactSharedInternals.H.useId();
      };
      exports.useImperativeHandle = function(ref, create, deps) {
        return ReactSharedInternals.H.useImperativeHandle(ref, create, deps);
      };
      exports.useInsertionEffect = function(create, deps) {
        return ReactSharedInternals.H.useInsertionEffect(create, deps);
      };
      exports.useLayoutEffect = function(create, deps) {
        return ReactSharedInternals.H.useLayoutEffect(create, deps);
      };
      exports.useMemo = function(create, deps) {
        return ReactSharedInternals.H.useMemo(create, deps);
      };
      exports.useOptimistic = function(passthrough, reducer) {
        return ReactSharedInternals.H.useOptimistic(passthrough, reducer);
      };
      exports.useReducer = function(reducer, initialArg, init) {
        return ReactSharedInternals.H.useReducer(reducer, initialArg, init);
      };
      exports.useRef = function(initialValue) {
        return ReactSharedInternals.H.useRef(initialValue);
      };
      exports.useState = function(initialState12) {
        return ReactSharedInternals.H.useState(initialState12);
      };
      exports.useSyncExternalStore = function(subscribe, getSnapshot, getServerSnapshot) {
        return ReactSharedInternals.H.useSyncExternalStore(
          subscribe,
          getSnapshot,
          getServerSnapshot
        );
      };
      exports.useTransition = function() {
        return ReactSharedInternals.H.useTransition();
      };
      exports.version = "19.1.1";
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_react_production();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/scheduler/cjs/scheduler.production.js
  var require_scheduler_production = __commonJS({
    "node_modules/scheduler/cjs/scheduler.production.js"(exports) {
      "use strict";
      function push(heap, node) {
        var index = heap.length;
        heap.push(node);
        a: for (; 0 < index; ) {
          var parentIndex = index - 1 >>> 1, parent = heap[parentIndex];
          if (0 < compare(parent, node))
            heap[parentIndex] = node, heap[index] = parent, index = parentIndex;
          else break a;
        }
      }
      function peek2(heap) {
        return 0 === heap.length ? null : heap[0];
      }
      function pop(heap) {
        if (0 === heap.length) return null;
        var first = heap[0], last2 = heap.pop();
        if (last2 !== first) {
          heap[0] = last2;
          a: for (var index = 0, length = heap.length, halfLength = length >>> 1; index < halfLength; ) {
            var leftIndex = 2 * (index + 1) - 1, left = heap[leftIndex], rightIndex = leftIndex + 1, right = heap[rightIndex];
            if (0 > compare(left, last2))
              rightIndex < length && 0 > compare(right, left) ? (heap[index] = right, heap[rightIndex] = last2, index = rightIndex) : (heap[index] = left, heap[leftIndex] = last2, index = leftIndex);
            else if (rightIndex < length && 0 > compare(right, last2))
              heap[index] = right, heap[rightIndex] = last2, index = rightIndex;
            else break a;
          }
        }
        return first;
      }
      function compare(a2, b) {
        var diff = a2.sortIndex - b.sortIndex;
        return 0 !== diff ? diff : a2.id - b.id;
      }
      exports.unstable_now = void 0;
      if ("object" === typeof performance && "function" === typeof performance.now) {
        localPerformance = performance;
        exports.unstable_now = function() {
          return localPerformance.now();
        };
      } else {
        localDate2 = Date, initialTime = localDate2.now();
        exports.unstable_now = function() {
          return localDate2.now() - initialTime;
        };
      }
      var localPerformance;
      var localDate2;
      var initialTime;
      var taskQueue = [];
      var timerQueue = [];
      var taskIdCounter = 1;
      var currentTask = null;
      var currentPriorityLevel = 3;
      var isPerformingWork = false;
      var isHostCallbackScheduled = false;
      var isHostTimeoutScheduled = false;
      var needsPaint = false;
      var localSetTimeout = "function" === typeof setTimeout ? setTimeout : null;
      var localClearTimeout = "function" === typeof clearTimeout ? clearTimeout : null;
      var localSetImmediate = "undefined" !== typeof setImmediate ? setImmediate : null;
      function advanceTimers(currentTime) {
        for (var timer = peek2(timerQueue); null !== timer; ) {
          if (null === timer.callback) pop(timerQueue);
          else if (timer.startTime <= currentTime)
            pop(timerQueue), timer.sortIndex = timer.expirationTime, push(taskQueue, timer);
          else break;
          timer = peek2(timerQueue);
        }
      }
      function handleTimeout(currentTime) {
        isHostTimeoutScheduled = false;
        advanceTimers(currentTime);
        if (!isHostCallbackScheduled)
          if (null !== peek2(taskQueue))
            isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline());
          else {
            var firstTimer = peek2(timerQueue);
            null !== firstTimer && requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
          }
      }
      var isMessageLoopRunning = false;
      var taskTimeoutID = -1;
      var frameInterval = 5;
      var startTime = -1;
      function shouldYieldToHost() {
        return needsPaint ? true : exports.unstable_now() - startTime < frameInterval ? false : true;
      }
      function performWorkUntilDeadline() {
        needsPaint = false;
        if (isMessageLoopRunning) {
          var currentTime = exports.unstable_now();
          startTime = currentTime;
          var hasMoreWork = true;
          try {
            a: {
              isHostCallbackScheduled = false;
              isHostTimeoutScheduled && (isHostTimeoutScheduled = false, localClearTimeout(taskTimeoutID), taskTimeoutID = -1);
              isPerformingWork = true;
              var previousPriorityLevel = currentPriorityLevel;
              try {
                b: {
                  advanceTimers(currentTime);
                  for (currentTask = peek2(taskQueue); null !== currentTask && !(currentTask.expirationTime > currentTime && shouldYieldToHost()); ) {
                    var callback = currentTask.callback;
                    if ("function" === typeof callback) {
                      currentTask.callback = null;
                      currentPriorityLevel = currentTask.priorityLevel;
                      var continuationCallback = callback(
                        currentTask.expirationTime <= currentTime
                      );
                      currentTime = exports.unstable_now();
                      if ("function" === typeof continuationCallback) {
                        currentTask.callback = continuationCallback;
                        advanceTimers(currentTime);
                        hasMoreWork = true;
                        break b;
                      }
                      currentTask === peek2(taskQueue) && pop(taskQueue);
                      advanceTimers(currentTime);
                    } else pop(taskQueue);
                    currentTask = peek2(taskQueue);
                  }
                  if (null !== currentTask) hasMoreWork = true;
                  else {
                    var firstTimer = peek2(timerQueue);
                    null !== firstTimer && requestHostTimeout(
                      handleTimeout,
                      firstTimer.startTime - currentTime
                    );
                    hasMoreWork = false;
                  }
                }
                break a;
              } finally {
                currentTask = null, currentPriorityLevel = previousPriorityLevel, isPerformingWork = false;
              }
              hasMoreWork = void 0;
            }
          } finally {
            hasMoreWork ? schedulePerformWorkUntilDeadline() : isMessageLoopRunning = false;
          }
        }
      }
      var schedulePerformWorkUntilDeadline;
      if ("function" === typeof localSetImmediate)
        schedulePerformWorkUntilDeadline = function() {
          localSetImmediate(performWorkUntilDeadline);
        };
      else if ("undefined" !== typeof MessageChannel) {
        channel = new MessageChannel(), port = channel.port2;
        channel.port1.onmessage = performWorkUntilDeadline;
        schedulePerformWorkUntilDeadline = function() {
          port.postMessage(null);
        };
      } else
        schedulePerformWorkUntilDeadline = function() {
          localSetTimeout(performWorkUntilDeadline, 0);
        };
      var channel;
      var port;
      function requestHostTimeout(callback, ms) {
        taskTimeoutID = localSetTimeout(function() {
          callback(exports.unstable_now());
        }, ms);
      }
      exports.unstable_IdlePriority = 5;
      exports.unstable_ImmediatePriority = 1;
      exports.unstable_LowPriority = 4;
      exports.unstable_NormalPriority = 3;
      exports.unstable_Profiling = null;
      exports.unstable_UserBlockingPriority = 2;
      exports.unstable_cancelCallback = function(task2) {
        task2.callback = null;
      };
      exports.unstable_forceFrameRate = function(fps) {
        0 > fps || 125 < fps ? console.error(
          "forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"
        ) : frameInterval = 0 < fps ? Math.floor(1e3 / fps) : 5;
      };
      exports.unstable_getCurrentPriorityLevel = function() {
        return currentPriorityLevel;
      };
      exports.unstable_next = function(eventHandler) {
        switch (currentPriorityLevel) {
          case 1:
          case 2:
          case 3:
            var priorityLevel = 3;
            break;
          default:
            priorityLevel = currentPriorityLevel;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
      exports.unstable_requestPaint = function() {
        needsPaint = true;
      };
      exports.unstable_runWithPriority = function(priorityLevel, eventHandler) {
        switch (priorityLevel) {
          case 1:
          case 2:
          case 3:
          case 4:
          case 5:
            break;
          default:
            priorityLevel = 3;
        }
        var previousPriorityLevel = currentPriorityLevel;
        currentPriorityLevel = priorityLevel;
        try {
          return eventHandler();
        } finally {
          currentPriorityLevel = previousPriorityLevel;
        }
      };
      exports.unstable_scheduleCallback = function(priorityLevel, callback, options) {
        var currentTime = exports.unstable_now();
        "object" === typeof options && null !== options ? (options = options.delay, options = "number" === typeof options && 0 < options ? currentTime + options : currentTime) : options = currentTime;
        switch (priorityLevel) {
          case 1:
            var timeout = -1;
            break;
          case 2:
            timeout = 250;
            break;
          case 5:
            timeout = 1073741823;
            break;
          case 4:
            timeout = 1e4;
            break;
          default:
            timeout = 5e3;
        }
        timeout = options + timeout;
        priorityLevel = {
          id: taskIdCounter++,
          callback,
          priorityLevel,
          startTime: options,
          expirationTime: timeout,
          sortIndex: -1
        };
        options > currentTime ? (priorityLevel.sortIndex = options, push(timerQueue, priorityLevel), null === peek2(taskQueue) && priorityLevel === peek2(timerQueue) && (isHostTimeoutScheduled ? (localClearTimeout(taskTimeoutID), taskTimeoutID = -1) : isHostTimeoutScheduled = true, requestHostTimeout(handleTimeout, options - currentTime))) : (priorityLevel.sortIndex = timeout, push(taskQueue, priorityLevel), isHostCallbackScheduled || isPerformingWork || (isHostCallbackScheduled = true, isMessageLoopRunning || (isMessageLoopRunning = true, schedulePerformWorkUntilDeadline())));
        return priorityLevel;
      };
      exports.unstable_shouldYield = shouldYieldToHost;
      exports.unstable_wrapCallback = function(callback) {
        var parentPriorityLevel = currentPriorityLevel;
        return function() {
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = parentPriorityLevel;
          try {
            return callback.apply(this, arguments);
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        };
      };
    }
  });

  // node_modules/scheduler/index.js
  var require_scheduler = __commonJS({
    "node_modules/scheduler/index.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_scheduler_production();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom.production.js
  var require_react_dom_production = __commonJS({
    "node_modules/react-dom/cjs/react-dom.production.js"(exports) {
      "use strict";
      var React79 = require_react();
      function formatProdErrorMessage3(code) {
        var url = "https://react.dev/errors/" + code;
        if (1 < arguments.length) {
          url += "?args[]=" + encodeURIComponent(arguments[1]);
          for (var i = 2; i < arguments.length; i++)
            url += "&args[]=" + encodeURIComponent(arguments[i]);
        }
        return "Minified React error #" + code + "; visit " + url + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      function noop6() {
      }
      var Internals = {
        d: {
          f: noop6,
          r: function() {
            throw Error(formatProdErrorMessage3(522));
          },
          D: noop6,
          C: noop6,
          L: noop6,
          m: noop6,
          X: noop6,
          S: noop6,
          M: noop6
        },
        p: 0,
        findDOMNode: null
      };
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      function createPortal$1(children, containerInfo, implementation) {
        var key = 3 < arguments.length && void 0 !== arguments[3] ? arguments[3] : null;
        return {
          $$typeof: REACT_PORTAL_TYPE,
          key: null == key ? null : "" + key,
          children,
          containerInfo,
          implementation
        };
      }
      var ReactSharedInternals = React79.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
      function getCrossOriginStringAs(as, input) {
        if ("font" === as) return "";
        if ("string" === typeof input)
          return "use-credentials" === input ? input : "";
      }
      exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = Internals;
      exports.createPortal = function(children, container) {
        var key = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : null;
        if (!container || 1 !== container.nodeType && 9 !== container.nodeType && 11 !== container.nodeType)
          throw Error(formatProdErrorMessage3(299));
        return createPortal$1(children, container, null, key);
      };
      exports.flushSync = function(fn) {
        var previousTransition = ReactSharedInternals.T, previousUpdatePriority = Internals.p;
        try {
          if (ReactSharedInternals.T = null, Internals.p = 2, fn) return fn();
        } finally {
          ReactSharedInternals.T = previousTransition, Internals.p = previousUpdatePriority, Internals.d.f();
        }
      };
      exports.preconnect = function(href, options) {
        "string" === typeof href && (options ? (options = options.crossOrigin, options = "string" === typeof options ? "use-credentials" === options ? options : "" : void 0) : options = null, Internals.d.C(href, options));
      };
      exports.prefetchDNS = function(href) {
        "string" === typeof href && Internals.d.D(href);
      };
      exports.preinit = function(href, options) {
        if ("string" === typeof href && options && "string" === typeof options.as) {
          var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin), integrity = "string" === typeof options.integrity ? options.integrity : void 0, fetchPriority = "string" === typeof options.fetchPriority ? options.fetchPriority : void 0;
          "style" === as ? Internals.d.S(
            href,
            "string" === typeof options.precedence ? options.precedence : void 0,
            {
              crossOrigin,
              integrity,
              fetchPriority
            }
          ) : "script" === as && Internals.d.X(href, {
            crossOrigin,
            integrity,
            fetchPriority,
            nonce: "string" === typeof options.nonce ? options.nonce : void 0
          });
        }
      };
      exports.preinitModule = function(href, options) {
        if ("string" === typeof href)
          if ("object" === typeof options && null !== options) {
            if (null == options.as || "script" === options.as) {
              var crossOrigin = getCrossOriginStringAs(
                options.as,
                options.crossOrigin
              );
              Internals.d.M(href, {
                crossOrigin,
                integrity: "string" === typeof options.integrity ? options.integrity : void 0,
                nonce: "string" === typeof options.nonce ? options.nonce : void 0
              });
            }
          } else null == options && Internals.d.M(href);
      };
      exports.preload = function(href, options) {
        if ("string" === typeof href && "object" === typeof options && null !== options && "string" === typeof options.as) {
          var as = options.as, crossOrigin = getCrossOriginStringAs(as, options.crossOrigin);
          Internals.d.L(href, as, {
            crossOrigin,
            integrity: "string" === typeof options.integrity ? options.integrity : void 0,
            nonce: "string" === typeof options.nonce ? options.nonce : void 0,
            type: "string" === typeof options.type ? options.type : void 0,
            fetchPriority: "string" === typeof options.fetchPriority ? options.fetchPriority : void 0,
            referrerPolicy: "string" === typeof options.referrerPolicy ? options.referrerPolicy : void 0,
            imageSrcSet: "string" === typeof options.imageSrcSet ? options.imageSrcSet : void 0,
            imageSizes: "string" === typeof options.imageSizes ? options.imageSizes : void 0,
            media: "string" === typeof options.media ? options.media : void 0
          });
        }
      };
      exports.preloadModule = function(href, options) {
        if ("string" === typeof href)
          if (options) {
            var crossOrigin = getCrossOriginStringAs(options.as, options.crossOrigin);
            Internals.d.m(href, {
              as: "string" === typeof options.as && "script" !== options.as ? options.as : void 0,
              crossOrigin,
              integrity: "string" === typeof options.integrity ? options.integrity : void 0
            });
          } else Internals.d.m(href);
      };
      exports.requestFormReset = function(form) {
        Internals.d.r(form);
      };
      exports.unstable_batchedUpdates = function(fn, a2) {
        return fn(a2);
      };
      exports.useFormState = function(action, initialState12, permalink) {
        return ReactSharedInternals.H.useFormState(action, initialState12, permalink);
      };
      exports.useFormStatus = function() {
        return ReactSharedInternals.H.useHostTransitionStatus();
      };
      exports.version = "19.1.1";
    }
  });

  // node_modules/react-dom/index.js
  var require_react_dom = __commonJS({
    "node_modules/react-dom/index.js"(exports, module) {
      "use strict";
      function checkDCE() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
          return;
        }
        if (false) {
          throw new Error("^_^");
        }
        try {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
        } catch (err) {
          console.error(err);
        }
      }
      if (true) {
        checkDCE();
        module.exports = require_react_dom_production();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/react-dom/cjs/react-dom-client.production.js
  var require_react_dom_client_production = __commonJS({
    "node_modules/react-dom/cjs/react-dom-client.production.js"(exports) {
      "use strict";
      var Scheduler = require_scheduler();
      var React79 = require_react();
      var ReactDOM2 = require_react_dom();
      function formatProdErrorMessage3(code) {
        var url = "https://react.dev/errors/" + code;
        if (1 < arguments.length) {
          url += "?args[]=" + encodeURIComponent(arguments[1]);
          for (var i = 2; i < arguments.length; i++)
            url += "&args[]=" + encodeURIComponent(arguments[i]);
        }
        return "Minified React error #" + code + "; visit " + url + " for the full message or use the non-minified dev environment for full errors and additional helpful warnings.";
      }
      function isValidContainer(node) {
        return !(!node || 1 !== node.nodeType && 9 !== node.nodeType && 11 !== node.nodeType);
      }
      function getNearestMountedFiber(fiber) {
        var node = fiber, nearestMounted = fiber;
        if (fiber.alternate) for (; node.return; ) node = node.return;
        else {
          fiber = node;
          do
            node = fiber, 0 !== (node.flags & 4098) && (nearestMounted = node.return), fiber = node.return;
          while (fiber);
        }
        return 3 === node.tag ? nearestMounted : null;
      }
      function getSuspenseInstanceFromFiber(fiber) {
        if (13 === fiber.tag) {
          var suspenseState = fiber.memoizedState;
          null === suspenseState && (fiber = fiber.alternate, null !== fiber && (suspenseState = fiber.memoizedState));
          if (null !== suspenseState) return suspenseState.dehydrated;
        }
        return null;
      }
      function assertIsMounted(fiber) {
        if (getNearestMountedFiber(fiber) !== fiber)
          throw Error(formatProdErrorMessage3(188));
      }
      function findCurrentFiberUsingSlowPath(fiber) {
        var alternate = fiber.alternate;
        if (!alternate) {
          alternate = getNearestMountedFiber(fiber);
          if (null === alternate) throw Error(formatProdErrorMessage3(188));
          return alternate !== fiber ? null : fiber;
        }
        for (var a2 = fiber, b = alternate; ; ) {
          var parentA = a2.return;
          if (null === parentA) break;
          var parentB = parentA.alternate;
          if (null === parentB) {
            b = parentA.return;
            if (null !== b) {
              a2 = b;
              continue;
            }
            break;
          }
          if (parentA.child === parentB.child) {
            for (parentB = parentA.child; parentB; ) {
              if (parentB === a2) return assertIsMounted(parentA), fiber;
              if (parentB === b) return assertIsMounted(parentA), alternate;
              parentB = parentB.sibling;
            }
            throw Error(formatProdErrorMessage3(188));
          }
          if (a2.return !== b.return) a2 = parentA, b = parentB;
          else {
            for (var didFindChild = false, child$0 = parentA.child; child$0; ) {
              if (child$0 === a2) {
                didFindChild = true;
                a2 = parentA;
                b = parentB;
                break;
              }
              if (child$0 === b) {
                didFindChild = true;
                b = parentA;
                a2 = parentB;
                break;
              }
              child$0 = child$0.sibling;
            }
            if (!didFindChild) {
              for (child$0 = parentB.child; child$0; ) {
                if (child$0 === a2) {
                  didFindChild = true;
                  a2 = parentB;
                  b = parentA;
                  break;
                }
                if (child$0 === b) {
                  didFindChild = true;
                  b = parentB;
                  a2 = parentA;
                  break;
                }
                child$0 = child$0.sibling;
              }
              if (!didFindChild) throw Error(formatProdErrorMessage3(189));
            }
          }
          if (a2.alternate !== b) throw Error(formatProdErrorMessage3(190));
        }
        if (3 !== a2.tag) throw Error(formatProdErrorMessage3(188));
        return a2.stateNode.current === a2 ? fiber : alternate;
      }
      function findCurrentHostFiberImpl(node) {
        var tag = node.tag;
        if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return node;
        for (node = node.child; null !== node; ) {
          tag = findCurrentHostFiberImpl(node);
          if (null !== tag) return tag;
          node = node.sibling;
        }
        return null;
      }
      var assign2 = Object.assign;
      var REACT_LEGACY_ELEMENT_TYPE = Symbol.for("react.element");
      var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
      var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE2 = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      Symbol.for("react.scope");
      var REACT_ACTIVITY_TYPE = Symbol.for("react.activity");
      Symbol.for("react.legacy_hidden");
      Symbol.for("react.tracing_marker");
      var REACT_MEMO_CACHE_SENTINEL = Symbol.for("react.memo_cache_sentinel");
      Symbol.for("react.view_transition");
      var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
      function getIteratorFn(maybeIterable) {
        if (null === maybeIterable || "object" !== typeof maybeIterable) return null;
        maybeIterable = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable["@@iterator"];
        return "function" === typeof maybeIterable ? maybeIterable : null;
      }
      var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
      function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type)
          return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch (type) {
          case REACT_FRAGMENT_TYPE:
            return "Fragment";
          case REACT_PROFILER_TYPE:
            return "Profiler";
          case REACT_STRICT_MODE_TYPE:
            return "StrictMode";
          case REACT_SUSPENSE_TYPE:
            return "Suspense";
          case REACT_SUSPENSE_LIST_TYPE:
            return "SuspenseList";
          case REACT_ACTIVITY_TYPE:
            return "Activity";
        }
        if ("object" === typeof type)
          switch (type.$$typeof) {
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_CONTEXT_TYPE:
              return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
              return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE2:
              var innerType = type.render;
              type = type.displayName;
              type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
              return type;
            case REACT_MEMO_TYPE2:
              return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
              innerType = type._payload;
              type = type._init;
              try {
                return getComponentNameFromType(type(innerType));
              } catch (x2) {
              }
          }
        return null;
      }
      var isArrayImpl = Array.isArray;
      var ReactSharedInternals = React79.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
      var ReactDOMSharedInternals = ReactDOM2.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
      var sharedNotPendingObject = {
        pending: false,
        data: null,
        method: null,
        action: null
      };
      var valueStack = [];
      var index = -1;
      function createCursor(defaultValue) {
        return { current: defaultValue };
      }
      function pop(cursor) {
        0 > index || (cursor.current = valueStack[index], valueStack[index] = null, index--);
      }
      function push(cursor, value) {
        index++;
        valueStack[index] = cursor.current;
        cursor.current = value;
      }
      var contextStackCursor = createCursor(null);
      var contextFiberStackCursor = createCursor(null);
      var rootInstanceStackCursor = createCursor(null);
      var hostTransitionProviderCursor = createCursor(null);
      function pushHostContainer(fiber, nextRootInstance) {
        push(rootInstanceStackCursor, nextRootInstance);
        push(contextFiberStackCursor, fiber);
        push(contextStackCursor, null);
        switch (nextRootInstance.nodeType) {
          case 9:
          case 11:
            fiber = (fiber = nextRootInstance.documentElement) ? (fiber = fiber.namespaceURI) ? getOwnHostContext(fiber) : 0 : 0;
            break;
          default:
            if (fiber = nextRootInstance.tagName, nextRootInstance = nextRootInstance.namespaceURI)
              nextRootInstance = getOwnHostContext(nextRootInstance), fiber = getChildHostContextProd(nextRootInstance, fiber);
            else
              switch (fiber) {
                case "svg":
                  fiber = 1;
                  break;
                case "math":
                  fiber = 2;
                  break;
                default:
                  fiber = 0;
              }
        }
        pop(contextStackCursor);
        push(contextStackCursor, fiber);
      }
      function popHostContainer() {
        pop(contextStackCursor);
        pop(contextFiberStackCursor);
        pop(rootInstanceStackCursor);
      }
      function pushHostContext(fiber) {
        null !== fiber.memoizedState && push(hostTransitionProviderCursor, fiber);
        var context = contextStackCursor.current;
        var JSCompiler_inline_result = getChildHostContextProd(context, fiber.type);
        context !== JSCompiler_inline_result && (push(contextFiberStackCursor, fiber), push(contextStackCursor, JSCompiler_inline_result));
      }
      function popHostContext(fiber) {
        contextFiberStackCursor.current === fiber && (pop(contextStackCursor), pop(contextFiberStackCursor));
        hostTransitionProviderCursor.current === fiber && (pop(hostTransitionProviderCursor), HostTransitionContext._currentValue = sharedNotPendingObject);
      }
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var scheduleCallback$3 = Scheduler.unstable_scheduleCallback;
      var cancelCallback$1 = Scheduler.unstable_cancelCallback;
      var shouldYield = Scheduler.unstable_shouldYield;
      var requestPaint = Scheduler.unstable_requestPaint;
      var now = Scheduler.unstable_now;
      var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
      var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
      var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
      var NormalPriority$1 = Scheduler.unstable_NormalPriority;
      var LowPriority = Scheduler.unstable_LowPriority;
      var IdlePriority = Scheduler.unstable_IdlePriority;
      var log$1 = Scheduler.log;
      var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
      var rendererID = null;
      var injectedHook = null;
      function setIsStrictModeForDevtools(newIsStrictMode) {
        "function" === typeof log$1 && unstable_setDisableYieldValue(newIsStrictMode);
        if (injectedHook && "function" === typeof injectedHook.setStrictMode)
          try {
            injectedHook.setStrictMode(rendererID, newIsStrictMode);
          } catch (err) {
          }
      }
      var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
      var log2 = Math.log;
      var LN2 = Math.LN2;
      function clz32Fallback(x2) {
        x2 >>>= 0;
        return 0 === x2 ? 32 : 31 - (log2(x2) / LN2 | 0) | 0;
      }
      var nextTransitionLane = 256;
      var nextRetryLane = 4194304;
      function getHighestPriorityLanes(lanes) {
        var pendingSyncLanes = lanes & 42;
        if (0 !== pendingSyncLanes) return pendingSyncLanes;
        switch (lanes & -lanes) {
          case 1:
            return 1;
          case 2:
            return 2;
          case 4:
            return 4;
          case 8:
            return 8;
          case 16:
            return 16;
          case 32:
            return 32;
          case 64:
            return 64;
          case 128:
            return 128;
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return lanes & 4194048;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return lanes & 62914560;
          case 67108864:
            return 67108864;
          case 134217728:
            return 134217728;
          case 268435456:
            return 268435456;
          case 536870912:
            return 536870912;
          case 1073741824:
            return 0;
          default:
            return lanes;
        }
      }
      function getNextLanes(root3, wipLanes, rootHasPendingCommit) {
        var pendingLanes = root3.pendingLanes;
        if (0 === pendingLanes) return 0;
        var nextLanes = 0, suspendedLanes = root3.suspendedLanes, pingedLanes = root3.pingedLanes;
        root3 = root3.warmLanes;
        var nonIdlePendingLanes = pendingLanes & 134217727;
        0 !== nonIdlePendingLanes ? (pendingLanes = nonIdlePendingLanes & ~suspendedLanes, 0 !== pendingLanes ? nextLanes = getHighestPriorityLanes(pendingLanes) : (pingedLanes &= nonIdlePendingLanes, 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = nonIdlePendingLanes & ~root3, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))))) : (nonIdlePendingLanes = pendingLanes & ~suspendedLanes, 0 !== nonIdlePendingLanes ? nextLanes = getHighestPriorityLanes(nonIdlePendingLanes) : 0 !== pingedLanes ? nextLanes = getHighestPriorityLanes(pingedLanes) : rootHasPendingCommit || (rootHasPendingCommit = pendingLanes & ~root3, 0 !== rootHasPendingCommit && (nextLanes = getHighestPriorityLanes(rootHasPendingCommit))));
        return 0 === nextLanes ? 0 : 0 !== wipLanes && wipLanes !== nextLanes && 0 === (wipLanes & suspendedLanes) && (suspendedLanes = nextLanes & -nextLanes, rootHasPendingCommit = wipLanes & -wipLanes, suspendedLanes >= rootHasPendingCommit || 32 === suspendedLanes && 0 !== (rootHasPendingCommit & 4194048)) ? wipLanes : nextLanes;
      }
      function checkIfRootIsPrerendering(root3, renderLanes2) {
        return 0 === (root3.pendingLanes & ~(root3.suspendedLanes & ~root3.pingedLanes) & renderLanes2);
      }
      function computeExpirationTime(lane, currentTime) {
        switch (lane) {
          case 1:
          case 2:
          case 4:
          case 8:
          case 64:
            return currentTime + 250;
          case 16:
          case 32:
          case 128:
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
            return currentTime + 5e3;
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            return -1;
          case 67108864:
          case 134217728:
          case 268435456:
          case 536870912:
          case 1073741824:
            return -1;
          default:
            return -1;
        }
      }
      function claimNextTransitionLane() {
        var lane = nextTransitionLane;
        nextTransitionLane <<= 1;
        0 === (nextTransitionLane & 4194048) && (nextTransitionLane = 256);
        return lane;
      }
      function claimNextRetryLane() {
        var lane = nextRetryLane;
        nextRetryLane <<= 1;
        0 === (nextRetryLane & 62914560) && (nextRetryLane = 4194304);
        return lane;
      }
      function createLaneMap(initial) {
        for (var laneMap = [], i = 0; 31 > i; i++) laneMap.push(initial);
        return laneMap;
      }
      function markRootUpdated$1(root3, updateLane) {
        root3.pendingLanes |= updateLane;
        268435456 !== updateLane && (root3.suspendedLanes = 0, root3.pingedLanes = 0, root3.warmLanes = 0);
      }
      function markRootFinished(root3, finishedLanes, remainingLanes, spawnedLane, updatedLanes, suspendedRetryLanes) {
        var previouslyPendingLanes = root3.pendingLanes;
        root3.pendingLanes = remainingLanes;
        root3.suspendedLanes = 0;
        root3.pingedLanes = 0;
        root3.warmLanes = 0;
        root3.expiredLanes &= remainingLanes;
        root3.entangledLanes &= remainingLanes;
        root3.errorRecoveryDisabledLanes &= remainingLanes;
        root3.shellSuspendCounter = 0;
        var entanglements = root3.entanglements, expirationTimes = root3.expirationTimes, hiddenUpdates = root3.hiddenUpdates;
        for (remainingLanes = previouslyPendingLanes & ~remainingLanes; 0 < remainingLanes; ) {
          var index$5 = 31 - clz32(remainingLanes), lane = 1 << index$5;
          entanglements[index$5] = 0;
          expirationTimes[index$5] = -1;
          var hiddenUpdatesForLane = hiddenUpdates[index$5];
          if (null !== hiddenUpdatesForLane)
            for (hiddenUpdates[index$5] = null, index$5 = 0; index$5 < hiddenUpdatesForLane.length; index$5++) {
              var update = hiddenUpdatesForLane[index$5];
              null !== update && (update.lane &= -536870913);
            }
          remainingLanes &= ~lane;
        }
        0 !== spawnedLane && markSpawnedDeferredLane(root3, spawnedLane, 0);
        0 !== suspendedRetryLanes && 0 === updatedLanes && 0 !== root3.tag && (root3.suspendedLanes |= suspendedRetryLanes & ~(previouslyPendingLanes & ~finishedLanes));
      }
      function markSpawnedDeferredLane(root3, spawnedLane, entangledLanes) {
        root3.pendingLanes |= spawnedLane;
        root3.suspendedLanes &= ~spawnedLane;
        var spawnedLaneIndex = 31 - clz32(spawnedLane);
        root3.entangledLanes |= spawnedLane;
        root3.entanglements[spawnedLaneIndex] = root3.entanglements[spawnedLaneIndex] | 1073741824 | entangledLanes & 4194090;
      }
      function markRootEntangled(root3, entangledLanes) {
        var rootEntangledLanes = root3.entangledLanes |= entangledLanes;
        for (root3 = root3.entanglements; rootEntangledLanes; ) {
          var index$6 = 31 - clz32(rootEntangledLanes), lane = 1 << index$6;
          lane & entangledLanes | root3[index$6] & entangledLanes && (root3[index$6] |= entangledLanes);
          rootEntangledLanes &= ~lane;
        }
      }
      function getBumpedLaneForHydrationByLane(lane) {
        switch (lane) {
          case 2:
            lane = 1;
            break;
          case 8:
            lane = 4;
            break;
          case 32:
            lane = 16;
            break;
          case 256:
          case 512:
          case 1024:
          case 2048:
          case 4096:
          case 8192:
          case 16384:
          case 32768:
          case 65536:
          case 131072:
          case 262144:
          case 524288:
          case 1048576:
          case 2097152:
          case 4194304:
          case 8388608:
          case 16777216:
          case 33554432:
            lane = 128;
            break;
          case 268435456:
            lane = 134217728;
            break;
          default:
            lane = 0;
        }
        return lane;
      }
      function lanesToEventPriority(lanes) {
        lanes &= -lanes;
        return 2 < lanes ? 8 < lanes ? 0 !== (lanes & 134217727) ? 32 : 268435456 : 8 : 2;
      }
      function resolveUpdatePriority() {
        var updatePriority = ReactDOMSharedInternals.p;
        if (0 !== updatePriority) return updatePriority;
        updatePriority = window.event;
        return void 0 === updatePriority ? 32 : getEventPriority(updatePriority.type);
      }
      function runWithPriority(priority, fn) {
        var previousPriority = ReactDOMSharedInternals.p;
        try {
          return ReactDOMSharedInternals.p = priority, fn();
        } finally {
          ReactDOMSharedInternals.p = previousPriority;
        }
      }
      var randomKey = Math.random().toString(36).slice(2);
      var internalInstanceKey = "__reactFiber$" + randomKey;
      var internalPropsKey = "__reactProps$" + randomKey;
      var internalContainerInstanceKey = "__reactContainer$" + randomKey;
      var internalEventHandlersKey = "__reactEvents$" + randomKey;
      var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
      var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
      var internalRootNodeResourcesKey = "__reactResources$" + randomKey;
      var internalHoistableMarker = "__reactMarker$" + randomKey;
      function detachDeletedInstance(node) {
        delete node[internalInstanceKey];
        delete node[internalPropsKey];
        delete node[internalEventHandlersKey];
        delete node[internalEventHandlerListenersKey];
        delete node[internalEventHandlesSetKey];
      }
      function getClosestInstanceFromNode(targetNode) {
        var targetInst = targetNode[internalInstanceKey];
        if (targetInst) return targetInst;
        for (var parentNode = targetNode.parentNode; parentNode; ) {
          if (targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey]) {
            parentNode = targetInst.alternate;
            if (null !== targetInst.child || null !== parentNode && null !== parentNode.child)
              for (targetNode = getParentSuspenseInstance(targetNode); null !== targetNode; ) {
                if (parentNode = targetNode[internalInstanceKey]) return parentNode;
                targetNode = getParentSuspenseInstance(targetNode);
              }
            return targetInst;
          }
          targetNode = parentNode;
          parentNode = targetNode.parentNode;
        }
        return null;
      }
      function getInstanceFromNode(node) {
        if (node = node[internalInstanceKey] || node[internalContainerInstanceKey]) {
          var tag = node.tag;
          if (5 === tag || 6 === tag || 13 === tag || 26 === tag || 27 === tag || 3 === tag)
            return node;
        }
        return null;
      }
      function getNodeFromInstance(inst) {
        var tag = inst.tag;
        if (5 === tag || 26 === tag || 27 === tag || 6 === tag) return inst.stateNode;
        throw Error(formatProdErrorMessage3(33));
      }
      function getResourcesFromRoot(root3) {
        var resources = root3[internalRootNodeResourcesKey];
        resources || (resources = root3[internalRootNodeResourcesKey] = { hoistableStyles: /* @__PURE__ */ new Map(), hoistableScripts: /* @__PURE__ */ new Map() });
        return resources;
      }
      function markNodeAsHoistable(node) {
        node[internalHoistableMarker] = true;
      }
      var allNativeEvents = /* @__PURE__ */ new Set();
      var registrationNameDependencies = {};
      function registerTwoPhaseEvent(registrationName, dependencies) {
        registerDirectEvent(registrationName, dependencies);
        registerDirectEvent(registrationName + "Capture", dependencies);
      }
      function registerDirectEvent(registrationName, dependencies) {
        registrationNameDependencies[registrationName] = dependencies;
        for (registrationName = 0; registrationName < dependencies.length; registrationName++)
          allNativeEvents.add(dependencies[registrationName]);
      }
      var VALID_ATTRIBUTE_NAME_REGEX = RegExp(
        "^[:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD][:A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*$"
      );
      var illegalAttributeNameCache = {};
      var validatedAttributeNameCache = {};
      function isAttributeNameSafe(attributeName) {
        if (hasOwnProperty.call(validatedAttributeNameCache, attributeName))
          return true;
        if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) return false;
        if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName))
          return validatedAttributeNameCache[attributeName] = true;
        illegalAttributeNameCache[attributeName] = true;
        return false;
      }
      function setValueForAttribute(node, name, value) {
        if (isAttributeNameSafe(name))
          if (null === value) node.removeAttribute(name);
          else {
            switch (typeof value) {
              case "undefined":
              case "function":
              case "symbol":
                node.removeAttribute(name);
                return;
              case "boolean":
                var prefix$8 = name.toLowerCase().slice(0, 5);
                if ("data-" !== prefix$8 && "aria-" !== prefix$8) {
                  node.removeAttribute(name);
                  return;
                }
            }
            node.setAttribute(name, "" + value);
          }
      }
      function setValueForKnownAttribute(node, name, value) {
        if (null === value) node.removeAttribute(name);
        else {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              node.removeAttribute(name);
              return;
          }
          node.setAttribute(name, "" + value);
        }
      }
      function setValueForNamespacedAttribute(node, namespace, name, value) {
        if (null === value) node.removeAttribute(name);
        else {
          switch (typeof value) {
            case "undefined":
            case "function":
            case "symbol":
            case "boolean":
              node.removeAttribute(name);
              return;
          }
          node.setAttributeNS(namespace, name, "" + value);
        }
      }
      var prefix2;
      var suffix;
      function describeBuiltInComponentFrame(name) {
        if (void 0 === prefix2)
          try {
            throw Error();
          } catch (x2) {
            var match = x2.stack.trim().match(/\n( *(at )?)/);
            prefix2 = match && match[1] || "";
            suffix = -1 < x2.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x2.stack.indexOf("@") ? "@unknown:0:0" : "";
          }
        return "\n" + prefix2 + name + suffix;
      }
      var reentry = false;
      function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) return "";
        reentry = true;
        var previousPrepareStackTrace = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        try {
          var RunInRootFrame = {
            DetermineComponentFrameRoot: function() {
              try {
                if (construct) {
                  var Fake = function() {
                    throw Error();
                  };
                  Object.defineProperty(Fake.prototype, "props", {
                    set: function() {
                      throw Error();
                    }
                  });
                  if ("object" === typeof Reflect && Reflect.construct) {
                    try {
                      Reflect.construct(Fake, []);
                    } catch (x2) {
                      var control = x2;
                    }
                    Reflect.construct(fn, [], Fake);
                  } else {
                    try {
                      Fake.call();
                    } catch (x$9) {
                      control = x$9;
                    }
                    fn.call(Fake.prototype);
                  }
                } else {
                  try {
                    throw Error();
                  } catch (x$10) {
                    control = x$10;
                  }
                  (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {
                  });
                }
              } catch (sample) {
                if (sample && control && "string" === typeof sample.stack)
                  return [sample.stack, control.stack];
              }
              return [null, null];
            }
          };
          RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
          var namePropDescriptor = Object.getOwnPropertyDescriptor(
            RunInRootFrame.DetermineComponentFrameRoot,
            "name"
          );
          namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(
            RunInRootFrame.DetermineComponentFrameRoot,
            "name",
            { value: "DetermineComponentFrameRoot" }
          );
          var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
          if (sampleStack && controlStack) {
            var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
            for (namePropDescriptor = RunInRootFrame = 0; RunInRootFrame < sampleLines.length && !sampleLines[RunInRootFrame].includes("DetermineComponentFrameRoot"); )
              RunInRootFrame++;
            for (; namePropDescriptor < controlLines.length && !controlLines[namePropDescriptor].includes(
              "DetermineComponentFrameRoot"
            ); )
              namePropDescriptor++;
            if (RunInRootFrame === sampleLines.length || namePropDescriptor === controlLines.length)
              for (RunInRootFrame = sampleLines.length - 1, namePropDescriptor = controlLines.length - 1; 1 <= RunInRootFrame && 0 <= namePropDescriptor && sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]; )
                namePropDescriptor--;
            for (; 1 <= RunInRootFrame && 0 <= namePropDescriptor; RunInRootFrame--, namePropDescriptor--)
              if (sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                if (1 !== RunInRootFrame || 1 !== namePropDescriptor) {
                  do
                    if (RunInRootFrame--, namePropDescriptor--, 0 > namePropDescriptor || sampleLines[RunInRootFrame] !== controlLines[namePropDescriptor]) {
                      var frame = "\n" + sampleLines[RunInRootFrame].replace(" at new ", " at ");
                      fn.displayName && frame.includes("<anonymous>") && (frame = frame.replace("<anonymous>", fn.displayName));
                      return frame;
                    }
                  while (1 <= RunInRootFrame && 0 <= namePropDescriptor);
                }
                break;
              }
          }
        } finally {
          reentry = false, Error.prepareStackTrace = previousPrepareStackTrace;
        }
        return (previousPrepareStackTrace = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(previousPrepareStackTrace) : "";
      }
      function describeFiber(fiber) {
        switch (fiber.tag) {
          case 26:
          case 27:
          case 5:
            return describeBuiltInComponentFrame(fiber.type);
          case 16:
            return describeBuiltInComponentFrame("Lazy");
          case 13:
            return describeBuiltInComponentFrame("Suspense");
          case 19:
            return describeBuiltInComponentFrame("SuspenseList");
          case 0:
          case 15:
            return describeNativeComponentFrame(fiber.type, false);
          case 11:
            return describeNativeComponentFrame(fiber.type.render, false);
          case 1:
            return describeNativeComponentFrame(fiber.type, true);
          case 31:
            return describeBuiltInComponentFrame("Activity");
          default:
            return "";
        }
      }
      function getStackByFiberInDevAndProd(workInProgress2) {
        try {
          var info = "";
          do
            info += describeFiber(workInProgress2), workInProgress2 = workInProgress2.return;
          while (workInProgress2);
          return info;
        } catch (x2) {
          return "\nError generating stack: " + x2.message + "\n" + x2.stack;
        }
      }
      function getToStringValue(value) {
        switch (typeof value) {
          case "bigint":
          case "boolean":
          case "number":
          case "string":
          case "undefined":
            return value;
          case "object":
            return value;
          default:
            return "";
        }
      }
      function isCheckable(elem) {
        var type = elem.type;
        return (elem = elem.nodeName) && "input" === elem.toLowerCase() && ("checkbox" === type || "radio" === type);
      }
      function trackValueOnNode(node) {
        var valueField = isCheckable(node) ? "checked" : "value", descriptor = Object.getOwnPropertyDescriptor(
          node.constructor.prototype,
          valueField
        ), currentValue = "" + node[valueField];
        if (!node.hasOwnProperty(valueField) && "undefined" !== typeof descriptor && "function" === typeof descriptor.get && "function" === typeof descriptor.set) {
          var get5 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get5.call(this);
            },
            set: function(value) {
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          return {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              currentValue = "" + value;
            },
            stopTracking: function() {
              node._valueTracker = null;
              delete node[valueField];
            }
          };
        }
      }
      function track(node) {
        node._valueTracker || (node._valueTracker = trackValueOnNode(node));
      }
      function updateValueIfChanged(node) {
        if (!node) return false;
        var tracker = node._valueTracker;
        if (!tracker) return true;
        var lastValue = tracker.getValue();
        var value = "";
        node && (value = isCheckable(node) ? node.checked ? "true" : "false" : node.value);
        node = value;
        return node !== lastValue ? (tracker.setValue(node), true) : false;
      }
      function getActiveElement(doc) {
        doc = doc || ("undefined" !== typeof document ? document : void 0);
        if ("undefined" === typeof doc) return null;
        try {
          return doc.activeElement || doc.body;
        } catch (e) {
          return doc.body;
        }
      }
      var escapeSelectorAttributeValueInsideDoubleQuotesRegex = /[\n"\\]/g;
      function escapeSelectorAttributeValueInsideDoubleQuotes(value) {
        return value.replace(
          escapeSelectorAttributeValueInsideDoubleQuotesRegex,
          function(ch) {
            return "\\" + ch.charCodeAt(0).toString(16) + " ";
          }
        );
      }
      function updateInput(element, value, defaultValue, lastDefaultValue, checked, defaultChecked, type, name) {
        element.name = "";
        null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type ? element.type = type : element.removeAttribute("type");
        if (null != value)
          if ("number" === type) {
            if (0 === value && "" === element.value || element.value != value)
              element.value = "" + getToStringValue(value);
          } else
            element.value !== "" + getToStringValue(value) && (element.value = "" + getToStringValue(value));
        else
          "submit" !== type && "reset" !== type || element.removeAttribute("value");
        null != value ? setDefaultValue(element, type, getToStringValue(value)) : null != defaultValue ? setDefaultValue(element, type, getToStringValue(defaultValue)) : null != lastDefaultValue && element.removeAttribute("value");
        null == checked && null != defaultChecked && (element.defaultChecked = !!defaultChecked);
        null != checked && (element.checked = checked && "function" !== typeof checked && "symbol" !== typeof checked);
        null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name ? element.name = "" + getToStringValue(name) : element.removeAttribute("name");
      }
      function initInput(element, value, defaultValue, checked, defaultChecked, type, name, isHydrating2) {
        null != type && "function" !== typeof type && "symbol" !== typeof type && "boolean" !== typeof type && (element.type = type);
        if (null != value || null != defaultValue) {
          if (!("submit" !== type && "reset" !== type || void 0 !== value && null !== value))
            return;
          defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
          value = null != value ? "" + getToStringValue(value) : defaultValue;
          isHydrating2 || value === element.value || (element.value = value);
          element.defaultValue = value;
        }
        checked = null != checked ? checked : defaultChecked;
        checked = "function" !== typeof checked && "symbol" !== typeof checked && !!checked;
        element.checked = isHydrating2 ? element.checked : !!checked;
        element.defaultChecked = !!checked;
        null != name && "function" !== typeof name && "symbol" !== typeof name && "boolean" !== typeof name && (element.name = name);
      }
      function setDefaultValue(node, type, value) {
        "number" === type && getActiveElement(node.ownerDocument) === node || node.defaultValue === "" + value || (node.defaultValue = "" + value);
      }
      function updateOptions2(node, multiple, propValue, setDefaultSelected) {
        node = node.options;
        if (multiple) {
          multiple = {};
          for (var i = 0; i < propValue.length; i++)
            multiple["$" + propValue[i]] = true;
          for (propValue = 0; propValue < node.length; propValue++)
            i = multiple.hasOwnProperty("$" + node[propValue].value), node[propValue].selected !== i && (node[propValue].selected = i), i && setDefaultSelected && (node[propValue].defaultSelected = true);
        } else {
          propValue = "" + getToStringValue(propValue);
          multiple = null;
          for (i = 0; i < node.length; i++) {
            if (node[i].value === propValue) {
              node[i].selected = true;
              setDefaultSelected && (node[i].defaultSelected = true);
              return;
            }
            null !== multiple || node[i].disabled || (multiple = node[i]);
          }
          null !== multiple && (multiple.selected = true);
        }
      }
      function updateTextarea(element, value, defaultValue) {
        if (null != value && (value = "" + getToStringValue(value), value !== element.value && (element.value = value), null == defaultValue)) {
          element.defaultValue !== value && (element.defaultValue = value);
          return;
        }
        element.defaultValue = null != defaultValue ? "" + getToStringValue(defaultValue) : "";
      }
      function initTextarea(element, value, defaultValue, children) {
        if (null == value) {
          if (null != children) {
            if (null != defaultValue) throw Error(formatProdErrorMessage3(92));
            if (isArrayImpl(children)) {
              if (1 < children.length) throw Error(formatProdErrorMessage3(93));
              children = children[0];
            }
            defaultValue = children;
          }
          null == defaultValue && (defaultValue = "");
          value = defaultValue;
        }
        defaultValue = getToStringValue(value);
        element.defaultValue = defaultValue;
        children = element.textContent;
        children === defaultValue && "" !== children && null !== children && (element.value = children);
      }
      function setTextContent(node, text) {
        if (text) {
          var firstChild = node.firstChild;
          if (firstChild && firstChild === node.lastChild && 3 === firstChild.nodeType) {
            firstChild.nodeValue = text;
            return;
          }
        }
        node.textContent = text;
      }
      var unitlessNumbers = new Set(
        "animationIterationCount aspectRatio borderImageOutset borderImageSlice borderImageWidth boxFlex boxFlexGroup boxOrdinalGroup columnCount columns flex flexGrow flexPositive flexShrink flexNegative flexOrder gridArea gridRow gridRowEnd gridRowSpan gridRowStart gridColumn gridColumnEnd gridColumnSpan gridColumnStart fontWeight lineClamp lineHeight opacity order orphans scale tabSize widows zIndex zoom fillOpacity floodOpacity stopOpacity strokeDasharray strokeDashoffset strokeMiterlimit strokeOpacity strokeWidth MozAnimationIterationCount MozBoxFlex MozBoxFlexGroup MozLineClamp msAnimationIterationCount msFlex msZoom msFlexGrow msFlexNegative msFlexOrder msFlexPositive msFlexShrink msGridColumn msGridColumnSpan msGridRow msGridRowSpan WebkitAnimationIterationCount WebkitBoxFlex WebKitBoxFlexGroup WebkitBoxOrdinalGroup WebkitColumnCount WebkitColumns WebkitFlex WebkitFlexGrow WebkitFlexPositive WebkitFlexShrink WebkitLineClamp".split(
          " "
        )
      );
      function setValueForStyle(style2, styleName, value) {
        var isCustomProperty = 0 === styleName.indexOf("--");
        null == value || "boolean" === typeof value || "" === value ? isCustomProperty ? style2.setProperty(styleName, "") : "float" === styleName ? style2.cssFloat = "" : style2[styleName] = "" : isCustomProperty ? style2.setProperty(styleName, value) : "number" !== typeof value || 0 === value || unitlessNumbers.has(styleName) ? "float" === styleName ? style2.cssFloat = value : style2[styleName] = ("" + value).trim() : style2[styleName] = value + "px";
      }
      function setValueForStyles(node, styles, prevStyles) {
        if (null != styles && "object" !== typeof styles)
          throw Error(formatProdErrorMessage3(62));
        node = node.style;
        if (null != prevStyles) {
          for (var styleName in prevStyles)
            !prevStyles.hasOwnProperty(styleName) || null != styles && styles.hasOwnProperty(styleName) || (0 === styleName.indexOf("--") ? node.setProperty(styleName, "") : "float" === styleName ? node.cssFloat = "" : node[styleName] = "");
          for (var styleName$16 in styles)
            styleName = styles[styleName$16], styles.hasOwnProperty(styleName$16) && prevStyles[styleName$16] !== styleName && setValueForStyle(node, styleName$16, styleName);
        } else
          for (var styleName$17 in styles)
            styles.hasOwnProperty(styleName$17) && setValueForStyle(node, styleName$17, styles[styleName$17]);
      }
      function isCustomElement(tagName) {
        if (-1 === tagName.indexOf("-")) return false;
        switch (tagName) {
          case "annotation-xml":
          case "color-profile":
          case "font-face":
          case "font-face-src":
          case "font-face-uri":
          case "font-face-format":
          case "font-face-name":
          case "missing-glyph":
            return false;
          default:
            return true;
        }
      }
      var aliases = /* @__PURE__ */ new Map([
        ["acceptCharset", "accept-charset"],
        ["htmlFor", "for"],
        ["httpEquiv", "http-equiv"],
        ["crossOrigin", "crossorigin"],
        ["accentHeight", "accent-height"],
        ["alignmentBaseline", "alignment-baseline"],
        ["arabicForm", "arabic-form"],
        ["baselineShift", "baseline-shift"],
        ["capHeight", "cap-height"],
        ["clipPath", "clip-path"],
        ["clipRule", "clip-rule"],
        ["colorInterpolation", "color-interpolation"],
        ["colorInterpolationFilters", "color-interpolation-filters"],
        ["colorProfile", "color-profile"],
        ["colorRendering", "color-rendering"],
        ["dominantBaseline", "dominant-baseline"],
        ["enableBackground", "enable-background"],
        ["fillOpacity", "fill-opacity"],
        ["fillRule", "fill-rule"],
        ["floodColor", "flood-color"],
        ["floodOpacity", "flood-opacity"],
        ["fontFamily", "font-family"],
        ["fontSize", "font-size"],
        ["fontSizeAdjust", "font-size-adjust"],
        ["fontStretch", "font-stretch"],
        ["fontStyle", "font-style"],
        ["fontVariant", "font-variant"],
        ["fontWeight", "font-weight"],
        ["glyphName", "glyph-name"],
        ["glyphOrientationHorizontal", "glyph-orientation-horizontal"],
        ["glyphOrientationVertical", "glyph-orientation-vertical"],
        ["horizAdvX", "horiz-adv-x"],
        ["horizOriginX", "horiz-origin-x"],
        ["imageRendering", "image-rendering"],
        ["letterSpacing", "letter-spacing"],
        ["lightingColor", "lighting-color"],
        ["markerEnd", "marker-end"],
        ["markerMid", "marker-mid"],
        ["markerStart", "marker-start"],
        ["overlinePosition", "overline-position"],
        ["overlineThickness", "overline-thickness"],
        ["paintOrder", "paint-order"],
        ["panose-1", "panose-1"],
        ["pointerEvents", "pointer-events"],
        ["renderingIntent", "rendering-intent"],
        ["shapeRendering", "shape-rendering"],
        ["stopColor", "stop-color"],
        ["stopOpacity", "stop-opacity"],
        ["strikethroughPosition", "strikethrough-position"],
        ["strikethroughThickness", "strikethrough-thickness"],
        ["strokeDasharray", "stroke-dasharray"],
        ["strokeDashoffset", "stroke-dashoffset"],
        ["strokeLinecap", "stroke-linecap"],
        ["strokeLinejoin", "stroke-linejoin"],
        ["strokeMiterlimit", "stroke-miterlimit"],
        ["strokeOpacity", "stroke-opacity"],
        ["strokeWidth", "stroke-width"],
        ["textAnchor", "text-anchor"],
        ["textDecoration", "text-decoration"],
        ["textRendering", "text-rendering"],
        ["transformOrigin", "transform-origin"],
        ["underlinePosition", "underline-position"],
        ["underlineThickness", "underline-thickness"],
        ["unicodeBidi", "unicode-bidi"],
        ["unicodeRange", "unicode-range"],
        ["unitsPerEm", "units-per-em"],
        ["vAlphabetic", "v-alphabetic"],
        ["vHanging", "v-hanging"],
        ["vIdeographic", "v-ideographic"],
        ["vMathematical", "v-mathematical"],
        ["vectorEffect", "vector-effect"],
        ["vertAdvY", "vert-adv-y"],
        ["vertOriginX", "vert-origin-x"],
        ["vertOriginY", "vert-origin-y"],
        ["wordSpacing", "word-spacing"],
        ["writingMode", "writing-mode"],
        ["xmlnsXlink", "xmlns:xlink"],
        ["xHeight", "x-height"]
      ]);
      var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*:/i;
      function sanitizeURL(url) {
        return isJavaScriptProtocol.test("" + url) ? "javascript:throw new Error('React has blocked a javascript: URL as a security precaution.')" : url;
      }
      var currentReplayingEvent = null;
      function getEventTarget(nativeEvent) {
        nativeEvent = nativeEvent.target || nativeEvent.srcElement || window;
        nativeEvent.correspondingUseElement && (nativeEvent = nativeEvent.correspondingUseElement);
        return 3 === nativeEvent.nodeType ? nativeEvent.parentNode : nativeEvent;
      }
      var restoreTarget = null;
      var restoreQueue = null;
      function restoreStateOfTarget(target) {
        var internalInstance = getInstanceFromNode(target);
        if (internalInstance && (target = internalInstance.stateNode)) {
          var props = target[internalPropsKey] || null;
          a: switch (target = internalInstance.stateNode, internalInstance.type) {
            case "input":
              updateInput(
                target,
                props.value,
                props.defaultValue,
                props.defaultValue,
                props.checked,
                props.defaultChecked,
                props.type,
                props.name
              );
              internalInstance = props.name;
              if ("radio" === props.type && null != internalInstance) {
                for (props = target; props.parentNode; ) props = props.parentNode;
                props = props.querySelectorAll(
                  'input[name="' + escapeSelectorAttributeValueInsideDoubleQuotes(
                    "" + internalInstance
                  ) + '"][type="radio"]'
                );
                for (internalInstance = 0; internalInstance < props.length; internalInstance++) {
                  var otherNode = props[internalInstance];
                  if (otherNode !== target && otherNode.form === target.form) {
                    var otherProps = otherNode[internalPropsKey] || null;
                    if (!otherProps) throw Error(formatProdErrorMessage3(90));
                    updateInput(
                      otherNode,
                      otherProps.value,
                      otherProps.defaultValue,
                      otherProps.defaultValue,
                      otherProps.checked,
                      otherProps.defaultChecked,
                      otherProps.type,
                      otherProps.name
                    );
                  }
                }
                for (internalInstance = 0; internalInstance < props.length; internalInstance++)
                  otherNode = props[internalInstance], otherNode.form === target.form && updateValueIfChanged(otherNode);
              }
              break a;
            case "textarea":
              updateTextarea(target, props.value, props.defaultValue);
              break a;
            case "select":
              internalInstance = props.value, null != internalInstance && updateOptions2(target, !!props.multiple, internalInstance, false);
          }
        }
      }
      var isInsideEventHandler = false;
      function batchedUpdates$1(fn, a2, b) {
        if (isInsideEventHandler) return fn(a2, b);
        isInsideEventHandler = true;
        try {
          var JSCompiler_inline_result = fn(a2);
          return JSCompiler_inline_result;
        } finally {
          if (isInsideEventHandler = false, null !== restoreTarget || null !== restoreQueue) {
            if (flushSyncWork$1(), restoreTarget && (a2 = restoreTarget, fn = restoreQueue, restoreQueue = restoreTarget = null, restoreStateOfTarget(a2), fn))
              for (a2 = 0; a2 < fn.length; a2++) restoreStateOfTarget(fn[a2]);
          }
        }
      }
      function getListener(inst, registrationName) {
        var stateNode = inst.stateNode;
        if (null === stateNode) return null;
        var props = stateNode[internalPropsKey] || null;
        if (null === props) return null;
        stateNode = props[registrationName];
        a: switch (registrationName) {
          case "onClick":
          case "onClickCapture":
          case "onDoubleClick":
          case "onDoubleClickCapture":
          case "onMouseDown":
          case "onMouseDownCapture":
          case "onMouseMove":
          case "onMouseMoveCapture":
          case "onMouseUp":
          case "onMouseUpCapture":
          case "onMouseEnter":
            (props = !props.disabled) || (inst = inst.type, props = !("button" === inst || "input" === inst || "select" === inst || "textarea" === inst));
            inst = !props;
            break a;
          default:
            inst = false;
        }
        if (inst) return null;
        if (stateNode && "function" !== typeof stateNode)
          throw Error(
            formatProdErrorMessage3(231, registrationName, typeof stateNode)
          );
        return stateNode;
      }
      var canUseDOM2 = !("undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement);
      var passiveBrowserEventsSupported = false;
      if (canUseDOM2)
        try {
          options = {};
          Object.defineProperty(options, "passive", {
            get: function() {
              passiveBrowserEventsSupported = true;
            }
          });
          window.addEventListener("test", options, options);
          window.removeEventListener("test", options, options);
        } catch (e) {
          passiveBrowserEventsSupported = false;
        }
      var options;
      var root2 = null;
      var startText = null;
      var fallbackText = null;
      function getData() {
        if (fallbackText) return fallbackText;
        var start, startValue = startText, startLength = startValue.length, end, endValue = "value" in root2 ? root2.value : root2.textContent, endLength = endValue.length;
        for (start = 0; start < startLength && startValue[start] === endValue[start]; start++) ;
        var minEnd = startLength - start;
        for (end = 1; end <= minEnd && startValue[startLength - end] === endValue[endLength - end]; end++) ;
        return fallbackText = endValue.slice(start, 1 < end ? 1 - end : void 0);
      }
      function getEventCharCode(nativeEvent) {
        var keyCode = nativeEvent.keyCode;
        "charCode" in nativeEvent ? (nativeEvent = nativeEvent.charCode, 0 === nativeEvent && 13 === keyCode && (nativeEvent = 13)) : nativeEvent = keyCode;
        10 === nativeEvent && (nativeEvent = 13);
        return 32 <= nativeEvent || 13 === nativeEvent ? nativeEvent : 0;
      }
      function functionThatReturnsTrue() {
        return true;
      }
      function functionThatReturnsFalse() {
        return false;
      }
      function createSyntheticEvent(Interface) {
        function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
          this._reactName = reactName;
          this._targetInst = targetInst;
          this.type = reactEventType;
          this.nativeEvent = nativeEvent;
          this.target = nativeEventTarget;
          this.currentTarget = null;
          for (var propName in Interface)
            Interface.hasOwnProperty(propName) && (reactName = Interface[propName], this[propName] = reactName ? reactName(nativeEvent) : nativeEvent[propName]);
          this.isDefaultPrevented = (null != nativeEvent.defaultPrevented ? nativeEvent.defaultPrevented : false === nativeEvent.returnValue) ? functionThatReturnsTrue : functionThatReturnsFalse;
          this.isPropagationStopped = functionThatReturnsFalse;
          return this;
        }
        assign2(SyntheticBaseEvent.prototype, {
          preventDefault: function() {
            this.defaultPrevented = true;
            var event = this.nativeEvent;
            event && (event.preventDefault ? event.preventDefault() : "unknown" !== typeof event.returnValue && (event.returnValue = false), this.isDefaultPrevented = functionThatReturnsTrue);
          },
          stopPropagation: function() {
            var event = this.nativeEvent;
            event && (event.stopPropagation ? event.stopPropagation() : "unknown" !== typeof event.cancelBubble && (event.cancelBubble = true), this.isPropagationStopped = functionThatReturnsTrue);
          },
          persist: function() {
          },
          isPersistent: functionThatReturnsTrue
        });
        return SyntheticBaseEvent;
      }
      var EventInterface = {
        eventPhase: 0,
        bubbles: 0,
        cancelable: 0,
        timeStamp: function(event) {
          return event.timeStamp || Date.now();
        },
        defaultPrevented: 0,
        isTrusted: 0
      };
      var SyntheticEvent = createSyntheticEvent(EventInterface);
      var UIEventInterface = assign2({}, EventInterface, { view: 0, detail: 0 });
      var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
      var lastMovementX;
      var lastMovementY;
      var lastMouseEvent;
      var MouseEventInterface = assign2({}, UIEventInterface, {
        screenX: 0,
        screenY: 0,
        clientX: 0,
        clientY: 0,
        pageX: 0,
        pageY: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        getModifierState: getEventModifierState,
        button: 0,
        buttons: 0,
        relatedTarget: function(event) {
          return void 0 === event.relatedTarget ? event.fromElement === event.srcElement ? event.toElement : event.fromElement : event.relatedTarget;
        },
        movementX: function(event) {
          if ("movementX" in event) return event.movementX;
          event !== lastMouseEvent && (lastMouseEvent && "mousemove" === event.type ? (lastMovementX = event.screenX - lastMouseEvent.screenX, lastMovementY = event.screenY - lastMouseEvent.screenY) : lastMovementY = lastMovementX = 0, lastMouseEvent = event);
          return lastMovementX;
        },
        movementY: function(event) {
          return "movementY" in event ? event.movementY : lastMovementY;
        }
      });
      var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
      var DragEventInterface = assign2({}, MouseEventInterface, { dataTransfer: 0 });
      var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
      var FocusEventInterface = assign2({}, UIEventInterface, { relatedTarget: 0 });
      var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
      var AnimationEventInterface = assign2({}, EventInterface, {
        animationName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
      var ClipboardEventInterface = assign2({}, EventInterface, {
        clipboardData: function(event) {
          return "clipboardData" in event ? event.clipboardData : window.clipboardData;
        }
      });
      var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
      var CompositionEventInterface = assign2({}, EventInterface, { data: 0 });
      var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
      var normalizeKey = {
        Esc: "Escape",
        Spacebar: " ",
        Left: "ArrowLeft",
        Up: "ArrowUp",
        Right: "ArrowRight",
        Down: "ArrowDown",
        Del: "Delete",
        Win: "OS",
        Menu: "ContextMenu",
        Apps: "ContextMenu",
        Scroll: "ScrollLock",
        MozPrintableKey: "Unidentified"
      };
      var translateToKey = {
        8: "Backspace",
        9: "Tab",
        12: "Clear",
        13: "Enter",
        16: "Shift",
        17: "Control",
        18: "Alt",
        19: "Pause",
        20: "CapsLock",
        27: "Escape",
        32: " ",
        33: "PageUp",
        34: "PageDown",
        35: "End",
        36: "Home",
        37: "ArrowLeft",
        38: "ArrowUp",
        39: "ArrowRight",
        40: "ArrowDown",
        45: "Insert",
        46: "Delete",
        112: "F1",
        113: "F2",
        114: "F3",
        115: "F4",
        116: "F5",
        117: "F6",
        118: "F7",
        119: "F8",
        120: "F9",
        121: "F10",
        122: "F11",
        123: "F12",
        144: "NumLock",
        145: "ScrollLock",
        224: "Meta"
      };
      var modifierKeyToProp = {
        Alt: "altKey",
        Control: "ctrlKey",
        Meta: "metaKey",
        Shift: "shiftKey"
      };
      function modifierStateGetter(keyArg) {
        var nativeEvent = this.nativeEvent;
        return nativeEvent.getModifierState ? nativeEvent.getModifierState(keyArg) : (keyArg = modifierKeyToProp[keyArg]) ? !!nativeEvent[keyArg] : false;
      }
      function getEventModifierState() {
        return modifierStateGetter;
      }
      var KeyboardEventInterface = assign2({}, UIEventInterface, {
        key: function(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if ("Unidentified" !== key) return key;
          }
          return "keypress" === nativeEvent.type ? (nativeEvent = getEventCharCode(nativeEvent), 13 === nativeEvent ? "Enter" : String.fromCharCode(nativeEvent)) : "keydown" === nativeEvent.type || "keyup" === nativeEvent.type ? translateToKey[nativeEvent.keyCode] || "Unidentified" : "";
        },
        code: 0,
        location: 0,
        ctrlKey: 0,
        shiftKey: 0,
        altKey: 0,
        metaKey: 0,
        repeat: 0,
        locale: 0,
        getModifierState: getEventModifierState,
        charCode: function(event) {
          return "keypress" === event.type ? getEventCharCode(event) : 0;
        },
        keyCode: function(event) {
          return "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
        },
        which: function(event) {
          return "keypress" === event.type ? getEventCharCode(event) : "keydown" === event.type || "keyup" === event.type ? event.keyCode : 0;
        }
      });
      var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
      var PointerEventInterface = assign2({}, MouseEventInterface, {
        pointerId: 0,
        width: 0,
        height: 0,
        pressure: 0,
        tangentialPressure: 0,
        tiltX: 0,
        tiltY: 0,
        twist: 0,
        pointerType: 0,
        isPrimary: 0
      });
      var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
      var TouchEventInterface = assign2({}, UIEventInterface, {
        touches: 0,
        targetTouches: 0,
        changedTouches: 0,
        altKey: 0,
        metaKey: 0,
        ctrlKey: 0,
        shiftKey: 0,
        getModifierState: getEventModifierState
      });
      var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
      var TransitionEventInterface = assign2({}, EventInterface, {
        propertyName: 0,
        elapsedTime: 0,
        pseudoElement: 0
      });
      var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
      var WheelEventInterface = assign2({}, MouseEventInterface, {
        deltaX: function(event) {
          return "deltaX" in event ? event.deltaX : "wheelDeltaX" in event ? -event.wheelDeltaX : 0;
        },
        deltaY: function(event) {
          return "deltaY" in event ? event.deltaY : "wheelDeltaY" in event ? -event.wheelDeltaY : "wheelDelta" in event ? -event.wheelDelta : 0;
        },
        deltaZ: 0,
        deltaMode: 0
      });
      var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
      var ToggleEventInterface = assign2({}, EventInterface, {
        newState: 0,
        oldState: 0
      });
      var SyntheticToggleEvent = createSyntheticEvent(ToggleEventInterface);
      var END_KEYCODES = [9, 13, 27, 32];
      var canUseCompositionEvent = canUseDOM2 && "CompositionEvent" in window;
      var documentMode = null;
      canUseDOM2 && "documentMode" in document && (documentMode = document.documentMode);
      var canUseTextInputEvent = canUseDOM2 && "TextEvent" in window && !documentMode;
      var useFallbackCompositionData = canUseDOM2 && (!canUseCompositionEvent || documentMode && 8 < documentMode && 11 >= documentMode);
      var SPACEBAR_CHAR = String.fromCharCode(32);
      var hasSpaceKeypress = false;
      function isFallbackCompositionEnd(domEventName, nativeEvent) {
        switch (domEventName) {
          case "keyup":
            return -1 !== END_KEYCODES.indexOf(nativeEvent.keyCode);
          case "keydown":
            return 229 !== nativeEvent.keyCode;
          case "keypress":
          case "mousedown":
          case "focusout":
            return true;
          default:
            return false;
        }
      }
      function getDataFromCustomEvent(nativeEvent) {
        nativeEvent = nativeEvent.detail;
        return "object" === typeof nativeEvent && "data" in nativeEvent ? nativeEvent.data : null;
      }
      var isComposing = false;
      function getNativeBeforeInputChars(domEventName, nativeEvent) {
        switch (domEventName) {
          case "compositionend":
            return getDataFromCustomEvent(nativeEvent);
          case "keypress":
            if (32 !== nativeEvent.which) return null;
            hasSpaceKeypress = true;
            return SPACEBAR_CHAR;
          case "textInput":
            return domEventName = nativeEvent.data, domEventName === SPACEBAR_CHAR && hasSpaceKeypress ? null : domEventName;
          default:
            return null;
        }
      }
      function getFallbackBeforeInputChars(domEventName, nativeEvent) {
        if (isComposing)
          return "compositionend" === domEventName || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent) ? (domEventName = getData(), fallbackText = startText = root2 = null, isComposing = false, domEventName) : null;
        switch (domEventName) {
          case "paste":
            return null;
          case "keypress":
            if (!(nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) || nativeEvent.ctrlKey && nativeEvent.altKey) {
              if (nativeEvent.char && 1 < nativeEvent.char.length)
                return nativeEvent.char;
              if (nativeEvent.which) return String.fromCharCode(nativeEvent.which);
            }
            return null;
          case "compositionend":
            return useFallbackCompositionData && "ko" !== nativeEvent.locale ? null : nativeEvent.data;
          default:
            return null;
        }
      }
      var supportedInputTypes = {
        color: true,
        date: true,
        datetime: true,
        "datetime-local": true,
        email: true,
        month: true,
        number: true,
        password: true,
        range: true,
        search: true,
        tel: true,
        text: true,
        time: true,
        url: true,
        week: true
      };
      function isTextInputElement(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return "input" === nodeName ? !!supportedInputTypes[elem.type] : "textarea" === nodeName ? true : false;
      }
      function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
        restoreTarget ? restoreQueue ? restoreQueue.push(target) : restoreQueue = [target] : restoreTarget = target;
        inst = accumulateTwoPhaseListeners(inst, "onChange");
        0 < inst.length && (nativeEvent = new SyntheticEvent(
          "onChange",
          "change",
          null,
          nativeEvent,
          target
        ), dispatchQueue.push({ event: nativeEvent, listeners: inst }));
      }
      var activeElement$1 = null;
      var activeElementInst$1 = null;
      function runEventInBatch(dispatchQueue) {
        processDispatchQueue(dispatchQueue, 0);
      }
      function getInstIfValueChanged(targetInst) {
        var targetNode = getNodeFromInstance(targetInst);
        if (updateValueIfChanged(targetNode)) return targetInst;
      }
      function getTargetInstForChangeEvent(domEventName, targetInst) {
        if ("change" === domEventName) return targetInst;
      }
      var isInputEventSupported = false;
      if (canUseDOM2) {
        if (canUseDOM2) {
          isSupported$jscomp$inline_417 = "oninput" in document;
          if (!isSupported$jscomp$inline_417) {
            element$jscomp$inline_418 = document.createElement("div");
            element$jscomp$inline_418.setAttribute("oninput", "return;");
            isSupported$jscomp$inline_417 = "function" === typeof element$jscomp$inline_418.oninput;
          }
          JSCompiler_inline_result$jscomp$282 = isSupported$jscomp$inline_417;
        } else JSCompiler_inline_result$jscomp$282 = false;
        isInputEventSupported = JSCompiler_inline_result$jscomp$282 && (!document.documentMode || 9 < document.documentMode);
      }
      var JSCompiler_inline_result$jscomp$282;
      var isSupported$jscomp$inline_417;
      var element$jscomp$inline_418;
      function stopWatchingForValueChange() {
        activeElement$1 && (activeElement$1.detachEvent("onpropertychange", handlePropertyChange), activeElementInst$1 = activeElement$1 = null);
      }
      function handlePropertyChange(nativeEvent) {
        if ("value" === nativeEvent.propertyName && getInstIfValueChanged(activeElementInst$1)) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(
            dispatchQueue,
            activeElementInst$1,
            nativeEvent,
            getEventTarget(nativeEvent)
          );
          batchedUpdates$1(runEventInBatch, dispatchQueue);
        }
      }
      function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
        "focusin" === domEventName ? (stopWatchingForValueChange(), activeElement$1 = target, activeElementInst$1 = targetInst, activeElement$1.attachEvent("onpropertychange", handlePropertyChange)) : "focusout" === domEventName && stopWatchingForValueChange();
      }
      function getTargetInstForInputEventPolyfill(domEventName) {
        if ("selectionchange" === domEventName || "keyup" === domEventName || "keydown" === domEventName)
          return getInstIfValueChanged(activeElementInst$1);
      }
      function getTargetInstForClickEvent(domEventName, targetInst) {
        if ("click" === domEventName) return getInstIfValueChanged(targetInst);
      }
      function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
        if ("input" === domEventName || "change" === domEventName)
          return getInstIfValueChanged(targetInst);
      }
      function is2(x2, y2) {
        return x2 === y2 && (0 !== x2 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
      }
      var objectIs = "function" === typeof Object.is ? Object.is : is2;
      function shallowEqual2(objA, objB) {
        if (objectIs(objA, objB)) return true;
        if ("object" !== typeof objA || null === objA || "object" !== typeof objB || null === objB)
          return false;
        var keysA = Object.keys(objA), keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
        for (keysB = 0; keysB < keysA.length; keysB++) {
          var currentKey = keysA[keysB];
          if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey]))
            return false;
        }
        return true;
      }
      function getLeafNode(node) {
        for (; node && node.firstChild; ) node = node.firstChild;
        return node;
      }
      function getNodeForCharacterOffset(root3, offset) {
        var node = getLeafNode(root3);
        root3 = 0;
        for (var nodeEnd; node; ) {
          if (3 === node.nodeType) {
            nodeEnd = root3 + node.textContent.length;
            if (root3 <= offset && nodeEnd >= offset)
              return { node, offset: offset - root3 };
            root3 = nodeEnd;
          }
          a: {
            for (; node; ) {
              if (node.nextSibling) {
                node = node.nextSibling;
                break a;
              }
              node = node.parentNode;
            }
            node = void 0;
          }
          node = getLeafNode(node);
        }
      }
      function containsNode(outerNode, innerNode) {
        return outerNode && innerNode ? outerNode === innerNode ? true : outerNode && 3 === outerNode.nodeType ? false : innerNode && 3 === innerNode.nodeType ? containsNode(outerNode, innerNode.parentNode) : "contains" in outerNode ? outerNode.contains(innerNode) : outerNode.compareDocumentPosition ? !!(outerNode.compareDocumentPosition(innerNode) & 16) : false : false;
      }
      function getActiveElementDeep(containerInfo) {
        containerInfo = null != containerInfo && null != containerInfo.ownerDocument && null != containerInfo.ownerDocument.defaultView ? containerInfo.ownerDocument.defaultView : window;
        for (var element = getActiveElement(containerInfo.document); element instanceof containerInfo.HTMLIFrameElement; ) {
          try {
            var JSCompiler_inline_result = "string" === typeof element.contentWindow.location.href;
          } catch (err) {
            JSCompiler_inline_result = false;
          }
          if (JSCompiler_inline_result) containerInfo = element.contentWindow;
          else break;
          element = getActiveElement(containerInfo.document);
        }
        return element;
      }
      function hasSelectionCapabilities(elem) {
        var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
        return nodeName && ("input" === nodeName && ("text" === elem.type || "search" === elem.type || "tel" === elem.type || "url" === elem.type || "password" === elem.type) || "textarea" === nodeName || "true" === elem.contentEditable);
      }
      var skipSelectionChangeEvent = canUseDOM2 && "documentMode" in document && 11 >= document.documentMode;
      var activeElement = null;
      var activeElementInst = null;
      var lastSelection = null;
      var mouseDown = false;
      function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
        var doc = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget.document : 9 === nativeEventTarget.nodeType ? nativeEventTarget : nativeEventTarget.ownerDocument;
        mouseDown || null == activeElement || activeElement !== getActiveElement(doc) || (doc = activeElement, "selectionStart" in doc && hasSelectionCapabilities(doc) ? doc = { start: doc.selectionStart, end: doc.selectionEnd } : (doc = (doc.ownerDocument && doc.ownerDocument.defaultView || window).getSelection(), doc = {
          anchorNode: doc.anchorNode,
          anchorOffset: doc.anchorOffset,
          focusNode: doc.focusNode,
          focusOffset: doc.focusOffset
        }), lastSelection && shallowEqual2(lastSelection, doc) || (lastSelection = doc, doc = accumulateTwoPhaseListeners(activeElementInst, "onSelect"), 0 < doc.length && (nativeEvent = new SyntheticEvent(
          "onSelect",
          "select",
          null,
          nativeEvent,
          nativeEventTarget
        ), dispatchQueue.push({ event: nativeEvent, listeners: doc }), nativeEvent.target = activeElement)));
      }
      function makePrefixMap(styleProp, eventName) {
        var prefixes2 = {};
        prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
        prefixes2["Webkit" + styleProp] = "webkit" + eventName;
        prefixes2["Moz" + styleProp] = "moz" + eventName;
        return prefixes2;
      }
      var vendorPrefixes = {
        animationend: makePrefixMap("Animation", "AnimationEnd"),
        animationiteration: makePrefixMap("Animation", "AnimationIteration"),
        animationstart: makePrefixMap("Animation", "AnimationStart"),
        transitionrun: makePrefixMap("Transition", "TransitionRun"),
        transitionstart: makePrefixMap("Transition", "TransitionStart"),
        transitioncancel: makePrefixMap("Transition", "TransitionCancel"),
        transitionend: makePrefixMap("Transition", "TransitionEnd")
      };
      var prefixedEventNames = {};
      var style = {};
      canUseDOM2 && (style = document.createElement("div").style, "AnimationEvent" in window || (delete vendorPrefixes.animationend.animation, delete vendorPrefixes.animationiteration.animation, delete vendorPrefixes.animationstart.animation), "TransitionEvent" in window || delete vendorPrefixes.transitionend.transition);
      function getVendorPrefixedEventName(eventName) {
        if (prefixedEventNames[eventName]) return prefixedEventNames[eventName];
        if (!vendorPrefixes[eventName]) return eventName;
        var prefixMap = vendorPrefixes[eventName], styleProp;
        for (styleProp in prefixMap)
          if (prefixMap.hasOwnProperty(styleProp) && styleProp in style)
            return prefixedEventNames[eventName] = prefixMap[styleProp];
        return eventName;
      }
      var ANIMATION_END = getVendorPrefixedEventName("animationend");
      var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
      var ANIMATION_START = getVendorPrefixedEventName("animationstart");
      var TRANSITION_RUN = getVendorPrefixedEventName("transitionrun");
      var TRANSITION_START = getVendorPrefixedEventName("transitionstart");
      var TRANSITION_CANCEL = getVendorPrefixedEventName("transitioncancel");
      var TRANSITION_END = getVendorPrefixedEventName("transitionend");
      var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
      var simpleEventPluginEvents = "abort auxClick beforeToggle cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(
        " "
      );
      simpleEventPluginEvents.push("scrollEnd");
      function registerSimpleEvent(domEventName, reactName) {
        topLevelEventsToReactNames.set(domEventName, reactName);
        registerTwoPhaseEvent(reactName, [domEventName]);
      }
      var CapturedStacks = /* @__PURE__ */ new WeakMap();
      function createCapturedValueAtFiber(value, source) {
        if ("object" === typeof value && null !== value) {
          var existing = CapturedStacks.get(value);
          if (void 0 !== existing) return existing;
          source = {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source)
          };
          CapturedStacks.set(value, source);
          return source;
        }
        return {
          value,
          source,
          stack: getStackByFiberInDevAndProd(source)
        };
      }
      var concurrentQueues = [];
      var concurrentQueuesIndex = 0;
      var concurrentlyUpdatedLanes = 0;
      function finishQueueingConcurrentUpdates() {
        for (var endIndex = concurrentQueuesIndex, i = concurrentlyUpdatedLanes = concurrentQueuesIndex = 0; i < endIndex; ) {
          var fiber = concurrentQueues[i];
          concurrentQueues[i++] = null;
          var queue = concurrentQueues[i];
          concurrentQueues[i++] = null;
          var update = concurrentQueues[i];
          concurrentQueues[i++] = null;
          var lane = concurrentQueues[i];
          concurrentQueues[i++] = null;
          if (null !== queue && null !== update) {
            var pending = queue.pending;
            null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
            queue.pending = update;
          }
          0 !== lane && markUpdateLaneFromFiberToRoot(fiber, update, lane);
        }
      }
      function enqueueUpdate$1(fiber, queue, update, lane) {
        concurrentQueues[concurrentQueuesIndex++] = fiber;
        concurrentQueues[concurrentQueuesIndex++] = queue;
        concurrentQueues[concurrentQueuesIndex++] = update;
        concurrentQueues[concurrentQueuesIndex++] = lane;
        concurrentlyUpdatedLanes |= lane;
        fiber.lanes |= lane;
        fiber = fiber.alternate;
        null !== fiber && (fiber.lanes |= lane);
      }
      function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
        enqueueUpdate$1(fiber, queue, update, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function enqueueConcurrentRenderForLane(fiber, lane) {
        enqueueUpdate$1(fiber, null, null, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function markUpdateLaneFromFiberToRoot(sourceFiber, update, lane) {
        sourceFiber.lanes |= lane;
        var alternate = sourceFiber.alternate;
        null !== alternate && (alternate.lanes |= lane);
        for (var isHidden = false, parent = sourceFiber.return; null !== parent; )
          parent.childLanes |= lane, alternate = parent.alternate, null !== alternate && (alternate.childLanes |= lane), 22 === parent.tag && (sourceFiber = parent.stateNode, null === sourceFiber || sourceFiber._visibility & 1 || (isHidden = true)), sourceFiber = parent, parent = parent.return;
        return 3 === sourceFiber.tag ? (parent = sourceFiber.stateNode, isHidden && null !== update && (isHidden = 31 - clz32(lane), sourceFiber = parent.hiddenUpdates, alternate = sourceFiber[isHidden], null === alternate ? sourceFiber[isHidden] = [update] : alternate.push(update), update.lane = lane | 536870912), parent) : null;
      }
      function getRootForUpdatedFiber(sourceFiber) {
        if (50 < nestedUpdateCount)
          throw nestedUpdateCount = 0, rootWithNestedUpdates = null, Error(formatProdErrorMessage3(185));
        for (var parent = sourceFiber.return; null !== parent; )
          sourceFiber = parent, parent = sourceFiber.return;
        return 3 === sourceFiber.tag ? sourceFiber.stateNode : null;
      }
      var emptyContextObject = {};
      function FiberNode(tag, pendingProps, key, mode) {
        this.tag = tag;
        this.key = key;
        this.sibling = this.child = this.return = this.stateNode = this.type = this.elementType = null;
        this.index = 0;
        this.refCleanup = this.ref = null;
        this.pendingProps = pendingProps;
        this.dependencies = this.memoizedState = this.updateQueue = this.memoizedProps = null;
        this.mode = mode;
        this.subtreeFlags = this.flags = 0;
        this.deletions = null;
        this.childLanes = this.lanes = 0;
        this.alternate = null;
      }
      function createFiberImplClass(tag, pendingProps, key, mode) {
        return new FiberNode(tag, pendingProps, key, mode);
      }
      function shouldConstruct(Component5) {
        Component5 = Component5.prototype;
        return !(!Component5 || !Component5.isReactComponent);
      }
      function createWorkInProgress(current2, pendingProps) {
        var workInProgress2 = current2.alternate;
        null === workInProgress2 ? (workInProgress2 = createFiberImplClass(
          current2.tag,
          pendingProps,
          current2.key,
          current2.mode
        ), workInProgress2.elementType = current2.elementType, workInProgress2.type = current2.type, workInProgress2.stateNode = current2.stateNode, workInProgress2.alternate = current2, current2.alternate = workInProgress2) : (workInProgress2.pendingProps = pendingProps, workInProgress2.type = current2.type, workInProgress2.flags = 0, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null);
        workInProgress2.flags = current2.flags & 65011712;
        workInProgress2.childLanes = current2.childLanes;
        workInProgress2.lanes = current2.lanes;
        workInProgress2.child = current2.child;
        workInProgress2.memoizedProps = current2.memoizedProps;
        workInProgress2.memoizedState = current2.memoizedState;
        workInProgress2.updateQueue = current2.updateQueue;
        pendingProps = current2.dependencies;
        workInProgress2.dependencies = null === pendingProps ? null : { lanes: pendingProps.lanes, firstContext: pendingProps.firstContext };
        workInProgress2.sibling = current2.sibling;
        workInProgress2.index = current2.index;
        workInProgress2.ref = current2.ref;
        workInProgress2.refCleanup = current2.refCleanup;
        return workInProgress2;
      }
      function resetWorkInProgress(workInProgress2, renderLanes2) {
        workInProgress2.flags &= 65011714;
        var current2 = workInProgress2.alternate;
        null === current2 ? (workInProgress2.childLanes = 0, workInProgress2.lanes = renderLanes2, workInProgress2.child = null, workInProgress2.subtreeFlags = 0, workInProgress2.memoizedProps = null, workInProgress2.memoizedState = null, workInProgress2.updateQueue = null, workInProgress2.dependencies = null, workInProgress2.stateNode = null) : (workInProgress2.childLanes = current2.childLanes, workInProgress2.lanes = current2.lanes, workInProgress2.child = current2.child, workInProgress2.subtreeFlags = 0, workInProgress2.deletions = null, workInProgress2.memoizedProps = current2.memoizedProps, workInProgress2.memoizedState = current2.memoizedState, workInProgress2.updateQueue = current2.updateQueue, workInProgress2.type = current2.type, renderLanes2 = current2.dependencies, workInProgress2.dependencies = null === renderLanes2 ? null : {
          lanes: renderLanes2.lanes,
          firstContext: renderLanes2.firstContext
        });
        return workInProgress2;
      }
      function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
        var fiberTag = 0;
        owner = type;
        if ("function" === typeof type) shouldConstruct(type) && (fiberTag = 1);
        else if ("string" === typeof type)
          fiberTag = isHostHoistableType(
            type,
            pendingProps,
            contextStackCursor.current
          ) ? 26 : "html" === type || "head" === type || "body" === type ? 27 : 5;
        else
          a: switch (type) {
            case REACT_ACTIVITY_TYPE:
              return type = createFiberImplClass(31, pendingProps, key, mode), type.elementType = REACT_ACTIVITY_TYPE, type.lanes = lanes, type;
            case REACT_FRAGMENT_TYPE:
              return createFiberFromFragment(pendingProps.children, mode, lanes, key);
            case REACT_STRICT_MODE_TYPE:
              fiberTag = 8;
              mode |= 24;
              break;
            case REACT_PROFILER_TYPE:
              return type = createFiberImplClass(12, pendingProps, key, mode | 2), type.elementType = REACT_PROFILER_TYPE, type.lanes = lanes, type;
            case REACT_SUSPENSE_TYPE:
              return type = createFiberImplClass(13, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_TYPE, type.lanes = lanes, type;
            case REACT_SUSPENSE_LIST_TYPE:
              return type = createFiberImplClass(19, pendingProps, key, mode), type.elementType = REACT_SUSPENSE_LIST_TYPE, type.lanes = lanes, type;
            default:
              if ("object" === typeof type && null !== type)
                switch (type.$$typeof) {
                  case REACT_PROVIDER_TYPE:
                  case REACT_CONTEXT_TYPE:
                    fiberTag = 10;
                    break a;
                  case REACT_CONSUMER_TYPE:
                    fiberTag = 9;
                    break a;
                  case REACT_FORWARD_REF_TYPE2:
                    fiberTag = 11;
                    break a;
                  case REACT_MEMO_TYPE2:
                    fiberTag = 14;
                    break a;
                  case REACT_LAZY_TYPE:
                    fiberTag = 16;
                    owner = null;
                    break a;
                }
              fiberTag = 29;
              pendingProps = Error(
                formatProdErrorMessage3(130, null === type ? "null" : typeof type, "")
              );
              owner = null;
          }
        key = createFiberImplClass(fiberTag, pendingProps, key, mode);
        key.elementType = type;
        key.type = owner;
        key.lanes = lanes;
        return key;
      }
      function createFiberFromFragment(elements, mode, lanes, key) {
        elements = createFiberImplClass(7, elements, key, mode);
        elements.lanes = lanes;
        return elements;
      }
      function createFiberFromText(content, mode, lanes) {
        content = createFiberImplClass(6, content, null, mode);
        content.lanes = lanes;
        return content;
      }
      function createFiberFromPortal(portal, mode, lanes) {
        mode = createFiberImplClass(
          4,
          null !== portal.children ? portal.children : [],
          portal.key,
          mode
        );
        mode.lanes = lanes;
        mode.stateNode = {
          containerInfo: portal.containerInfo,
          pendingChildren: null,
          implementation: portal.implementation
        };
        return mode;
      }
      var forkStack = [];
      var forkStackIndex = 0;
      var treeForkProvider = null;
      var treeForkCount = 0;
      var idStack = [];
      var idStackIndex = 0;
      var treeContextProvider = null;
      var treeContextId = 1;
      var treeContextOverflow = "";
      function pushTreeFork(workInProgress2, totalChildren) {
        forkStack[forkStackIndex++] = treeForkCount;
        forkStack[forkStackIndex++] = treeForkProvider;
        treeForkProvider = workInProgress2;
        treeForkCount = totalChildren;
      }
      function pushTreeId(workInProgress2, totalChildren, index2) {
        idStack[idStackIndex++] = treeContextId;
        idStack[idStackIndex++] = treeContextOverflow;
        idStack[idStackIndex++] = treeContextProvider;
        treeContextProvider = workInProgress2;
        var baseIdWithLeadingBit = treeContextId;
        workInProgress2 = treeContextOverflow;
        var baseLength = 32 - clz32(baseIdWithLeadingBit) - 1;
        baseIdWithLeadingBit &= ~(1 << baseLength);
        index2 += 1;
        var length = 32 - clz32(totalChildren) + baseLength;
        if (30 < length) {
          var numberOfOverflowBits = baseLength - baseLength % 5;
          length = (baseIdWithLeadingBit & (1 << numberOfOverflowBits) - 1).toString(32);
          baseIdWithLeadingBit >>= numberOfOverflowBits;
          baseLength -= numberOfOverflowBits;
          treeContextId = 1 << 32 - clz32(totalChildren) + baseLength | index2 << baseLength | baseIdWithLeadingBit;
          treeContextOverflow = length + workInProgress2;
        } else
          treeContextId = 1 << length | index2 << baseLength | baseIdWithLeadingBit, treeContextOverflow = workInProgress2;
      }
      function pushMaterializedTreeId(workInProgress2) {
        null !== workInProgress2.return && (pushTreeFork(workInProgress2, 1), pushTreeId(workInProgress2, 1, 0));
      }
      function popTreeContext(workInProgress2) {
        for (; workInProgress2 === treeForkProvider; )
          treeForkProvider = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null, treeForkCount = forkStack[--forkStackIndex], forkStack[forkStackIndex] = null;
        for (; workInProgress2 === treeContextProvider; )
          treeContextProvider = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextOverflow = idStack[--idStackIndex], idStack[idStackIndex] = null, treeContextId = idStack[--idStackIndex], idStack[idStackIndex] = null;
      }
      var hydrationParentFiber = null;
      var nextHydratableInstance = null;
      var isHydrating = false;
      var hydrationErrors = null;
      var rootOrSingletonContext = false;
      var HydrationMismatchException = Error(formatProdErrorMessage3(519));
      function throwOnHydrationMismatch(fiber) {
        var error = Error(formatProdErrorMessage3(418, ""));
        queueHydrationError(createCapturedValueAtFiber(error, fiber));
        throw HydrationMismatchException;
      }
      function prepareToHydrateHostInstance(fiber) {
        var instance = fiber.stateNode, type = fiber.type, props = fiber.memoizedProps;
        instance[internalInstanceKey] = fiber;
        instance[internalPropsKey] = props;
        switch (type) {
          case "dialog":
            listenToNonDelegatedEvent("cancel", instance);
            listenToNonDelegatedEvent("close", instance);
            break;
          case "iframe":
          case "object":
          case "embed":
            listenToNonDelegatedEvent("load", instance);
            break;
          case "video":
          case "audio":
            for (type = 0; type < mediaEventTypes.length; type++)
              listenToNonDelegatedEvent(mediaEventTypes[type], instance);
            break;
          case "source":
            listenToNonDelegatedEvent("error", instance);
            break;
          case "img":
          case "image":
          case "link":
            listenToNonDelegatedEvent("error", instance);
            listenToNonDelegatedEvent("load", instance);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", instance);
            break;
          case "input":
            listenToNonDelegatedEvent("invalid", instance);
            initInput(
              instance,
              props.value,
              props.defaultValue,
              props.checked,
              props.defaultChecked,
              props.type,
              props.name,
              true
            );
            track(instance);
            break;
          case "select":
            listenToNonDelegatedEvent("invalid", instance);
            break;
          case "textarea":
            listenToNonDelegatedEvent("invalid", instance), initTextarea(instance, props.value, props.defaultValue, props.children), track(instance);
        }
        type = props.children;
        "string" !== typeof type && "number" !== typeof type && "bigint" !== typeof type || instance.textContent === "" + type || true === props.suppressHydrationWarning || checkForUnmatchedText(instance.textContent, type) ? (null != props.popover && (listenToNonDelegatedEvent("beforetoggle", instance), listenToNonDelegatedEvent("toggle", instance)), null != props.onScroll && listenToNonDelegatedEvent("scroll", instance), null != props.onScrollEnd && listenToNonDelegatedEvent("scrollend", instance), null != props.onClick && (instance.onclick = noop$1), instance = true) : instance = false;
        instance || throwOnHydrationMismatch(fiber);
      }
      function popToNextHostParent(fiber) {
        for (hydrationParentFiber = fiber.return; hydrationParentFiber; )
          switch (hydrationParentFiber.tag) {
            case 5:
            case 13:
              rootOrSingletonContext = false;
              return;
            case 27:
            case 3:
              rootOrSingletonContext = true;
              return;
            default:
              hydrationParentFiber = hydrationParentFiber.return;
          }
      }
      function popHydrationState(fiber) {
        if (fiber !== hydrationParentFiber) return false;
        if (!isHydrating) return popToNextHostParent(fiber), isHydrating = true, false;
        var tag = fiber.tag, JSCompiler_temp;
        if (JSCompiler_temp = 3 !== tag && 27 !== tag) {
          if (JSCompiler_temp = 5 === tag)
            JSCompiler_temp = fiber.type, JSCompiler_temp = !("form" !== JSCompiler_temp && "button" !== JSCompiler_temp) || shouldSetTextContent(fiber.type, fiber.memoizedProps);
          JSCompiler_temp = !JSCompiler_temp;
        }
        JSCompiler_temp && nextHydratableInstance && throwOnHydrationMismatch(fiber);
        popToNextHostParent(fiber);
        if (13 === tag) {
          fiber = fiber.memoizedState;
          fiber = null !== fiber ? fiber.dehydrated : null;
          if (!fiber) throw Error(formatProdErrorMessage3(317));
          a: {
            fiber = fiber.nextSibling;
            for (tag = 0; fiber; ) {
              if (8 === fiber.nodeType)
                if (JSCompiler_temp = fiber.data, "/$" === JSCompiler_temp) {
                  if (0 === tag) {
                    nextHydratableInstance = getNextHydratable(fiber.nextSibling);
                    break a;
                  }
                  tag--;
                } else
                  "$" !== JSCompiler_temp && "$!" !== JSCompiler_temp && "$?" !== JSCompiler_temp || tag++;
              fiber = fiber.nextSibling;
            }
            nextHydratableInstance = null;
          }
        } else
          27 === tag ? (tag = nextHydratableInstance, isSingletonScope(fiber.type) ? (fiber = previousHydratableOnEnteringScopedSingleton, previousHydratableOnEnteringScopedSingleton = null, nextHydratableInstance = fiber) : nextHydratableInstance = tag) : nextHydratableInstance = hydrationParentFiber ? getNextHydratable(fiber.stateNode.nextSibling) : null;
        return true;
      }
      function resetHydrationState() {
        nextHydratableInstance = hydrationParentFiber = null;
        isHydrating = false;
      }
      function upgradeHydrationErrorsToRecoverable() {
        var queuedErrors = hydrationErrors;
        null !== queuedErrors && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = queuedErrors : workInProgressRootRecoverableErrors.push.apply(
          workInProgressRootRecoverableErrors,
          queuedErrors
        ), hydrationErrors = null);
        return queuedErrors;
      }
      function queueHydrationError(error) {
        null === hydrationErrors ? hydrationErrors = [error] : hydrationErrors.push(error);
      }
      var valueCursor = createCursor(null);
      var currentlyRenderingFiber$1 = null;
      var lastContextDependency = null;
      function pushProvider(providerFiber, context, nextValue) {
        push(valueCursor, context._currentValue);
        context._currentValue = nextValue;
      }
      function popProvider(context) {
        context._currentValue = valueCursor.current;
        pop(valueCursor);
      }
      function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
        for (; null !== parent; ) {
          var alternate = parent.alternate;
          (parent.childLanes & renderLanes2) !== renderLanes2 ? (parent.childLanes |= renderLanes2, null !== alternate && (alternate.childLanes |= renderLanes2)) : null !== alternate && (alternate.childLanes & renderLanes2) !== renderLanes2 && (alternate.childLanes |= renderLanes2);
          if (parent === propagationRoot) break;
          parent = parent.return;
        }
      }
      function propagateContextChanges(workInProgress2, contexts, renderLanes2, forcePropagateEntireTree) {
        var fiber = workInProgress2.child;
        null !== fiber && (fiber.return = workInProgress2);
        for (; null !== fiber; ) {
          var list = fiber.dependencies;
          if (null !== list) {
            var nextFiber = fiber.child;
            list = list.firstContext;
            a: for (; null !== list; ) {
              var dependency = list;
              list = fiber;
              for (var i = 0; i < contexts.length; i++)
                if (dependency.context === contexts[i]) {
                  list.lanes |= renderLanes2;
                  dependency = list.alternate;
                  null !== dependency && (dependency.lanes |= renderLanes2);
                  scheduleContextWorkOnParentPath(
                    list.return,
                    renderLanes2,
                    workInProgress2
                  );
                  forcePropagateEntireTree || (nextFiber = null);
                  break a;
                }
              list = dependency.next;
            }
          } else if (18 === fiber.tag) {
            nextFiber = fiber.return;
            if (null === nextFiber) throw Error(formatProdErrorMessage3(341));
            nextFiber.lanes |= renderLanes2;
            list = nextFiber.alternate;
            null !== list && (list.lanes |= renderLanes2);
            scheduleContextWorkOnParentPath(nextFiber, renderLanes2, workInProgress2);
            nextFiber = null;
          } else nextFiber = fiber.child;
          if (null !== nextFiber) nextFiber.return = fiber;
          else
            for (nextFiber = fiber; null !== nextFiber; ) {
              if (nextFiber === workInProgress2) {
                nextFiber = null;
                break;
              }
              fiber = nextFiber.sibling;
              if (null !== fiber) {
                fiber.return = nextFiber.return;
                nextFiber = fiber;
                break;
              }
              nextFiber = nextFiber.return;
            }
          fiber = nextFiber;
        }
      }
      function propagateParentContextChanges(current2, workInProgress2, renderLanes2, forcePropagateEntireTree) {
        current2 = null;
        for (var parent = workInProgress2, isInsidePropagationBailout = false; null !== parent; ) {
          if (!isInsidePropagationBailout) {
            if (0 !== (parent.flags & 524288)) isInsidePropagationBailout = true;
            else if (0 !== (parent.flags & 262144)) break;
          }
          if (10 === parent.tag) {
            var currentParent = parent.alternate;
            if (null === currentParent) throw Error(formatProdErrorMessage3(387));
            currentParent = currentParent.memoizedProps;
            if (null !== currentParent) {
              var context = parent.type;
              objectIs(parent.pendingProps.value, currentParent.value) || (null !== current2 ? current2.push(context) : current2 = [context]);
            }
          } else if (parent === hostTransitionProviderCursor.current) {
            currentParent = parent.alternate;
            if (null === currentParent) throw Error(formatProdErrorMessage3(387));
            currentParent.memoizedState.memoizedState !== parent.memoizedState.memoizedState && (null !== current2 ? current2.push(HostTransitionContext) : current2 = [HostTransitionContext]);
          }
          parent = parent.return;
        }
        null !== current2 && propagateContextChanges(
          workInProgress2,
          current2,
          renderLanes2,
          forcePropagateEntireTree
        );
        workInProgress2.flags |= 262144;
      }
      function checkIfContextChanged(currentDependencies) {
        for (currentDependencies = currentDependencies.firstContext; null !== currentDependencies; ) {
          if (!objectIs(
            currentDependencies.context._currentValue,
            currentDependencies.memoizedValue
          ))
            return true;
          currentDependencies = currentDependencies.next;
        }
        return false;
      }
      function prepareToReadContext(workInProgress2) {
        currentlyRenderingFiber$1 = workInProgress2;
        lastContextDependency = null;
        workInProgress2 = workInProgress2.dependencies;
        null !== workInProgress2 && (workInProgress2.firstContext = null);
      }
      function readContext(context) {
        return readContextForConsumer(currentlyRenderingFiber$1, context);
      }
      function readContextDuringReconciliation(consumer, context) {
        null === currentlyRenderingFiber$1 && prepareToReadContext(consumer);
        return readContextForConsumer(consumer, context);
      }
      function readContextForConsumer(consumer, context) {
        var value = context._currentValue;
        context = { context, memoizedValue: value, next: null };
        if (null === lastContextDependency) {
          if (null === consumer) throw Error(formatProdErrorMessage3(308));
          lastContextDependency = context;
          consumer.dependencies = { lanes: 0, firstContext: context };
          consumer.flags |= 524288;
        } else lastContextDependency = lastContextDependency.next = context;
        return value;
      }
      var AbortControllerLocal = "undefined" !== typeof AbortController ? AbortController : function() {
        var listeners = [], signal = this.signal = {
          aborted: false,
          addEventListener: function(type, listener2) {
            listeners.push(listener2);
          }
        };
        this.abort = function() {
          signal.aborted = true;
          listeners.forEach(function(listener2) {
            return listener2();
          });
        };
      };
      var scheduleCallback$2 = Scheduler.unstable_scheduleCallback;
      var NormalPriority = Scheduler.unstable_NormalPriority;
      var CacheContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Consumer: null,
        Provider: null,
        _currentValue: null,
        _currentValue2: null,
        _threadCount: 0
      };
      function createCache() {
        return {
          controller: new AbortControllerLocal(),
          data: /* @__PURE__ */ new Map(),
          refCount: 0
        };
      }
      function releaseCache(cache) {
        cache.refCount--;
        0 === cache.refCount && scheduleCallback$2(NormalPriority, function() {
          cache.controller.abort();
        });
      }
      var currentEntangledListeners = null;
      var currentEntangledPendingCount = 0;
      var currentEntangledLane = 0;
      var currentEntangledActionThenable = null;
      function entangleAsyncAction(transition, thenable) {
        if (null === currentEntangledListeners) {
          var entangledListeners = currentEntangledListeners = [];
          currentEntangledPendingCount = 0;
          currentEntangledLane = requestTransitionLane();
          currentEntangledActionThenable = {
            status: "pending",
            value: void 0,
            then: function(resolve) {
              entangledListeners.push(resolve);
            }
          };
        }
        currentEntangledPendingCount++;
        thenable.then(pingEngtangledActionScope, pingEngtangledActionScope);
        return thenable;
      }
      function pingEngtangledActionScope() {
        if (0 === --currentEntangledPendingCount && null !== currentEntangledListeners) {
          null !== currentEntangledActionThenable && (currentEntangledActionThenable.status = "fulfilled");
          var listeners = currentEntangledListeners;
          currentEntangledListeners = null;
          currentEntangledLane = 0;
          currentEntangledActionThenable = null;
          for (var i = 0; i < listeners.length; i++) (0, listeners[i])();
        }
      }
      function chainThenableValue(thenable, result) {
        var listeners = [], thenableWithOverride = {
          status: "pending",
          value: null,
          reason: null,
          then: function(resolve) {
            listeners.push(resolve);
          }
        };
        thenable.then(
          function() {
            thenableWithOverride.status = "fulfilled";
            thenableWithOverride.value = result;
            for (var i = 0; i < listeners.length; i++) (0, listeners[i])(result);
          },
          function(error) {
            thenableWithOverride.status = "rejected";
            thenableWithOverride.reason = error;
            for (error = 0; error < listeners.length; error++)
              (0, listeners[error])(void 0);
          }
        );
        return thenableWithOverride;
      }
      var prevOnStartTransitionFinish = ReactSharedInternals.S;
      ReactSharedInternals.S = function(transition, returnValue) {
        "object" === typeof returnValue && null !== returnValue && "function" === typeof returnValue.then && entangleAsyncAction(transition, returnValue);
        null !== prevOnStartTransitionFinish && prevOnStartTransitionFinish(transition, returnValue);
      };
      var resumedCache = createCursor(null);
      function peekCacheFromPool() {
        var cacheResumedFromPreviousRender = resumedCache.current;
        return null !== cacheResumedFromPreviousRender ? cacheResumedFromPreviousRender : workInProgressRoot.pooledCache;
      }
      function pushTransition(offscreenWorkInProgress, prevCachePool) {
        null === prevCachePool ? push(resumedCache, resumedCache.current) : push(resumedCache, prevCachePool.pool);
      }
      function getSuspendedCache() {
        var cacheFromPool = peekCacheFromPool();
        return null === cacheFromPool ? null : { parent: CacheContext._currentValue, pool: cacheFromPool };
      }
      var SuspenseException = Error(formatProdErrorMessage3(460));
      var SuspenseyCommitException = Error(formatProdErrorMessage3(474));
      var SuspenseActionException = Error(formatProdErrorMessage3(542));
      var noopSuspenseyCommitThenable = { then: function() {
      } };
      function isThenableResolved(thenable) {
        thenable = thenable.status;
        return "fulfilled" === thenable || "rejected" === thenable;
      }
      function noop$3() {
      }
      function trackUsedThenable(thenableState2, thenable, index2) {
        index2 = thenableState2[index2];
        void 0 === index2 ? thenableState2.push(thenable) : index2 !== thenable && (thenable.then(noop$3, noop$3), thenable = index2);
        switch (thenable.status) {
          case "fulfilled":
            return thenable.value;
          case "rejected":
            throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
          default:
            if ("string" === typeof thenable.status) thenable.then(noop$3, noop$3);
            else {
              thenableState2 = workInProgressRoot;
              if (null !== thenableState2 && 100 < thenableState2.shellSuspendCounter)
                throw Error(formatProdErrorMessage3(482));
              thenableState2 = thenable;
              thenableState2.status = "pending";
              thenableState2.then(
                function(fulfilledValue) {
                  if ("pending" === thenable.status) {
                    var fulfilledThenable = thenable;
                    fulfilledThenable.status = "fulfilled";
                    fulfilledThenable.value = fulfilledValue;
                  }
                },
                function(error) {
                  if ("pending" === thenable.status) {
                    var rejectedThenable = thenable;
                    rejectedThenable.status = "rejected";
                    rejectedThenable.reason = error;
                  }
                }
              );
            }
            switch (thenable.status) {
              case "fulfilled":
                return thenable.value;
              case "rejected":
                throw thenableState2 = thenable.reason, checkIfUseWrappedInAsyncCatch(thenableState2), thenableState2;
            }
            suspendedThenable = thenable;
            throw SuspenseException;
        }
      }
      var suspendedThenable = null;
      function getSuspendedThenable() {
        if (null === suspendedThenable) throw Error(formatProdErrorMessage3(459));
        var thenable = suspendedThenable;
        suspendedThenable = null;
        return thenable;
      }
      function checkIfUseWrappedInAsyncCatch(rejectedReason) {
        if (rejectedReason === SuspenseException || rejectedReason === SuspenseActionException)
          throw Error(formatProdErrorMessage3(483));
      }
      var hasForceUpdate = false;
      function initializeUpdateQueue(fiber) {
        fiber.updateQueue = {
          baseState: fiber.memoizedState,
          firstBaseUpdate: null,
          lastBaseUpdate: null,
          shared: { pending: null, lanes: 0, hiddenCallbacks: null },
          callbacks: null
        };
      }
      function cloneUpdateQueue(current2, workInProgress2) {
        current2 = current2.updateQueue;
        workInProgress2.updateQueue === current2 && (workInProgress2.updateQueue = {
          baseState: current2.baseState,
          firstBaseUpdate: current2.firstBaseUpdate,
          lastBaseUpdate: current2.lastBaseUpdate,
          shared: current2.shared,
          callbacks: null
        });
      }
      function createUpdate(lane) {
        return { lane, tag: 0, payload: null, callback: null, next: null };
      }
      function enqueueUpdate(fiber, update, lane) {
        var updateQueue = fiber.updateQueue;
        if (null === updateQueue) return null;
        updateQueue = updateQueue.shared;
        if (0 !== (executionContext & 2)) {
          var pending = updateQueue.pending;
          null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
          updateQueue.pending = update;
          update = getRootForUpdatedFiber(fiber);
          markUpdateLaneFromFiberToRoot(fiber, null, lane);
          return update;
        }
        enqueueUpdate$1(fiber, updateQueue, update, lane);
        return getRootForUpdatedFiber(fiber);
      }
      function entangleTransitions(root3, fiber, lane) {
        fiber = fiber.updateQueue;
        if (null !== fiber && (fiber = fiber.shared, 0 !== (lane & 4194048))) {
          var queueLanes = fiber.lanes;
          queueLanes &= root3.pendingLanes;
          lane |= queueLanes;
          fiber.lanes = lane;
          markRootEntangled(root3, lane);
        }
      }
      function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
        var queue = workInProgress2.updateQueue, current2 = workInProgress2.alternate;
        if (null !== current2 && (current2 = current2.updateQueue, queue === current2)) {
          var newFirst = null, newLast = null;
          queue = queue.firstBaseUpdate;
          if (null !== queue) {
            do {
              var clone = {
                lane: queue.lane,
                tag: queue.tag,
                payload: queue.payload,
                callback: null,
                next: null
              };
              null === newLast ? newFirst = newLast = clone : newLast = newLast.next = clone;
              queue = queue.next;
            } while (null !== queue);
            null === newLast ? newFirst = newLast = capturedUpdate : newLast = newLast.next = capturedUpdate;
          } else newFirst = newLast = capturedUpdate;
          queue = {
            baseState: current2.baseState,
            firstBaseUpdate: newFirst,
            lastBaseUpdate: newLast,
            shared: current2.shared,
            callbacks: current2.callbacks
          };
          workInProgress2.updateQueue = queue;
          return;
        }
        workInProgress2 = queue.lastBaseUpdate;
        null === workInProgress2 ? queue.firstBaseUpdate = capturedUpdate : workInProgress2.next = capturedUpdate;
        queue.lastBaseUpdate = capturedUpdate;
      }
      var didReadFromEntangledAsyncAction = false;
      function suspendIfUpdateReadFromEntangledAsyncAction() {
        if (didReadFromEntangledAsyncAction) {
          var entangledActionThenable = currentEntangledActionThenable;
          if (null !== entangledActionThenable) throw entangledActionThenable;
        }
      }
      function processUpdateQueue(workInProgress$jscomp$0, props, instance$jscomp$0, renderLanes2) {
        didReadFromEntangledAsyncAction = false;
        var queue = workInProgress$jscomp$0.updateQueue;
        hasForceUpdate = false;
        var firstBaseUpdate = queue.firstBaseUpdate, lastBaseUpdate = queue.lastBaseUpdate, pendingQueue = queue.shared.pending;
        if (null !== pendingQueue) {
          queue.shared.pending = null;
          var lastPendingUpdate = pendingQueue, firstPendingUpdate = lastPendingUpdate.next;
          lastPendingUpdate.next = null;
          null === lastBaseUpdate ? firstBaseUpdate = firstPendingUpdate : lastBaseUpdate.next = firstPendingUpdate;
          lastBaseUpdate = lastPendingUpdate;
          var current2 = workInProgress$jscomp$0.alternate;
          null !== current2 && (current2 = current2.updateQueue, pendingQueue = current2.lastBaseUpdate, pendingQueue !== lastBaseUpdate && (null === pendingQueue ? current2.firstBaseUpdate = firstPendingUpdate : pendingQueue.next = firstPendingUpdate, current2.lastBaseUpdate = lastPendingUpdate));
        }
        if (null !== firstBaseUpdate) {
          var newState = queue.baseState;
          lastBaseUpdate = 0;
          current2 = firstPendingUpdate = lastPendingUpdate = null;
          pendingQueue = firstBaseUpdate;
          do {
            var updateLane = pendingQueue.lane & -536870913, isHiddenUpdate = updateLane !== pendingQueue.lane;
            if (isHiddenUpdate ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes2 & updateLane) === updateLane) {
              0 !== updateLane && updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction = true);
              null !== current2 && (current2 = current2.next = {
                lane: 0,
                tag: pendingQueue.tag,
                payload: pendingQueue.payload,
                callback: null,
                next: null
              });
              a: {
                var workInProgress2 = workInProgress$jscomp$0, update = pendingQueue;
                updateLane = props;
                var instance = instance$jscomp$0;
                switch (update.tag) {
                  case 1:
                    workInProgress2 = update.payload;
                    if ("function" === typeof workInProgress2) {
                      newState = workInProgress2.call(instance, newState, updateLane);
                      break a;
                    }
                    newState = workInProgress2;
                    break a;
                  case 3:
                    workInProgress2.flags = workInProgress2.flags & -65537 | 128;
                  case 0:
                    workInProgress2 = update.payload;
                    updateLane = "function" === typeof workInProgress2 ? workInProgress2.call(instance, newState, updateLane) : workInProgress2;
                    if (null === updateLane || void 0 === updateLane) break a;
                    newState = assign2({}, newState, updateLane);
                    break a;
                  case 2:
                    hasForceUpdate = true;
                }
              }
              updateLane = pendingQueue.callback;
              null !== updateLane && (workInProgress$jscomp$0.flags |= 64, isHiddenUpdate && (workInProgress$jscomp$0.flags |= 8192), isHiddenUpdate = queue.callbacks, null === isHiddenUpdate ? queue.callbacks = [updateLane] : isHiddenUpdate.push(updateLane));
            } else
              isHiddenUpdate = {
                lane: updateLane,
                tag: pendingQueue.tag,
                payload: pendingQueue.payload,
                callback: pendingQueue.callback,
                next: null
              }, null === current2 ? (firstPendingUpdate = current2 = isHiddenUpdate, lastPendingUpdate = newState) : current2 = current2.next = isHiddenUpdate, lastBaseUpdate |= updateLane;
            pendingQueue = pendingQueue.next;
            if (null === pendingQueue)
              if (pendingQueue = queue.shared.pending, null === pendingQueue)
                break;
              else
                isHiddenUpdate = pendingQueue, pendingQueue = isHiddenUpdate.next, isHiddenUpdate.next = null, queue.lastBaseUpdate = isHiddenUpdate, queue.shared.pending = null;
          } while (1);
          null === current2 && (lastPendingUpdate = newState);
          queue.baseState = lastPendingUpdate;
          queue.firstBaseUpdate = firstPendingUpdate;
          queue.lastBaseUpdate = current2;
          null === firstBaseUpdate && (queue.shared.lanes = 0);
          workInProgressRootSkippedLanes |= lastBaseUpdate;
          workInProgress$jscomp$0.lanes = lastBaseUpdate;
          workInProgress$jscomp$0.memoizedState = newState;
        }
      }
      function callCallback(callback, context) {
        if ("function" !== typeof callback)
          throw Error(formatProdErrorMessage3(191, callback));
        callback.call(context);
      }
      function commitCallbacks(updateQueue, context) {
        var callbacks = updateQueue.callbacks;
        if (null !== callbacks)
          for (updateQueue.callbacks = null, updateQueue = 0; updateQueue < callbacks.length; updateQueue++)
            callCallback(callbacks[updateQueue], context);
      }
      var currentTreeHiddenStackCursor = createCursor(null);
      var prevEntangledRenderLanesCursor = createCursor(0);
      function pushHiddenContext(fiber, context) {
        fiber = entangledRenderLanes;
        push(prevEntangledRenderLanesCursor, fiber);
        push(currentTreeHiddenStackCursor, context);
        entangledRenderLanes = fiber | context.baseLanes;
      }
      function reuseHiddenContextOnStack() {
        push(prevEntangledRenderLanesCursor, entangledRenderLanes);
        push(currentTreeHiddenStackCursor, currentTreeHiddenStackCursor.current);
      }
      function popHiddenContext() {
        entangledRenderLanes = prevEntangledRenderLanesCursor.current;
        pop(currentTreeHiddenStackCursor);
        pop(prevEntangledRenderLanesCursor);
      }
      var renderLanes = 0;
      var currentlyRenderingFiber = null;
      var currentHook = null;
      var workInProgressHook = null;
      var didScheduleRenderPhaseUpdate = false;
      var didScheduleRenderPhaseUpdateDuringThisPass = false;
      var shouldDoubleInvokeUserFnsInHooksDEV = false;
      var localIdCounter = 0;
      var thenableIndexCounter$1 = 0;
      var thenableState$1 = null;
      var globalClientIdCounter = 0;
      function throwInvalidHookError() {
        throw Error(formatProdErrorMessage3(321));
      }
      function areHookInputsEqual(nextDeps, prevDeps) {
        if (null === prevDeps) return false;
        for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++)
          if (!objectIs(nextDeps[i], prevDeps[i])) return false;
        return true;
      }
      function renderWithHooks(current2, workInProgress2, Component5, props, secondArg, nextRenderLanes) {
        renderLanes = nextRenderLanes;
        currentlyRenderingFiber = workInProgress2;
        workInProgress2.memoizedState = null;
        workInProgress2.updateQueue = null;
        workInProgress2.lanes = 0;
        ReactSharedInternals.H = null === current2 || null === current2.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate;
        shouldDoubleInvokeUserFnsInHooksDEV = false;
        nextRenderLanes = Component5(props, secondArg);
        shouldDoubleInvokeUserFnsInHooksDEV = false;
        didScheduleRenderPhaseUpdateDuringThisPass && (nextRenderLanes = renderWithHooksAgain(
          workInProgress2,
          Component5,
          props,
          secondArg
        ));
        finishRenderingHooks(current2);
        return nextRenderLanes;
      }
      function finishRenderingHooks(current2) {
        ReactSharedInternals.H = ContextOnlyDispatcher;
        var didRenderTooFewHooks = null !== currentHook && null !== currentHook.next;
        renderLanes = 0;
        workInProgressHook = currentHook = currentlyRenderingFiber = null;
        didScheduleRenderPhaseUpdate = false;
        thenableIndexCounter$1 = 0;
        thenableState$1 = null;
        if (didRenderTooFewHooks) throw Error(formatProdErrorMessage3(300));
        null === current2 || didReceiveUpdate || (current2 = current2.dependencies, null !== current2 && checkIfContextChanged(current2) && (didReceiveUpdate = true));
      }
      function renderWithHooksAgain(workInProgress2, Component5, props, secondArg) {
        currentlyRenderingFiber = workInProgress2;
        var numberOfReRenders = 0;
        do {
          didScheduleRenderPhaseUpdateDuringThisPass && (thenableState$1 = null);
          thenableIndexCounter$1 = 0;
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          if (25 <= numberOfReRenders) throw Error(formatProdErrorMessage3(301));
          numberOfReRenders += 1;
          workInProgressHook = currentHook = null;
          if (null != workInProgress2.updateQueue) {
            var children = workInProgress2.updateQueue;
            children.lastEffect = null;
            children.events = null;
            children.stores = null;
            null != children.memoCache && (children.memoCache.index = 0);
          }
          ReactSharedInternals.H = HooksDispatcherOnRerender;
          children = Component5(props, secondArg);
        } while (didScheduleRenderPhaseUpdateDuringThisPass);
        return children;
      }
      function TransitionAwareHostComponent() {
        var dispatcher = ReactSharedInternals.H, maybeThenable = dispatcher.useState()[0];
        maybeThenable = "function" === typeof maybeThenable.then ? useThenable(maybeThenable) : maybeThenable;
        dispatcher = dispatcher.useState()[0];
        (null !== currentHook ? currentHook.memoizedState : null) !== dispatcher && (currentlyRenderingFiber.flags |= 1024);
        return maybeThenable;
      }
      function checkDidRenderIdHook() {
        var didRenderIdHook = 0 !== localIdCounter;
        localIdCounter = 0;
        return didRenderIdHook;
      }
      function bailoutHooks(current2, workInProgress2, lanes) {
        workInProgress2.updateQueue = current2.updateQueue;
        workInProgress2.flags &= -2053;
        current2.lanes &= ~lanes;
      }
      function resetHooksOnUnwind(workInProgress2) {
        if (didScheduleRenderPhaseUpdate) {
          for (workInProgress2 = workInProgress2.memoizedState; null !== workInProgress2; ) {
            var queue = workInProgress2.queue;
            null !== queue && (queue.pending = null);
            workInProgress2 = workInProgress2.next;
          }
          didScheduleRenderPhaseUpdate = false;
        }
        renderLanes = 0;
        workInProgressHook = currentHook = currentlyRenderingFiber = null;
        didScheduleRenderPhaseUpdateDuringThisPass = false;
        thenableIndexCounter$1 = localIdCounter = 0;
        thenableState$1 = null;
      }
      function mountWorkInProgressHook() {
        var hook = {
          memoizedState: null,
          baseState: null,
          baseQueue: null,
          queue: null,
          next: null
        };
        null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = hook : workInProgressHook = workInProgressHook.next = hook;
        return workInProgressHook;
      }
      function updateWorkInProgressHook() {
        if (null === currentHook) {
          var nextCurrentHook = currentlyRenderingFiber.alternate;
          nextCurrentHook = null !== nextCurrentHook ? nextCurrentHook.memoizedState : null;
        } else nextCurrentHook = currentHook.next;
        var nextWorkInProgressHook = null === workInProgressHook ? currentlyRenderingFiber.memoizedState : workInProgressHook.next;
        if (null !== nextWorkInProgressHook)
          workInProgressHook = nextWorkInProgressHook, currentHook = nextCurrentHook;
        else {
          if (null === nextCurrentHook) {
            if (null === currentlyRenderingFiber.alternate)
              throw Error(formatProdErrorMessage3(467));
            throw Error(formatProdErrorMessage3(310));
          }
          currentHook = nextCurrentHook;
          nextCurrentHook = {
            memoizedState: currentHook.memoizedState,
            baseState: currentHook.baseState,
            baseQueue: currentHook.baseQueue,
            queue: currentHook.queue,
            next: null
          };
          null === workInProgressHook ? currentlyRenderingFiber.memoizedState = workInProgressHook = nextCurrentHook : workInProgressHook = workInProgressHook.next = nextCurrentHook;
        }
        return workInProgressHook;
      }
      function createFunctionComponentUpdateQueue() {
        return { lastEffect: null, events: null, stores: null, memoCache: null };
      }
      function useThenable(thenable) {
        var index2 = thenableIndexCounter$1;
        thenableIndexCounter$1 += 1;
        null === thenableState$1 && (thenableState$1 = []);
        thenable = trackUsedThenable(thenableState$1, thenable, index2);
        index2 = currentlyRenderingFiber;
        null === (null === workInProgressHook ? index2.memoizedState : workInProgressHook.next) && (index2 = index2.alternate, ReactSharedInternals.H = null === index2 || null === index2.memoizedState ? HooksDispatcherOnMount : HooksDispatcherOnUpdate);
        return thenable;
      }
      function use(usable) {
        if (null !== usable && "object" === typeof usable) {
          if ("function" === typeof usable.then) return useThenable(usable);
          if (usable.$$typeof === REACT_CONTEXT_TYPE) return readContext(usable);
        }
        throw Error(formatProdErrorMessage3(438, String(usable)));
      }
      function useMemoCache(size) {
        var memoCache = null, updateQueue = currentlyRenderingFiber.updateQueue;
        null !== updateQueue && (memoCache = updateQueue.memoCache);
        if (null == memoCache) {
          var current2 = currentlyRenderingFiber.alternate;
          null !== current2 && (current2 = current2.updateQueue, null !== current2 && (current2 = current2.memoCache, null != current2 && (memoCache = {
            data: current2.data.map(function(array) {
              return array.slice();
            }),
            index: 0
          })));
        }
        null == memoCache && (memoCache = { data: [], index: 0 });
        null === updateQueue && (updateQueue = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = updateQueue);
        updateQueue.memoCache = memoCache;
        updateQueue = memoCache.data[memoCache.index];
        if (void 0 === updateQueue)
          for (updateQueue = memoCache.data[memoCache.index] = Array(size), current2 = 0; current2 < size; current2++)
            updateQueue[current2] = REACT_MEMO_CACHE_SENTINEL;
        memoCache.index++;
        return updateQueue;
      }
      function basicStateReducer(state, action) {
        return "function" === typeof action ? action(state) : action;
      }
      function updateReducer(reducer) {
        var hook = updateWorkInProgressHook();
        return updateReducerImpl(hook, currentHook, reducer);
      }
      function updateReducerImpl(hook, current2, reducer) {
        var queue = hook.queue;
        if (null === queue) throw Error(formatProdErrorMessage3(311));
        queue.lastRenderedReducer = reducer;
        var baseQueue = hook.baseQueue, pendingQueue = queue.pending;
        if (null !== pendingQueue) {
          if (null !== baseQueue) {
            var baseFirst = baseQueue.next;
            baseQueue.next = pendingQueue.next;
            pendingQueue.next = baseFirst;
          }
          current2.baseQueue = baseQueue = pendingQueue;
          queue.pending = null;
        }
        pendingQueue = hook.baseState;
        if (null === baseQueue) hook.memoizedState = pendingQueue;
        else {
          current2 = baseQueue.next;
          var newBaseQueueFirst = baseFirst = null, newBaseQueueLast = null, update = current2, didReadFromEntangledAsyncAction$32 = false;
          do {
            var updateLane = update.lane & -536870913;
            if (updateLane !== update.lane ? (workInProgressRootRenderLanes & updateLane) === updateLane : (renderLanes & updateLane) === updateLane) {
              var revertLane = update.revertLane;
              if (0 === revertLane)
                null !== newBaseQueueLast && (newBaseQueueLast = newBaseQueueLast.next = {
                  lane: 0,
                  revertLane: 0,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                }), updateLane === currentEntangledLane && (didReadFromEntangledAsyncAction$32 = true);
              else if ((renderLanes & revertLane) === revertLane) {
                update = update.next;
                revertLane === currentEntangledLane && (didReadFromEntangledAsyncAction$32 = true);
                continue;
              } else
                updateLane = {
                  lane: 0,
                  revertLane: update.revertLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = updateLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = updateLane, currentlyRenderingFiber.lanes |= revertLane, workInProgressRootSkippedLanes |= revertLane;
              updateLane = update.action;
              shouldDoubleInvokeUserFnsInHooksDEV && reducer(pendingQueue, updateLane);
              pendingQueue = update.hasEagerState ? update.eagerState : reducer(pendingQueue, updateLane);
            } else
              revertLane = {
                lane: updateLane,
                revertLane: update.revertLane,
                action: update.action,
                hasEagerState: update.hasEagerState,
                eagerState: update.eagerState,
                next: null
              }, null === newBaseQueueLast ? (newBaseQueueFirst = newBaseQueueLast = revertLane, baseFirst = pendingQueue) : newBaseQueueLast = newBaseQueueLast.next = revertLane, currentlyRenderingFiber.lanes |= updateLane, workInProgressRootSkippedLanes |= updateLane;
            update = update.next;
          } while (null !== update && update !== current2);
          null === newBaseQueueLast ? baseFirst = pendingQueue : newBaseQueueLast.next = newBaseQueueFirst;
          if (!objectIs(pendingQueue, hook.memoizedState) && (didReceiveUpdate = true, didReadFromEntangledAsyncAction$32 && (reducer = currentEntangledActionThenable, null !== reducer)))
            throw reducer;
          hook.memoizedState = pendingQueue;
          hook.baseState = baseFirst;
          hook.baseQueue = newBaseQueueLast;
          queue.lastRenderedState = pendingQueue;
        }
        null === baseQueue && (queue.lanes = 0);
        return [hook.memoizedState, queue.dispatch];
      }
      function rerenderReducer(reducer) {
        var hook = updateWorkInProgressHook(), queue = hook.queue;
        if (null === queue) throw Error(formatProdErrorMessage3(311));
        queue.lastRenderedReducer = reducer;
        var dispatch = queue.dispatch, lastRenderPhaseUpdate = queue.pending, newState = hook.memoizedState;
        if (null !== lastRenderPhaseUpdate) {
          queue.pending = null;
          var update = lastRenderPhaseUpdate = lastRenderPhaseUpdate.next;
          do
            newState = reducer(newState, update.action), update = update.next;
          while (update !== lastRenderPhaseUpdate);
          objectIs(newState, hook.memoizedState) || (didReceiveUpdate = true);
          hook.memoizedState = newState;
          null === hook.baseQueue && (hook.baseState = newState);
          queue.lastRenderedState = newState;
        }
        return [newState, dispatch];
      }
      function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
        var fiber = currentlyRenderingFiber, hook = updateWorkInProgressHook(), isHydrating$jscomp$0 = isHydrating;
        if (isHydrating$jscomp$0) {
          if (void 0 === getServerSnapshot) throw Error(formatProdErrorMessage3(407));
          getServerSnapshot = getServerSnapshot();
        } else getServerSnapshot = getSnapshot();
        var snapshotChanged = !objectIs(
          (currentHook || hook).memoizedState,
          getServerSnapshot
        );
        snapshotChanged && (hook.memoizedState = getServerSnapshot, didReceiveUpdate = true);
        hook = hook.queue;
        var create = subscribeToStore.bind(null, fiber, hook, subscribe);
        updateEffectImpl(2048, 8, create, [subscribe]);
        if (hook.getSnapshot !== getSnapshot || snapshotChanged || null !== workInProgressHook && workInProgressHook.memoizedState.tag & 1) {
          fiber.flags |= 2048;
          pushSimpleEffect(
            9,
            createEffectInstance(),
            updateStoreInstance.bind(
              null,
              fiber,
              hook,
              getServerSnapshot,
              getSnapshot
            ),
            null
          );
          if (null === workInProgressRoot) throw Error(formatProdErrorMessage3(349));
          isHydrating$jscomp$0 || 0 !== (renderLanes & 124) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
        }
        return getServerSnapshot;
      }
      function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
        fiber.flags |= 16384;
        fiber = { getSnapshot, value: renderedSnapshot };
        getSnapshot = currentlyRenderingFiber.updateQueue;
        null === getSnapshot ? (getSnapshot = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = getSnapshot, getSnapshot.stores = [fiber]) : (renderedSnapshot = getSnapshot.stores, null === renderedSnapshot ? getSnapshot.stores = [fiber] : renderedSnapshot.push(fiber));
      }
      function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
        inst.value = nextSnapshot;
        inst.getSnapshot = getSnapshot;
        checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
      }
      function subscribeToStore(fiber, inst, subscribe) {
        return subscribe(function() {
          checkIfSnapshotChanged(inst) && forceStoreRerender(fiber);
        });
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        inst = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(inst, nextValue);
        } catch (error) {
          return true;
        }
      }
      function forceStoreRerender(fiber) {
        var root3 = enqueueConcurrentRenderForLane(fiber, 2);
        null !== root3 && scheduleUpdateOnFiber(root3, fiber, 2);
      }
      function mountStateImpl(initialState12) {
        var hook = mountWorkInProgressHook();
        if ("function" === typeof initialState12) {
          var initialStateInitializer = initialState12;
          initialState12 = initialStateInitializer();
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true);
            try {
              initialStateInitializer();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
        }
        hook.memoizedState = hook.baseState = initialState12;
        hook.queue = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: basicStateReducer,
          lastRenderedState: initialState12
        };
        return hook;
      }
      function updateOptimisticImpl(hook, current2, passthrough, reducer) {
        hook.baseState = passthrough;
        return updateReducerImpl(
          hook,
          currentHook,
          "function" === typeof reducer ? reducer : basicStateReducer
        );
      }
      function dispatchActionState(fiber, actionQueue, setPendingState, setState, payload) {
        if (isRenderPhaseUpdate(fiber)) throw Error(formatProdErrorMessage3(485));
        fiber = actionQueue.action;
        if (null !== fiber) {
          var actionNode = {
            payload,
            action: fiber,
            next: null,
            isTransition: true,
            status: "pending",
            value: null,
            reason: null,
            listeners: [],
            then: function(listener2) {
              actionNode.listeners.push(listener2);
            }
          };
          null !== ReactSharedInternals.T ? setPendingState(true) : actionNode.isTransition = false;
          setState(actionNode);
          setPendingState = actionQueue.pending;
          null === setPendingState ? (actionNode.next = actionQueue.pending = actionNode, runActionStateAction(actionQueue, actionNode)) : (actionNode.next = setPendingState.next, actionQueue.pending = setPendingState.next = actionNode);
        }
      }
      function runActionStateAction(actionQueue, node) {
        var action = node.action, payload = node.payload, prevState = actionQueue.state;
        if (node.isTransition) {
          var prevTransition = ReactSharedInternals.T, currentTransition = {};
          ReactSharedInternals.T = currentTransition;
          try {
            var returnValue = action(prevState, payload), onStartTransitionFinish = ReactSharedInternals.S;
            null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
            handleActionReturnValue(actionQueue, node, returnValue);
          } catch (error) {
            onActionError(actionQueue, node, error);
          } finally {
            ReactSharedInternals.T = prevTransition;
          }
        } else
          try {
            prevTransition = action(prevState, payload), handleActionReturnValue(actionQueue, node, prevTransition);
          } catch (error$38) {
            onActionError(actionQueue, node, error$38);
          }
      }
      function handleActionReturnValue(actionQueue, node, returnValue) {
        null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then ? returnValue.then(
          function(nextState) {
            onActionSuccess(actionQueue, node, nextState);
          },
          function(error) {
            return onActionError(actionQueue, node, error);
          }
        ) : onActionSuccess(actionQueue, node, returnValue);
      }
      function onActionSuccess(actionQueue, actionNode, nextState) {
        actionNode.status = "fulfilled";
        actionNode.value = nextState;
        notifyActionListeners(actionNode);
        actionQueue.state = nextState;
        actionNode = actionQueue.pending;
        null !== actionNode && (nextState = actionNode.next, nextState === actionNode ? actionQueue.pending = null : (nextState = nextState.next, actionNode.next = nextState, runActionStateAction(actionQueue, nextState)));
      }
      function onActionError(actionQueue, actionNode, error) {
        var last2 = actionQueue.pending;
        actionQueue.pending = null;
        if (null !== last2) {
          last2 = last2.next;
          do
            actionNode.status = "rejected", actionNode.reason = error, notifyActionListeners(actionNode), actionNode = actionNode.next;
          while (actionNode !== last2);
        }
        actionQueue.action = null;
      }
      function notifyActionListeners(actionNode) {
        actionNode = actionNode.listeners;
        for (var i = 0; i < actionNode.length; i++) (0, actionNode[i])();
      }
      function actionStateReducer(oldState, newState) {
        return newState;
      }
      function mountActionState(action, initialStateProp) {
        if (isHydrating) {
          var ssrFormState = workInProgressRoot.formState;
          if (null !== ssrFormState) {
            a: {
              var JSCompiler_inline_result = currentlyRenderingFiber;
              if (isHydrating) {
                if (nextHydratableInstance) {
                  b: {
                    var JSCompiler_inline_result$jscomp$0 = nextHydratableInstance;
                    for (var inRootOrSingleton = rootOrSingletonContext; 8 !== JSCompiler_inline_result$jscomp$0.nodeType; ) {
                      if (!inRootOrSingleton) {
                        JSCompiler_inline_result$jscomp$0 = null;
                        break b;
                      }
                      JSCompiler_inline_result$jscomp$0 = getNextHydratable(
                        JSCompiler_inline_result$jscomp$0.nextSibling
                      );
                      if (null === JSCompiler_inline_result$jscomp$0) {
                        JSCompiler_inline_result$jscomp$0 = null;
                        break b;
                      }
                    }
                    inRootOrSingleton = JSCompiler_inline_result$jscomp$0.data;
                    JSCompiler_inline_result$jscomp$0 = "F!" === inRootOrSingleton || "F" === inRootOrSingleton ? JSCompiler_inline_result$jscomp$0 : null;
                  }
                  if (JSCompiler_inline_result$jscomp$0) {
                    nextHydratableInstance = getNextHydratable(
                      JSCompiler_inline_result$jscomp$0.nextSibling
                    );
                    JSCompiler_inline_result = "F!" === JSCompiler_inline_result$jscomp$0.data;
                    break a;
                  }
                }
                throwOnHydrationMismatch(JSCompiler_inline_result);
              }
              JSCompiler_inline_result = false;
            }
            JSCompiler_inline_result && (initialStateProp = ssrFormState[0]);
          }
        }
        ssrFormState = mountWorkInProgressHook();
        ssrFormState.memoizedState = ssrFormState.baseState = initialStateProp;
        JSCompiler_inline_result = {
          pending: null,
          lanes: 0,
          dispatch: null,
          lastRenderedReducer: actionStateReducer,
          lastRenderedState: initialStateProp
        };
        ssrFormState.queue = JSCompiler_inline_result;
        ssrFormState = dispatchSetState.bind(
          null,
          currentlyRenderingFiber,
          JSCompiler_inline_result
        );
        JSCompiler_inline_result.dispatch = ssrFormState;
        JSCompiler_inline_result = mountStateImpl(false);
        inRootOrSingleton = dispatchOptimisticSetState.bind(
          null,
          currentlyRenderingFiber,
          false,
          JSCompiler_inline_result.queue
        );
        JSCompiler_inline_result = mountWorkInProgressHook();
        JSCompiler_inline_result$jscomp$0 = {
          state: initialStateProp,
          dispatch: null,
          action,
          pending: null
        };
        JSCompiler_inline_result.queue = JSCompiler_inline_result$jscomp$0;
        ssrFormState = dispatchActionState.bind(
          null,
          currentlyRenderingFiber,
          JSCompiler_inline_result$jscomp$0,
          inRootOrSingleton,
          ssrFormState
        );
        JSCompiler_inline_result$jscomp$0.dispatch = ssrFormState;
        JSCompiler_inline_result.memoizedState = action;
        return [initialStateProp, ssrFormState, false];
      }
      function updateActionState(action) {
        var stateHook = updateWorkInProgressHook();
        return updateActionStateImpl(stateHook, currentHook, action);
      }
      function updateActionStateImpl(stateHook, currentStateHook, action) {
        currentStateHook = updateReducerImpl(
          stateHook,
          currentStateHook,
          actionStateReducer
        )[0];
        stateHook = updateReducer(basicStateReducer)[0];
        if ("object" === typeof currentStateHook && null !== currentStateHook && "function" === typeof currentStateHook.then)
          try {
            var state = useThenable(currentStateHook);
          } catch (x2) {
            if (x2 === SuspenseException) throw SuspenseActionException;
            throw x2;
          }
        else state = currentStateHook;
        currentStateHook = updateWorkInProgressHook();
        var actionQueue = currentStateHook.queue, dispatch = actionQueue.dispatch;
        action !== currentStateHook.memoizedState && (currentlyRenderingFiber.flags |= 2048, pushSimpleEffect(
          9,
          createEffectInstance(),
          actionStateActionEffect.bind(null, actionQueue, action),
          null
        ));
        return [state, dispatch, stateHook];
      }
      function actionStateActionEffect(actionQueue, action) {
        actionQueue.action = action;
      }
      function rerenderActionState(action) {
        var stateHook = updateWorkInProgressHook(), currentStateHook = currentHook;
        if (null !== currentStateHook)
          return updateActionStateImpl(stateHook, currentStateHook, action);
        updateWorkInProgressHook();
        stateHook = stateHook.memoizedState;
        currentStateHook = updateWorkInProgressHook();
        var dispatch = currentStateHook.queue.dispatch;
        currentStateHook.memoizedState = action;
        return [stateHook, dispatch, false];
      }
      function pushSimpleEffect(tag, inst, create, createDeps) {
        tag = { tag, create, deps: createDeps, inst, next: null };
        inst = currentlyRenderingFiber.updateQueue;
        null === inst && (inst = createFunctionComponentUpdateQueue(), currentlyRenderingFiber.updateQueue = inst);
        create = inst.lastEffect;
        null === create ? inst.lastEffect = tag.next = tag : (createDeps = create.next, create.next = tag, tag.next = createDeps, inst.lastEffect = tag);
        return tag;
      }
      function createEffectInstance() {
        return { destroy: void 0, resource: void 0 };
      }
      function updateRef() {
        return updateWorkInProgressHook().memoizedState;
      }
      function mountEffectImpl(fiberFlags, hookFlags, create, createDeps) {
        var hook = mountWorkInProgressHook();
        createDeps = void 0 === createDeps ? null : createDeps;
        currentlyRenderingFiber.flags |= fiberFlags;
        hook.memoizedState = pushSimpleEffect(
          1 | hookFlags,
          createEffectInstance(),
          create,
          createDeps
        );
      }
      function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var inst = hook.memoizedState.inst;
        null !== currentHook && null !== deps && areHookInputsEqual(deps, currentHook.memoizedState.deps) ? hook.memoizedState = pushSimpleEffect(hookFlags, inst, create, deps) : (currentlyRenderingFiber.flags |= fiberFlags, hook.memoizedState = pushSimpleEffect(
          1 | hookFlags,
          inst,
          create,
          deps
        ));
      }
      function mountEffect(create, createDeps) {
        mountEffectImpl(8390656, 8, create, createDeps);
      }
      function updateEffect(create, createDeps) {
        updateEffectImpl(2048, 8, create, createDeps);
      }
      function updateInsertionEffect(create, deps) {
        return updateEffectImpl(4, 2, create, deps);
      }
      function updateLayoutEffect(create, deps) {
        return updateEffectImpl(4, 4, create, deps);
      }
      function imperativeHandleEffect(create, ref) {
        if ("function" === typeof ref) {
          create = create();
          var refCleanup = ref(create);
          return function() {
            "function" === typeof refCleanup ? refCleanup() : ref(null);
          };
        }
        if (null !== ref && void 0 !== ref)
          return create = create(), ref.current = create, function() {
            ref.current = null;
          };
      }
      function updateImperativeHandle(ref, create, deps) {
        deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
        updateEffectImpl(4, 4, imperativeHandleEffect.bind(null, create, ref), deps);
      }
      function mountDebugValue() {
      }
      function updateCallback(callback, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var prevState = hook.memoizedState;
        if (null !== deps && areHookInputsEqual(deps, prevState[1]))
          return prevState[0];
        hook.memoizedState = [callback, deps];
        return callback;
      }
      function updateMemo(nextCreate, deps) {
        var hook = updateWorkInProgressHook();
        deps = void 0 === deps ? null : deps;
        var prevState = hook.memoizedState;
        if (null !== deps && areHookInputsEqual(deps, prevState[1]))
          return prevState[0];
        prevState = nextCreate();
        if (shouldDoubleInvokeUserFnsInHooksDEV) {
          setIsStrictModeForDevtools(true);
          try {
            nextCreate();
          } finally {
            setIsStrictModeForDevtools(false);
          }
        }
        hook.memoizedState = [prevState, deps];
        return prevState;
      }
      function mountDeferredValueImpl(hook, value, initialValue) {
        if (void 0 === initialValue || 0 !== (renderLanes & 1073741824))
          return hook.memoizedState = value;
        hook.memoizedState = initialValue;
        hook = requestDeferredLane();
        currentlyRenderingFiber.lanes |= hook;
        workInProgressRootSkippedLanes |= hook;
        return initialValue;
      }
      function updateDeferredValueImpl(hook, prevValue, value, initialValue) {
        if (objectIs(value, prevValue)) return value;
        if (null !== currentTreeHiddenStackCursor.current)
          return hook = mountDeferredValueImpl(hook, value, initialValue), objectIs(hook, prevValue) || (didReceiveUpdate = true), hook;
        if (0 === (renderLanes & 42))
          return didReceiveUpdate = true, hook.memoizedState = value;
        hook = requestDeferredLane();
        currentlyRenderingFiber.lanes |= hook;
        workInProgressRootSkippedLanes |= hook;
        return prevValue;
      }
      function startTransition(fiber, queue, pendingState, finishedState, callback) {
        var previousPriority = ReactDOMSharedInternals.p;
        ReactDOMSharedInternals.p = 0 !== previousPriority && 8 > previousPriority ? previousPriority : 8;
        var prevTransition = ReactSharedInternals.T, currentTransition = {};
        ReactSharedInternals.T = currentTransition;
        dispatchOptimisticSetState(fiber, false, queue, pendingState);
        try {
          var returnValue = callback(), onStartTransitionFinish = ReactSharedInternals.S;
          null !== onStartTransitionFinish && onStartTransitionFinish(currentTransition, returnValue);
          if (null !== returnValue && "object" === typeof returnValue && "function" === typeof returnValue.then) {
            var thenableForFinishedState = chainThenableValue(
              returnValue,
              finishedState
            );
            dispatchSetStateInternal(
              fiber,
              queue,
              thenableForFinishedState,
              requestUpdateLane(fiber)
            );
          } else
            dispatchSetStateInternal(
              fiber,
              queue,
              finishedState,
              requestUpdateLane(fiber)
            );
        } catch (error) {
          dispatchSetStateInternal(
            fiber,
            queue,
            { then: function() {
            }, status: "rejected", reason: error },
            requestUpdateLane()
          );
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
        }
      }
      function noop$2() {
      }
      function startHostTransition(formFiber, pendingState, action, formData) {
        if (5 !== formFiber.tag) throw Error(formatProdErrorMessage3(476));
        var queue = ensureFormComponentIsStateful(formFiber).queue;
        startTransition(
          formFiber,
          queue,
          pendingState,
          sharedNotPendingObject,
          null === action ? noop$2 : function() {
            requestFormReset$1(formFiber);
            return action(formData);
          }
        );
      }
      function ensureFormComponentIsStateful(formFiber) {
        var existingStateHook = formFiber.memoizedState;
        if (null !== existingStateHook) return existingStateHook;
        existingStateHook = {
          memoizedState: sharedNotPendingObject,
          baseState: sharedNotPendingObject,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: sharedNotPendingObject
          },
          next: null
        };
        var initialResetState = {};
        existingStateHook.next = {
          memoizedState: initialResetState,
          baseState: initialResetState,
          baseQueue: null,
          queue: {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialResetState
          },
          next: null
        };
        formFiber.memoizedState = existingStateHook;
        formFiber = formFiber.alternate;
        null !== formFiber && (formFiber.memoizedState = existingStateHook);
        return existingStateHook;
      }
      function requestFormReset$1(formFiber) {
        var resetStateQueue = ensureFormComponentIsStateful(formFiber).next.queue;
        dispatchSetStateInternal(formFiber, resetStateQueue, {}, requestUpdateLane());
      }
      function useHostTransitionStatus() {
        return readContext(HostTransitionContext);
      }
      function updateId() {
        return updateWorkInProgressHook().memoizedState;
      }
      function updateRefresh() {
        return updateWorkInProgressHook().memoizedState;
      }
      function refreshCache(fiber) {
        for (var provider = fiber.return; null !== provider; ) {
          switch (provider.tag) {
            case 24:
            case 3:
              var lane = requestUpdateLane();
              fiber = createUpdate(lane);
              var root$41 = enqueueUpdate(provider, fiber, lane);
              null !== root$41 && (scheduleUpdateOnFiber(root$41, provider, lane), entangleTransitions(root$41, provider, lane));
              provider = { cache: createCache() };
              fiber.payload = provider;
              return;
          }
          provider = provider.return;
        }
      }
      function dispatchReducerAction(fiber, queue, action) {
        var lane = requestUpdateLane();
        action = {
          lane,
          revertLane: 0,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        isRenderPhaseUpdate(fiber) ? enqueueRenderPhaseUpdate(queue, action) : (action = enqueueConcurrentHookUpdate(fiber, queue, action, lane), null !== action && (scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane)));
      }
      function dispatchSetState(fiber, queue, action) {
        var lane = requestUpdateLane();
        dispatchSetStateInternal(fiber, queue, action, lane);
      }
      function dispatchSetStateInternal(fiber, queue, action, lane) {
        var update = {
          lane,
          revertLane: 0,
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) enqueueRenderPhaseUpdate(queue, update);
        else {
          var alternate = fiber.alternate;
          if (0 === fiber.lanes && (null === alternate || 0 === alternate.lanes) && (alternate = queue.lastRenderedReducer, null !== alternate))
            try {
              var currentState = queue.lastRenderedState, eagerState = alternate(currentState, action);
              update.hasEagerState = true;
              update.eagerState = eagerState;
              if (objectIs(eagerState, currentState))
                return enqueueUpdate$1(fiber, queue, update, 0), null === workInProgressRoot && finishQueueingConcurrentUpdates(), false;
            } catch (error) {
            } finally {
            }
          action = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
          if (null !== action)
            return scheduleUpdateOnFiber(action, fiber, lane), entangleTransitionUpdate(action, queue, lane), true;
        }
        return false;
      }
      function dispatchOptimisticSetState(fiber, throwIfDuringRender, queue, action) {
        action = {
          lane: 2,
          revertLane: requestTransitionLane(),
          action,
          hasEagerState: false,
          eagerState: null,
          next: null
        };
        if (isRenderPhaseUpdate(fiber)) {
          if (throwIfDuringRender) throw Error(formatProdErrorMessage3(479));
        } else
          throwIfDuringRender = enqueueConcurrentHookUpdate(
            fiber,
            queue,
            action,
            2
          ), null !== throwIfDuringRender && scheduleUpdateOnFiber(throwIfDuringRender, fiber, 2);
      }
      function isRenderPhaseUpdate(fiber) {
        var alternate = fiber.alternate;
        return fiber === currentlyRenderingFiber || null !== alternate && alternate === currentlyRenderingFiber;
      }
      function enqueueRenderPhaseUpdate(queue, update) {
        didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
        var pending = queue.pending;
        null === pending ? update.next = update : (update.next = pending.next, pending.next = update);
        queue.pending = update;
      }
      function entangleTransitionUpdate(root3, queue, lane) {
        if (0 !== (lane & 4194048)) {
          var queueLanes = queue.lanes;
          queueLanes &= root3.pendingLanes;
          lane |= queueLanes;
          queue.lanes = lane;
          markRootEntangled(root3, lane);
        }
      }
      var ContextOnlyDispatcher = {
        readContext,
        use,
        useCallback: throwInvalidHookError,
        useContext: throwInvalidHookError,
        useEffect: throwInvalidHookError,
        useImperativeHandle: throwInvalidHookError,
        useLayoutEffect: throwInvalidHookError,
        useInsertionEffect: throwInvalidHookError,
        useMemo: throwInvalidHookError,
        useReducer: throwInvalidHookError,
        useRef: throwInvalidHookError,
        useState: throwInvalidHookError,
        useDebugValue: throwInvalidHookError,
        useDeferredValue: throwInvalidHookError,
        useTransition: throwInvalidHookError,
        useSyncExternalStore: throwInvalidHookError,
        useId: throwInvalidHookError,
        useHostTransitionStatus: throwInvalidHookError,
        useFormState: throwInvalidHookError,
        useActionState: throwInvalidHookError,
        useOptimistic: throwInvalidHookError,
        useMemoCache: throwInvalidHookError,
        useCacheRefresh: throwInvalidHookError
      };
      var HooksDispatcherOnMount = {
        readContext,
        use,
        useCallback: function(callback, deps) {
          mountWorkInProgressHook().memoizedState = [
            callback,
            void 0 === deps ? null : deps
          ];
          return callback;
        },
        useContext: readContext,
        useEffect: mountEffect,
        useImperativeHandle: function(ref, create, deps) {
          deps = null !== deps && void 0 !== deps ? deps.concat([ref]) : null;
          mountEffectImpl(
            4194308,
            4,
            imperativeHandleEffect.bind(null, create, ref),
            deps
          );
        },
        useLayoutEffect: function(create, deps) {
          return mountEffectImpl(4194308, 4, create, deps);
        },
        useInsertionEffect: function(create, deps) {
          mountEffectImpl(4, 2, create, deps);
        },
        useMemo: function(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          deps = void 0 === deps ? null : deps;
          var nextValue = nextCreate();
          if (shouldDoubleInvokeUserFnsInHooksDEV) {
            setIsStrictModeForDevtools(true);
            try {
              nextCreate();
            } finally {
              setIsStrictModeForDevtools(false);
            }
          }
          hook.memoizedState = [nextValue, deps];
          return nextValue;
        },
        useReducer: function(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          if (void 0 !== init) {
            var initialState12 = init(initialArg);
            if (shouldDoubleInvokeUserFnsInHooksDEV) {
              setIsStrictModeForDevtools(true);
              try {
                init(initialArg);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          } else initialState12 = initialArg;
          hook.memoizedState = hook.baseState = initialState12;
          reducer = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState12
          };
          hook.queue = reducer;
          reducer = reducer.dispatch = dispatchReducerAction.bind(
            null,
            currentlyRenderingFiber,
            reducer
          );
          return [hook.memoizedState, reducer];
        },
        useRef: function(initialValue) {
          var hook = mountWorkInProgressHook();
          initialValue = { current: initialValue };
          return hook.memoizedState = initialValue;
        },
        useState: function(initialState12) {
          initialState12 = mountStateImpl(initialState12);
          var queue = initialState12.queue, dispatch = dispatchSetState.bind(null, currentlyRenderingFiber, queue);
          queue.dispatch = dispatch;
          return [initialState12.memoizedState, dispatch];
        },
        useDebugValue: mountDebugValue,
        useDeferredValue: function(value, initialValue) {
          var hook = mountWorkInProgressHook();
          return mountDeferredValueImpl(hook, value, initialValue);
        },
        useTransition: function() {
          var stateHook = mountStateImpl(false);
          stateHook = startTransition.bind(
            null,
            currentlyRenderingFiber,
            stateHook.queue,
            true,
            false
          );
          mountWorkInProgressHook().memoizedState = stateHook;
          return [false, stateHook];
        },
        useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber, hook = mountWorkInProgressHook();
          if (isHydrating) {
            if (void 0 === getServerSnapshot)
              throw Error(formatProdErrorMessage3(407));
            getServerSnapshot = getServerSnapshot();
          } else {
            getServerSnapshot = getSnapshot();
            if (null === workInProgressRoot)
              throw Error(formatProdErrorMessage3(349));
            0 !== (workInProgressRootRenderLanes & 124) || pushStoreConsistencyCheck(fiber, getSnapshot, getServerSnapshot);
          }
          hook.memoizedState = getServerSnapshot;
          var inst = { value: getServerSnapshot, getSnapshot };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [
            subscribe
          ]);
          fiber.flags |= 2048;
          pushSimpleEffect(
            9,
            createEffectInstance(),
            updateStoreInstance.bind(
              null,
              fiber,
              inst,
              getServerSnapshot,
              getSnapshot
            ),
            null
          );
          return getServerSnapshot;
        },
        useId: function() {
          var hook = mountWorkInProgressHook(), identifierPrefix = workInProgressRoot.identifierPrefix;
          if (isHydrating) {
            var JSCompiler_inline_result = treeContextOverflow;
            var idWithLeadingBit = treeContextId;
            JSCompiler_inline_result = (idWithLeadingBit & ~(1 << 32 - clz32(idWithLeadingBit) - 1)).toString(32) + JSCompiler_inline_result;
            identifierPrefix = "\xAB" + identifierPrefix + "R" + JSCompiler_inline_result;
            JSCompiler_inline_result = localIdCounter++;
            0 < JSCompiler_inline_result && (identifierPrefix += "H" + JSCompiler_inline_result.toString(32));
            identifierPrefix += "\xBB";
          } else
            JSCompiler_inline_result = globalClientIdCounter++, identifierPrefix = "\xAB" + identifierPrefix + "r" + JSCompiler_inline_result.toString(32) + "\xBB";
          return hook.memoizedState = identifierPrefix;
        },
        useHostTransitionStatus,
        useFormState: mountActionState,
        useActionState: mountActionState,
        useOptimistic: function(passthrough) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = hook.baseState = passthrough;
          var queue = {
            pending: null,
            lanes: 0,
            dispatch: null,
            lastRenderedReducer: null,
            lastRenderedState: null
          };
          hook.queue = queue;
          hook = dispatchOptimisticSetState.bind(
            null,
            currentlyRenderingFiber,
            true,
            queue
          );
          queue.dispatch = hook;
          return [passthrough, hook];
        },
        useMemoCache,
        useCacheRefresh: function() {
          return mountWorkInProgressHook().memoizedState = refreshCache.bind(
            null,
            currentlyRenderingFiber
          );
        }
      };
      var HooksDispatcherOnUpdate = {
        readContext,
        use,
        useCallback: updateCallback,
        useContext: readContext,
        useEffect: updateEffect,
        useImperativeHandle: updateImperativeHandle,
        useInsertionEffect: updateInsertionEffect,
        useLayoutEffect: updateLayoutEffect,
        useMemo: updateMemo,
        useReducer: updateReducer,
        useRef: updateRef,
        useState: function() {
          return updateReducer(basicStateReducer);
        },
        useDebugValue: mountDebugValue,
        useDeferredValue: function(value, initialValue) {
          var hook = updateWorkInProgressHook();
          return updateDeferredValueImpl(
            hook,
            currentHook.memoizedState,
            value,
            initialValue
          );
        },
        useTransition: function() {
          var booleanOrThenable = updateReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
          return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
          ];
        },
        useSyncExternalStore: updateSyncExternalStore,
        useId: updateId,
        useHostTransitionStatus,
        useFormState: updateActionState,
        useActionState: updateActionState,
        useOptimistic: function(passthrough, reducer) {
          var hook = updateWorkInProgressHook();
          return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
        },
        useMemoCache,
        useCacheRefresh: updateRefresh
      };
      var HooksDispatcherOnRerender = {
        readContext,
        use,
        useCallback: updateCallback,
        useContext: readContext,
        useEffect: updateEffect,
        useImperativeHandle: updateImperativeHandle,
        useInsertionEffect: updateInsertionEffect,
        useLayoutEffect: updateLayoutEffect,
        useMemo: updateMemo,
        useReducer: rerenderReducer,
        useRef: updateRef,
        useState: function() {
          return rerenderReducer(basicStateReducer);
        },
        useDebugValue: mountDebugValue,
        useDeferredValue: function(value, initialValue) {
          var hook = updateWorkInProgressHook();
          return null === currentHook ? mountDeferredValueImpl(hook, value, initialValue) : updateDeferredValueImpl(
            hook,
            currentHook.memoizedState,
            value,
            initialValue
          );
        },
        useTransition: function() {
          var booleanOrThenable = rerenderReducer(basicStateReducer)[0], start = updateWorkInProgressHook().memoizedState;
          return [
            "boolean" === typeof booleanOrThenable ? booleanOrThenable : useThenable(booleanOrThenable),
            start
          ];
        },
        useSyncExternalStore: updateSyncExternalStore,
        useId: updateId,
        useHostTransitionStatus,
        useFormState: rerenderActionState,
        useActionState: rerenderActionState,
        useOptimistic: function(passthrough, reducer) {
          var hook = updateWorkInProgressHook();
          if (null !== currentHook)
            return updateOptimisticImpl(hook, currentHook, passthrough, reducer);
          hook.baseState = passthrough;
          return [passthrough, hook.queue.dispatch];
        },
        useMemoCache,
        useCacheRefresh: updateRefresh
      };
      var thenableState = null;
      var thenableIndexCounter = 0;
      function unwrapThenable(thenable) {
        var index2 = thenableIndexCounter;
        thenableIndexCounter += 1;
        null === thenableState && (thenableState = []);
        return trackUsedThenable(thenableState, thenable, index2);
      }
      function coerceRef(workInProgress2, element) {
        element = element.props.ref;
        workInProgress2.ref = void 0 !== element ? element : null;
      }
      function throwOnInvalidObjectType(returnFiber, newChild) {
        if (newChild.$$typeof === REACT_LEGACY_ELEMENT_TYPE)
          throw Error(formatProdErrorMessage3(525));
        returnFiber = Object.prototype.toString.call(newChild);
        throw Error(
          formatProdErrorMessage3(
            31,
            "[object Object]" === returnFiber ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : returnFiber
          )
        );
      }
      function resolveLazy(lazyType) {
        var init = lazyType._init;
        return init(lazyType._payload);
      }
      function createChildReconciler(shouldTrackSideEffects) {
        function deleteChild(returnFiber, childToDelete) {
          if (shouldTrackSideEffects) {
            var deletions = returnFiber.deletions;
            null === deletions ? (returnFiber.deletions = [childToDelete], returnFiber.flags |= 16) : deletions.push(childToDelete);
          }
        }
        function deleteRemainingChildren(returnFiber, currentFirstChild) {
          if (!shouldTrackSideEffects) return null;
          for (; null !== currentFirstChild; )
            deleteChild(returnFiber, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
          return null;
        }
        function mapRemainingChildren(currentFirstChild) {
          for (var existingChildren = /* @__PURE__ */ new Map(); null !== currentFirstChild; )
            null !== currentFirstChild.key ? existingChildren.set(currentFirstChild.key, currentFirstChild) : existingChildren.set(currentFirstChild.index, currentFirstChild), currentFirstChild = currentFirstChild.sibling;
          return existingChildren;
        }
        function useFiber(fiber, pendingProps) {
          fiber = createWorkInProgress(fiber, pendingProps);
          fiber.index = 0;
          fiber.sibling = null;
          return fiber;
        }
        function placeChild(newFiber, lastPlacedIndex, newIndex) {
          newFiber.index = newIndex;
          if (!shouldTrackSideEffects)
            return newFiber.flags |= 1048576, lastPlacedIndex;
          newIndex = newFiber.alternate;
          if (null !== newIndex)
            return newIndex = newIndex.index, newIndex < lastPlacedIndex ? (newFiber.flags |= 67108866, lastPlacedIndex) : newIndex;
          newFiber.flags |= 67108866;
          return lastPlacedIndex;
        }
        function placeSingleChild(newFiber) {
          shouldTrackSideEffects && null === newFiber.alternate && (newFiber.flags |= 67108866);
          return newFiber;
        }
        function updateTextNode(returnFiber, current2, textContent, lanes) {
          if (null === current2 || 6 !== current2.tag)
            return current2 = createFiberFromText(textContent, returnFiber.mode, lanes), current2.return = returnFiber, current2;
          current2 = useFiber(current2, textContent);
          current2.return = returnFiber;
          return current2;
        }
        function updateElement(returnFiber, current2, element, lanes) {
          var elementType = element.type;
          if (elementType === REACT_FRAGMENT_TYPE)
            return updateFragment(
              returnFiber,
              current2,
              element.props.children,
              lanes,
              element.key
            );
          if (null !== current2 && (current2.elementType === elementType || "object" === typeof elementType && null !== elementType && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type))
            return current2 = useFiber(current2, element.props), coerceRef(current2, element), current2.return = returnFiber, current2;
          current2 = createFiberFromTypeAndProps(
            element.type,
            element.key,
            element.props,
            null,
            returnFiber.mode,
            lanes
          );
          coerceRef(current2, element);
          current2.return = returnFiber;
          return current2;
        }
        function updatePortal(returnFiber, current2, portal, lanes) {
          if (null === current2 || 4 !== current2.tag || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation)
            return current2 = createFiberFromPortal(portal, returnFiber.mode, lanes), current2.return = returnFiber, current2;
          current2 = useFiber(current2, portal.children || []);
          current2.return = returnFiber;
          return current2;
        }
        function updateFragment(returnFiber, current2, fragment, lanes, key) {
          if (null === current2 || 7 !== current2.tag)
            return current2 = createFiberFromFragment(
              fragment,
              returnFiber.mode,
              lanes,
              key
            ), current2.return = returnFiber, current2;
          current2 = useFiber(current2, fragment);
          current2.return = returnFiber;
          return current2;
        }
        function createChild(returnFiber, newChild, lanes) {
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return newChild = createFiberFromText(
              "" + newChild,
              returnFiber.mode,
              lanes
            ), newChild.return = returnFiber, newChild;
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return lanes = createFiberFromTypeAndProps(
                  newChild.type,
                  newChild.key,
                  newChild.props,
                  null,
                  returnFiber.mode,
                  lanes
                ), coerceRef(lanes, newChild), lanes.return = returnFiber, lanes;
              case REACT_PORTAL_TYPE:
                return newChild = createFiberFromPortal(
                  newChild,
                  returnFiber.mode,
                  lanes
                ), newChild.return = returnFiber, newChild;
              case REACT_LAZY_TYPE:
                var init = newChild._init;
                newChild = init(newChild._payload);
                return createChild(returnFiber, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild))
              return newChild = createFiberFromFragment(
                newChild,
                returnFiber.mode,
                lanes,
                null
              ), newChild.return = returnFiber, newChild;
            if ("function" === typeof newChild.then)
              return createChild(returnFiber, unwrapThenable(newChild), lanes);
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return createChild(
                returnFiber,
                readContextDuringReconciliation(returnFiber, newChild),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return null;
        }
        function updateSlot(returnFiber, oldFiber, newChild, lanes) {
          var key = null !== oldFiber ? oldFiber.key : null;
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return null !== key ? null : updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return newChild.key === key ? updateElement(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_PORTAL_TYPE:
                return newChild.key === key ? updatePortal(returnFiber, oldFiber, newChild, lanes) : null;
              case REACT_LAZY_TYPE:
                return key = newChild._init, newChild = key(newChild._payload), updateSlot(returnFiber, oldFiber, newChild, lanes);
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild))
              return null !== key ? null : updateFragment(returnFiber, oldFiber, newChild, lanes, null);
            if ("function" === typeof newChild.then)
              return updateSlot(
                returnFiber,
                oldFiber,
                unwrapThenable(newChild),
                lanes
              );
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return updateSlot(
                returnFiber,
                oldFiber,
                readContextDuringReconciliation(returnFiber, newChild),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return null;
        }
        function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
          if ("string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild)
            return existingChildren = existingChildren.get(newIdx) || null, updateTextNode(returnFiber, existingChildren, "" + newChild, lanes);
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                return existingChildren = existingChildren.get(
                  null === newChild.key ? newIdx : newChild.key
                ) || null, updateElement(returnFiber, existingChildren, newChild, lanes);
              case REACT_PORTAL_TYPE:
                return existingChildren = existingChildren.get(
                  null === newChild.key ? newIdx : newChild.key
                ) || null, updatePortal(returnFiber, existingChildren, newChild, lanes);
              case REACT_LAZY_TYPE:
                var init = newChild._init;
                newChild = init(newChild._payload);
                return updateFromMap(
                  existingChildren,
                  returnFiber,
                  newIdx,
                  newChild,
                  lanes
                );
            }
            if (isArrayImpl(newChild) || getIteratorFn(newChild))
              return existingChildren = existingChildren.get(newIdx) || null, updateFragment(returnFiber, existingChildren, newChild, lanes, null);
            if ("function" === typeof newChild.then)
              return updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                unwrapThenable(newChild),
                lanes
              );
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return updateFromMap(
                existingChildren,
                returnFiber,
                newIdx,
                readContextDuringReconciliation(returnFiber, newChild),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return null;
        }
        function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null; null !== oldFiber && newIdx < newChildren.length; newIdx++) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(
              returnFiber,
              oldFiber,
              newChildren[newIdx],
              lanes
            );
            if (null === newFiber) {
              null === oldFiber && (oldFiber = nextOldFiber);
              break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (newIdx === newChildren.length)
            return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
          if (null === oldFiber) {
            for (; newIdx < newChildren.length; newIdx++)
              oldFiber = createChild(returnFiber, newChildren[newIdx], lanes), null !== oldFiber && (currentFirstChild = placeChild(
                oldFiber,
                currentFirstChild,
                newIdx
              ), null === previousNewFiber ? resultingFirstChild = oldFiber : previousNewFiber.sibling = oldFiber, previousNewFiber = oldFiber);
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          for (oldFiber = mapRemainingChildren(oldFiber); newIdx < newChildren.length; newIdx++)
            nextOldFiber = updateFromMap(
              oldFiber,
              returnFiber,
              newIdx,
              newChildren[newIdx],
              lanes
            ), null !== nextOldFiber && (shouldTrackSideEffects && null !== nextOldFiber.alternate && oldFiber.delete(
              null === nextOldFiber.key ? newIdx : nextOldFiber.key
            ), currentFirstChild = placeChild(
              nextOldFiber,
              currentFirstChild,
              newIdx
            ), null === previousNewFiber ? resultingFirstChild = nextOldFiber : previousNewFiber.sibling = nextOldFiber, previousNewFiber = nextOldFiber);
          shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
          });
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildren, lanes) {
          if (null == newChildren) throw Error(formatProdErrorMessage3(151));
          for (var resultingFirstChild = null, previousNewFiber = null, oldFiber = currentFirstChild, newIdx = currentFirstChild = 0, nextOldFiber = null, step = newChildren.next(); null !== oldFiber && !step.done; newIdx++, step = newChildren.next()) {
            oldFiber.index > newIdx ? (nextOldFiber = oldFiber, oldFiber = null) : nextOldFiber = oldFiber.sibling;
            var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
            if (null === newFiber) {
              null === oldFiber && (oldFiber = nextOldFiber);
              break;
            }
            shouldTrackSideEffects && oldFiber && null === newFiber.alternate && deleteChild(returnFiber, oldFiber);
            currentFirstChild = placeChild(newFiber, currentFirstChild, newIdx);
            null === previousNewFiber ? resultingFirstChild = newFiber : previousNewFiber.sibling = newFiber;
            previousNewFiber = newFiber;
            oldFiber = nextOldFiber;
          }
          if (step.done)
            return deleteRemainingChildren(returnFiber, oldFiber), isHydrating && pushTreeFork(returnFiber, newIdx), resultingFirstChild;
          if (null === oldFiber) {
            for (; !step.done; newIdx++, step = newChildren.next())
              step = createChild(returnFiber, step.value, lanes), null !== step && (currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
            isHydrating && pushTreeFork(returnFiber, newIdx);
            return resultingFirstChild;
          }
          for (oldFiber = mapRemainingChildren(oldFiber); !step.done; newIdx++, step = newChildren.next())
            step = updateFromMap(oldFiber, returnFiber, newIdx, step.value, lanes), null !== step && (shouldTrackSideEffects && null !== step.alternate && oldFiber.delete(null === step.key ? newIdx : step.key), currentFirstChild = placeChild(step, currentFirstChild, newIdx), null === previousNewFiber ? resultingFirstChild = step : previousNewFiber.sibling = step, previousNewFiber = step);
          shouldTrackSideEffects && oldFiber.forEach(function(child) {
            return deleteChild(returnFiber, child);
          });
          isHydrating && pushTreeFork(returnFiber, newIdx);
          return resultingFirstChild;
        }
        function reconcileChildFibersImpl(returnFiber, currentFirstChild, newChild, lanes) {
          "object" === typeof newChild && null !== newChild && newChild.type === REACT_FRAGMENT_TYPE && null === newChild.key && (newChild = newChild.props.children);
          if ("object" === typeof newChild && null !== newChild) {
            switch (newChild.$$typeof) {
              case REACT_ELEMENT_TYPE:
                a: {
                  for (var key = newChild.key; null !== currentFirstChild; ) {
                    if (currentFirstChild.key === key) {
                      key = newChild.type;
                      if (key === REACT_FRAGMENT_TYPE) {
                        if (7 === currentFirstChild.tag) {
                          deleteRemainingChildren(
                            returnFiber,
                            currentFirstChild.sibling
                          );
                          lanes = useFiber(
                            currentFirstChild,
                            newChild.props.children
                          );
                          lanes.return = returnFiber;
                          returnFiber = lanes;
                          break a;
                        }
                      } else if (currentFirstChild.elementType === key || "object" === typeof key && null !== key && key.$$typeof === REACT_LAZY_TYPE && resolveLazy(key) === currentFirstChild.type) {
                        deleteRemainingChildren(
                          returnFiber,
                          currentFirstChild.sibling
                        );
                        lanes = useFiber(currentFirstChild, newChild.props);
                        coerceRef(lanes, newChild);
                        lanes.return = returnFiber;
                        returnFiber = lanes;
                        break a;
                      }
                      deleteRemainingChildren(returnFiber, currentFirstChild);
                      break;
                    } else deleteChild(returnFiber, currentFirstChild);
                    currentFirstChild = currentFirstChild.sibling;
                  }
                  newChild.type === REACT_FRAGMENT_TYPE ? (lanes = createFiberFromFragment(
                    newChild.props.children,
                    returnFiber.mode,
                    lanes,
                    newChild.key
                  ), lanes.return = returnFiber, returnFiber = lanes) : (lanes = createFiberFromTypeAndProps(
                    newChild.type,
                    newChild.key,
                    newChild.props,
                    null,
                    returnFiber.mode,
                    lanes
                  ), coerceRef(lanes, newChild), lanes.return = returnFiber, returnFiber = lanes);
                }
                return placeSingleChild(returnFiber);
              case REACT_PORTAL_TYPE:
                a: {
                  for (key = newChild.key; null !== currentFirstChild; ) {
                    if (currentFirstChild.key === key)
                      if (4 === currentFirstChild.tag && currentFirstChild.stateNode.containerInfo === newChild.containerInfo && currentFirstChild.stateNode.implementation === newChild.implementation) {
                        deleteRemainingChildren(
                          returnFiber,
                          currentFirstChild.sibling
                        );
                        lanes = useFiber(currentFirstChild, newChild.children || []);
                        lanes.return = returnFiber;
                        returnFiber = lanes;
                        break a;
                      } else {
                        deleteRemainingChildren(returnFiber, currentFirstChild);
                        break;
                      }
                    else deleteChild(returnFiber, currentFirstChild);
                    currentFirstChild = currentFirstChild.sibling;
                  }
                  lanes = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  lanes.return = returnFiber;
                  returnFiber = lanes;
                }
                return placeSingleChild(returnFiber);
              case REACT_LAZY_TYPE:
                return key = newChild._init, newChild = key(newChild._payload), reconcileChildFibersImpl(
                  returnFiber,
                  currentFirstChild,
                  newChild,
                  lanes
                );
            }
            if (isArrayImpl(newChild))
              return reconcileChildrenArray(
                returnFiber,
                currentFirstChild,
                newChild,
                lanes
              );
            if (getIteratorFn(newChild)) {
              key = getIteratorFn(newChild);
              if ("function" !== typeof key) throw Error(formatProdErrorMessage3(150));
              newChild = key.call(newChild);
              return reconcileChildrenIterator(
                returnFiber,
                currentFirstChild,
                newChild,
                lanes
              );
            }
            if ("function" === typeof newChild.then)
              return reconcileChildFibersImpl(
                returnFiber,
                currentFirstChild,
                unwrapThenable(newChild),
                lanes
              );
            if (newChild.$$typeof === REACT_CONTEXT_TYPE)
              return reconcileChildFibersImpl(
                returnFiber,
                currentFirstChild,
                readContextDuringReconciliation(returnFiber, newChild),
                lanes
              );
            throwOnInvalidObjectType(returnFiber, newChild);
          }
          return "string" === typeof newChild && "" !== newChild || "number" === typeof newChild || "bigint" === typeof newChild ? (newChild = "" + newChild, null !== currentFirstChild && 6 === currentFirstChild.tag ? (deleteRemainingChildren(returnFiber, currentFirstChild.sibling), lanes = useFiber(currentFirstChild, newChild), lanes.return = returnFiber, returnFiber = lanes) : (deleteRemainingChildren(returnFiber, currentFirstChild), lanes = createFiberFromText(newChild, returnFiber.mode, lanes), lanes.return = returnFiber, returnFiber = lanes), placeSingleChild(returnFiber)) : deleteRemainingChildren(returnFiber, currentFirstChild);
        }
        return function(returnFiber, currentFirstChild, newChild, lanes) {
          try {
            thenableIndexCounter = 0;
            var firstChildFiber = reconcileChildFibersImpl(
              returnFiber,
              currentFirstChild,
              newChild,
              lanes
            );
            thenableState = null;
            return firstChildFiber;
          } catch (x2) {
            if (x2 === SuspenseException || x2 === SuspenseActionException) throw x2;
            var fiber = createFiberImplClass(29, x2, null, returnFiber.mode);
            fiber.lanes = lanes;
            fiber.return = returnFiber;
            return fiber;
          } finally {
          }
        };
      }
      var reconcileChildFibers = createChildReconciler(true);
      var mountChildFibers = createChildReconciler(false);
      var suspenseHandlerStackCursor = createCursor(null);
      var shellBoundary = null;
      function pushPrimaryTreeSuspenseHandler(handler) {
        var current2 = handler.alternate;
        push(suspenseStackCursor, suspenseStackCursor.current & 1);
        push(suspenseHandlerStackCursor, handler);
        null === shellBoundary && (null === current2 || null !== currentTreeHiddenStackCursor.current ? shellBoundary = handler : null !== current2.memoizedState && (shellBoundary = handler));
      }
      function pushOffscreenSuspenseHandler(fiber) {
        if (22 === fiber.tag) {
          if (push(suspenseStackCursor, suspenseStackCursor.current), push(suspenseHandlerStackCursor, fiber), null === shellBoundary) {
            var current2 = fiber.alternate;
            null !== current2 && null !== current2.memoizedState && (shellBoundary = fiber);
          }
        } else reuseSuspenseHandlerOnStack(fiber);
      }
      function reuseSuspenseHandlerOnStack() {
        push(suspenseStackCursor, suspenseStackCursor.current);
        push(suspenseHandlerStackCursor, suspenseHandlerStackCursor.current);
      }
      function popSuspenseHandler(fiber) {
        pop(suspenseHandlerStackCursor);
        shellBoundary === fiber && (shellBoundary = null);
        pop(suspenseStackCursor);
      }
      var suspenseStackCursor = createCursor(0);
      function findFirstSuspended(row) {
        for (var node = row; null !== node; ) {
          if (13 === node.tag) {
            var state = node.memoizedState;
            if (null !== state && (state = state.dehydrated, null === state || "$?" === state.data || isSuspenseInstanceFallback(state)))
              return node;
          } else if (19 === node.tag && void 0 !== node.memoizedProps.revealOrder) {
            if (0 !== (node.flags & 128)) return node;
          } else if (null !== node.child) {
            node.child.return = node;
            node = node.child;
            continue;
          }
          if (node === row) break;
          for (; null === node.sibling; ) {
            if (null === node.return || node.return === row) return null;
            node = node.return;
          }
          node.sibling.return = node.return;
          node = node.sibling;
        }
        return null;
      }
      function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
        ctor = workInProgress2.memoizedState;
        getDerivedStateFromProps = getDerivedStateFromProps(nextProps, ctor);
        getDerivedStateFromProps = null === getDerivedStateFromProps || void 0 === getDerivedStateFromProps ? ctor : assign2({}, ctor, getDerivedStateFromProps);
        workInProgress2.memoizedState = getDerivedStateFromProps;
        0 === workInProgress2.lanes && (workInProgress2.updateQueue.baseState = getDerivedStateFromProps);
      }
      var classComponentUpdater = {
        enqueueSetState: function(inst, payload, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(), update = createUpdate(lane);
          update.payload = payload;
          void 0 !== callback && null !== callback && (update.callback = callback);
          payload = enqueueUpdate(inst, update, lane);
          null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
        },
        enqueueReplaceState: function(inst, payload, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(), update = createUpdate(lane);
          update.tag = 1;
          update.payload = payload;
          void 0 !== callback && null !== callback && (update.callback = callback);
          payload = enqueueUpdate(inst, update, lane);
          null !== payload && (scheduleUpdateOnFiber(payload, inst, lane), entangleTransitions(payload, inst, lane));
        },
        enqueueForceUpdate: function(inst, callback) {
          inst = inst._reactInternals;
          var lane = requestUpdateLane(), update = createUpdate(lane);
          update.tag = 2;
          void 0 !== callback && null !== callback && (update.callback = callback);
          callback = enqueueUpdate(inst, update, lane);
          null !== callback && (scheduleUpdateOnFiber(callback, inst, lane), entangleTransitions(callback, inst, lane));
        }
      };
      function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
        workInProgress2 = workInProgress2.stateNode;
        return "function" === typeof workInProgress2.shouldComponentUpdate ? workInProgress2.shouldComponentUpdate(newProps, newState, nextContext) : ctor.prototype && ctor.prototype.isPureReactComponent ? !shallowEqual2(oldProps, newProps) || !shallowEqual2(oldState, newState) : true;
      }
      function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
        workInProgress2 = instance.state;
        "function" === typeof instance.componentWillReceiveProps && instance.componentWillReceiveProps(newProps, nextContext);
        "function" === typeof instance.UNSAFE_componentWillReceiveProps && instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
        instance.state !== workInProgress2 && classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
      }
      function resolveClassComponentProps(Component5, baseProps) {
        var newProps = baseProps;
        if ("ref" in baseProps) {
          newProps = {};
          for (var propName in baseProps)
            "ref" !== propName && (newProps[propName] = baseProps[propName]);
        }
        if (Component5 = Component5.defaultProps) {
          newProps === baseProps && (newProps = assign2({}, newProps));
          for (var propName$73 in Component5)
            void 0 === newProps[propName$73] && (newProps[propName$73] = Component5[propName$73]);
        }
        return newProps;
      }
      var reportGlobalError = "function" === typeof reportError ? reportError : function(error) {
        if ("object" === typeof window && "function" === typeof window.ErrorEvent) {
          var event = new window.ErrorEvent("error", {
            bubbles: true,
            cancelable: true,
            message: "object" === typeof error && null !== error && "string" === typeof error.message ? String(error.message) : String(error),
            error
          });
          if (!window.dispatchEvent(event)) return;
        } else if ("object" === typeof process && "function" === typeof process.emit) {
          process.emit("uncaughtException", error);
          return;
        }
        console.error(error);
      };
      function defaultOnUncaughtError(error) {
        reportGlobalError(error);
      }
      function defaultOnCaughtError(error) {
        console.error(error);
      }
      function defaultOnRecoverableError(error) {
        reportGlobalError(error);
      }
      function logUncaughtError(root3, errorInfo) {
        try {
          var onUncaughtError = root3.onUncaughtError;
          onUncaughtError(errorInfo.value, { componentStack: errorInfo.stack });
        } catch (e$74) {
          setTimeout(function() {
            throw e$74;
          });
        }
      }
      function logCaughtError(root3, boundary, errorInfo) {
        try {
          var onCaughtError = root3.onCaughtError;
          onCaughtError(errorInfo.value, {
            componentStack: errorInfo.stack,
            errorBoundary: 1 === boundary.tag ? boundary.stateNode : null
          });
        } catch (e$75) {
          setTimeout(function() {
            throw e$75;
          });
        }
      }
      function createRootErrorUpdate(root3, errorInfo, lane) {
        lane = createUpdate(lane);
        lane.tag = 3;
        lane.payload = { element: null };
        lane.callback = function() {
          logUncaughtError(root3, errorInfo);
        };
        return lane;
      }
      function createClassErrorUpdate(lane) {
        lane = createUpdate(lane);
        lane.tag = 3;
        return lane;
      }
      function initializeClassErrorUpdate(update, root3, fiber, errorInfo) {
        var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
        if ("function" === typeof getDerivedStateFromError) {
          var error = errorInfo.value;
          update.payload = function() {
            return getDerivedStateFromError(error);
          };
          update.callback = function() {
            logCaughtError(root3, fiber, errorInfo);
          };
        }
        var inst = fiber.stateNode;
        null !== inst && "function" === typeof inst.componentDidCatch && (update.callback = function() {
          logCaughtError(root3, fiber, errorInfo);
          "function" !== typeof getDerivedStateFromError && (null === legacyErrorBoundariesThatAlreadyFailed ? legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([this]) : legacyErrorBoundariesThatAlreadyFailed.add(this));
          var stack = errorInfo.stack;
          this.componentDidCatch(errorInfo.value, {
            componentStack: null !== stack ? stack : ""
          });
        });
      }
      function throwException(root3, returnFiber, sourceFiber, value, rootRenderLanes) {
        sourceFiber.flags |= 32768;
        if (null !== value && "object" === typeof value && "function" === typeof value.then) {
          returnFiber = sourceFiber.alternate;
          null !== returnFiber && propagateParentContextChanges(
            returnFiber,
            sourceFiber,
            rootRenderLanes,
            true
          );
          sourceFiber = suspenseHandlerStackCursor.current;
          if (null !== sourceFiber) {
            switch (sourceFiber.tag) {
              case 13:
                return null === shellBoundary ? renderDidSuspendDelayIfPossible() : null === sourceFiber.alternate && 0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 3), sourceFiber.flags &= -257, sourceFiber.flags |= 65536, sourceFiber.lanes = rootRenderLanes, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? sourceFiber.updateQueue = /* @__PURE__ */ new Set([value]) : returnFiber.add(value), attachPingListener(root3, value, rootRenderLanes)), false;
              case 22:
                return sourceFiber.flags |= 65536, value === noopSuspenseyCommitThenable ? sourceFiber.flags |= 16384 : (returnFiber = sourceFiber.updateQueue, null === returnFiber ? (returnFiber = {
                  transitions: null,
                  markerInstances: null,
                  retryQueue: /* @__PURE__ */ new Set([value])
                }, sourceFiber.updateQueue = returnFiber) : (sourceFiber = returnFiber.retryQueue, null === sourceFiber ? returnFiber.retryQueue = /* @__PURE__ */ new Set([value]) : sourceFiber.add(value)), attachPingListener(root3, value, rootRenderLanes)), false;
            }
            throw Error(formatProdErrorMessage3(435, sourceFiber.tag));
          }
          attachPingListener(root3, value, rootRenderLanes);
          renderDidSuspendDelayIfPossible();
          return false;
        }
        if (isHydrating)
          return returnFiber = suspenseHandlerStackCursor.current, null !== returnFiber ? (0 === (returnFiber.flags & 65536) && (returnFiber.flags |= 256), returnFiber.flags |= 65536, returnFiber.lanes = rootRenderLanes, value !== HydrationMismatchException && (root3 = Error(formatProdErrorMessage3(422), { cause: value }), queueHydrationError(createCapturedValueAtFiber(root3, sourceFiber)))) : (value !== HydrationMismatchException && (returnFiber = Error(formatProdErrorMessage3(423), {
            cause: value
          }), queueHydrationError(
            createCapturedValueAtFiber(returnFiber, sourceFiber)
          )), root3 = root3.current.alternate, root3.flags |= 65536, rootRenderLanes &= -rootRenderLanes, root3.lanes |= rootRenderLanes, value = createCapturedValueAtFiber(value, sourceFiber), rootRenderLanes = createRootErrorUpdate(
            root3.stateNode,
            value,
            rootRenderLanes
          ), enqueueCapturedUpdate(root3, rootRenderLanes), 4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2)), false;
        var wrapperError = Error(formatProdErrorMessage3(520), { cause: value });
        wrapperError = createCapturedValueAtFiber(wrapperError, sourceFiber);
        null === workInProgressRootConcurrentErrors ? workInProgressRootConcurrentErrors = [wrapperError] : workInProgressRootConcurrentErrors.push(wrapperError);
        4 !== workInProgressRootExitStatus && (workInProgressRootExitStatus = 2);
        if (null === returnFiber) return true;
        value = createCapturedValueAtFiber(value, sourceFiber);
        sourceFiber = returnFiber;
        do {
          switch (sourceFiber.tag) {
            case 3:
              return sourceFiber.flags |= 65536, root3 = rootRenderLanes & -rootRenderLanes, sourceFiber.lanes |= root3, root3 = createRootErrorUpdate(sourceFiber.stateNode, value, root3), enqueueCapturedUpdate(sourceFiber, root3), false;
            case 1:
              if (returnFiber = sourceFiber.type, wrapperError = sourceFiber.stateNode, 0 === (sourceFiber.flags & 128) && ("function" === typeof returnFiber.getDerivedStateFromError || null !== wrapperError && "function" === typeof wrapperError.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(wrapperError))))
                return sourceFiber.flags |= 65536, rootRenderLanes &= -rootRenderLanes, sourceFiber.lanes |= rootRenderLanes, rootRenderLanes = createClassErrorUpdate(rootRenderLanes), initializeClassErrorUpdate(
                  rootRenderLanes,
                  root3,
                  sourceFiber,
                  value
                ), enqueueCapturedUpdate(sourceFiber, rootRenderLanes), false;
          }
          sourceFiber = sourceFiber.return;
        } while (null !== sourceFiber);
        return false;
      }
      var SelectiveHydrationException = Error(formatProdErrorMessage3(461));
      var didReceiveUpdate = false;
      function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
        workInProgress2.child = null === current2 ? mountChildFibers(workInProgress2, null, nextChildren, renderLanes2) : reconcileChildFibers(
          workInProgress2,
          current2.child,
          nextChildren,
          renderLanes2
        );
      }
      function updateForwardRef(current2, workInProgress2, Component5, nextProps, renderLanes2) {
        Component5 = Component5.render;
        var ref = workInProgress2.ref;
        if ("ref" in nextProps) {
          var propsWithoutRef = {};
          for (var key in nextProps)
            "ref" !== key && (propsWithoutRef[key] = nextProps[key]);
        } else propsWithoutRef = nextProps;
        prepareToReadContext(workInProgress2);
        nextProps = renderWithHooks(
          current2,
          workInProgress2,
          Component5,
          propsWithoutRef,
          ref,
          renderLanes2
        );
        key = checkDidRenderIdHook();
        if (null !== current2 && !didReceiveUpdate)
          return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        isHydrating && key && pushMaterializedTreeId(workInProgress2);
        workInProgress2.flags |= 1;
        reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
        return workInProgress2.child;
      }
      function updateMemoComponent(current2, workInProgress2, Component5, nextProps, renderLanes2) {
        if (null === current2) {
          var type = Component5.type;
          if ("function" === typeof type && !shouldConstruct(type) && void 0 === type.defaultProps && null === Component5.compare)
            return workInProgress2.tag = 15, workInProgress2.type = type, updateSimpleMemoComponent(
              current2,
              workInProgress2,
              type,
              nextProps,
              renderLanes2
            );
          current2 = createFiberFromTypeAndProps(
            Component5.type,
            null,
            nextProps,
            workInProgress2,
            workInProgress2.mode,
            renderLanes2
          );
          current2.ref = workInProgress2.ref;
          current2.return = workInProgress2;
          return workInProgress2.child = current2;
        }
        type = current2.child;
        if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
          var prevProps = type.memoizedProps;
          Component5 = Component5.compare;
          Component5 = null !== Component5 ? Component5 : shallowEqual2;
          if (Component5(prevProps, nextProps) && current2.ref === workInProgress2.ref)
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        workInProgress2.flags |= 1;
        current2 = createWorkInProgress(type, nextProps);
        current2.ref = workInProgress2.ref;
        current2.return = workInProgress2;
        return workInProgress2.child = current2;
      }
      function updateSimpleMemoComponent(current2, workInProgress2, Component5, nextProps, renderLanes2) {
        if (null !== current2) {
          var prevProps = current2.memoizedProps;
          if (shallowEqual2(prevProps, nextProps) && current2.ref === workInProgress2.ref)
            if (didReceiveUpdate = false, workInProgress2.pendingProps = nextProps = prevProps, checkScheduledUpdateOrContext(current2, renderLanes2))
              0 !== (current2.flags & 131072) && (didReceiveUpdate = true);
            else
              return workInProgress2.lanes = current2.lanes, bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        return updateFunctionComponent(
          current2,
          workInProgress2,
          Component5,
          nextProps,
          renderLanes2
        );
      }
      function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, nextChildren = nextProps.children, prevState = null !== current2 ? current2.memoizedState : null;
        if ("hidden" === nextProps.mode) {
          if (0 !== (workInProgress2.flags & 128)) {
            nextProps = null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2;
            if (null !== current2) {
              nextChildren = workInProgress2.child = current2.child;
              for (prevState = 0; null !== nextChildren; )
                prevState = prevState | nextChildren.lanes | nextChildren.childLanes, nextChildren = nextChildren.sibling;
              workInProgress2.childLanes = prevState & ~nextProps;
            } else workInProgress2.childLanes = 0, workInProgress2.child = null;
            return deferHiddenOffscreenComponent(
              current2,
              workInProgress2,
              nextProps,
              renderLanes2
            );
          }
          if (0 !== (renderLanes2 & 536870912))
            workInProgress2.memoizedState = { baseLanes: 0, cachePool: null }, null !== current2 && pushTransition(
              workInProgress2,
              null !== prevState ? prevState.cachePool : null
            ), null !== prevState ? pushHiddenContext(workInProgress2, prevState) : reuseHiddenContextOnStack(), pushOffscreenSuspenseHandler(workInProgress2);
          else
            return workInProgress2.lanes = workInProgress2.childLanes = 536870912, deferHiddenOffscreenComponent(
              current2,
              workInProgress2,
              null !== prevState ? prevState.baseLanes | renderLanes2 : renderLanes2,
              renderLanes2
            );
        } else
          null !== prevState ? (pushTransition(workInProgress2, prevState.cachePool), pushHiddenContext(workInProgress2, prevState), reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.memoizedState = null) : (null !== current2 && pushTransition(workInProgress2, null), reuseHiddenContextOnStack(), reuseSuspenseHandlerOnStack(workInProgress2));
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      function deferHiddenOffscreenComponent(current2, workInProgress2, nextBaseLanes, renderLanes2) {
        var JSCompiler_inline_result = peekCacheFromPool();
        JSCompiler_inline_result = null === JSCompiler_inline_result ? null : { parent: CacheContext._currentValue, pool: JSCompiler_inline_result };
        workInProgress2.memoizedState = {
          baseLanes: nextBaseLanes,
          cachePool: JSCompiler_inline_result
        };
        null !== current2 && pushTransition(workInProgress2, null);
        reuseHiddenContextOnStack();
        pushOffscreenSuspenseHandler(workInProgress2);
        null !== current2 && propagateParentContextChanges(current2, workInProgress2, renderLanes2, true);
        return null;
      }
      function markRef(current2, workInProgress2) {
        var ref = workInProgress2.ref;
        if (null === ref)
          null !== current2 && null !== current2.ref && (workInProgress2.flags |= 4194816);
        else {
          if ("function" !== typeof ref && "object" !== typeof ref)
            throw Error(formatProdErrorMessage3(284));
          if (null === current2 || current2.ref !== ref)
            workInProgress2.flags |= 4194816;
        }
      }
      function updateFunctionComponent(current2, workInProgress2, Component5, nextProps, renderLanes2) {
        prepareToReadContext(workInProgress2);
        Component5 = renderWithHooks(
          current2,
          workInProgress2,
          Component5,
          nextProps,
          void 0,
          renderLanes2
        );
        nextProps = checkDidRenderIdHook();
        if (null !== current2 && !didReceiveUpdate)
          return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        isHydrating && nextProps && pushMaterializedTreeId(workInProgress2);
        workInProgress2.flags |= 1;
        reconcileChildren(current2, workInProgress2, Component5, renderLanes2);
        return workInProgress2.child;
      }
      function replayFunctionComponent(current2, workInProgress2, nextProps, Component5, secondArg, renderLanes2) {
        prepareToReadContext(workInProgress2);
        workInProgress2.updateQueue = null;
        nextProps = renderWithHooksAgain(
          workInProgress2,
          Component5,
          nextProps,
          secondArg
        );
        finishRenderingHooks(current2);
        Component5 = checkDidRenderIdHook();
        if (null !== current2 && !didReceiveUpdate)
          return bailoutHooks(current2, workInProgress2, renderLanes2), bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        isHydrating && Component5 && pushMaterializedTreeId(workInProgress2);
        workInProgress2.flags |= 1;
        reconcileChildren(current2, workInProgress2, nextProps, renderLanes2);
        return workInProgress2.child;
      }
      function updateClassComponent(current2, workInProgress2, Component5, nextProps, renderLanes2) {
        prepareToReadContext(workInProgress2);
        if (null === workInProgress2.stateNode) {
          var context = emptyContextObject, contextType = Component5.contextType;
          "object" === typeof contextType && null !== contextType && (context = readContext(contextType));
          context = new Component5(nextProps, context);
          workInProgress2.memoizedState = null !== context.state && void 0 !== context.state ? context.state : null;
          context.updater = classComponentUpdater;
          workInProgress2.stateNode = context;
          context._reactInternals = workInProgress2;
          context = workInProgress2.stateNode;
          context.props = nextProps;
          context.state = workInProgress2.memoizedState;
          context.refs = {};
          initializeUpdateQueue(workInProgress2);
          contextType = Component5.contextType;
          context.context = "object" === typeof contextType && null !== contextType ? readContext(contextType) : emptyContextObject;
          context.state = workInProgress2.memoizedState;
          contextType = Component5.getDerivedStateFromProps;
          "function" === typeof contextType && (applyDerivedStateFromProps(
            workInProgress2,
            Component5,
            contextType,
            nextProps
          ), context.state = workInProgress2.memoizedState);
          "function" === typeof Component5.getDerivedStateFromProps || "function" === typeof context.getSnapshotBeforeUpdate || "function" !== typeof context.UNSAFE_componentWillMount && "function" !== typeof context.componentWillMount || (contextType = context.state, "function" === typeof context.componentWillMount && context.componentWillMount(), "function" === typeof context.UNSAFE_componentWillMount && context.UNSAFE_componentWillMount(), contextType !== context.state && classComponentUpdater.enqueueReplaceState(context, context.state, null), processUpdateQueue(workInProgress2, nextProps, context, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction(), context.state = workInProgress2.memoizedState);
          "function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308);
          nextProps = true;
        } else if (null === current2) {
          context = workInProgress2.stateNode;
          var unresolvedOldProps = workInProgress2.memoizedProps, oldProps = resolveClassComponentProps(Component5, unresolvedOldProps);
          context.props = oldProps;
          var oldContext = context.context, contextType$jscomp$0 = Component5.contextType;
          contextType = emptyContextObject;
          "object" === typeof contextType$jscomp$0 && null !== contextType$jscomp$0 && (contextType = readContext(contextType$jscomp$0));
          var getDerivedStateFromProps = Component5.getDerivedStateFromProps;
          contextType$jscomp$0 = "function" === typeof getDerivedStateFromProps || "function" === typeof context.getSnapshotBeforeUpdate;
          unresolvedOldProps = workInProgress2.pendingProps !== unresolvedOldProps;
          contextType$jscomp$0 || "function" !== typeof context.UNSAFE_componentWillReceiveProps && "function" !== typeof context.componentWillReceiveProps || (unresolvedOldProps || oldContext !== contextType) && callComponentWillReceiveProps(
            workInProgress2,
            context,
            nextProps,
            contextType
          );
          hasForceUpdate = false;
          var oldState = workInProgress2.memoizedState;
          context.state = oldState;
          processUpdateQueue(workInProgress2, nextProps, context, renderLanes2);
          suspendIfUpdateReadFromEntangledAsyncAction();
          oldContext = workInProgress2.memoizedState;
          unresolvedOldProps || oldState !== oldContext || hasForceUpdate ? ("function" === typeof getDerivedStateFromProps && (applyDerivedStateFromProps(
            workInProgress2,
            Component5,
            getDerivedStateFromProps,
            nextProps
          ), oldContext = workInProgress2.memoizedState), (oldProps = hasForceUpdate || checkShouldComponentUpdate(
            workInProgress2,
            Component5,
            oldProps,
            nextProps,
            oldState,
            oldContext,
            contextType
          )) ? (contextType$jscomp$0 || "function" !== typeof context.UNSAFE_componentWillMount && "function" !== typeof context.componentWillMount || ("function" === typeof context.componentWillMount && context.componentWillMount(), "function" === typeof context.UNSAFE_componentWillMount && context.UNSAFE_componentWillMount()), "function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308)) : ("function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = oldContext), context.props = nextProps, context.state = oldContext, context.context = contextType, nextProps = oldProps) : ("function" === typeof context.componentDidMount && (workInProgress2.flags |= 4194308), nextProps = false);
        } else {
          context = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          contextType = workInProgress2.memoizedProps;
          contextType$jscomp$0 = resolveClassComponentProps(Component5, contextType);
          context.props = contextType$jscomp$0;
          getDerivedStateFromProps = workInProgress2.pendingProps;
          oldState = context.context;
          oldContext = Component5.contextType;
          oldProps = emptyContextObject;
          "object" === typeof oldContext && null !== oldContext && (oldProps = readContext(oldContext));
          unresolvedOldProps = Component5.getDerivedStateFromProps;
          (oldContext = "function" === typeof unresolvedOldProps || "function" === typeof context.getSnapshotBeforeUpdate) || "function" !== typeof context.UNSAFE_componentWillReceiveProps && "function" !== typeof context.componentWillReceiveProps || (contextType !== getDerivedStateFromProps || oldState !== oldProps) && callComponentWillReceiveProps(
            workInProgress2,
            context,
            nextProps,
            oldProps
          );
          hasForceUpdate = false;
          oldState = workInProgress2.memoizedState;
          context.state = oldState;
          processUpdateQueue(workInProgress2, nextProps, context, renderLanes2);
          suspendIfUpdateReadFromEntangledAsyncAction();
          var newState = workInProgress2.memoizedState;
          contextType !== getDerivedStateFromProps || oldState !== newState || hasForceUpdate || null !== current2 && null !== current2.dependencies && checkIfContextChanged(current2.dependencies) ? ("function" === typeof unresolvedOldProps && (applyDerivedStateFromProps(
            workInProgress2,
            Component5,
            unresolvedOldProps,
            nextProps
          ), newState = workInProgress2.memoizedState), (contextType$jscomp$0 = hasForceUpdate || checkShouldComponentUpdate(
            workInProgress2,
            Component5,
            contextType$jscomp$0,
            nextProps,
            oldState,
            newState,
            oldProps
          ) || null !== current2 && null !== current2.dependencies && checkIfContextChanged(current2.dependencies)) ? (oldContext || "function" !== typeof context.UNSAFE_componentWillUpdate && "function" !== typeof context.componentWillUpdate || ("function" === typeof context.componentWillUpdate && context.componentWillUpdate(nextProps, newState, oldProps), "function" === typeof context.UNSAFE_componentWillUpdate && context.UNSAFE_componentWillUpdate(
            nextProps,
            newState,
            oldProps
          )), "function" === typeof context.componentDidUpdate && (workInProgress2.flags |= 4), "function" === typeof context.getSnapshotBeforeUpdate && (workInProgress2.flags |= 1024)) : ("function" !== typeof context.componentDidUpdate || contextType === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof context.getSnapshotBeforeUpdate || contextType === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 1024), workInProgress2.memoizedProps = nextProps, workInProgress2.memoizedState = newState), context.props = nextProps, context.state = newState, context.context = oldProps, nextProps = contextType$jscomp$0) : ("function" !== typeof context.componentDidUpdate || contextType === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 4), "function" !== typeof context.getSnapshotBeforeUpdate || contextType === current2.memoizedProps && oldState === current2.memoizedState || (workInProgress2.flags |= 1024), nextProps = false);
        }
        context = nextProps;
        markRef(current2, workInProgress2);
        nextProps = 0 !== (workInProgress2.flags & 128);
        context || nextProps ? (context = workInProgress2.stateNode, Component5 = nextProps && "function" !== typeof Component5.getDerivedStateFromError ? null : context.render(), workInProgress2.flags |= 1, null !== current2 && nextProps ? (workInProgress2.child = reconcileChildFibers(
          workInProgress2,
          current2.child,
          null,
          renderLanes2
        ), workInProgress2.child = reconcileChildFibers(
          workInProgress2,
          null,
          Component5,
          renderLanes2
        )) : reconcileChildren(current2, workInProgress2, Component5, renderLanes2), workInProgress2.memoizedState = context.state, current2 = workInProgress2.child) : current2 = bailoutOnAlreadyFinishedWork(
          current2,
          workInProgress2,
          renderLanes2
        );
        return current2;
      }
      function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2) {
        resetHydrationState();
        workInProgress2.flags |= 256;
        reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
        return workInProgress2.child;
      }
      var SUSPENDED_MARKER = {
        dehydrated: null,
        treeContext: null,
        retryLane: 0,
        hydrationErrors: null
      };
      function mountSuspenseOffscreenState(renderLanes2) {
        return { baseLanes: renderLanes2, cachePool: getSuspendedCache() };
      }
      function getRemainingWorkInPrimaryTree(current2, primaryTreeDidDefer, renderLanes2) {
        current2 = null !== current2 ? current2.childLanes & ~renderLanes2 : 0;
        primaryTreeDidDefer && (current2 |= workInProgressDeferredLane);
        return current2;
      }
      function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, showFallback = false, didSuspend = 0 !== (workInProgress2.flags & 128), JSCompiler_temp;
        (JSCompiler_temp = didSuspend) || (JSCompiler_temp = null !== current2 && null === current2.memoizedState ? false : 0 !== (suspenseStackCursor.current & 2));
        JSCompiler_temp && (showFallback = true, workInProgress2.flags &= -129);
        JSCompiler_temp = 0 !== (workInProgress2.flags & 32);
        workInProgress2.flags &= -33;
        if (null === current2) {
          if (isHydrating) {
            showFallback ? pushPrimaryTreeSuspenseHandler(workInProgress2) : reuseSuspenseHandlerOnStack(workInProgress2);
            if (isHydrating) {
              var nextInstance = nextHydratableInstance, JSCompiler_temp$jscomp$0;
              if (JSCompiler_temp$jscomp$0 = nextInstance) {
                c: {
                  JSCompiler_temp$jscomp$0 = nextInstance;
                  for (nextInstance = rootOrSingletonContext; 8 !== JSCompiler_temp$jscomp$0.nodeType; ) {
                    if (!nextInstance) {
                      nextInstance = null;
                      break c;
                    }
                    JSCompiler_temp$jscomp$0 = getNextHydratable(
                      JSCompiler_temp$jscomp$0.nextSibling
                    );
                    if (null === JSCompiler_temp$jscomp$0) {
                      nextInstance = null;
                      break c;
                    }
                  }
                  nextInstance = JSCompiler_temp$jscomp$0;
                }
                null !== nextInstance ? (workInProgress2.memoizedState = {
                  dehydrated: nextInstance,
                  treeContext: null !== treeContextProvider ? { id: treeContextId, overflow: treeContextOverflow } : null,
                  retryLane: 536870912,
                  hydrationErrors: null
                }, JSCompiler_temp$jscomp$0 = createFiberImplClass(
                  18,
                  null,
                  null,
                  0
                ), JSCompiler_temp$jscomp$0.stateNode = nextInstance, JSCompiler_temp$jscomp$0.return = workInProgress2, workInProgress2.child = JSCompiler_temp$jscomp$0, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, JSCompiler_temp$jscomp$0 = true) : JSCompiler_temp$jscomp$0 = false;
              }
              JSCompiler_temp$jscomp$0 || throwOnHydrationMismatch(workInProgress2);
            }
            nextInstance = workInProgress2.memoizedState;
            if (null !== nextInstance && (nextInstance = nextInstance.dehydrated, null !== nextInstance))
              return isSuspenseInstanceFallback(nextInstance) ? workInProgress2.lanes = 32 : workInProgress2.lanes = 536870912, null;
            popSuspenseHandler(workInProgress2);
          }
          nextInstance = nextProps.children;
          nextProps = nextProps.fallback;
          if (showFallback)
            return reuseSuspenseHandlerOnStack(workInProgress2), showFallback = workInProgress2.mode, nextInstance = mountWorkInProgressOffscreenFiber(
              { mode: "hidden", children: nextInstance },
              showFallback
            ), nextProps = createFiberFromFragment(
              nextProps,
              showFallback,
              renderLanes2,
              null
            ), nextInstance.return = workInProgress2, nextProps.return = workInProgress2, nextInstance.sibling = nextProps, workInProgress2.child = nextInstance, showFallback = workInProgress2.child, showFallback.memoizedState = mountSuspenseOffscreenState(renderLanes2), showFallback.childLanes = getRemainingWorkInPrimaryTree(
              current2,
              JSCompiler_temp,
              renderLanes2
            ), workInProgress2.memoizedState = SUSPENDED_MARKER, nextProps;
          pushPrimaryTreeSuspenseHandler(workInProgress2);
          return mountSuspensePrimaryChildren(workInProgress2, nextInstance);
        }
        JSCompiler_temp$jscomp$0 = current2.memoizedState;
        if (null !== JSCompiler_temp$jscomp$0 && (nextInstance = JSCompiler_temp$jscomp$0.dehydrated, null !== nextInstance)) {
          if (didSuspend)
            workInProgress2.flags & 256 ? (pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags &= -257, workInProgress2 = retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2
            )) : null !== workInProgress2.memoizedState ? (reuseSuspenseHandlerOnStack(workInProgress2), workInProgress2.child = current2.child, workInProgress2.flags |= 128, workInProgress2 = null) : (reuseSuspenseHandlerOnStack(workInProgress2), showFallback = nextProps.fallback, nextInstance = workInProgress2.mode, nextProps = mountWorkInProgressOffscreenFiber(
              { mode: "visible", children: nextProps.children },
              nextInstance
            ), showFallback = createFiberFromFragment(
              showFallback,
              nextInstance,
              renderLanes2,
              null
            ), showFallback.flags |= 2, nextProps.return = workInProgress2, showFallback.return = workInProgress2, nextProps.sibling = showFallback, workInProgress2.child = nextProps, reconcileChildFibers(
              workInProgress2,
              current2.child,
              null,
              renderLanes2
            ), nextProps = workInProgress2.child, nextProps.memoizedState = mountSuspenseOffscreenState(renderLanes2), nextProps.childLanes = getRemainingWorkInPrimaryTree(
              current2,
              JSCompiler_temp,
              renderLanes2
            ), workInProgress2.memoizedState = SUSPENDED_MARKER, workInProgress2 = showFallback);
          else if (pushPrimaryTreeSuspenseHandler(workInProgress2), isSuspenseInstanceFallback(nextInstance)) {
            JSCompiler_temp = nextInstance.nextSibling && nextInstance.nextSibling.dataset;
            if (JSCompiler_temp) var digest = JSCompiler_temp.dgst;
            JSCompiler_temp = digest;
            nextProps = Error(formatProdErrorMessage3(419));
            nextProps.stack = "";
            nextProps.digest = JSCompiler_temp;
            queueHydrationError({ value: nextProps, source: null, stack: null });
            workInProgress2 = retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2
            );
          } else if (didReceiveUpdate || propagateParentContextChanges(current2, workInProgress2, renderLanes2, false), JSCompiler_temp = 0 !== (renderLanes2 & current2.childLanes), didReceiveUpdate || JSCompiler_temp) {
            JSCompiler_temp = workInProgressRoot;
            if (null !== JSCompiler_temp && (nextProps = renderLanes2 & -renderLanes2, nextProps = 0 !== (nextProps & 42) ? 1 : getBumpedLaneForHydrationByLane(nextProps), nextProps = 0 !== (nextProps & (JSCompiler_temp.suspendedLanes | renderLanes2)) ? 0 : nextProps, 0 !== nextProps && nextProps !== JSCompiler_temp$jscomp$0.retryLane))
              throw JSCompiler_temp$jscomp$0.retryLane = nextProps, enqueueConcurrentRenderForLane(current2, nextProps), scheduleUpdateOnFiber(JSCompiler_temp, current2, nextProps), SelectiveHydrationException;
            "$?" === nextInstance.data || renderDidSuspendDelayIfPossible();
            workInProgress2 = retrySuspenseComponentWithoutHydrating(
              current2,
              workInProgress2,
              renderLanes2
            );
          } else
            "$?" === nextInstance.data ? (workInProgress2.flags |= 192, workInProgress2.child = current2.child, workInProgress2 = null) : (current2 = JSCompiler_temp$jscomp$0.treeContext, nextHydratableInstance = getNextHydratable(
              nextInstance.nextSibling
            ), hydrationParentFiber = workInProgress2, isHydrating = true, hydrationErrors = null, rootOrSingletonContext = false, null !== current2 && (idStack[idStackIndex++] = treeContextId, idStack[idStackIndex++] = treeContextOverflow, idStack[idStackIndex++] = treeContextProvider, treeContextId = current2.id, treeContextOverflow = current2.overflow, treeContextProvider = workInProgress2), workInProgress2 = mountSuspensePrimaryChildren(
              workInProgress2,
              nextProps.children
            ), workInProgress2.flags |= 4096);
          return workInProgress2;
        }
        if (showFallback)
          return reuseSuspenseHandlerOnStack(workInProgress2), showFallback = nextProps.fallback, nextInstance = workInProgress2.mode, JSCompiler_temp$jscomp$0 = current2.child, digest = JSCompiler_temp$jscomp$0.sibling, nextProps = createWorkInProgress(JSCompiler_temp$jscomp$0, {
            mode: "hidden",
            children: nextProps.children
          }), nextProps.subtreeFlags = JSCompiler_temp$jscomp$0.subtreeFlags & 65011712, null !== digest ? showFallback = createWorkInProgress(digest, showFallback) : (showFallback = createFiberFromFragment(
            showFallback,
            nextInstance,
            renderLanes2,
            null
          ), showFallback.flags |= 2), showFallback.return = workInProgress2, nextProps.return = workInProgress2, nextProps.sibling = showFallback, workInProgress2.child = nextProps, nextProps = showFallback, showFallback = workInProgress2.child, nextInstance = current2.child.memoizedState, null === nextInstance ? nextInstance = mountSuspenseOffscreenState(renderLanes2) : (JSCompiler_temp$jscomp$0 = nextInstance.cachePool, null !== JSCompiler_temp$jscomp$0 ? (digest = CacheContext._currentValue, JSCompiler_temp$jscomp$0 = JSCompiler_temp$jscomp$0.parent !== digest ? { parent: digest, pool: digest } : JSCompiler_temp$jscomp$0) : JSCompiler_temp$jscomp$0 = getSuspendedCache(), nextInstance = {
            baseLanes: nextInstance.baseLanes | renderLanes2,
            cachePool: JSCompiler_temp$jscomp$0
          }), showFallback.memoizedState = nextInstance, showFallback.childLanes = getRemainingWorkInPrimaryTree(
            current2,
            JSCompiler_temp,
            renderLanes2
          ), workInProgress2.memoizedState = SUSPENDED_MARKER, nextProps;
        pushPrimaryTreeSuspenseHandler(workInProgress2);
        renderLanes2 = current2.child;
        current2 = renderLanes2.sibling;
        renderLanes2 = createWorkInProgress(renderLanes2, {
          mode: "visible",
          children: nextProps.children
        });
        renderLanes2.return = workInProgress2;
        renderLanes2.sibling = null;
        null !== current2 && (JSCompiler_temp = workInProgress2.deletions, null === JSCompiler_temp ? (workInProgress2.deletions = [current2], workInProgress2.flags |= 16) : JSCompiler_temp.push(current2));
        workInProgress2.child = renderLanes2;
        workInProgress2.memoizedState = null;
        return renderLanes2;
      }
      function mountSuspensePrimaryChildren(workInProgress2, primaryChildren) {
        primaryChildren = mountWorkInProgressOffscreenFiber(
          { mode: "visible", children: primaryChildren },
          workInProgress2.mode
        );
        primaryChildren.return = workInProgress2;
        return workInProgress2.child = primaryChildren;
      }
      function mountWorkInProgressOffscreenFiber(offscreenProps, mode) {
        offscreenProps = createFiberImplClass(22, offscreenProps, null, mode);
        offscreenProps.lanes = 0;
        offscreenProps.stateNode = {
          _visibility: 1,
          _pendingMarkers: null,
          _retryCache: null,
          _transitions: null
        };
        return offscreenProps;
      }
      function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2) {
        reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
        current2 = mountSuspensePrimaryChildren(
          workInProgress2,
          workInProgress2.pendingProps.children
        );
        current2.flags |= 2;
        workInProgress2.memoizedState = null;
        return current2;
      }
      function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
        fiber.lanes |= renderLanes2;
        var alternate = fiber.alternate;
        null !== alternate && (alternate.lanes |= renderLanes2);
        scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
      }
      function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
        var renderState = workInProgress2.memoizedState;
        null === renderState ? workInProgress2.memoizedState = {
          isBackwards,
          rendering: null,
          renderingStartTime: 0,
          last: lastContentRow,
          tail,
          tailMode
        } : (renderState.isBackwards = isBackwards, renderState.rendering = null, renderState.renderingStartTime = 0, renderState.last = lastContentRow, renderState.tail = tail, renderState.tailMode = tailMode);
      }
      function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
        var nextProps = workInProgress2.pendingProps, revealOrder = nextProps.revealOrder, tailMode = nextProps.tail;
        reconcileChildren(current2, workInProgress2, nextProps.children, renderLanes2);
        nextProps = suspenseStackCursor.current;
        if (0 !== (nextProps & 2))
          nextProps = nextProps & 1 | 2, workInProgress2.flags |= 128;
        else {
          if (null !== current2 && 0 !== (current2.flags & 128))
            a: for (current2 = workInProgress2.child; null !== current2; ) {
              if (13 === current2.tag)
                null !== current2.memoizedState && scheduleSuspenseWorkOnFiber(current2, renderLanes2, workInProgress2);
              else if (19 === current2.tag)
                scheduleSuspenseWorkOnFiber(current2, renderLanes2, workInProgress2);
              else if (null !== current2.child) {
                current2.child.return = current2;
                current2 = current2.child;
                continue;
              }
              if (current2 === workInProgress2) break a;
              for (; null === current2.sibling; ) {
                if (null === current2.return || current2.return === workInProgress2)
                  break a;
                current2 = current2.return;
              }
              current2.sibling.return = current2.return;
              current2 = current2.sibling;
            }
          nextProps &= 1;
        }
        push(suspenseStackCursor, nextProps);
        switch (revealOrder) {
          case "forwards":
            renderLanes2 = workInProgress2.child;
            for (revealOrder = null; null !== renderLanes2; )
              current2 = renderLanes2.alternate, null !== current2 && null === findFirstSuspended(current2) && (revealOrder = renderLanes2), renderLanes2 = renderLanes2.sibling;
            renderLanes2 = revealOrder;
            null === renderLanes2 ? (revealOrder = workInProgress2.child, workInProgress2.child = null) : (revealOrder = renderLanes2.sibling, renderLanes2.sibling = null);
            initSuspenseListRenderState(
              workInProgress2,
              false,
              revealOrder,
              renderLanes2,
              tailMode
            );
            break;
          case "backwards":
            renderLanes2 = null;
            revealOrder = workInProgress2.child;
            for (workInProgress2.child = null; null !== revealOrder; ) {
              current2 = revealOrder.alternate;
              if (null !== current2 && null === findFirstSuspended(current2)) {
                workInProgress2.child = revealOrder;
                break;
              }
              current2 = revealOrder.sibling;
              revealOrder.sibling = renderLanes2;
              renderLanes2 = revealOrder;
              revealOrder = current2;
            }
            initSuspenseListRenderState(
              workInProgress2,
              true,
              renderLanes2,
              null,
              tailMode
            );
            break;
          case "together":
            initSuspenseListRenderState(workInProgress2, false, null, null, void 0);
            break;
          default:
            workInProgress2.memoizedState = null;
        }
        return workInProgress2.child;
      }
      function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
        null !== current2 && (workInProgress2.dependencies = current2.dependencies);
        workInProgressRootSkippedLanes |= workInProgress2.lanes;
        if (0 === (renderLanes2 & workInProgress2.childLanes))
          if (null !== current2) {
            if (propagateParentContextChanges(
              current2,
              workInProgress2,
              renderLanes2,
              false
            ), 0 === (renderLanes2 & workInProgress2.childLanes))
              return null;
          } else return null;
        if (null !== current2 && workInProgress2.child !== current2.child)
          throw Error(formatProdErrorMessage3(153));
        if (null !== workInProgress2.child) {
          current2 = workInProgress2.child;
          renderLanes2 = createWorkInProgress(current2, current2.pendingProps);
          workInProgress2.child = renderLanes2;
          for (renderLanes2.return = workInProgress2; null !== current2.sibling; )
            current2 = current2.sibling, renderLanes2 = renderLanes2.sibling = createWorkInProgress(current2, current2.pendingProps), renderLanes2.return = workInProgress2;
          renderLanes2.sibling = null;
        }
        return workInProgress2.child;
      }
      function checkScheduledUpdateOrContext(current2, renderLanes2) {
        if (0 !== (current2.lanes & renderLanes2)) return true;
        current2 = current2.dependencies;
        return null !== current2 && checkIfContextChanged(current2) ? true : false;
      }
      function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
        switch (workInProgress2.tag) {
          case 3:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            pushProvider(workInProgress2, CacheContext, current2.memoizedState.cache);
            resetHydrationState();
            break;
          case 27:
          case 5:
            pushHostContext(workInProgress2);
            break;
          case 4:
            pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
            break;
          case 10:
            pushProvider(
              workInProgress2,
              workInProgress2.type,
              workInProgress2.memoizedProps.value
            );
            break;
          case 13:
            var state = workInProgress2.memoizedState;
            if (null !== state) {
              if (null !== state.dehydrated)
                return pushPrimaryTreeSuspenseHandler(workInProgress2), workInProgress2.flags |= 128, null;
              if (0 !== (renderLanes2 & workInProgress2.child.childLanes))
                return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
              pushPrimaryTreeSuspenseHandler(workInProgress2);
              current2 = bailoutOnAlreadyFinishedWork(
                current2,
                workInProgress2,
                renderLanes2
              );
              return null !== current2 ? current2.sibling : null;
            }
            pushPrimaryTreeSuspenseHandler(workInProgress2);
            break;
          case 19:
            var didSuspendBefore = 0 !== (current2.flags & 128);
            state = 0 !== (renderLanes2 & workInProgress2.childLanes);
            state || (propagateParentContextChanges(
              current2,
              workInProgress2,
              renderLanes2,
              false
            ), state = 0 !== (renderLanes2 & workInProgress2.childLanes));
            if (didSuspendBefore) {
              if (state)
                return updateSuspenseListComponent(
                  current2,
                  workInProgress2,
                  renderLanes2
                );
              workInProgress2.flags |= 128;
            }
            didSuspendBefore = workInProgress2.memoizedState;
            null !== didSuspendBefore && (didSuspendBefore.rendering = null, didSuspendBefore.tail = null, didSuspendBefore.lastEffect = null);
            push(suspenseStackCursor, suspenseStackCursor.current);
            if (state) break;
            else return null;
          case 22:
          case 23:
            return workInProgress2.lanes = 0, updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          case 24:
            pushProvider(workInProgress2, CacheContext, current2.memoizedState.cache);
        }
        return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
      }
      function beginWork(current2, workInProgress2, renderLanes2) {
        if (null !== current2)
          if (current2.memoizedProps !== workInProgress2.pendingProps)
            didReceiveUpdate = true;
          else {
            if (!checkScheduledUpdateOrContext(current2, renderLanes2) && 0 === (workInProgress2.flags & 128))
              return didReceiveUpdate = false, attemptEarlyBailoutIfNoScheduledUpdate(
                current2,
                workInProgress2,
                renderLanes2
              );
            didReceiveUpdate = 0 !== (current2.flags & 131072) ? true : false;
          }
        else
          didReceiveUpdate = false, isHydrating && 0 !== (workInProgress2.flags & 1048576) && pushTreeId(workInProgress2, treeForkCount, workInProgress2.index);
        workInProgress2.lanes = 0;
        switch (workInProgress2.tag) {
          case 16:
            a: {
              current2 = workInProgress2.pendingProps;
              var lazyComponent = workInProgress2.elementType, init = lazyComponent._init;
              lazyComponent = init(lazyComponent._payload);
              workInProgress2.type = lazyComponent;
              if ("function" === typeof lazyComponent)
                shouldConstruct(lazyComponent) ? (current2 = resolveClassComponentProps(lazyComponent, current2), workInProgress2.tag = 1, workInProgress2 = updateClassComponent(
                  null,
                  workInProgress2,
                  lazyComponent,
                  current2,
                  renderLanes2
                )) : (workInProgress2.tag = 0, workInProgress2 = updateFunctionComponent(
                  null,
                  workInProgress2,
                  lazyComponent,
                  current2,
                  renderLanes2
                ));
              else {
                if (void 0 !== lazyComponent && null !== lazyComponent) {
                  if (init = lazyComponent.$$typeof, init === REACT_FORWARD_REF_TYPE2) {
                    workInProgress2.tag = 11;
                    workInProgress2 = updateForwardRef(
                      null,
                      workInProgress2,
                      lazyComponent,
                      current2,
                      renderLanes2
                    );
                    break a;
                  } else if (init === REACT_MEMO_TYPE2) {
                    workInProgress2.tag = 14;
                    workInProgress2 = updateMemoComponent(
                      null,
                      workInProgress2,
                      lazyComponent,
                      current2,
                      renderLanes2
                    );
                    break a;
                  }
                }
                workInProgress2 = getComponentNameFromType(lazyComponent) || lazyComponent;
                throw Error(formatProdErrorMessage3(306, workInProgress2, ""));
              }
            }
            return workInProgress2;
          case 0:
            return updateFunctionComponent(
              current2,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 1:
            return lazyComponent = workInProgress2.type, init = resolveClassComponentProps(
              lazyComponent,
              workInProgress2.pendingProps
            ), updateClassComponent(
              current2,
              workInProgress2,
              lazyComponent,
              init,
              renderLanes2
            );
          case 3:
            a: {
              pushHostContainer(
                workInProgress2,
                workInProgress2.stateNode.containerInfo
              );
              if (null === current2) throw Error(formatProdErrorMessage3(387));
              lazyComponent = workInProgress2.pendingProps;
              var prevState = workInProgress2.memoizedState;
              init = prevState.element;
              cloneUpdateQueue(current2, workInProgress2);
              processUpdateQueue(workInProgress2, lazyComponent, null, renderLanes2);
              var nextState = workInProgress2.memoizedState;
              lazyComponent = nextState.cache;
              pushProvider(workInProgress2, CacheContext, lazyComponent);
              lazyComponent !== prevState.cache && propagateContextChanges(
                workInProgress2,
                [CacheContext],
                renderLanes2,
                true
              );
              suspendIfUpdateReadFromEntangledAsyncAction();
              lazyComponent = nextState.element;
              if (prevState.isDehydrated)
                if (prevState = {
                  element: lazyComponent,
                  isDehydrated: false,
                  cache: nextState.cache
                }, workInProgress2.updateQueue.baseState = prevState, workInProgress2.memoizedState = prevState, workInProgress2.flags & 256) {
                  workInProgress2 = mountHostRootWithoutHydrating(
                    current2,
                    workInProgress2,
                    lazyComponent,
                    renderLanes2
                  );
                  break a;
                } else if (lazyComponent !== init) {
                  init = createCapturedValueAtFiber(
                    Error(formatProdErrorMessage3(424)),
                    workInProgress2
                  );
                  queueHydrationError(init);
                  workInProgress2 = mountHostRootWithoutHydrating(
                    current2,
                    workInProgress2,
                    lazyComponent,
                    renderLanes2
                  );
                  break a;
                } else {
                  current2 = workInProgress2.stateNode.containerInfo;
                  switch (current2.nodeType) {
                    case 9:
                      current2 = current2.body;
                      break;
                    default:
                      current2 = "HTML" === current2.nodeName ? current2.ownerDocument.body : current2;
                  }
                  nextHydratableInstance = getNextHydratable(current2.firstChild);
                  hydrationParentFiber = workInProgress2;
                  isHydrating = true;
                  hydrationErrors = null;
                  rootOrSingletonContext = true;
                  renderLanes2 = mountChildFibers(
                    workInProgress2,
                    null,
                    lazyComponent,
                    renderLanes2
                  );
                  for (workInProgress2.child = renderLanes2; renderLanes2; )
                    renderLanes2.flags = renderLanes2.flags & -3 | 4096, renderLanes2 = renderLanes2.sibling;
                }
              else {
                resetHydrationState();
                if (lazyComponent === init) {
                  workInProgress2 = bailoutOnAlreadyFinishedWork(
                    current2,
                    workInProgress2,
                    renderLanes2
                  );
                  break a;
                }
                reconcileChildren(
                  current2,
                  workInProgress2,
                  lazyComponent,
                  renderLanes2
                );
              }
              workInProgress2 = workInProgress2.child;
            }
            return workInProgress2;
          case 26:
            return markRef(current2, workInProgress2), null === current2 ? (renderLanes2 = getResource(
              workInProgress2.type,
              null,
              workInProgress2.pendingProps,
              null
            )) ? workInProgress2.memoizedState = renderLanes2 : isHydrating || (renderLanes2 = workInProgress2.type, current2 = workInProgress2.pendingProps, lazyComponent = getOwnerDocumentFromRootContainer(
              rootInstanceStackCursor.current
            ).createElement(renderLanes2), lazyComponent[internalInstanceKey] = workInProgress2, lazyComponent[internalPropsKey] = current2, setInitialProperties(lazyComponent, renderLanes2, current2), markNodeAsHoistable(lazyComponent), workInProgress2.stateNode = lazyComponent) : workInProgress2.memoizedState = getResource(
              workInProgress2.type,
              current2.memoizedProps,
              workInProgress2.pendingProps,
              current2.memoizedState
            ), null;
          case 27:
            return pushHostContext(workInProgress2), null === current2 && isHydrating && (lazyComponent = workInProgress2.stateNode = resolveSingletonInstance(
              workInProgress2.type,
              workInProgress2.pendingProps,
              rootInstanceStackCursor.current
            ), hydrationParentFiber = workInProgress2, rootOrSingletonContext = true, init = nextHydratableInstance, isSingletonScope(workInProgress2.type) ? (previousHydratableOnEnteringScopedSingleton = init, nextHydratableInstance = getNextHydratable(
              lazyComponent.firstChild
            )) : nextHydratableInstance = init), reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), markRef(current2, workInProgress2), null === current2 && (workInProgress2.flags |= 4194304), workInProgress2.child;
          case 5:
            if (null === current2 && isHydrating) {
              if (init = lazyComponent = nextHydratableInstance)
                lazyComponent = canHydrateInstance(
                  lazyComponent,
                  workInProgress2.type,
                  workInProgress2.pendingProps,
                  rootOrSingletonContext
                ), null !== lazyComponent ? (workInProgress2.stateNode = lazyComponent, hydrationParentFiber = workInProgress2, nextHydratableInstance = getNextHydratable(
                  lazyComponent.firstChild
                ), rootOrSingletonContext = false, init = true) : init = false;
              init || throwOnHydrationMismatch(workInProgress2);
            }
            pushHostContext(workInProgress2);
            init = workInProgress2.type;
            prevState = workInProgress2.pendingProps;
            nextState = null !== current2 ? current2.memoizedProps : null;
            lazyComponent = prevState.children;
            shouldSetTextContent(init, prevState) ? lazyComponent = null : null !== nextState && shouldSetTextContent(init, nextState) && (workInProgress2.flags |= 32);
            null !== workInProgress2.memoizedState && (init = renderWithHooks(
              current2,
              workInProgress2,
              TransitionAwareHostComponent,
              null,
              null,
              renderLanes2
            ), HostTransitionContext._currentValue = init);
            markRef(current2, workInProgress2);
            reconcileChildren(current2, workInProgress2, lazyComponent, renderLanes2);
            return workInProgress2.child;
          case 6:
            if (null === current2 && isHydrating) {
              if (current2 = renderLanes2 = nextHydratableInstance)
                renderLanes2 = canHydrateTextInstance(
                  renderLanes2,
                  workInProgress2.pendingProps,
                  rootOrSingletonContext
                ), null !== renderLanes2 ? (workInProgress2.stateNode = renderLanes2, hydrationParentFiber = workInProgress2, nextHydratableInstance = null, current2 = true) : current2 = false;
              current2 || throwOnHydrationMismatch(workInProgress2);
            }
            return null;
          case 13:
            return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
          case 4:
            return pushHostContainer(
              workInProgress2,
              workInProgress2.stateNode.containerInfo
            ), lazyComponent = workInProgress2.pendingProps, null === current2 ? workInProgress2.child = reconcileChildFibers(
              workInProgress2,
              null,
              lazyComponent,
              renderLanes2
            ) : reconcileChildren(
              current2,
              workInProgress2,
              lazyComponent,
              renderLanes2
            ), workInProgress2.child;
          case 11:
            return updateForwardRef(
              current2,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 7:
            return reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps,
              renderLanes2
            ), workInProgress2.child;
          case 8:
            return reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), workInProgress2.child;
          case 12:
            return reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), workInProgress2.child;
          case 10:
            return lazyComponent = workInProgress2.pendingProps, pushProvider(workInProgress2, workInProgress2.type, lazyComponent.value), reconcileChildren(
              current2,
              workInProgress2,
              lazyComponent.children,
              renderLanes2
            ), workInProgress2.child;
          case 9:
            return init = workInProgress2.type._context, lazyComponent = workInProgress2.pendingProps.children, prepareToReadContext(workInProgress2), init = readContext(init), lazyComponent = lazyComponent(init), workInProgress2.flags |= 1, reconcileChildren(current2, workInProgress2, lazyComponent, renderLanes2), workInProgress2.child;
          case 14:
            return updateMemoComponent(
              current2,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 15:
            return updateSimpleMemoComponent(
              current2,
              workInProgress2,
              workInProgress2.type,
              workInProgress2.pendingProps,
              renderLanes2
            );
          case 19:
            return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
          case 31:
            return lazyComponent = workInProgress2.pendingProps, renderLanes2 = workInProgress2.mode, lazyComponent = {
              mode: lazyComponent.mode,
              children: lazyComponent.children
            }, null === current2 ? (renderLanes2 = mountWorkInProgressOffscreenFiber(
              lazyComponent,
              renderLanes2
            ), renderLanes2.ref = workInProgress2.ref, workInProgress2.child = renderLanes2, renderLanes2.return = workInProgress2, workInProgress2 = renderLanes2) : (renderLanes2 = createWorkInProgress(current2.child, lazyComponent), renderLanes2.ref = workInProgress2.ref, workInProgress2.child = renderLanes2, renderLanes2.return = workInProgress2, workInProgress2 = renderLanes2), workInProgress2;
          case 22:
            return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
          case 24:
            return prepareToReadContext(workInProgress2), lazyComponent = readContext(CacheContext), null === current2 ? (init = peekCacheFromPool(), null === init && (init = workInProgressRoot, prevState = createCache(), init.pooledCache = prevState, prevState.refCount++, null !== prevState && (init.pooledCacheLanes |= renderLanes2), init = prevState), workInProgress2.memoizedState = {
              parent: lazyComponent,
              cache: init
            }, initializeUpdateQueue(workInProgress2), pushProvider(workInProgress2, CacheContext, init)) : (0 !== (current2.lanes & renderLanes2) && (cloneUpdateQueue(current2, workInProgress2), processUpdateQueue(workInProgress2, null, null, renderLanes2), suspendIfUpdateReadFromEntangledAsyncAction()), init = current2.memoizedState, prevState = workInProgress2.memoizedState, init.parent !== lazyComponent ? (init = { parent: lazyComponent, cache: lazyComponent }, workInProgress2.memoizedState = init, 0 === workInProgress2.lanes && (workInProgress2.memoizedState = workInProgress2.updateQueue.baseState = init), pushProvider(workInProgress2, CacheContext, lazyComponent)) : (lazyComponent = prevState.cache, pushProvider(workInProgress2, CacheContext, lazyComponent), lazyComponent !== init.cache && propagateContextChanges(
              workInProgress2,
              [CacheContext],
              renderLanes2,
              true
            ))), reconcileChildren(
              current2,
              workInProgress2,
              workInProgress2.pendingProps.children,
              renderLanes2
            ), workInProgress2.child;
          case 29:
            throw workInProgress2.pendingProps;
        }
        throw Error(formatProdErrorMessage3(156, workInProgress2.tag));
      }
      function markUpdate(workInProgress2) {
        workInProgress2.flags |= 4;
      }
      function preloadResourceAndSuspendIfNeeded(workInProgress2, resource) {
        if ("stylesheet" !== resource.type || 0 !== (resource.state.loading & 4))
          workInProgress2.flags &= -16777217;
        else if (workInProgress2.flags |= 16777216, !preloadResource(resource)) {
          resource = suspenseHandlerStackCursor.current;
          if (null !== resource && ((workInProgressRootRenderLanes & 4194048) === workInProgressRootRenderLanes ? null !== shellBoundary : (workInProgressRootRenderLanes & 62914560) !== workInProgressRootRenderLanes && 0 === (workInProgressRootRenderLanes & 536870912) || resource !== shellBoundary))
            throw suspendedThenable = noopSuspenseyCommitThenable, SuspenseyCommitException;
          workInProgress2.flags |= 8192;
        }
      }
      function scheduleRetryEffect(workInProgress2, retryQueue) {
        null !== retryQueue && (workInProgress2.flags |= 4);
        workInProgress2.flags & 16384 && (retryQueue = 22 !== workInProgress2.tag ? claimNextRetryLane() : 536870912, workInProgress2.lanes |= retryQueue, workInProgressSuspendedRetryLanes |= retryQueue);
      }
      function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
        if (!isHydrating)
          switch (renderState.tailMode) {
            case "hidden":
              hasRenderedATailFallback = renderState.tail;
              for (var lastTailNode = null; null !== hasRenderedATailFallback; )
                null !== hasRenderedATailFallback.alternate && (lastTailNode = hasRenderedATailFallback), hasRenderedATailFallback = hasRenderedATailFallback.sibling;
              null === lastTailNode ? renderState.tail = null : lastTailNode.sibling = null;
              break;
            case "collapsed":
              lastTailNode = renderState.tail;
              for (var lastTailNode$113 = null; null !== lastTailNode; )
                null !== lastTailNode.alternate && (lastTailNode$113 = lastTailNode), lastTailNode = lastTailNode.sibling;
              null === lastTailNode$113 ? hasRenderedATailFallback || null === renderState.tail ? renderState.tail = null : renderState.tail.sibling = null : lastTailNode$113.sibling = null;
          }
      }
      function bubbleProperties(completedWork) {
        var didBailout = null !== completedWork.alternate && completedWork.alternate.child === completedWork.child, newChildLanes = 0, subtreeFlags = 0;
        if (didBailout)
          for (var child$114 = completedWork.child; null !== child$114; )
            newChildLanes |= child$114.lanes | child$114.childLanes, subtreeFlags |= child$114.subtreeFlags & 65011712, subtreeFlags |= child$114.flags & 65011712, child$114.return = completedWork, child$114 = child$114.sibling;
        else
          for (child$114 = completedWork.child; null !== child$114; )
            newChildLanes |= child$114.lanes | child$114.childLanes, subtreeFlags |= child$114.subtreeFlags, subtreeFlags |= child$114.flags, child$114.return = completedWork, child$114 = child$114.sibling;
        completedWork.subtreeFlags |= subtreeFlags;
        completedWork.childLanes = newChildLanes;
        return didBailout;
      }
      function completeWork(current2, workInProgress2, renderLanes2) {
        var newProps = workInProgress2.pendingProps;
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case 31:
          case 16:
          case 15:
          case 0:
          case 11:
          case 7:
          case 8:
          case 12:
          case 9:
          case 14:
            return bubbleProperties(workInProgress2), null;
          case 1:
            return bubbleProperties(workInProgress2), null;
          case 3:
            renderLanes2 = workInProgress2.stateNode;
            newProps = null;
            null !== current2 && (newProps = current2.memoizedState.cache);
            workInProgress2.memoizedState.cache !== newProps && (workInProgress2.flags |= 2048);
            popProvider(CacheContext);
            popHostContainer();
            renderLanes2.pendingContext && (renderLanes2.context = renderLanes2.pendingContext, renderLanes2.pendingContext = null);
            if (null === current2 || null === current2.child)
              popHydrationState(workInProgress2) ? markUpdate(workInProgress2) : null === current2 || current2.memoizedState.isDehydrated && 0 === (workInProgress2.flags & 256) || (workInProgress2.flags |= 1024, upgradeHydrationErrorsToRecoverable());
            bubbleProperties(workInProgress2);
            return null;
          case 26:
            return renderLanes2 = workInProgress2.memoizedState, null === current2 ? (markUpdate(workInProgress2), null !== renderLanes2 ? (bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(workInProgress2, renderLanes2)) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217)) : renderLanes2 ? renderLanes2 !== current2.memoizedState ? (markUpdate(workInProgress2), bubbleProperties(workInProgress2), preloadResourceAndSuspendIfNeeded(workInProgress2, renderLanes2)) : (bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217) : (current2.memoizedProps !== newProps && markUpdate(workInProgress2), bubbleProperties(workInProgress2), workInProgress2.flags &= -16777217), null;
          case 27:
            popHostContext(workInProgress2);
            renderLanes2 = rootInstanceStackCursor.current;
            var type = workInProgress2.type;
            if (null !== current2 && null != workInProgress2.stateNode)
              current2.memoizedProps !== newProps && markUpdate(workInProgress2);
            else {
              if (!newProps) {
                if (null === workInProgress2.stateNode)
                  throw Error(formatProdErrorMessage3(166));
                bubbleProperties(workInProgress2);
                return null;
              }
              current2 = contextStackCursor.current;
              popHydrationState(workInProgress2) ? prepareToHydrateHostInstance(workInProgress2, current2) : (current2 = resolveSingletonInstance(type, newProps, renderLanes2), workInProgress2.stateNode = current2, markUpdate(workInProgress2));
            }
            bubbleProperties(workInProgress2);
            return null;
          case 5:
            popHostContext(workInProgress2);
            renderLanes2 = workInProgress2.type;
            if (null !== current2 && null != workInProgress2.stateNode)
              current2.memoizedProps !== newProps && markUpdate(workInProgress2);
            else {
              if (!newProps) {
                if (null === workInProgress2.stateNode)
                  throw Error(formatProdErrorMessage3(166));
                bubbleProperties(workInProgress2);
                return null;
              }
              current2 = contextStackCursor.current;
              if (popHydrationState(workInProgress2))
                prepareToHydrateHostInstance(workInProgress2, current2);
              else {
                type = getOwnerDocumentFromRootContainer(
                  rootInstanceStackCursor.current
                );
                switch (current2) {
                  case 1:
                    current2 = type.createElementNS(
                      "http://www.w3.org/2000/svg",
                      renderLanes2
                    );
                    break;
                  case 2:
                    current2 = type.createElementNS(
                      "http://www.w3.org/1998/Math/MathML",
                      renderLanes2
                    );
                    break;
                  default:
                    switch (renderLanes2) {
                      case "svg":
                        current2 = type.createElementNS(
                          "http://www.w3.org/2000/svg",
                          renderLanes2
                        );
                        break;
                      case "math":
                        current2 = type.createElementNS(
                          "http://www.w3.org/1998/Math/MathML",
                          renderLanes2
                        );
                        break;
                      case "script":
                        current2 = type.createElement("div");
                        current2.innerHTML = "<script><\/script>";
                        current2 = current2.removeChild(current2.firstChild);
                        break;
                      case "select":
                        current2 = "string" === typeof newProps.is ? type.createElement("select", { is: newProps.is }) : type.createElement("select");
                        newProps.multiple ? current2.multiple = true : newProps.size && (current2.size = newProps.size);
                        break;
                      default:
                        current2 = "string" === typeof newProps.is ? type.createElement(renderLanes2, { is: newProps.is }) : type.createElement(renderLanes2);
                    }
                }
                current2[internalInstanceKey] = workInProgress2;
                current2[internalPropsKey] = newProps;
                a: for (type = workInProgress2.child; null !== type; ) {
                  if (5 === type.tag || 6 === type.tag)
                    current2.appendChild(type.stateNode);
                  else if (4 !== type.tag && 27 !== type.tag && null !== type.child) {
                    type.child.return = type;
                    type = type.child;
                    continue;
                  }
                  if (type === workInProgress2) break a;
                  for (; null === type.sibling; ) {
                    if (null === type.return || type.return === workInProgress2)
                      break a;
                    type = type.return;
                  }
                  type.sibling.return = type.return;
                  type = type.sibling;
                }
                workInProgress2.stateNode = current2;
                a: switch (setInitialProperties(current2, renderLanes2, newProps), renderLanes2) {
                  case "button":
                  case "input":
                  case "select":
                  case "textarea":
                    current2 = !!newProps.autoFocus;
                    break a;
                  case "img":
                    current2 = true;
                    break a;
                  default:
                    current2 = false;
                }
                current2 && markUpdate(workInProgress2);
              }
            }
            bubbleProperties(workInProgress2);
            workInProgress2.flags &= -16777217;
            return null;
          case 6:
            if (current2 && null != workInProgress2.stateNode)
              current2.memoizedProps !== newProps && markUpdate(workInProgress2);
            else {
              if ("string" !== typeof newProps && null === workInProgress2.stateNode)
                throw Error(formatProdErrorMessage3(166));
              current2 = rootInstanceStackCursor.current;
              if (popHydrationState(workInProgress2)) {
                current2 = workInProgress2.stateNode;
                renderLanes2 = workInProgress2.memoizedProps;
                newProps = null;
                type = hydrationParentFiber;
                if (null !== type)
                  switch (type.tag) {
                    case 27:
                    case 5:
                      newProps = type.memoizedProps;
                  }
                current2[internalInstanceKey] = workInProgress2;
                current2 = current2.nodeValue === renderLanes2 || null !== newProps && true === newProps.suppressHydrationWarning || checkForUnmatchedText(current2.nodeValue, renderLanes2) ? true : false;
                current2 || throwOnHydrationMismatch(workInProgress2);
              } else
                current2 = getOwnerDocumentFromRootContainer(current2).createTextNode(
                  newProps
                ), current2[internalInstanceKey] = workInProgress2, workInProgress2.stateNode = current2;
            }
            bubbleProperties(workInProgress2);
            return null;
          case 13:
            newProps = workInProgress2.memoizedState;
            if (null === current2 || null !== current2.memoizedState && null !== current2.memoizedState.dehydrated) {
              type = popHydrationState(workInProgress2);
              if (null !== newProps && null !== newProps.dehydrated) {
                if (null === current2) {
                  if (!type) throw Error(formatProdErrorMessage3(318));
                  type = workInProgress2.memoizedState;
                  type = null !== type ? type.dehydrated : null;
                  if (!type) throw Error(formatProdErrorMessage3(317));
                  type[internalInstanceKey] = workInProgress2;
                } else
                  resetHydrationState(), 0 === (workInProgress2.flags & 128) && (workInProgress2.memoizedState = null), workInProgress2.flags |= 4;
                bubbleProperties(workInProgress2);
                type = false;
              } else
                type = upgradeHydrationErrorsToRecoverable(), null !== current2 && null !== current2.memoizedState && (current2.memoizedState.hydrationErrors = type), type = true;
              if (!type) {
                if (workInProgress2.flags & 256)
                  return popSuspenseHandler(workInProgress2), workInProgress2;
                popSuspenseHandler(workInProgress2);
                return null;
              }
            }
            popSuspenseHandler(workInProgress2);
            if (0 !== (workInProgress2.flags & 128))
              return workInProgress2.lanes = renderLanes2, workInProgress2;
            renderLanes2 = null !== newProps;
            current2 = null !== current2 && null !== current2.memoizedState;
            if (renderLanes2) {
              newProps = workInProgress2.child;
              type = null;
              null !== newProps.alternate && null !== newProps.alternate.memoizedState && null !== newProps.alternate.memoizedState.cachePool && (type = newProps.alternate.memoizedState.cachePool.pool);
              var cache$127 = null;
              null !== newProps.memoizedState && null !== newProps.memoizedState.cachePool && (cache$127 = newProps.memoizedState.cachePool.pool);
              cache$127 !== type && (newProps.flags |= 2048);
            }
            renderLanes2 !== current2 && renderLanes2 && (workInProgress2.child.flags |= 8192);
            scheduleRetryEffect(workInProgress2, workInProgress2.updateQueue);
            bubbleProperties(workInProgress2);
            return null;
          case 4:
            return popHostContainer(), null === current2 && listenToAllSupportedEvents(workInProgress2.stateNode.containerInfo), bubbleProperties(workInProgress2), null;
          case 10:
            return popProvider(workInProgress2.type), bubbleProperties(workInProgress2), null;
          case 19:
            pop(suspenseStackCursor);
            type = workInProgress2.memoizedState;
            if (null === type) return bubbleProperties(workInProgress2), null;
            newProps = 0 !== (workInProgress2.flags & 128);
            cache$127 = type.rendering;
            if (null === cache$127)
              if (newProps) cutOffTailIfNeeded(type, false);
              else {
                if (0 !== workInProgressRootExitStatus || null !== current2 && 0 !== (current2.flags & 128))
                  for (current2 = workInProgress2.child; null !== current2; ) {
                    cache$127 = findFirstSuspended(current2);
                    if (null !== cache$127) {
                      workInProgress2.flags |= 128;
                      cutOffTailIfNeeded(type, false);
                      current2 = cache$127.updateQueue;
                      workInProgress2.updateQueue = current2;
                      scheduleRetryEffect(workInProgress2, current2);
                      workInProgress2.subtreeFlags = 0;
                      current2 = renderLanes2;
                      for (renderLanes2 = workInProgress2.child; null !== renderLanes2; )
                        resetWorkInProgress(renderLanes2, current2), renderLanes2 = renderLanes2.sibling;
                      push(
                        suspenseStackCursor,
                        suspenseStackCursor.current & 1 | 2
                      );
                      return workInProgress2.child;
                    }
                    current2 = current2.sibling;
                  }
                null !== type.tail && now() > workInProgressRootRenderTargetTime && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress2.lanes = 4194304);
              }
            else {
              if (!newProps)
                if (current2 = findFirstSuspended(cache$127), null !== current2) {
                  if (workInProgress2.flags |= 128, newProps = true, current2 = current2.updateQueue, workInProgress2.updateQueue = current2, scheduleRetryEffect(workInProgress2, current2), cutOffTailIfNeeded(type, true), null === type.tail && "hidden" === type.tailMode && !cache$127.alternate && !isHydrating)
                    return bubbleProperties(workInProgress2), null;
                } else
                  2 * now() - type.renderingStartTime > workInProgressRootRenderTargetTime && 536870912 !== renderLanes2 && (workInProgress2.flags |= 128, newProps = true, cutOffTailIfNeeded(type, false), workInProgress2.lanes = 4194304);
              type.isBackwards ? (cache$127.sibling = workInProgress2.child, workInProgress2.child = cache$127) : (current2 = type.last, null !== current2 ? current2.sibling = cache$127 : workInProgress2.child = cache$127, type.last = cache$127);
            }
            if (null !== type.tail)
              return workInProgress2 = type.tail, type.rendering = workInProgress2, type.tail = workInProgress2.sibling, type.renderingStartTime = now(), workInProgress2.sibling = null, current2 = suspenseStackCursor.current, push(suspenseStackCursor, newProps ? current2 & 1 | 2 : current2 & 1), workInProgress2;
            bubbleProperties(workInProgress2);
            return null;
          case 22:
          case 23:
            return popSuspenseHandler(workInProgress2), popHiddenContext(), newProps = null !== workInProgress2.memoizedState, null !== current2 ? null !== current2.memoizedState !== newProps && (workInProgress2.flags |= 8192) : newProps && (workInProgress2.flags |= 8192), newProps ? 0 !== (renderLanes2 & 536870912) && 0 === (workInProgress2.flags & 128) && (bubbleProperties(workInProgress2), workInProgress2.subtreeFlags & 6 && (workInProgress2.flags |= 8192)) : bubbleProperties(workInProgress2), renderLanes2 = workInProgress2.updateQueue, null !== renderLanes2 && scheduleRetryEffect(workInProgress2, renderLanes2.retryQueue), renderLanes2 = null, null !== current2 && null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (renderLanes2 = current2.memoizedState.cachePool.pool), newProps = null, null !== workInProgress2.memoizedState && null !== workInProgress2.memoizedState.cachePool && (newProps = workInProgress2.memoizedState.cachePool.pool), newProps !== renderLanes2 && (workInProgress2.flags |= 2048), null !== current2 && pop(resumedCache), null;
          case 24:
            return renderLanes2 = null, null !== current2 && (renderLanes2 = current2.memoizedState.cache), workInProgress2.memoizedState.cache !== renderLanes2 && (workInProgress2.flags |= 2048), popProvider(CacheContext), bubbleProperties(workInProgress2), null;
          case 25:
            return null;
          case 30:
            return null;
        }
        throw Error(formatProdErrorMessage3(156, workInProgress2.tag));
      }
      function unwindWork(current2, workInProgress2) {
        popTreeContext(workInProgress2);
        switch (workInProgress2.tag) {
          case 1:
            return current2 = workInProgress2.flags, current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, workInProgress2) : null;
          case 3:
            return popProvider(CacheContext), popHostContainer(), current2 = workInProgress2.flags, 0 !== (current2 & 65536) && 0 === (current2 & 128) ? (workInProgress2.flags = current2 & -65537 | 128, workInProgress2) : null;
          case 26:
          case 27:
          case 5:
            return popHostContext(workInProgress2), null;
          case 13:
            popSuspenseHandler(workInProgress2);
            current2 = workInProgress2.memoizedState;
            if (null !== current2 && null !== current2.dehydrated) {
              if (null === workInProgress2.alternate)
                throw Error(formatProdErrorMessage3(340));
              resetHydrationState();
            }
            current2 = workInProgress2.flags;
            return current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, workInProgress2) : null;
          case 19:
            return pop(suspenseStackCursor), null;
          case 4:
            return popHostContainer(), null;
          case 10:
            return popProvider(workInProgress2.type), null;
          case 22:
          case 23:
            return popSuspenseHandler(workInProgress2), popHiddenContext(), null !== current2 && pop(resumedCache), current2 = workInProgress2.flags, current2 & 65536 ? (workInProgress2.flags = current2 & -65537 | 128, workInProgress2) : null;
          case 24:
            return popProvider(CacheContext), null;
          case 25:
            return null;
          default:
            return null;
        }
      }
      function unwindInterruptedWork(current2, interruptedWork) {
        popTreeContext(interruptedWork);
        switch (interruptedWork.tag) {
          case 3:
            popProvider(CacheContext);
            popHostContainer();
            break;
          case 26:
          case 27:
          case 5:
            popHostContext(interruptedWork);
            break;
          case 4:
            popHostContainer();
            break;
          case 13:
            popSuspenseHandler(interruptedWork);
            break;
          case 19:
            pop(suspenseStackCursor);
            break;
          case 10:
            popProvider(interruptedWork.type);
            break;
          case 22:
          case 23:
            popSuspenseHandler(interruptedWork);
            popHiddenContext();
            null !== current2 && pop(resumedCache);
            break;
          case 24:
            popProvider(CacheContext);
        }
      }
      function commitHookEffectListMount(flags, finishedWork) {
        try {
          var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
          if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
              if ((updateQueue.tag & flags) === flags) {
                lastEffect = void 0;
                var create = updateQueue.create, inst = updateQueue.inst;
                lastEffect = create();
                inst.destroy = lastEffect;
              }
              updateQueue = updateQueue.next;
            } while (updateQueue !== firstEffect);
          }
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor$jscomp$0) {
        try {
          var updateQueue = finishedWork.updateQueue, lastEffect = null !== updateQueue ? updateQueue.lastEffect : null;
          if (null !== lastEffect) {
            var firstEffect = lastEffect.next;
            updateQueue = firstEffect;
            do {
              if ((updateQueue.tag & flags) === flags) {
                var inst = updateQueue.inst, destroy = inst.destroy;
                if (void 0 !== destroy) {
                  inst.destroy = void 0;
                  lastEffect = finishedWork;
                  var nearestMountedAncestor = nearestMountedAncestor$jscomp$0, destroy_ = destroy;
                  try {
                    destroy_();
                  } catch (error) {
                    captureCommitPhaseError(
                      lastEffect,
                      nearestMountedAncestor,
                      error
                    );
                  }
                }
              }
              updateQueue = updateQueue.next;
            } while (updateQueue !== firstEffect);
          }
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function commitClassCallbacks(finishedWork) {
        var updateQueue = finishedWork.updateQueue;
        if (null !== updateQueue) {
          var instance = finishedWork.stateNode;
          try {
            commitCallbacks(updateQueue, instance);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
        }
      }
      function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
        instance.props = resolveClassComponentProps(
          current2.type,
          current2.memoizedProps
        );
        instance.state = current2.memoizedState;
        try {
          instance.componentWillUnmount();
        } catch (error) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error);
        }
      }
      function safelyAttachRef(current2, nearestMountedAncestor) {
        try {
          var ref = current2.ref;
          if (null !== ref) {
            switch (current2.tag) {
              case 26:
              case 27:
              case 5:
                var instanceToUse = current2.stateNode;
                break;
              case 30:
                instanceToUse = current2.stateNode;
                break;
              default:
                instanceToUse = current2.stateNode;
            }
            "function" === typeof ref ? current2.refCleanup = ref(instanceToUse) : ref.current = instanceToUse;
          }
        } catch (error) {
          captureCommitPhaseError(current2, nearestMountedAncestor, error);
        }
      }
      function safelyDetachRef(current2, nearestMountedAncestor) {
        var ref = current2.ref, refCleanup = current2.refCleanup;
        if (null !== ref)
          if ("function" === typeof refCleanup)
            try {
              refCleanup();
            } catch (error) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error);
            } finally {
              current2.refCleanup = null, current2 = current2.alternate, null != current2 && (current2.refCleanup = null);
            }
          else if ("function" === typeof ref)
            try {
              ref(null);
            } catch (error$143) {
              captureCommitPhaseError(current2, nearestMountedAncestor, error$143);
            }
          else ref.current = null;
      }
      function commitHostMount(finishedWork) {
        var type = finishedWork.type, props = finishedWork.memoizedProps, instance = finishedWork.stateNode;
        try {
          a: switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              props.autoFocus && instance.focus();
              break a;
            case "img":
              props.src ? instance.src = props.src : props.srcSet && (instance.srcset = props.srcSet);
          }
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function commitHostUpdate(finishedWork, newProps, oldProps) {
        try {
          var domElement = finishedWork.stateNode;
          updateProperties(domElement, finishedWork.type, oldProps, newProps);
          domElement[internalPropsKey] = newProps;
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      function isHostParent(fiber) {
        return 5 === fiber.tag || 3 === fiber.tag || 26 === fiber.tag || 27 === fiber.tag && isSingletonScope(fiber.type) || 4 === fiber.tag;
      }
      function getHostSibling(fiber) {
        a: for (; ; ) {
          for (; null === fiber.sibling; ) {
            if (null === fiber.return || isHostParent(fiber.return)) return null;
            fiber = fiber.return;
          }
          fiber.sibling.return = fiber.return;
          for (fiber = fiber.sibling; 5 !== fiber.tag && 6 !== fiber.tag && 18 !== fiber.tag; ) {
            if (27 === fiber.tag && isSingletonScope(fiber.type)) continue a;
            if (fiber.flags & 2) continue a;
            if (null === fiber.child || 4 === fiber.tag) continue a;
            else fiber.child.return = fiber, fiber = fiber.child;
          }
          if (!(fiber.flags & 2)) return fiber.stateNode;
        }
      }
      function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
        var tag = node.tag;
        if (5 === tag || 6 === tag)
          node = node.stateNode, before ? (9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent).insertBefore(node, before) : (before = 9 === parent.nodeType ? parent.body : "HTML" === parent.nodeName ? parent.ownerDocument.body : parent, before.appendChild(node), parent = parent._reactRootContainer, null !== parent && void 0 !== parent || null !== before.onclick || (before.onclick = noop$1));
        else if (4 !== tag && (27 === tag && isSingletonScope(node.type) && (parent = node.stateNode, before = null), node = node.child, null !== node))
          for (insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling; null !== node; )
            insertOrAppendPlacementNodeIntoContainer(node, before, parent), node = node.sibling;
      }
      function insertOrAppendPlacementNode(node, before, parent) {
        var tag = node.tag;
        if (5 === tag || 6 === tag)
          node = node.stateNode, before ? parent.insertBefore(node, before) : parent.appendChild(node);
        else if (4 !== tag && (27 === tag && isSingletonScope(node.type) && (parent = node.stateNode), node = node.child, null !== node))
          for (insertOrAppendPlacementNode(node, before, parent), node = node.sibling; null !== node; )
            insertOrAppendPlacementNode(node, before, parent), node = node.sibling;
      }
      function commitHostSingletonAcquisition(finishedWork) {
        var singleton = finishedWork.stateNode, props = finishedWork.memoizedProps;
        try {
          for (var type = finishedWork.type, attributes = singleton.attributes; attributes.length; )
            singleton.removeAttributeNode(attributes[0]);
          setInitialProperties(singleton, type, props);
          singleton[internalInstanceKey] = finishedWork;
          singleton[internalPropsKey] = props;
        } catch (error) {
          captureCommitPhaseError(finishedWork, finishedWork.return, error);
        }
      }
      var offscreenSubtreeIsHidden = false;
      var offscreenSubtreeWasHidden = false;
      var needsFormReset = false;
      var PossiblyWeakSet = "function" === typeof WeakSet ? WeakSet : Set;
      var nextEffect = null;
      function commitBeforeMutationEffects(root3, firstChild) {
        root3 = root3.containerInfo;
        eventsEnabled = _enabled;
        root3 = getActiveElementDeep(root3);
        if (hasSelectionCapabilities(root3)) {
          if ("selectionStart" in root3)
            var JSCompiler_temp = {
              start: root3.selectionStart,
              end: root3.selectionEnd
            };
          else
            a: {
              JSCompiler_temp = (JSCompiler_temp = root3.ownerDocument) && JSCompiler_temp.defaultView || window;
              var selection = JSCompiler_temp.getSelection && JSCompiler_temp.getSelection();
              if (selection && 0 !== selection.rangeCount) {
                JSCompiler_temp = selection.anchorNode;
                var anchorOffset = selection.anchorOffset, focusNode = selection.focusNode;
                selection = selection.focusOffset;
                try {
                  JSCompiler_temp.nodeType, focusNode.nodeType;
                } catch (e$20) {
                  JSCompiler_temp = null;
                  break a;
                }
                var length = 0, start = -1, end = -1, indexWithinAnchor = 0, indexWithinFocus = 0, node = root3, parentNode = null;
                b: for (; ; ) {
                  for (var next; ; ) {
                    node !== JSCompiler_temp || 0 !== anchorOffset && 3 !== node.nodeType || (start = length + anchorOffset);
                    node !== focusNode || 0 !== selection && 3 !== node.nodeType || (end = length + selection);
                    3 === node.nodeType && (length += node.nodeValue.length);
                    if (null === (next = node.firstChild)) break;
                    parentNode = node;
                    node = next;
                  }
                  for (; ; ) {
                    if (node === root3) break b;
                    parentNode === JSCompiler_temp && ++indexWithinAnchor === anchorOffset && (start = length);
                    parentNode === focusNode && ++indexWithinFocus === selection && (end = length);
                    if (null !== (next = node.nextSibling)) break;
                    node = parentNode;
                    parentNode = node.parentNode;
                  }
                  node = next;
                }
                JSCompiler_temp = -1 === start || -1 === end ? null : { start, end };
              } else JSCompiler_temp = null;
            }
          JSCompiler_temp = JSCompiler_temp || { start: 0, end: 0 };
        } else JSCompiler_temp = null;
        selectionInformation = { focusedElem: root3, selectionRange: JSCompiler_temp };
        _enabled = false;
        for (nextEffect = firstChild; null !== nextEffect; )
          if (firstChild = nextEffect, root3 = firstChild.child, 0 !== (firstChild.subtreeFlags & 1024) && null !== root3)
            root3.return = firstChild, nextEffect = root3;
          else
            for (; null !== nextEffect; ) {
              firstChild = nextEffect;
              focusNode = firstChild.alternate;
              root3 = firstChild.flags;
              switch (firstChild.tag) {
                case 0:
                  break;
                case 11:
                case 15:
                  break;
                case 1:
                  if (0 !== (root3 & 1024) && null !== focusNode) {
                    root3 = void 0;
                    JSCompiler_temp = firstChild;
                    anchorOffset = focusNode.memoizedProps;
                    focusNode = focusNode.memoizedState;
                    selection = JSCompiler_temp.stateNode;
                    try {
                      var resolvedPrevProps = resolveClassComponentProps(
                        JSCompiler_temp.type,
                        anchorOffset,
                        JSCompiler_temp.elementType === JSCompiler_temp.type
                      );
                      root3 = selection.getSnapshotBeforeUpdate(
                        resolvedPrevProps,
                        focusNode
                      );
                      selection.__reactInternalSnapshotBeforeUpdate = root3;
                    } catch (error) {
                      captureCommitPhaseError(
                        JSCompiler_temp,
                        JSCompiler_temp.return,
                        error
                      );
                    }
                  }
                  break;
                case 3:
                  if (0 !== (root3 & 1024)) {
                    if (root3 = firstChild.stateNode.containerInfo, JSCompiler_temp = root3.nodeType, 9 === JSCompiler_temp)
                      clearContainerSparingly(root3);
                    else if (1 === JSCompiler_temp)
                      switch (root3.nodeName) {
                        case "HEAD":
                        case "HTML":
                        case "BODY":
                          clearContainerSparingly(root3);
                          break;
                        default:
                          root3.textContent = "";
                      }
                  }
                  break;
                case 5:
                case 26:
                case 27:
                case 6:
                case 4:
                case 17:
                  break;
                default:
                  if (0 !== (root3 & 1024)) throw Error(formatProdErrorMessage3(163));
              }
              root3 = firstChild.sibling;
              if (null !== root3) {
                root3.return = firstChild.return;
                nextEffect = root3;
                break;
              }
              nextEffect = firstChild.return;
            }
      }
      function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 4 && commitHookEffectListMount(5, finishedWork);
            break;
          case 1:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 4)
              if (finishedRoot = finishedWork.stateNode, null === current2)
                try {
                  finishedRoot.componentDidMount();
                } catch (error) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error);
                }
              else {
                var prevProps = resolveClassComponentProps(
                  finishedWork.type,
                  current2.memoizedProps
                );
                current2 = current2.memoizedState;
                try {
                  finishedRoot.componentDidUpdate(
                    prevProps,
                    current2,
                    finishedRoot.__reactInternalSnapshotBeforeUpdate
                  );
                } catch (error$142) {
                  captureCommitPhaseError(
                    finishedWork,
                    finishedWork.return,
                    error$142
                  );
                }
              }
            flags & 64 && commitClassCallbacks(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 3:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            if (flags & 64 && (finishedRoot = finishedWork.updateQueue, null !== finishedRoot)) {
              current2 = null;
              if (null !== finishedWork.child)
                switch (finishedWork.child.tag) {
                  case 27:
                  case 5:
                    current2 = finishedWork.child.stateNode;
                    break;
                  case 1:
                    current2 = finishedWork.child.stateNode;
                }
              try {
                commitCallbacks(finishedRoot, current2);
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
            break;
          case 27:
            null === current2 && flags & 4 && commitHostSingletonAcquisition(finishedWork);
          case 26:
          case 5:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            null === current2 && flags & 4 && commitHostMount(finishedWork);
            flags & 512 && safelyAttachRef(finishedWork, finishedWork.return);
            break;
          case 12:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            break;
          case 13:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
            flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
            flags & 64 && (finishedRoot = finishedWork.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot && (finishedWork = retryDehydratedSuspenseBoundary.bind(
              null,
              finishedWork
            ), registerSuspenseInstanceRetry(finishedRoot, finishedWork))));
            break;
          case 22:
            flags = null !== finishedWork.memoizedState || offscreenSubtreeIsHidden;
            if (!flags) {
              current2 = null !== current2 && null !== current2.memoizedState || offscreenSubtreeWasHidden;
              prevProps = offscreenSubtreeIsHidden;
              var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
              offscreenSubtreeIsHidden = flags;
              (offscreenSubtreeWasHidden = current2) && !prevOffscreenSubtreeWasHidden ? recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                0 !== (finishedWork.subtreeFlags & 8772)
              ) : recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
              offscreenSubtreeIsHidden = prevProps;
              offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            }
            break;
          case 30:
            break;
          default:
            recursivelyTraverseLayoutEffects(finishedRoot, finishedWork);
        }
      }
      function detachFiberAfterEffects(fiber) {
        var alternate = fiber.alternate;
        null !== alternate && (fiber.alternate = null, detachFiberAfterEffects(alternate));
        fiber.child = null;
        fiber.deletions = null;
        fiber.sibling = null;
        5 === fiber.tag && (alternate = fiber.stateNode, null !== alternate && detachDeletedInstance(alternate));
        fiber.stateNode = null;
        fiber.return = null;
        fiber.dependencies = null;
        fiber.memoizedProps = null;
        fiber.memoizedState = null;
        fiber.pendingProps = null;
        fiber.stateNode = null;
        fiber.updateQueue = null;
      }
      var hostParent = null;
      var hostParentIsContainer = false;
      function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
        for (parent = parent.child; null !== parent; )
          commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, parent), parent = parent.sibling;
      }
      function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
        if (injectedHook && "function" === typeof injectedHook.onCommitFiberUnmount)
          try {
            injectedHook.onCommitFiberUnmount(rendererID, deletedFiber);
          } catch (err) {
          }
        switch (deletedFiber.tag) {
          case 26:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            deletedFiber.memoizedState ? deletedFiber.memoizedState.count-- : deletedFiber.stateNode && (deletedFiber = deletedFiber.stateNode, deletedFiber.parentNode.removeChild(deletedFiber));
            break;
          case 27:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
            var prevHostParent = hostParent, prevHostParentIsContainer = hostParentIsContainer;
            isSingletonScope(deletedFiber.type) && (hostParent = deletedFiber.stateNode, hostParentIsContainer = false);
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            releaseSingletonInstance(deletedFiber.stateNode);
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            break;
          case 5:
            offscreenSubtreeWasHidden || safelyDetachRef(deletedFiber, nearestMountedAncestor);
          case 6:
            prevHostParent = hostParent;
            prevHostParentIsContainer = hostParentIsContainer;
            hostParent = null;
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            if (null !== hostParent)
              if (hostParentIsContainer)
                try {
                  (9 === hostParent.nodeType ? hostParent.body : "HTML" === hostParent.nodeName ? hostParent.ownerDocument.body : hostParent).removeChild(deletedFiber.stateNode);
                } catch (error) {
                  captureCommitPhaseError(
                    deletedFiber,
                    nearestMountedAncestor,
                    error
                  );
                }
              else
                try {
                  hostParent.removeChild(deletedFiber.stateNode);
                } catch (error) {
                  captureCommitPhaseError(
                    deletedFiber,
                    nearestMountedAncestor,
                    error
                  );
                }
            break;
          case 18:
            null !== hostParent && (hostParentIsContainer ? (finishedRoot = hostParent, clearSuspenseBoundary(
              9 === finishedRoot.nodeType ? finishedRoot.body : "HTML" === finishedRoot.nodeName ? finishedRoot.ownerDocument.body : finishedRoot,
              deletedFiber.stateNode
            ), retryIfBlockedOn(finishedRoot)) : clearSuspenseBoundary(hostParent, deletedFiber.stateNode));
            break;
          case 4:
            prevHostParent = hostParent;
            prevHostParentIsContainer = hostParentIsContainer;
            hostParent = deletedFiber.stateNode.containerInfo;
            hostParentIsContainer = true;
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            hostParent = prevHostParent;
            hostParentIsContainer = prevHostParentIsContainer;
            break;
          case 0:
          case 11:
          case 14:
          case 15:
            offscreenSubtreeWasHidden || commitHookEffectListUnmount(2, deletedFiber, nearestMountedAncestor);
            offscreenSubtreeWasHidden || commitHookEffectListUnmount(4, deletedFiber, nearestMountedAncestor);
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            break;
          case 1:
            offscreenSubtreeWasHidden || (safelyDetachRef(deletedFiber, nearestMountedAncestor), prevHostParent = deletedFiber.stateNode, "function" === typeof prevHostParent.componentWillUnmount && safelyCallComponentWillUnmount(
              deletedFiber,
              nearestMountedAncestor,
              prevHostParent
            ));
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            break;
          case 21:
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            break;
          case 22:
            offscreenSubtreeWasHidden = (prevHostParent = offscreenSubtreeWasHidden) || null !== deletedFiber.memoizedState;
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
            offscreenSubtreeWasHidden = prevHostParent;
            break;
          default:
            recursivelyTraverseDeletionEffects(
              finishedRoot,
              nearestMountedAncestor,
              deletedFiber
            );
        }
      }
      function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
        if (null === finishedWork.memoizedState && (finishedRoot = finishedWork.alternate, null !== finishedRoot && (finishedRoot = finishedRoot.memoizedState, null !== finishedRoot && (finishedRoot = finishedRoot.dehydrated, null !== finishedRoot))))
          try {
            retryIfBlockedOn(finishedRoot);
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
      }
      function getRetryCache(finishedWork) {
        switch (finishedWork.tag) {
          case 13:
          case 19:
            var retryCache = finishedWork.stateNode;
            null === retryCache && (retryCache = finishedWork.stateNode = new PossiblyWeakSet());
            return retryCache;
          case 22:
            return finishedWork = finishedWork.stateNode, retryCache = finishedWork._retryCache, null === retryCache && (retryCache = finishedWork._retryCache = new PossiblyWeakSet()), retryCache;
          default:
            throw Error(formatProdErrorMessage3(435, finishedWork.tag));
        }
      }
      function attachSuspenseRetryListeners(finishedWork, wakeables) {
        var retryCache = getRetryCache(finishedWork);
        wakeables.forEach(function(wakeable) {
          var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
          retryCache.has(wakeable) || (retryCache.add(wakeable), wakeable.then(retry, retry));
        });
      }
      function recursivelyTraverseMutationEffects(root$jscomp$0, parentFiber) {
        var deletions = parentFiber.deletions;
        if (null !== deletions)
          for (var i = 0; i < deletions.length; i++) {
            var childToDelete = deletions[i], root3 = root$jscomp$0, returnFiber = parentFiber, parent = returnFiber;
            a: for (; null !== parent; ) {
              switch (parent.tag) {
                case 27:
                  if (isSingletonScope(parent.type)) {
                    hostParent = parent.stateNode;
                    hostParentIsContainer = false;
                    break a;
                  }
                  break;
                case 5:
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break a;
                case 3:
                case 4:
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break a;
              }
              parent = parent.return;
            }
            if (null === hostParent) throw Error(formatProdErrorMessage3(160));
            commitDeletionEffectsOnFiber(root3, returnFiber, childToDelete);
            hostParent = null;
            hostParentIsContainer = false;
            root3 = childToDelete.alternate;
            null !== root3 && (root3.return = null);
            childToDelete.return = null;
          }
        if (parentFiber.subtreeFlags & 13878)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            commitMutationEffectsOnFiber(parentFiber, root$jscomp$0), parentFiber = parentFiber.sibling;
      }
      var currentHoistableRoot = null;
      function commitMutationEffectsOnFiber(finishedWork, root3) {
        var current2 = finishedWork.alternate, flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 14:
          case 15:
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (commitHookEffectListUnmount(3, finishedWork, finishedWork.return), commitHookEffectListMount(3, finishedWork), commitHookEffectListUnmount(5, finishedWork, finishedWork.return));
            break;
          case 1:
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
            flags & 64 && offscreenSubtreeIsHidden && (finishedWork = finishedWork.updateQueue, null !== finishedWork && (flags = finishedWork.callbacks, null !== flags && (current2 = finishedWork.shared.hiddenCallbacks, finishedWork.shared.hiddenCallbacks = null === current2 ? flags : current2.concat(flags))));
            break;
          case 26:
            var hoistableRoot = currentHoistableRoot;
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
            if (flags & 4) {
              var currentResource = null !== current2 ? current2.memoizedState : null;
              flags = finishedWork.memoizedState;
              if (null === current2)
                if (null === flags)
                  if (null === finishedWork.stateNode) {
                    a: {
                      flags = finishedWork.type;
                      current2 = finishedWork.memoizedProps;
                      hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
                      b: switch (flags) {
                        case "title":
                          currentResource = hoistableRoot.getElementsByTagName("title")[0];
                          if (!currentResource || currentResource[internalHoistableMarker] || currentResource[internalInstanceKey] || "http://www.w3.org/2000/svg" === currentResource.namespaceURI || currentResource.hasAttribute("itemprop"))
                            currentResource = hoistableRoot.createElement(flags), hoistableRoot.head.insertBefore(
                              currentResource,
                              hoistableRoot.querySelector("head > title")
                            );
                          setInitialProperties(currentResource, flags, current2);
                          currentResource[internalInstanceKey] = finishedWork;
                          markNodeAsHoistable(currentResource);
                          flags = currentResource;
                          break a;
                        case "link":
                          var maybeNodes = getHydratableHoistableCache(
                            "link",
                            "href",
                            hoistableRoot
                          ).get(flags + (current2.href || ""));
                          if (maybeNodes) {
                            for (var i = 0; i < maybeNodes.length; i++)
                              if (currentResource = maybeNodes[i], currentResource.getAttribute("href") === (null == current2.href || "" === current2.href ? null : current2.href) && currentResource.getAttribute("rel") === (null == current2.rel ? null : current2.rel) && currentResource.getAttribute("title") === (null == current2.title ? null : current2.title) && currentResource.getAttribute("crossorigin") === (null == current2.crossOrigin ? null : current2.crossOrigin)) {
                                maybeNodes.splice(i, 1);
                                break b;
                              }
                          }
                          currentResource = hoistableRoot.createElement(flags);
                          setInitialProperties(currentResource, flags, current2);
                          hoistableRoot.head.appendChild(currentResource);
                          break;
                        case "meta":
                          if (maybeNodes = getHydratableHoistableCache(
                            "meta",
                            "content",
                            hoistableRoot
                          ).get(flags + (current2.content || ""))) {
                            for (i = 0; i < maybeNodes.length; i++)
                              if (currentResource = maybeNodes[i], currentResource.getAttribute("content") === (null == current2.content ? null : "" + current2.content) && currentResource.getAttribute("name") === (null == current2.name ? null : current2.name) && currentResource.getAttribute("property") === (null == current2.property ? null : current2.property) && currentResource.getAttribute("http-equiv") === (null == current2.httpEquiv ? null : current2.httpEquiv) && currentResource.getAttribute("charset") === (null == current2.charSet ? null : current2.charSet)) {
                                maybeNodes.splice(i, 1);
                                break b;
                              }
                          }
                          currentResource = hoistableRoot.createElement(flags);
                          setInitialProperties(currentResource, flags, current2);
                          hoistableRoot.head.appendChild(currentResource);
                          break;
                        default:
                          throw Error(formatProdErrorMessage3(468, flags));
                      }
                      currentResource[internalInstanceKey] = finishedWork;
                      markNodeAsHoistable(currentResource);
                      flags = currentResource;
                    }
                    finishedWork.stateNode = flags;
                  } else
                    mountHoistable(
                      hoistableRoot,
                      finishedWork.type,
                      finishedWork.stateNode
                    );
                else
                  finishedWork.stateNode = acquireResource(
                    hoistableRoot,
                    flags,
                    finishedWork.memoizedProps
                  );
              else
                currentResource !== flags ? (null === currentResource ? null !== current2.stateNode && (current2 = current2.stateNode, current2.parentNode.removeChild(current2)) : currentResource.count--, null === flags ? mountHoistable(
                  hoistableRoot,
                  finishedWork.type,
                  finishedWork.stateNode
                ) : acquireResource(
                  hoistableRoot,
                  flags,
                  finishedWork.memoizedProps
                )) : null === flags && null !== finishedWork.stateNode && commitHostUpdate(
                  finishedWork,
                  finishedWork.memoizedProps,
                  current2.memoizedProps
                );
            }
            break;
          case 27:
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
            null !== current2 && flags & 4 && commitHostUpdate(
              finishedWork,
              finishedWork.memoizedProps,
              current2.memoizedProps
            );
            break;
          case 5:
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 512 && (offscreenSubtreeWasHidden || null === current2 || safelyDetachRef(current2, current2.return));
            if (finishedWork.flags & 32) {
              hoistableRoot = finishedWork.stateNode;
              try {
                setTextContent(hoistableRoot, "");
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
            flags & 4 && null != finishedWork.stateNode && (hoistableRoot = finishedWork.memoizedProps, commitHostUpdate(
              finishedWork,
              hoistableRoot,
              null !== current2 ? current2.memoizedProps : hoistableRoot
            ));
            flags & 1024 && (needsFormReset = true);
            break;
          case 6:
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            if (flags & 4) {
              if (null === finishedWork.stateNode)
                throw Error(formatProdErrorMessage3(162));
              flags = finishedWork.memoizedProps;
              current2 = finishedWork.stateNode;
              try {
                current2.nodeValue = flags;
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            }
            break;
          case 3:
            tagCaches = null;
            hoistableRoot = currentHoistableRoot;
            currentHoistableRoot = getHoistableRoot(root3.containerInfo);
            recursivelyTraverseMutationEffects(root3, finishedWork);
            currentHoistableRoot = hoistableRoot;
            commitReconciliationEffects(finishedWork);
            if (flags & 4 && null !== current2 && current2.memoizedState.isDehydrated)
              try {
                retryIfBlockedOn(root3.containerInfo);
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            needsFormReset && (needsFormReset = false, recursivelyResetForms(finishedWork));
            break;
          case 4:
            flags = currentHoistableRoot;
            currentHoistableRoot = getHoistableRoot(
              finishedWork.stateNode.containerInfo
            );
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            currentHoistableRoot = flags;
            break;
          case 12:
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            break;
          case 13:
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            finishedWork.child.flags & 8192 && null !== finishedWork.memoizedState !== (null !== current2 && null !== current2.memoizedState) && (globalMostRecentFallbackTime = now());
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
          case 22:
            hoistableRoot = null !== finishedWork.memoizedState;
            var wasHidden = null !== current2 && null !== current2.memoizedState, prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden, prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden || hoistableRoot;
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || wasHidden;
            recursivelyTraverseMutationEffects(root3, finishedWork);
            offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
            offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
            commitReconciliationEffects(finishedWork);
            if (flags & 8192)
              a: for (root3 = finishedWork.stateNode, root3._visibility = hoistableRoot ? root3._visibility & -2 : root3._visibility | 1, hoistableRoot && (null === current2 || wasHidden || offscreenSubtreeIsHidden || offscreenSubtreeWasHidden || recursivelyTraverseDisappearLayoutEffects(finishedWork)), current2 = null, root3 = finishedWork; ; ) {
                if (5 === root3.tag || 26 === root3.tag) {
                  if (null === current2) {
                    wasHidden = current2 = root3;
                    try {
                      if (currentResource = wasHidden.stateNode, hoistableRoot)
                        maybeNodes = currentResource.style, "function" === typeof maybeNodes.setProperty ? maybeNodes.setProperty("display", "none", "important") : maybeNodes.display = "none";
                      else {
                        i = wasHidden.stateNode;
                        var styleProp = wasHidden.memoizedProps.style, display = void 0 !== styleProp && null !== styleProp && styleProp.hasOwnProperty("display") ? styleProp.display : null;
                        i.style.display = null == display || "boolean" === typeof display ? "" : ("" + display).trim();
                      }
                    } catch (error) {
                      captureCommitPhaseError(wasHidden, wasHidden.return, error);
                    }
                  }
                } else if (6 === root3.tag) {
                  if (null === current2) {
                    wasHidden = root3;
                    try {
                      wasHidden.stateNode.nodeValue = hoistableRoot ? "" : wasHidden.memoizedProps;
                    } catch (error) {
                      captureCommitPhaseError(wasHidden, wasHidden.return, error);
                    }
                  }
                } else if ((22 !== root3.tag && 23 !== root3.tag || null === root3.memoizedState || root3 === finishedWork) && null !== root3.child) {
                  root3.child.return = root3;
                  root3 = root3.child;
                  continue;
                }
                if (root3 === finishedWork) break a;
                for (; null === root3.sibling; ) {
                  if (null === root3.return || root3.return === finishedWork) break a;
                  current2 === root3 && (current2 = null);
                  root3 = root3.return;
                }
                current2 === root3 && (current2 = null);
                root3.sibling.return = root3.return;
                root3 = root3.sibling;
              }
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (current2 = flags.retryQueue, null !== current2 && (flags.retryQueue = null, attachSuspenseRetryListeners(finishedWork, current2))));
            break;
          case 19:
            recursivelyTraverseMutationEffects(root3, finishedWork);
            commitReconciliationEffects(finishedWork);
            flags & 4 && (flags = finishedWork.updateQueue, null !== flags && (finishedWork.updateQueue = null, attachSuspenseRetryListeners(finishedWork, flags)));
            break;
          case 30:
            break;
          case 21:
            break;
          default:
            recursivelyTraverseMutationEffects(root3, finishedWork), commitReconciliationEffects(finishedWork);
        }
      }
      function commitReconciliationEffects(finishedWork) {
        var flags = finishedWork.flags;
        if (flags & 2) {
          try {
            for (var hostParentFiber, parentFiber = finishedWork.return; null !== parentFiber; ) {
              if (isHostParent(parentFiber)) {
                hostParentFiber = parentFiber;
                break;
              }
              parentFiber = parentFiber.return;
            }
            if (null == hostParentFiber) throw Error(formatProdErrorMessage3(160));
            switch (hostParentFiber.tag) {
              case 27:
                var parent = hostParentFiber.stateNode, before = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before, parent);
                break;
              case 5:
                var parent$144 = hostParentFiber.stateNode;
                hostParentFiber.flags & 32 && (setTextContent(parent$144, ""), hostParentFiber.flags &= -33);
                var before$145 = getHostSibling(finishedWork);
                insertOrAppendPlacementNode(finishedWork, before$145, parent$144);
                break;
              case 3:
              case 4:
                var parent$146 = hostParentFiber.stateNode.containerInfo, before$147 = getHostSibling(finishedWork);
                insertOrAppendPlacementNodeIntoContainer(
                  finishedWork,
                  before$147,
                  parent$146
                );
                break;
              default:
                throw Error(formatProdErrorMessage3(161));
            }
          } catch (error) {
            captureCommitPhaseError(finishedWork, finishedWork.return, error);
          }
          finishedWork.flags &= -3;
        }
        flags & 4096 && (finishedWork.flags &= -4097);
      }
      function recursivelyResetForms(parentFiber) {
        if (parentFiber.subtreeFlags & 1024)
          for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            var fiber = parentFiber;
            recursivelyResetForms(fiber);
            5 === fiber.tag && fiber.flags & 1024 && fiber.stateNode.reset();
            parentFiber = parentFiber.sibling;
          }
      }
      function recursivelyTraverseLayoutEffects(root3, parentFiber) {
        if (parentFiber.subtreeFlags & 8772)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            commitLayoutEffectOnFiber(root3, parentFiber.alternate, parentFiber), parentFiber = parentFiber.sibling;
      }
      function recursivelyTraverseDisappearLayoutEffects(parentFiber) {
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          var finishedWork = parentFiber;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 14:
            case 15:
              commitHookEffectListUnmount(4, finishedWork, finishedWork.return);
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 1:
              safelyDetachRef(finishedWork, finishedWork.return);
              var instance = finishedWork.stateNode;
              "function" === typeof instance.componentWillUnmount && safelyCallComponentWillUnmount(
                finishedWork,
                finishedWork.return,
                instance
              );
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 27:
              releaseSingletonInstance(finishedWork.stateNode);
            case 26:
            case 5:
              safelyDetachRef(finishedWork, finishedWork.return);
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 22:
              null === finishedWork.memoizedState && recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            case 30:
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
              break;
            default:
              recursivelyTraverseDisappearLayoutEffects(finishedWork);
          }
          parentFiber = parentFiber.sibling;
        }
      }
      function recursivelyTraverseReappearLayoutEffects(finishedRoot$jscomp$0, parentFiber, includeWorkInProgressEffects) {
        includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 8772);
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          var current2 = parentFiber.alternate, finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              commitHookEffectListMount(4, finishedWork);
              break;
            case 1:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              current2 = finishedWork;
              finishedRoot = current2.stateNode;
              if ("function" === typeof finishedRoot.componentDidMount)
                try {
                  finishedRoot.componentDidMount();
                } catch (error) {
                  captureCommitPhaseError(current2, current2.return, error);
                }
              current2 = finishedWork;
              finishedRoot = current2.updateQueue;
              if (null !== finishedRoot) {
                var instance = current2.stateNode;
                try {
                  var hiddenCallbacks = finishedRoot.shared.hiddenCallbacks;
                  if (null !== hiddenCallbacks)
                    for (finishedRoot.shared.hiddenCallbacks = null, finishedRoot = 0; finishedRoot < hiddenCallbacks.length; finishedRoot++)
                      callCallback(hiddenCallbacks[finishedRoot], instance);
                } catch (error) {
                  captureCommitPhaseError(current2, current2.return, error);
                }
              }
              includeWorkInProgressEffects && flags & 64 && commitClassCallbacks(finishedWork);
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 27:
              commitHostSingletonAcquisition(finishedWork);
            case 26:
            case 5:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && null === current2 && flags & 4 && commitHostMount(finishedWork);
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 12:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              break;
            case 13:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && flags & 4 && commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
              break;
            case 22:
              null === finishedWork.memoizedState && recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
              safelyAttachRef(finishedWork, finishedWork.return);
              break;
            case 30:
              break;
            default:
              recursivelyTraverseReappearLayoutEffects(
                finishedRoot,
                finishedWork,
                includeWorkInProgressEffects
              );
          }
          parentFiber = parentFiber.sibling;
        }
      }
      function commitOffscreenPassiveMountEffects(current2, finishedWork) {
        var previousCache = null;
        null !== current2 && null !== current2.memoizedState && null !== current2.memoizedState.cachePool && (previousCache = current2.memoizedState.cachePool.pool);
        current2 = null;
        null !== finishedWork.memoizedState && null !== finishedWork.memoizedState.cachePool && (current2 = finishedWork.memoizedState.cachePool.pool);
        current2 !== previousCache && (null != current2 && current2.refCount++, null != previousCache && releaseCache(previousCache));
      }
      function commitCachePassiveMountEffect(current2, finishedWork) {
        current2 = null;
        null !== finishedWork.alternate && (current2 = finishedWork.alternate.memoizedState.cache);
        finishedWork = finishedWork.memoizedState.cache;
        finishedWork !== current2 && (finishedWork.refCount++, null != current2 && releaseCache(current2));
      }
      function recursivelyTraversePassiveMountEffects(root3, parentFiber, committedLanes, committedTransitions) {
        if (parentFiber.subtreeFlags & 10256)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            commitPassiveMountOnFiber(
              root3,
              parentFiber,
              committedLanes,
              committedTransitions
            ), parentFiber = parentFiber.sibling;
      }
      function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
        var flags = finishedWork.flags;
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && commitHookEffectListMount(9, finishedWork);
            break;
          case 1:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            break;
          case 3:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && (finishedRoot = null, null !== finishedWork.alternate && (finishedRoot = finishedWork.alternate.memoizedState.cache), finishedWork = finishedWork.memoizedState.cache, finishedWork !== finishedRoot && (finishedWork.refCount++, null != finishedRoot && releaseCache(finishedRoot)));
            break;
          case 12:
            if (flags & 2048) {
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
              finishedRoot = finishedWork.stateNode;
              try {
                var _finishedWork$memoize2 = finishedWork.memoizedProps, id = _finishedWork$memoize2.id, onPostCommit = _finishedWork$memoize2.onPostCommit;
                "function" === typeof onPostCommit && onPostCommit(
                  id,
                  null === finishedWork.alternate ? "mount" : "update",
                  finishedRoot.passiveEffectDuration,
                  -0
                );
              } catch (error) {
                captureCommitPhaseError(finishedWork, finishedWork.return, error);
              }
            } else
              recursivelyTraversePassiveMountEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions
              );
            break;
          case 13:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            break;
          case 23:
            break;
          case 22:
            _finishedWork$memoize2 = finishedWork.stateNode;
            id = finishedWork.alternate;
            null !== finishedWork.memoizedState ? _finishedWork$memoize2._visibility & 2 ? recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            ) : recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork) : _finishedWork$memoize2._visibility & 2 ? recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            ) : (_finishedWork$memoize2._visibility |= 2, recursivelyTraverseReconnectPassiveEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions,
              0 !== (finishedWork.subtreeFlags & 10256)
            ));
            flags & 2048 && commitOffscreenPassiveMountEffects(id, finishedWork);
            break;
          case 24:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
            flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
            break;
          default:
            recursivelyTraversePassiveMountEffects(
              finishedRoot,
              finishedWork,
              committedLanes,
              committedTransitions
            );
        }
      }
      function recursivelyTraverseReconnectPassiveEffects(finishedRoot$jscomp$0, parentFiber, committedLanes$jscomp$0, committedTransitions$jscomp$0, includeWorkInProgressEffects) {
        includeWorkInProgressEffects = includeWorkInProgressEffects && 0 !== (parentFiber.subtreeFlags & 10256);
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, committedLanes = committedLanes$jscomp$0, committedTransitions = committedTransitions$jscomp$0, flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case 0:
            case 11:
            case 15:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              );
              commitHookEffectListMount(8, finishedWork);
              break;
            case 23:
              break;
            case 22:
              var instance = finishedWork.stateNode;
              null !== finishedWork.memoizedState ? instance._visibility & 2 ? recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              ) : recursivelyTraverseAtomicPassiveEffects(
                finishedRoot,
                finishedWork
              ) : (instance._visibility |= 2, recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              ));
              includeWorkInProgressEffects && flags & 2048 && commitOffscreenPassiveMountEffects(
                finishedWork.alternate,
                finishedWork
              );
              break;
            case 24:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              );
              includeWorkInProgressEffects && flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
              break;
            default:
              recursivelyTraverseReconnectPassiveEffects(
                finishedRoot,
                finishedWork,
                committedLanes,
                committedTransitions,
                includeWorkInProgressEffects
              );
          }
          parentFiber = parentFiber.sibling;
        }
      }
      function recursivelyTraverseAtomicPassiveEffects(finishedRoot$jscomp$0, parentFiber) {
        if (parentFiber.subtreeFlags & 10256)
          for (parentFiber = parentFiber.child; null !== parentFiber; ) {
            var finishedRoot = finishedRoot$jscomp$0, finishedWork = parentFiber, flags = finishedWork.flags;
            switch (finishedWork.tag) {
              case 22:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                flags & 2048 && commitOffscreenPassiveMountEffects(
                  finishedWork.alternate,
                  finishedWork
                );
                break;
              case 24:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
                flags & 2048 && commitCachePassiveMountEffect(finishedWork.alternate, finishedWork);
                break;
              default:
                recursivelyTraverseAtomicPassiveEffects(finishedRoot, finishedWork);
            }
            parentFiber = parentFiber.sibling;
          }
      }
      var suspenseyCommitFlag = 8192;
      function recursivelyAccumulateSuspenseyCommit(parentFiber) {
        if (parentFiber.subtreeFlags & suspenseyCommitFlag)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            accumulateSuspenseyCommitOnFiber(parentFiber), parentFiber = parentFiber.sibling;
      }
      function accumulateSuspenseyCommitOnFiber(fiber) {
        switch (fiber.tag) {
          case 26:
            recursivelyAccumulateSuspenseyCommit(fiber);
            fiber.flags & suspenseyCommitFlag && null !== fiber.memoizedState && suspendResource(
              currentHoistableRoot,
              fiber.memoizedState,
              fiber.memoizedProps
            );
            break;
          case 5:
            recursivelyAccumulateSuspenseyCommit(fiber);
            break;
          case 3:
          case 4:
            var previousHoistableRoot = currentHoistableRoot;
            currentHoistableRoot = getHoistableRoot(fiber.stateNode.containerInfo);
            recursivelyAccumulateSuspenseyCommit(fiber);
            currentHoistableRoot = previousHoistableRoot;
            break;
          case 22:
            null === fiber.memoizedState && (previousHoistableRoot = fiber.alternate, null !== previousHoistableRoot && null !== previousHoistableRoot.memoizedState ? (previousHoistableRoot = suspenseyCommitFlag, suspenseyCommitFlag = 16777216, recursivelyAccumulateSuspenseyCommit(fiber), suspenseyCommitFlag = previousHoistableRoot) : recursivelyAccumulateSuspenseyCommit(fiber));
            break;
          default:
            recursivelyAccumulateSuspenseyCommit(fiber);
        }
      }
      function detachAlternateSiblings(parentFiber) {
        var previousFiber = parentFiber.alternate;
        if (null !== previousFiber && (parentFiber = previousFiber.child, null !== parentFiber)) {
          previousFiber.child = null;
          do
            previousFiber = parentFiber.sibling, parentFiber.sibling = null, parentFiber = previousFiber;
          while (null !== parentFiber);
        }
      }
      function recursivelyTraversePassiveUnmountEffects(parentFiber) {
        var deletions = parentFiber.deletions;
        if (0 !== (parentFiber.flags & 16)) {
          if (null !== deletions)
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              nextEffect = childToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                childToDelete,
                parentFiber
              );
            }
          detachAlternateSiblings(parentFiber);
        }
        if (parentFiber.subtreeFlags & 10256)
          for (parentFiber = parentFiber.child; null !== parentFiber; )
            commitPassiveUnmountOnFiber(parentFiber), parentFiber = parentFiber.sibling;
      }
      function commitPassiveUnmountOnFiber(finishedWork) {
        switch (finishedWork.tag) {
          case 0:
          case 11:
          case 15:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            finishedWork.flags & 2048 && commitHookEffectListUnmount(9, finishedWork, finishedWork.return);
            break;
          case 3:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
          case 12:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
          case 22:
            var instance = finishedWork.stateNode;
            null !== finishedWork.memoizedState && instance._visibility & 2 && (null === finishedWork.return || 13 !== finishedWork.return.tag) ? (instance._visibility &= -3, recursivelyTraverseDisconnectPassiveEffects(finishedWork)) : recursivelyTraversePassiveUnmountEffects(finishedWork);
            break;
          default:
            recursivelyTraversePassiveUnmountEffects(finishedWork);
        }
      }
      function recursivelyTraverseDisconnectPassiveEffects(parentFiber) {
        var deletions = parentFiber.deletions;
        if (0 !== (parentFiber.flags & 16)) {
          if (null !== deletions)
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              nextEffect = childToDelete;
              commitPassiveUnmountEffectsInsideOfDeletedTree_begin(
                childToDelete,
                parentFiber
              );
            }
          detachAlternateSiblings(parentFiber);
        }
        for (parentFiber = parentFiber.child; null !== parentFiber; ) {
          deletions = parentFiber;
          switch (deletions.tag) {
            case 0:
            case 11:
            case 15:
              commitHookEffectListUnmount(8, deletions, deletions.return);
              recursivelyTraverseDisconnectPassiveEffects(deletions);
              break;
            case 22:
              i = deletions.stateNode;
              i._visibility & 2 && (i._visibility &= -3, recursivelyTraverseDisconnectPassiveEffects(deletions));
              break;
            default:
              recursivelyTraverseDisconnectPassiveEffects(deletions);
          }
          parentFiber = parentFiber.sibling;
        }
      }
      function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
        for (; null !== nextEffect; ) {
          var fiber = nextEffect;
          switch (fiber.tag) {
            case 0:
            case 11:
            case 15:
              commitHookEffectListUnmount(8, fiber, nearestMountedAncestor);
              break;
            case 23:
            case 22:
              if (null !== fiber.memoizedState && null !== fiber.memoizedState.cachePool) {
                var cache = fiber.memoizedState.cachePool.pool;
                null != cache && cache.refCount++;
              }
              break;
            case 24:
              releaseCache(fiber.memoizedState.cache);
          }
          cache = fiber.child;
          if (null !== cache) cache.return = fiber, nextEffect = cache;
          else
            a: for (fiber = deletedSubtreeRoot; null !== nextEffect; ) {
              cache = nextEffect;
              var sibling = cache.sibling, returnFiber = cache.return;
              detachFiberAfterEffects(cache);
              if (cache === fiber) {
                nextEffect = null;
                break a;
              }
              if (null !== sibling) {
                sibling.return = returnFiber;
                nextEffect = sibling;
                break a;
              }
              nextEffect = returnFiber;
            }
        }
      }
      var DefaultAsyncDispatcher = {
        getCacheForType: function(resourceType) {
          var cache = readContext(CacheContext), cacheForType = cache.data.get(resourceType);
          void 0 === cacheForType && (cacheForType = resourceType(), cache.data.set(resourceType, cacheForType));
          return cacheForType;
        }
      };
      var PossiblyWeakMap = "function" === typeof WeakMap ? WeakMap : Map;
      var executionContext = 0;
      var workInProgressRoot = null;
      var workInProgress = null;
      var workInProgressRootRenderLanes = 0;
      var workInProgressSuspendedReason = 0;
      var workInProgressThrownValue = null;
      var workInProgressRootDidSkipSuspendedSiblings = false;
      var workInProgressRootIsPrerendering = false;
      var workInProgressRootDidAttachPingListener = false;
      var entangledRenderLanes = 0;
      var workInProgressRootExitStatus = 0;
      var workInProgressRootSkippedLanes = 0;
      var workInProgressRootInterleavedUpdatedLanes = 0;
      var workInProgressRootPingedLanes = 0;
      var workInProgressDeferredLane = 0;
      var workInProgressSuspendedRetryLanes = 0;
      var workInProgressRootConcurrentErrors = null;
      var workInProgressRootRecoverableErrors = null;
      var workInProgressRootDidIncludeRecursiveRenderUpdate = false;
      var globalMostRecentFallbackTime = 0;
      var workInProgressRootRenderTargetTime = Infinity;
      var workInProgressTransitions = null;
      var legacyErrorBoundariesThatAlreadyFailed = null;
      var pendingEffectsStatus = 0;
      var pendingEffectsRoot = null;
      var pendingFinishedWork = null;
      var pendingEffectsLanes = 0;
      var pendingEffectsRemainingLanes = 0;
      var pendingPassiveTransitions = null;
      var pendingRecoverableErrors = null;
      var nestedUpdateCount = 0;
      var rootWithNestedUpdates = null;
      function requestUpdateLane() {
        if (0 !== (executionContext & 2) && 0 !== workInProgressRootRenderLanes)
          return workInProgressRootRenderLanes & -workInProgressRootRenderLanes;
        if (null !== ReactSharedInternals.T) {
          var actionScopeLane = currentEntangledLane;
          return 0 !== actionScopeLane ? actionScopeLane : requestTransitionLane();
        }
        return resolveUpdatePriority();
      }
      function requestDeferredLane() {
        0 === workInProgressDeferredLane && (workInProgressDeferredLane = 0 === (workInProgressRootRenderLanes & 536870912) || isHydrating ? claimNextTransitionLane() : 536870912);
        var suspenseHandler = suspenseHandlerStackCursor.current;
        null !== suspenseHandler && (suspenseHandler.flags |= 32);
        return workInProgressDeferredLane;
      }
      function scheduleUpdateOnFiber(root3, fiber, lane) {
        if (root3 === workInProgressRoot && (2 === workInProgressSuspendedReason || 9 === workInProgressSuspendedReason) || null !== root3.cancelPendingCommit)
          prepareFreshStack(root3, 0), markRootSuspended(
            root3,
            workInProgressRootRenderLanes,
            workInProgressDeferredLane,
            false
          );
        markRootUpdated$1(root3, lane);
        if (0 === (executionContext & 2) || root3 !== workInProgressRoot)
          root3 === workInProgressRoot && (0 === (executionContext & 2) && (workInProgressRootInterleavedUpdatedLanes |= lane), 4 === workInProgressRootExitStatus && markRootSuspended(
            root3,
            workInProgressRootRenderLanes,
            workInProgressDeferredLane,
            false
          )), ensureRootIsScheduled(root3);
      }
      function performWorkOnRoot(root$jscomp$0, lanes, forceSync) {
        if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage3(327));
        var shouldTimeSlice = !forceSync && 0 === (lanes & 124) && 0 === (lanes & root$jscomp$0.expiredLanes) || checkIfRootIsPrerendering(root$jscomp$0, lanes), exitStatus = shouldTimeSlice ? renderRootConcurrent(root$jscomp$0, lanes) : renderRootSync(root$jscomp$0, lanes, true), renderWasConcurrent = shouldTimeSlice;
        do {
          if (0 === exitStatus) {
            workInProgressRootIsPrerendering && !shouldTimeSlice && markRootSuspended(root$jscomp$0, lanes, 0, false);
            break;
          } else {
            forceSync = root$jscomp$0.current.alternate;
            if (renderWasConcurrent && !isRenderConsistentWithExternalStores(forceSync)) {
              exitStatus = renderRootSync(root$jscomp$0, lanes, false);
              renderWasConcurrent = false;
              continue;
            }
            if (2 === exitStatus) {
              renderWasConcurrent = lanes;
              if (root$jscomp$0.errorRecoveryDisabledLanes & renderWasConcurrent)
                var JSCompiler_inline_result = 0;
              else
                JSCompiler_inline_result = root$jscomp$0.pendingLanes & -536870913, JSCompiler_inline_result = 0 !== JSCompiler_inline_result ? JSCompiler_inline_result : JSCompiler_inline_result & 536870912 ? 536870912 : 0;
              if (0 !== JSCompiler_inline_result) {
                lanes = JSCompiler_inline_result;
                a: {
                  var root3 = root$jscomp$0;
                  exitStatus = workInProgressRootConcurrentErrors;
                  var wasRootDehydrated = root3.current.memoizedState.isDehydrated;
                  wasRootDehydrated && (prepareFreshStack(root3, JSCompiler_inline_result).flags |= 256);
                  JSCompiler_inline_result = renderRootSync(
                    root3,
                    JSCompiler_inline_result,
                    false
                  );
                  if (2 !== JSCompiler_inline_result) {
                    if (workInProgressRootDidAttachPingListener && !wasRootDehydrated) {
                      root3.errorRecoveryDisabledLanes |= renderWasConcurrent;
                      workInProgressRootInterleavedUpdatedLanes |= renderWasConcurrent;
                      exitStatus = 4;
                      break a;
                    }
                    renderWasConcurrent = workInProgressRootRecoverableErrors;
                    workInProgressRootRecoverableErrors = exitStatus;
                    null !== renderWasConcurrent && (null === workInProgressRootRecoverableErrors ? workInProgressRootRecoverableErrors = renderWasConcurrent : workInProgressRootRecoverableErrors.push.apply(
                      workInProgressRootRecoverableErrors,
                      renderWasConcurrent
                    ));
                  }
                  exitStatus = JSCompiler_inline_result;
                }
                renderWasConcurrent = false;
                if (2 !== exitStatus) continue;
              }
            }
            if (1 === exitStatus) {
              prepareFreshStack(root$jscomp$0, 0);
              markRootSuspended(root$jscomp$0, lanes, 0, true);
              break;
            }
            a: {
              shouldTimeSlice = root$jscomp$0;
              renderWasConcurrent = exitStatus;
              switch (renderWasConcurrent) {
                case 0:
                case 1:
                  throw Error(formatProdErrorMessage3(345));
                case 4:
                  if ((lanes & 4194048) !== lanes) break;
                case 6:
                  markRootSuspended(
                    shouldTimeSlice,
                    lanes,
                    workInProgressDeferredLane,
                    !workInProgressRootDidSkipSuspendedSiblings
                  );
                  break a;
                case 2:
                  workInProgressRootRecoverableErrors = null;
                  break;
                case 3:
                case 5:
                  break;
                default:
                  throw Error(formatProdErrorMessage3(329));
              }
              if ((lanes & 62914560) === lanes && (exitStatus = globalMostRecentFallbackTime + 300 - now(), 10 < exitStatus)) {
                markRootSuspended(
                  shouldTimeSlice,
                  lanes,
                  workInProgressDeferredLane,
                  !workInProgressRootDidSkipSuspendedSiblings
                );
                if (0 !== getNextLanes(shouldTimeSlice, 0, true)) break a;
                shouldTimeSlice.timeoutHandle = scheduleTimeout(
                  commitRootWhenReady.bind(
                    null,
                    shouldTimeSlice,
                    forceSync,
                    workInProgressRootRecoverableErrors,
                    workInProgressTransitions,
                    workInProgressRootDidIncludeRecursiveRenderUpdate,
                    lanes,
                    workInProgressDeferredLane,
                    workInProgressRootInterleavedUpdatedLanes,
                    workInProgressSuspendedRetryLanes,
                    workInProgressRootDidSkipSuspendedSiblings,
                    renderWasConcurrent,
                    2,
                    -0,
                    0
                  ),
                  exitStatus
                );
                break a;
              }
              commitRootWhenReady(
                shouldTimeSlice,
                forceSync,
                workInProgressRootRecoverableErrors,
                workInProgressTransitions,
                workInProgressRootDidIncludeRecursiveRenderUpdate,
                lanes,
                workInProgressDeferredLane,
                workInProgressRootInterleavedUpdatedLanes,
                workInProgressSuspendedRetryLanes,
                workInProgressRootDidSkipSuspendedSiblings,
                renderWasConcurrent,
                0,
                -0,
                0
              );
            }
          }
          break;
        } while (1);
        ensureRootIsScheduled(root$jscomp$0);
      }
      function commitRootWhenReady(root3, finishedWork, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, lanes, spawnedLane, updatedLanes, suspendedRetryLanes, didSkipSuspendedSiblings, exitStatus, suspendedCommitReason, completedRenderStartTime, completedRenderEndTime) {
        root3.timeoutHandle = -1;
        suspendedCommitReason = finishedWork.subtreeFlags;
        if (suspendedCommitReason & 8192 || 16785408 === (suspendedCommitReason & 16785408)) {
          if (suspendedState = { stylesheets: null, count: 0, unsuspend: noop6 }, accumulateSuspenseyCommitOnFiber(finishedWork), suspendedCommitReason = waitForCommitToBeReady(), null !== suspendedCommitReason) {
            root3.cancelPendingCommit = suspendedCommitReason(
              commitRoot.bind(
                null,
                root3,
                finishedWork,
                lanes,
                recoverableErrors,
                transitions,
                didIncludeRenderPhaseUpdate,
                spawnedLane,
                updatedLanes,
                suspendedRetryLanes,
                exitStatus,
                1,
                completedRenderStartTime,
                completedRenderEndTime
              )
            );
            markRootSuspended(root3, lanes, spawnedLane, !didSkipSuspendedSiblings);
            return;
          }
        }
        commitRoot(
          root3,
          finishedWork,
          lanes,
          recoverableErrors,
          transitions,
          didIncludeRenderPhaseUpdate,
          spawnedLane,
          updatedLanes,
          suspendedRetryLanes
        );
      }
      function isRenderConsistentWithExternalStores(finishedWork) {
        for (var node = finishedWork; ; ) {
          var tag = node.tag;
          if ((0 === tag || 11 === tag || 15 === tag) && node.flags & 16384 && (tag = node.updateQueue, null !== tag && (tag = tag.stores, null !== tag)))
            for (var i = 0; i < tag.length; i++) {
              var check = tag[i], getSnapshot = check.getSnapshot;
              check = check.value;
              try {
                if (!objectIs(getSnapshot(), check)) return false;
              } catch (error) {
                return false;
              }
            }
          tag = node.child;
          if (node.subtreeFlags & 16384 && null !== tag)
            tag.return = node, node = tag;
          else {
            if (node === finishedWork) break;
            for (; null === node.sibling; ) {
              if (null === node.return || node.return === finishedWork) return true;
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        return true;
      }
      function markRootSuspended(root3, suspendedLanes, spawnedLane, didAttemptEntireTree) {
        suspendedLanes &= ~workInProgressRootPingedLanes;
        suspendedLanes &= ~workInProgressRootInterleavedUpdatedLanes;
        root3.suspendedLanes |= suspendedLanes;
        root3.pingedLanes &= ~suspendedLanes;
        didAttemptEntireTree && (root3.warmLanes |= suspendedLanes);
        didAttemptEntireTree = root3.expirationTimes;
        for (var lanes = suspendedLanes; 0 < lanes; ) {
          var index$4 = 31 - clz32(lanes), lane = 1 << index$4;
          didAttemptEntireTree[index$4] = -1;
          lanes &= ~lane;
        }
        0 !== spawnedLane && markSpawnedDeferredLane(root3, spawnedLane, suspendedLanes);
      }
      function flushSyncWork$1() {
        return 0 === (executionContext & 6) ? (flushSyncWorkAcrossRoots_impl(0, false), false) : true;
      }
      function resetWorkInProgressStack() {
        if (null !== workInProgress) {
          if (0 === workInProgressSuspendedReason)
            var interruptedWork = workInProgress.return;
          else
            interruptedWork = workInProgress, lastContextDependency = currentlyRenderingFiber$1 = null, resetHooksOnUnwind(interruptedWork), thenableState = null, thenableIndexCounter = 0, interruptedWork = workInProgress;
          for (; null !== interruptedWork; )
            unwindInterruptedWork(interruptedWork.alternate, interruptedWork), interruptedWork = interruptedWork.return;
          workInProgress = null;
        }
      }
      function prepareFreshStack(root3, lanes) {
        var timeoutHandle = root3.timeoutHandle;
        -1 !== timeoutHandle && (root3.timeoutHandle = -1, cancelTimeout(timeoutHandle));
        timeoutHandle = root3.cancelPendingCommit;
        null !== timeoutHandle && (root3.cancelPendingCommit = null, timeoutHandle());
        resetWorkInProgressStack();
        workInProgressRoot = root3;
        workInProgress = timeoutHandle = createWorkInProgress(root3.current, null);
        workInProgressRootRenderLanes = lanes;
        workInProgressSuspendedReason = 0;
        workInProgressThrownValue = null;
        workInProgressRootDidSkipSuspendedSiblings = false;
        workInProgressRootIsPrerendering = checkIfRootIsPrerendering(root3, lanes);
        workInProgressRootDidAttachPingListener = false;
        workInProgressSuspendedRetryLanes = workInProgressDeferredLane = workInProgressRootPingedLanes = workInProgressRootInterleavedUpdatedLanes = workInProgressRootSkippedLanes = workInProgressRootExitStatus = 0;
        workInProgressRootRecoverableErrors = workInProgressRootConcurrentErrors = null;
        workInProgressRootDidIncludeRecursiveRenderUpdate = false;
        0 !== (lanes & 8) && (lanes |= lanes & 32);
        var allEntangledLanes = root3.entangledLanes;
        if (0 !== allEntangledLanes)
          for (root3 = root3.entanglements, allEntangledLanes &= lanes; 0 < allEntangledLanes; ) {
            var index$2 = 31 - clz32(allEntangledLanes), lane = 1 << index$2;
            lanes |= root3[index$2];
            allEntangledLanes &= ~lane;
          }
        entangledRenderLanes = lanes;
        finishQueueingConcurrentUpdates();
        return timeoutHandle;
      }
      function handleThrow(root3, thrownValue) {
        currentlyRenderingFiber = null;
        ReactSharedInternals.H = ContextOnlyDispatcher;
        thrownValue === SuspenseException || thrownValue === SuspenseActionException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 3) : thrownValue === SuspenseyCommitException ? (thrownValue = getSuspendedThenable(), workInProgressSuspendedReason = 4) : workInProgressSuspendedReason = thrownValue === SelectiveHydrationException ? 8 : null !== thrownValue && "object" === typeof thrownValue && "function" === typeof thrownValue.then ? 6 : 1;
        workInProgressThrownValue = thrownValue;
        null === workInProgress && (workInProgressRootExitStatus = 1, logUncaughtError(
          root3,
          createCapturedValueAtFiber(thrownValue, root3.current)
        ));
      }
      function pushDispatcher() {
        var prevDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = ContextOnlyDispatcher;
        return null === prevDispatcher ? ContextOnlyDispatcher : prevDispatcher;
      }
      function pushAsyncDispatcher() {
        var prevAsyncDispatcher = ReactSharedInternals.A;
        ReactSharedInternals.A = DefaultAsyncDispatcher;
        return prevAsyncDispatcher;
      }
      function renderDidSuspendDelayIfPossible() {
        workInProgressRootExitStatus = 4;
        workInProgressRootDidSkipSuspendedSiblings || (workInProgressRootRenderLanes & 4194048) !== workInProgressRootRenderLanes && null !== suspenseHandlerStackCursor.current || (workInProgressRootIsPrerendering = true);
        0 === (workInProgressRootSkippedLanes & 134217727) && 0 === (workInProgressRootInterleavedUpdatedLanes & 134217727) || null === workInProgressRoot || markRootSuspended(
          workInProgressRoot,
          workInProgressRootRenderLanes,
          workInProgressDeferredLane,
          false
        );
      }
      function renderRootSync(root3, lanes, shouldYieldForPrerendering) {
        var prevExecutionContext = executionContext;
        executionContext |= 2;
        var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
        if (workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes)
          workInProgressTransitions = null, prepareFreshStack(root3, lanes);
        lanes = false;
        var exitStatus = workInProgressRootExitStatus;
        a: do
          try {
            if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
              var unitOfWork = workInProgress, thrownValue = workInProgressThrownValue;
              switch (workInProgressSuspendedReason) {
                case 8:
                  resetWorkInProgressStack();
                  exitStatus = 6;
                  break a;
                case 3:
                case 2:
                case 9:
                case 6:
                  null === suspenseHandlerStackCursor.current && (lanes = true);
                  var reason = workInProgressSuspendedReason;
                  workInProgressSuspendedReason = 0;
                  workInProgressThrownValue = null;
                  throwAndUnwindWorkLoop(root3, unitOfWork, thrownValue, reason);
                  if (shouldYieldForPrerendering && workInProgressRootIsPrerendering) {
                    exitStatus = 0;
                    break a;
                  }
                  break;
                default:
                  reason = workInProgressSuspendedReason, workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root3, unitOfWork, thrownValue, reason);
              }
            }
            workLoopSync();
            exitStatus = workInProgressRootExitStatus;
            break;
          } catch (thrownValue$167) {
            handleThrow(root3, thrownValue$167);
          }
        while (1);
        lanes && root3.shellSuspendCounter++;
        lastContextDependency = currentlyRenderingFiber$1 = null;
        executionContext = prevExecutionContext;
        ReactSharedInternals.H = prevDispatcher;
        ReactSharedInternals.A = prevAsyncDispatcher;
        null === workInProgress && (workInProgressRoot = null, workInProgressRootRenderLanes = 0, finishQueueingConcurrentUpdates());
        return exitStatus;
      }
      function workLoopSync() {
        for (; null !== workInProgress; ) performUnitOfWork(workInProgress);
      }
      function renderRootConcurrent(root3, lanes) {
        var prevExecutionContext = executionContext;
        executionContext |= 2;
        var prevDispatcher = pushDispatcher(), prevAsyncDispatcher = pushAsyncDispatcher();
        workInProgressRoot !== root3 || workInProgressRootRenderLanes !== lanes ? (workInProgressTransitions = null, workInProgressRootRenderTargetTime = now() + 500, prepareFreshStack(root3, lanes)) : workInProgressRootIsPrerendering = checkIfRootIsPrerendering(
          root3,
          lanes
        );
        a: do
          try {
            if (0 !== workInProgressSuspendedReason && null !== workInProgress) {
              lanes = workInProgress;
              var thrownValue = workInProgressThrownValue;
              b: switch (workInProgressSuspendedReason) {
                case 1:
                  workInProgressSuspendedReason = 0;
                  workInProgressThrownValue = null;
                  throwAndUnwindWorkLoop(root3, lanes, thrownValue, 1);
                  break;
                case 2:
                case 9:
                  if (isThenableResolved(thrownValue)) {
                    workInProgressSuspendedReason = 0;
                    workInProgressThrownValue = null;
                    replaySuspendedUnitOfWork(lanes);
                    break;
                  }
                  lanes = function() {
                    2 !== workInProgressSuspendedReason && 9 !== workInProgressSuspendedReason || workInProgressRoot !== root3 || (workInProgressSuspendedReason = 7);
                    ensureRootIsScheduled(root3);
                  };
                  thrownValue.then(lanes, lanes);
                  break a;
                case 3:
                  workInProgressSuspendedReason = 7;
                  break a;
                case 4:
                  workInProgressSuspendedReason = 5;
                  break a;
                case 7:
                  isThenableResolved(thrownValue) ? (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, replaySuspendedUnitOfWork(lanes)) : (workInProgressSuspendedReason = 0, workInProgressThrownValue = null, throwAndUnwindWorkLoop(root3, lanes, thrownValue, 7));
                  break;
                case 5:
                  var resource = null;
                  switch (workInProgress.tag) {
                    case 26:
                      resource = workInProgress.memoizedState;
                    case 5:
                    case 27:
                      var hostFiber = workInProgress;
                      if (resource ? preloadResource(resource) : 1) {
                        workInProgressSuspendedReason = 0;
                        workInProgressThrownValue = null;
                        var sibling = hostFiber.sibling;
                        if (null !== sibling) workInProgress = sibling;
                        else {
                          var returnFiber = hostFiber.return;
                          null !== returnFiber ? (workInProgress = returnFiber, completeUnitOfWork(returnFiber)) : workInProgress = null;
                        }
                        break b;
                      }
                  }
                  workInProgressSuspendedReason = 0;
                  workInProgressThrownValue = null;
                  throwAndUnwindWorkLoop(root3, lanes, thrownValue, 5);
                  break;
                case 6:
                  workInProgressSuspendedReason = 0;
                  workInProgressThrownValue = null;
                  throwAndUnwindWorkLoop(root3, lanes, thrownValue, 6);
                  break;
                case 8:
                  resetWorkInProgressStack();
                  workInProgressRootExitStatus = 6;
                  break a;
                default:
                  throw Error(formatProdErrorMessage3(462));
              }
            }
            workLoopConcurrentByScheduler();
            break;
          } catch (thrownValue$169) {
            handleThrow(root3, thrownValue$169);
          }
        while (1);
        lastContextDependency = currentlyRenderingFiber$1 = null;
        ReactSharedInternals.H = prevDispatcher;
        ReactSharedInternals.A = prevAsyncDispatcher;
        executionContext = prevExecutionContext;
        if (null !== workInProgress) return 0;
        workInProgressRoot = null;
        workInProgressRootRenderLanes = 0;
        finishQueueingConcurrentUpdates();
        return workInProgressRootExitStatus;
      }
      function workLoopConcurrentByScheduler() {
        for (; null !== workInProgress && !shouldYield(); )
          performUnitOfWork(workInProgress);
      }
      function performUnitOfWork(unitOfWork) {
        var next = beginWork(unitOfWork.alternate, unitOfWork, entangledRenderLanes);
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
      }
      function replaySuspendedUnitOfWork(unitOfWork) {
        var next = unitOfWork;
        var current2 = next.alternate;
        switch (next.tag) {
          case 15:
          case 0:
            next = replayFunctionComponent(
              current2,
              next,
              next.pendingProps,
              next.type,
              void 0,
              workInProgressRootRenderLanes
            );
            break;
          case 11:
            next = replayFunctionComponent(
              current2,
              next,
              next.pendingProps,
              next.type.render,
              next.ref,
              workInProgressRootRenderLanes
            );
            break;
          case 5:
            resetHooksOnUnwind(next);
          default:
            unwindInterruptedWork(current2, next), next = workInProgress = resetWorkInProgress(next, entangledRenderLanes), next = beginWork(current2, next, entangledRenderLanes);
        }
        unitOfWork.memoizedProps = unitOfWork.pendingProps;
        null === next ? completeUnitOfWork(unitOfWork) : workInProgress = next;
      }
      function throwAndUnwindWorkLoop(root3, unitOfWork, thrownValue, suspendedReason) {
        lastContextDependency = currentlyRenderingFiber$1 = null;
        resetHooksOnUnwind(unitOfWork);
        thenableState = null;
        thenableIndexCounter = 0;
        var returnFiber = unitOfWork.return;
        try {
          if (throwException(
            root3,
            returnFiber,
            unitOfWork,
            thrownValue,
            workInProgressRootRenderLanes
          )) {
            workInProgressRootExitStatus = 1;
            logUncaughtError(
              root3,
              createCapturedValueAtFiber(thrownValue, root3.current)
            );
            workInProgress = null;
            return;
          }
        } catch (error) {
          if (null !== returnFiber) throw workInProgress = returnFiber, error;
          workInProgressRootExitStatus = 1;
          logUncaughtError(
            root3,
            createCapturedValueAtFiber(thrownValue, root3.current)
          );
          workInProgress = null;
          return;
        }
        if (unitOfWork.flags & 32768) {
          if (isHydrating || 1 === suspendedReason) root3 = true;
          else if (workInProgressRootIsPrerendering || 0 !== (workInProgressRootRenderLanes & 536870912))
            root3 = false;
          else if (workInProgressRootDidSkipSuspendedSiblings = root3 = true, 2 === suspendedReason || 9 === suspendedReason || 3 === suspendedReason || 6 === suspendedReason)
            suspendedReason = suspenseHandlerStackCursor.current, null !== suspendedReason && 13 === suspendedReason.tag && (suspendedReason.flags |= 16384);
          unwindUnitOfWork(unitOfWork, root3);
        } else completeUnitOfWork(unitOfWork);
      }
      function completeUnitOfWork(unitOfWork) {
        var completedWork = unitOfWork;
        do {
          if (0 !== (completedWork.flags & 32768)) {
            unwindUnitOfWork(
              completedWork,
              workInProgressRootDidSkipSuspendedSiblings
            );
            return;
          }
          unitOfWork = completedWork.return;
          var next = completeWork(
            completedWork.alternate,
            completedWork,
            entangledRenderLanes
          );
          if (null !== next) {
            workInProgress = next;
            return;
          }
          completedWork = completedWork.sibling;
          if (null !== completedWork) {
            workInProgress = completedWork;
            return;
          }
          workInProgress = completedWork = unitOfWork;
        } while (null !== completedWork);
        0 === workInProgressRootExitStatus && (workInProgressRootExitStatus = 5);
      }
      function unwindUnitOfWork(unitOfWork, skipSiblings) {
        do {
          var next = unwindWork(unitOfWork.alternate, unitOfWork);
          if (null !== next) {
            next.flags &= 32767;
            workInProgress = next;
            return;
          }
          next = unitOfWork.return;
          null !== next && (next.flags |= 32768, next.subtreeFlags = 0, next.deletions = null);
          if (!skipSiblings && (unitOfWork = unitOfWork.sibling, null !== unitOfWork)) {
            workInProgress = unitOfWork;
            return;
          }
          workInProgress = unitOfWork = next;
        } while (null !== unitOfWork);
        workInProgressRootExitStatus = 6;
        workInProgress = null;
      }
      function commitRoot(root3, finishedWork, lanes, recoverableErrors, transitions, didIncludeRenderPhaseUpdate, spawnedLane, updatedLanes, suspendedRetryLanes) {
        root3.cancelPendingCommit = null;
        do
          flushPendingEffects();
        while (0 !== pendingEffectsStatus);
        if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage3(327));
        if (null !== finishedWork) {
          if (finishedWork === root3.current) throw Error(formatProdErrorMessage3(177));
          didIncludeRenderPhaseUpdate = finishedWork.lanes | finishedWork.childLanes;
          didIncludeRenderPhaseUpdate |= concurrentlyUpdatedLanes;
          markRootFinished(
            root3,
            lanes,
            didIncludeRenderPhaseUpdate,
            spawnedLane,
            updatedLanes,
            suspendedRetryLanes
          );
          root3 === workInProgressRoot && (workInProgress = workInProgressRoot = null, workInProgressRootRenderLanes = 0);
          pendingFinishedWork = finishedWork;
          pendingEffectsRoot = root3;
          pendingEffectsLanes = lanes;
          pendingEffectsRemainingLanes = didIncludeRenderPhaseUpdate;
          pendingPassiveTransitions = transitions;
          pendingRecoverableErrors = recoverableErrors;
          0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256) ? (root3.callbackNode = null, root3.callbackPriority = 0, scheduleCallback$1(NormalPriority$1, function() {
            flushPassiveEffects(true);
            return null;
          })) : (root3.callbackNode = null, root3.callbackPriority = 0);
          recoverableErrors = 0 !== (finishedWork.flags & 13878);
          if (0 !== (finishedWork.subtreeFlags & 13878) || recoverableErrors) {
            recoverableErrors = ReactSharedInternals.T;
            ReactSharedInternals.T = null;
            transitions = ReactDOMSharedInternals.p;
            ReactDOMSharedInternals.p = 2;
            spawnedLane = executionContext;
            executionContext |= 4;
            try {
              commitBeforeMutationEffects(root3, finishedWork, lanes);
            } finally {
              executionContext = spawnedLane, ReactDOMSharedInternals.p = transitions, ReactSharedInternals.T = recoverableErrors;
            }
          }
          pendingEffectsStatus = 1;
          flushMutationEffects();
          flushLayoutEffects();
          flushSpawnedWork();
        }
      }
      function flushMutationEffects() {
        if (1 === pendingEffectsStatus) {
          pendingEffectsStatus = 0;
          var root3 = pendingEffectsRoot, finishedWork = pendingFinishedWork, rootMutationHasEffect = 0 !== (finishedWork.flags & 13878);
          if (0 !== (finishedWork.subtreeFlags & 13878) || rootMutationHasEffect) {
            rootMutationHasEffect = ReactSharedInternals.T;
            ReactSharedInternals.T = null;
            var previousPriority = ReactDOMSharedInternals.p;
            ReactDOMSharedInternals.p = 2;
            var prevExecutionContext = executionContext;
            executionContext |= 4;
            try {
              commitMutationEffectsOnFiber(finishedWork, root3);
              var priorSelectionInformation = selectionInformation, curFocusedElem = getActiveElementDeep(root3.containerInfo), priorFocusedElem = priorSelectionInformation.focusedElem, priorSelectionRange = priorSelectionInformation.selectionRange;
              if (curFocusedElem !== priorFocusedElem && priorFocusedElem && priorFocusedElem.ownerDocument && containsNode(
                priorFocusedElem.ownerDocument.documentElement,
                priorFocusedElem
              )) {
                if (null !== priorSelectionRange && hasSelectionCapabilities(priorFocusedElem)) {
                  var start = priorSelectionRange.start, end = priorSelectionRange.end;
                  void 0 === end && (end = start);
                  if ("selectionStart" in priorFocusedElem)
                    priorFocusedElem.selectionStart = start, priorFocusedElem.selectionEnd = Math.min(
                      end,
                      priorFocusedElem.value.length
                    );
                  else {
                    var doc = priorFocusedElem.ownerDocument || document, win = doc && doc.defaultView || window;
                    if (win.getSelection) {
                      var selection = win.getSelection(), length = priorFocusedElem.textContent.length, start$jscomp$0 = Math.min(priorSelectionRange.start, length), end$jscomp$0 = void 0 === priorSelectionRange.end ? start$jscomp$0 : Math.min(priorSelectionRange.end, length);
                      !selection.extend && start$jscomp$0 > end$jscomp$0 && (curFocusedElem = end$jscomp$0, end$jscomp$0 = start$jscomp$0, start$jscomp$0 = curFocusedElem);
                      var startMarker = getNodeForCharacterOffset(
                        priorFocusedElem,
                        start$jscomp$0
                      ), endMarker = getNodeForCharacterOffset(
                        priorFocusedElem,
                        end$jscomp$0
                      );
                      if (startMarker && endMarker && (1 !== selection.rangeCount || selection.anchorNode !== startMarker.node || selection.anchorOffset !== startMarker.offset || selection.focusNode !== endMarker.node || selection.focusOffset !== endMarker.offset)) {
                        var range4 = doc.createRange();
                        range4.setStart(startMarker.node, startMarker.offset);
                        selection.removeAllRanges();
                        start$jscomp$0 > end$jscomp$0 ? (selection.addRange(range4), selection.extend(endMarker.node, endMarker.offset)) : (range4.setEnd(endMarker.node, endMarker.offset), selection.addRange(range4));
                      }
                    }
                  }
                }
                doc = [];
                for (selection = priorFocusedElem; selection = selection.parentNode; )
                  1 === selection.nodeType && doc.push({
                    element: selection,
                    left: selection.scrollLeft,
                    top: selection.scrollTop
                  });
                "function" === typeof priorFocusedElem.focus && priorFocusedElem.focus();
                for (priorFocusedElem = 0; priorFocusedElem < doc.length; priorFocusedElem++) {
                  var info = doc[priorFocusedElem];
                  info.element.scrollLeft = info.left;
                  info.element.scrollTop = info.top;
                }
              }
              _enabled = !!eventsEnabled;
              selectionInformation = eventsEnabled = null;
            } finally {
              executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootMutationHasEffect;
            }
          }
          root3.current = finishedWork;
          pendingEffectsStatus = 2;
        }
      }
      function flushLayoutEffects() {
        if (2 === pendingEffectsStatus) {
          pendingEffectsStatus = 0;
          var root3 = pendingEffectsRoot, finishedWork = pendingFinishedWork, rootHasLayoutEffect = 0 !== (finishedWork.flags & 8772);
          if (0 !== (finishedWork.subtreeFlags & 8772) || rootHasLayoutEffect) {
            rootHasLayoutEffect = ReactSharedInternals.T;
            ReactSharedInternals.T = null;
            var previousPriority = ReactDOMSharedInternals.p;
            ReactDOMSharedInternals.p = 2;
            var prevExecutionContext = executionContext;
            executionContext |= 4;
            try {
              commitLayoutEffectOnFiber(root3, finishedWork.alternate, finishedWork);
            } finally {
              executionContext = prevExecutionContext, ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = rootHasLayoutEffect;
            }
          }
          pendingEffectsStatus = 3;
        }
      }
      function flushSpawnedWork() {
        if (4 === pendingEffectsStatus || 3 === pendingEffectsStatus) {
          pendingEffectsStatus = 0;
          requestPaint();
          var root3 = pendingEffectsRoot, finishedWork = pendingFinishedWork, lanes = pendingEffectsLanes, recoverableErrors = pendingRecoverableErrors;
          0 !== (finishedWork.subtreeFlags & 10256) || 0 !== (finishedWork.flags & 10256) ? pendingEffectsStatus = 5 : (pendingEffectsStatus = 0, pendingFinishedWork = pendingEffectsRoot = null, releaseRootPooledCache(root3, root3.pendingLanes));
          var remainingLanes = root3.pendingLanes;
          0 === remainingLanes && (legacyErrorBoundariesThatAlreadyFailed = null);
          lanesToEventPriority(lanes);
          finishedWork = finishedWork.stateNode;
          if (injectedHook && "function" === typeof injectedHook.onCommitFiberRoot)
            try {
              injectedHook.onCommitFiberRoot(
                rendererID,
                finishedWork,
                void 0,
                128 === (finishedWork.current.flags & 128)
              );
            } catch (err) {
            }
          if (null !== recoverableErrors) {
            finishedWork = ReactSharedInternals.T;
            remainingLanes = ReactDOMSharedInternals.p;
            ReactDOMSharedInternals.p = 2;
            ReactSharedInternals.T = null;
            try {
              for (var onRecoverableError = root3.onRecoverableError, i = 0; i < recoverableErrors.length; i++) {
                var recoverableError = recoverableErrors[i];
                onRecoverableError(recoverableError.value, {
                  componentStack: recoverableError.stack
                });
              }
            } finally {
              ReactSharedInternals.T = finishedWork, ReactDOMSharedInternals.p = remainingLanes;
            }
          }
          0 !== (pendingEffectsLanes & 3) && flushPendingEffects();
          ensureRootIsScheduled(root3);
          remainingLanes = root3.pendingLanes;
          0 !== (lanes & 4194090) && 0 !== (remainingLanes & 42) ? root3 === rootWithNestedUpdates ? nestedUpdateCount++ : (nestedUpdateCount = 0, rootWithNestedUpdates = root3) : nestedUpdateCount = 0;
          flushSyncWorkAcrossRoots_impl(0, false);
        }
      }
      function releaseRootPooledCache(root3, remainingLanes) {
        0 === (root3.pooledCacheLanes &= remainingLanes) && (remainingLanes = root3.pooledCache, null != remainingLanes && (root3.pooledCache = null, releaseCache(remainingLanes)));
      }
      function flushPendingEffects(wasDelayedCommit) {
        flushMutationEffects();
        flushLayoutEffects();
        flushSpawnedWork();
        return flushPassiveEffects(wasDelayedCommit);
      }
      function flushPassiveEffects() {
        if (5 !== pendingEffectsStatus) return false;
        var root3 = pendingEffectsRoot, remainingLanes = pendingEffectsRemainingLanes;
        pendingEffectsRemainingLanes = 0;
        var renderPriority = lanesToEventPriority(pendingEffectsLanes), prevTransition = ReactSharedInternals.T, previousPriority = ReactDOMSharedInternals.p;
        try {
          ReactDOMSharedInternals.p = 32 > renderPriority ? 32 : renderPriority;
          ReactSharedInternals.T = null;
          renderPriority = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root$jscomp$0 = pendingEffectsRoot, lanes = pendingEffectsLanes;
          pendingEffectsStatus = 0;
          pendingFinishedWork = pendingEffectsRoot = null;
          pendingEffectsLanes = 0;
          if (0 !== (executionContext & 6)) throw Error(formatProdErrorMessage3(331));
          var prevExecutionContext = executionContext;
          executionContext |= 4;
          commitPassiveUnmountOnFiber(root$jscomp$0.current);
          commitPassiveMountOnFiber(
            root$jscomp$0,
            root$jscomp$0.current,
            lanes,
            renderPriority
          );
          executionContext = prevExecutionContext;
          flushSyncWorkAcrossRoots_impl(0, false);
          if (injectedHook && "function" === typeof injectedHook.onPostCommitFiberRoot)
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root$jscomp$0);
            } catch (err) {
            }
          return true;
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition, releaseRootPooledCache(root3, remainingLanes);
        }
      }
      function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
        sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
        sourceFiber = createRootErrorUpdate(rootFiber.stateNode, sourceFiber, 2);
        rootFiber = enqueueUpdate(rootFiber, sourceFiber, 2);
        null !== rootFiber && (markRootUpdated$1(rootFiber, 2), ensureRootIsScheduled(rootFiber));
      }
      function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error) {
        if (3 === sourceFiber.tag)
          captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
        else
          for (; null !== nearestMountedAncestor; ) {
            if (3 === nearestMountedAncestor.tag) {
              captureCommitPhaseErrorOnRoot(
                nearestMountedAncestor,
                sourceFiber,
                error
              );
              break;
            } else if (1 === nearestMountedAncestor.tag) {
              var instance = nearestMountedAncestor.stateNode;
              if ("function" === typeof nearestMountedAncestor.type.getDerivedStateFromError || "function" === typeof instance.componentDidCatch && (null === legacyErrorBoundariesThatAlreadyFailed || !legacyErrorBoundariesThatAlreadyFailed.has(instance))) {
                sourceFiber = createCapturedValueAtFiber(error, sourceFiber);
                error = createClassErrorUpdate(2);
                instance = enqueueUpdate(nearestMountedAncestor, error, 2);
                null !== instance && (initializeClassErrorUpdate(
                  error,
                  instance,
                  nearestMountedAncestor,
                  sourceFiber
                ), markRootUpdated$1(instance, 2), ensureRootIsScheduled(instance));
                break;
              }
            }
            nearestMountedAncestor = nearestMountedAncestor.return;
          }
      }
      function attachPingListener(root3, wakeable, lanes) {
        var pingCache = root3.pingCache;
        if (null === pingCache) {
          pingCache = root3.pingCache = new PossiblyWeakMap();
          var threadIDs = /* @__PURE__ */ new Set();
          pingCache.set(wakeable, threadIDs);
        } else
          threadIDs = pingCache.get(wakeable), void 0 === threadIDs && (threadIDs = /* @__PURE__ */ new Set(), pingCache.set(wakeable, threadIDs));
        threadIDs.has(lanes) || (workInProgressRootDidAttachPingListener = true, threadIDs.add(lanes), root3 = pingSuspendedRoot.bind(null, root3, wakeable, lanes), wakeable.then(root3, root3));
      }
      function pingSuspendedRoot(root3, wakeable, pingedLanes) {
        var pingCache = root3.pingCache;
        null !== pingCache && pingCache.delete(wakeable);
        root3.pingedLanes |= root3.suspendedLanes & pingedLanes;
        root3.warmLanes &= ~pingedLanes;
        workInProgressRoot === root3 && (workInProgressRootRenderLanes & pingedLanes) === pingedLanes && (4 === workInProgressRootExitStatus || 3 === workInProgressRootExitStatus && (workInProgressRootRenderLanes & 62914560) === workInProgressRootRenderLanes && 300 > now() - globalMostRecentFallbackTime ? 0 === (executionContext & 2) && prepareFreshStack(root3, 0) : workInProgressRootPingedLanes |= pingedLanes, workInProgressSuspendedRetryLanes === workInProgressRootRenderLanes && (workInProgressSuspendedRetryLanes = 0));
        ensureRootIsScheduled(root3);
      }
      function retryTimedOutBoundary(boundaryFiber, retryLane) {
        0 === retryLane && (retryLane = claimNextRetryLane());
        boundaryFiber = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
        null !== boundaryFiber && (markRootUpdated$1(boundaryFiber, retryLane), ensureRootIsScheduled(boundaryFiber));
      }
      function retryDehydratedSuspenseBoundary(boundaryFiber) {
        var suspenseState = boundaryFiber.memoizedState, retryLane = 0;
        null !== suspenseState && (retryLane = suspenseState.retryLane);
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function resolveRetryWakeable(boundaryFiber, wakeable) {
        var retryLane = 0;
        switch (boundaryFiber.tag) {
          case 13:
            var retryCache = boundaryFiber.stateNode;
            var suspenseState = boundaryFiber.memoizedState;
            null !== suspenseState && (retryLane = suspenseState.retryLane);
            break;
          case 19:
            retryCache = boundaryFiber.stateNode;
            break;
          case 22:
            retryCache = boundaryFiber.stateNode._retryCache;
            break;
          default:
            throw Error(formatProdErrorMessage3(314));
        }
        null !== retryCache && retryCache.delete(wakeable);
        retryTimedOutBoundary(boundaryFiber, retryLane);
      }
      function scheduleCallback$1(priorityLevel, callback) {
        return scheduleCallback$3(priorityLevel, callback);
      }
      var firstScheduledRoot = null;
      var lastScheduledRoot = null;
      var didScheduleMicrotask = false;
      var mightHavePendingSyncWork = false;
      var isFlushingWork = false;
      var currentEventTransitionLane = 0;
      function ensureRootIsScheduled(root3) {
        root3 !== lastScheduledRoot && null === root3.next && (null === lastScheduledRoot ? firstScheduledRoot = lastScheduledRoot = root3 : lastScheduledRoot = lastScheduledRoot.next = root3);
        mightHavePendingSyncWork = true;
        didScheduleMicrotask || (didScheduleMicrotask = true, scheduleImmediateRootScheduleTask());
      }
      function flushSyncWorkAcrossRoots_impl(syncTransitionLanes, onlyLegacy) {
        if (!isFlushingWork && mightHavePendingSyncWork) {
          isFlushingWork = true;
          do {
            var didPerformSomeWork = false;
            for (var root$174 = firstScheduledRoot; null !== root$174; ) {
              if (!onlyLegacy)
                if (0 !== syncTransitionLanes) {
                  var pendingLanes = root$174.pendingLanes;
                  if (0 === pendingLanes) var JSCompiler_inline_result = 0;
                  else {
                    var suspendedLanes = root$174.suspendedLanes, pingedLanes = root$174.pingedLanes;
                    JSCompiler_inline_result = (1 << 31 - clz32(42 | syncTransitionLanes) + 1) - 1;
                    JSCompiler_inline_result &= pendingLanes & ~(suspendedLanes & ~pingedLanes);
                    JSCompiler_inline_result = JSCompiler_inline_result & 201326741 ? JSCompiler_inline_result & 201326741 | 1 : JSCompiler_inline_result ? JSCompiler_inline_result | 2 : 0;
                  }
                  0 !== JSCompiler_inline_result && (didPerformSomeWork = true, performSyncWorkOnRoot(root$174, JSCompiler_inline_result));
                } else
                  JSCompiler_inline_result = workInProgressRootRenderLanes, JSCompiler_inline_result = getNextLanes(
                    root$174,
                    root$174 === workInProgressRoot ? JSCompiler_inline_result : 0,
                    null !== root$174.cancelPendingCommit || -1 !== root$174.timeoutHandle
                  ), 0 === (JSCompiler_inline_result & 3) || checkIfRootIsPrerendering(root$174, JSCompiler_inline_result) || (didPerformSomeWork = true, performSyncWorkOnRoot(root$174, JSCompiler_inline_result));
              root$174 = root$174.next;
            }
          } while (didPerformSomeWork);
          isFlushingWork = false;
        }
      }
      function processRootScheduleInImmediateTask() {
        processRootScheduleInMicrotask();
      }
      function processRootScheduleInMicrotask() {
        mightHavePendingSyncWork = didScheduleMicrotask = false;
        var syncTransitionLanes = 0;
        0 !== currentEventTransitionLane && (shouldAttemptEagerTransition() && (syncTransitionLanes = currentEventTransitionLane), currentEventTransitionLane = 0);
        for (var currentTime = now(), prev = null, root3 = firstScheduledRoot; null !== root3; ) {
          var next = root3.next, nextLanes = scheduleTaskForRootDuringMicrotask(root3, currentTime);
          if (0 === nextLanes)
            root3.next = null, null === prev ? firstScheduledRoot = next : prev.next = next, null === next && (lastScheduledRoot = prev);
          else if (prev = root3, 0 !== syncTransitionLanes || 0 !== (nextLanes & 3))
            mightHavePendingSyncWork = true;
          root3 = next;
        }
        flushSyncWorkAcrossRoots_impl(syncTransitionLanes, false);
      }
      function scheduleTaskForRootDuringMicrotask(root3, currentTime) {
        for (var suspendedLanes = root3.suspendedLanes, pingedLanes = root3.pingedLanes, expirationTimes = root3.expirationTimes, lanes = root3.pendingLanes & -62914561; 0 < lanes; ) {
          var index$3 = 31 - clz32(lanes), lane = 1 << index$3, expirationTime = expirationTimes[index$3];
          if (-1 === expirationTime) {
            if (0 === (lane & suspendedLanes) || 0 !== (lane & pingedLanes))
              expirationTimes[index$3] = computeExpirationTime(lane, currentTime);
          } else expirationTime <= currentTime && (root3.expiredLanes |= lane);
          lanes &= ~lane;
        }
        currentTime = workInProgressRoot;
        suspendedLanes = workInProgressRootRenderLanes;
        suspendedLanes = getNextLanes(
          root3,
          root3 === currentTime ? suspendedLanes : 0,
          null !== root3.cancelPendingCommit || -1 !== root3.timeoutHandle
        );
        pingedLanes = root3.callbackNode;
        if (0 === suspendedLanes || root3 === currentTime && (2 === workInProgressSuspendedReason || 9 === workInProgressSuspendedReason) || null !== root3.cancelPendingCommit)
          return null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes), root3.callbackNode = null, root3.callbackPriority = 0;
        if (0 === (suspendedLanes & 3) || checkIfRootIsPrerendering(root3, suspendedLanes)) {
          currentTime = suspendedLanes & -suspendedLanes;
          if (currentTime === root3.callbackPriority) return currentTime;
          null !== pingedLanes && cancelCallback$1(pingedLanes);
          switch (lanesToEventPriority(suspendedLanes)) {
            case 2:
            case 8:
              suspendedLanes = UserBlockingPriority;
              break;
            case 32:
              suspendedLanes = NormalPriority$1;
              break;
            case 268435456:
              suspendedLanes = IdlePriority;
              break;
            default:
              suspendedLanes = NormalPriority$1;
          }
          pingedLanes = performWorkOnRootViaSchedulerTask.bind(null, root3);
          suspendedLanes = scheduleCallback$3(suspendedLanes, pingedLanes);
          root3.callbackPriority = currentTime;
          root3.callbackNode = suspendedLanes;
          return currentTime;
        }
        null !== pingedLanes && null !== pingedLanes && cancelCallback$1(pingedLanes);
        root3.callbackPriority = 2;
        root3.callbackNode = null;
        return 2;
      }
      function performWorkOnRootViaSchedulerTask(root3, didTimeout) {
        if (0 !== pendingEffectsStatus && 5 !== pendingEffectsStatus)
          return root3.callbackNode = null, root3.callbackPriority = 0, null;
        var originalCallbackNode = root3.callbackNode;
        if (flushPendingEffects(true) && root3.callbackNode !== originalCallbackNode)
          return null;
        var workInProgressRootRenderLanes$jscomp$0 = workInProgressRootRenderLanes;
        workInProgressRootRenderLanes$jscomp$0 = getNextLanes(
          root3,
          root3 === workInProgressRoot ? workInProgressRootRenderLanes$jscomp$0 : 0,
          null !== root3.cancelPendingCommit || -1 !== root3.timeoutHandle
        );
        if (0 === workInProgressRootRenderLanes$jscomp$0) return null;
        performWorkOnRoot(root3, workInProgressRootRenderLanes$jscomp$0, didTimeout);
        scheduleTaskForRootDuringMicrotask(root3, now());
        return null != root3.callbackNode && root3.callbackNode === originalCallbackNode ? performWorkOnRootViaSchedulerTask.bind(null, root3) : null;
      }
      function performSyncWorkOnRoot(root3, lanes) {
        if (flushPendingEffects()) return null;
        performWorkOnRoot(root3, lanes, true);
      }
      function scheduleImmediateRootScheduleTask() {
        scheduleMicrotask(function() {
          0 !== (executionContext & 6) ? scheduleCallback$3(
            ImmediatePriority,
            processRootScheduleInImmediateTask
          ) : processRootScheduleInMicrotask();
        });
      }
      function requestTransitionLane() {
        0 === currentEventTransitionLane && (currentEventTransitionLane = claimNextTransitionLane());
        return currentEventTransitionLane;
      }
      function coerceFormActionProp(actionProp) {
        return null == actionProp || "symbol" === typeof actionProp || "boolean" === typeof actionProp ? null : "function" === typeof actionProp ? actionProp : sanitizeURL("" + actionProp);
      }
      function createFormDataWithSubmitter(form, submitter) {
        var temp = submitter.ownerDocument.createElement("input");
        temp.name = submitter.name;
        temp.value = submitter.value;
        form.id && temp.setAttribute("form", form.id);
        submitter.parentNode.insertBefore(temp, submitter);
        form = new FormData(form);
        temp.parentNode.removeChild(temp);
        return form;
      }
      function extractEvents$1(dispatchQueue, domEventName, maybeTargetInst, nativeEvent, nativeEventTarget) {
        if ("submit" === domEventName && maybeTargetInst && maybeTargetInst.stateNode === nativeEventTarget) {
          var action = coerceFormActionProp(
            (nativeEventTarget[internalPropsKey] || null).action
          ), submitter = nativeEvent.submitter;
          submitter && (domEventName = (domEventName = submitter[internalPropsKey] || null) ? coerceFormActionProp(domEventName.formAction) : submitter.getAttribute("formAction"), null !== domEventName && (action = domEventName, submitter = null));
          var event = new SyntheticEvent(
            "action",
            "action",
            null,
            nativeEvent,
            nativeEventTarget
          );
          dispatchQueue.push({
            event,
            listeners: [
              {
                instance: null,
                listener: function() {
                  if (nativeEvent.defaultPrevented) {
                    if (0 !== currentEventTransitionLane) {
                      var formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget);
                      startHostTransition(
                        maybeTargetInst,
                        {
                          pending: true,
                          data: formData,
                          method: nativeEventTarget.method,
                          action
                        },
                        null,
                        formData
                      );
                    }
                  } else
                    "function" === typeof action && (event.preventDefault(), formData = submitter ? createFormDataWithSubmitter(nativeEventTarget, submitter) : new FormData(nativeEventTarget), startHostTransition(
                      maybeTargetInst,
                      {
                        pending: true,
                        data: formData,
                        method: nativeEventTarget.method,
                        action
                      },
                      action,
                      formData
                    ));
                },
                currentTarget: nativeEventTarget
              }
            ]
          });
        }
      }
      for (i$jscomp$inline_1528 = 0; i$jscomp$inline_1528 < simpleEventPluginEvents.length; i$jscomp$inline_1528++) {
        eventName$jscomp$inline_1529 = simpleEventPluginEvents[i$jscomp$inline_1528], domEventName$jscomp$inline_1530 = eventName$jscomp$inline_1529.toLowerCase(), capitalizedEvent$jscomp$inline_1531 = eventName$jscomp$inline_1529[0].toUpperCase() + eventName$jscomp$inline_1529.slice(1);
        registerSimpleEvent(
          domEventName$jscomp$inline_1530,
          "on" + capitalizedEvent$jscomp$inline_1531
        );
      }
      var eventName$jscomp$inline_1529;
      var domEventName$jscomp$inline_1530;
      var capitalizedEvent$jscomp$inline_1531;
      var i$jscomp$inline_1528;
      registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
      registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
      registerSimpleEvent(ANIMATION_START, "onAnimationStart");
      registerSimpleEvent("dblclick", "onDoubleClick");
      registerSimpleEvent("focusin", "onFocus");
      registerSimpleEvent("focusout", "onBlur");
      registerSimpleEvent(TRANSITION_RUN, "onTransitionRun");
      registerSimpleEvent(TRANSITION_START, "onTransitionStart");
      registerSimpleEvent(TRANSITION_CANCEL, "onTransitionCancel");
      registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
      registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
      registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
      registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
      registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
      registerTwoPhaseEvent(
        "onChange",
        "change click focusin focusout input keydown keyup selectionchange".split(" ")
      );
      registerTwoPhaseEvent(
        "onSelect",
        "focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(
          " "
        )
      );
      registerTwoPhaseEvent("onBeforeInput", [
        "compositionend",
        "keypress",
        "textInput",
        "paste"
      ]);
      registerTwoPhaseEvent(
        "onCompositionEnd",
        "compositionend focusout keydown keypress keyup mousedown".split(" ")
      );
      registerTwoPhaseEvent(
        "onCompositionStart",
        "compositionstart focusout keydown keypress keyup mousedown".split(" ")
      );
      registerTwoPhaseEvent(
        "onCompositionUpdate",
        "compositionupdate focusout keydown keypress keyup mousedown".split(" ")
      );
      var mediaEventTypes = "abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(
        " "
      );
      var nonDelegatedEvents = new Set(
        "beforetoggle cancel close invalid load scroll scrollend toggle".split(" ").concat(mediaEventTypes)
      );
      function processDispatchQueue(dispatchQueue, eventSystemFlags) {
        eventSystemFlags = 0 !== (eventSystemFlags & 4);
        for (var i = 0; i < dispatchQueue.length; i++) {
          var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event;
          _dispatchQueue$i = _dispatchQueue$i.listeners;
          a: {
            var previousInstance = void 0;
            if (eventSystemFlags)
              for (var i$jscomp$0 = _dispatchQueue$i.length - 1; 0 <= i$jscomp$0; i$jscomp$0--) {
                var _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget;
                _dispatchListeners$i = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped())
                  break a;
                previousInstance = _dispatchListeners$i;
                event.currentTarget = currentTarget;
                try {
                  previousInstance(event);
                } catch (error) {
                  reportGlobalError(error);
                }
                event.currentTarget = null;
                previousInstance = instance;
              }
            else
              for (i$jscomp$0 = 0; i$jscomp$0 < _dispatchQueue$i.length; i$jscomp$0++) {
                _dispatchListeners$i = _dispatchQueue$i[i$jscomp$0];
                instance = _dispatchListeners$i.instance;
                currentTarget = _dispatchListeners$i.currentTarget;
                _dispatchListeners$i = _dispatchListeners$i.listener;
                if (instance !== previousInstance && event.isPropagationStopped())
                  break a;
                previousInstance = _dispatchListeners$i;
                event.currentTarget = currentTarget;
                try {
                  previousInstance(event);
                } catch (error) {
                  reportGlobalError(error);
                }
                event.currentTarget = null;
                previousInstance = instance;
              }
          }
        }
      }
      function listenToNonDelegatedEvent(domEventName, targetElement) {
        var JSCompiler_inline_result = targetElement[internalEventHandlersKey];
        void 0 === JSCompiler_inline_result && (JSCompiler_inline_result = targetElement[internalEventHandlersKey] = /* @__PURE__ */ new Set());
        var listenerSetKey = domEventName + "__bubble";
        JSCompiler_inline_result.has(listenerSetKey) || (addTrappedEventListener(targetElement, domEventName, 2, false), JSCompiler_inline_result.add(listenerSetKey));
      }
      function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
        var eventSystemFlags = 0;
        isCapturePhaseListener && (eventSystemFlags |= 4);
        addTrappedEventListener(
          target,
          domEventName,
          eventSystemFlags,
          isCapturePhaseListener
        );
      }
      var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
      function listenToAllSupportedEvents(rootContainerElement) {
        if (!rootContainerElement[listeningMarker]) {
          rootContainerElement[listeningMarker] = true;
          allNativeEvents.forEach(function(domEventName) {
            "selectionchange" !== domEventName && (nonDelegatedEvents.has(domEventName) || listenToNativeEvent(domEventName, false, rootContainerElement), listenToNativeEvent(domEventName, true, rootContainerElement));
          });
          var ownerDocument = 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
          null === ownerDocument || ownerDocument[listeningMarker] || (ownerDocument[listeningMarker] = true, listenToNativeEvent("selectionchange", false, ownerDocument));
        }
      }
      function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener) {
        switch (getEventPriority(domEventName)) {
          case 2:
            var listenerWrapper = dispatchDiscreteEvent;
            break;
          case 8:
            listenerWrapper = dispatchContinuousEvent;
            break;
          default:
            listenerWrapper = dispatchEvent;
        }
        eventSystemFlags = listenerWrapper.bind(
          null,
          domEventName,
          eventSystemFlags,
          targetContainer
        );
        listenerWrapper = void 0;
        !passiveBrowserEventsSupported || "touchstart" !== domEventName && "touchmove" !== domEventName && "wheel" !== domEventName || (listenerWrapper = true);
        isCapturePhaseListener ? void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
          capture: true,
          passive: listenerWrapper
        }) : targetContainer.addEventListener(domEventName, eventSystemFlags, true) : void 0 !== listenerWrapper ? targetContainer.addEventListener(domEventName, eventSystemFlags, {
          passive: listenerWrapper
        }) : targetContainer.addEventListener(domEventName, eventSystemFlags, false);
      }
      function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst$jscomp$0, targetContainer) {
        var ancestorInst = targetInst$jscomp$0;
        if (0 === (eventSystemFlags & 1) && 0 === (eventSystemFlags & 2) && null !== targetInst$jscomp$0)
          a: for (; ; ) {
            if (null === targetInst$jscomp$0) return;
            var nodeTag = targetInst$jscomp$0.tag;
            if (3 === nodeTag || 4 === nodeTag) {
              var container = targetInst$jscomp$0.stateNode.containerInfo;
              if (container === targetContainer) break;
              if (4 === nodeTag)
                for (nodeTag = targetInst$jscomp$0.return; null !== nodeTag; ) {
                  var grandTag = nodeTag.tag;
                  if ((3 === grandTag || 4 === grandTag) && nodeTag.stateNode.containerInfo === targetContainer)
                    return;
                  nodeTag = nodeTag.return;
                }
              for (; null !== container; ) {
                nodeTag = getClosestInstanceFromNode(container);
                if (null === nodeTag) return;
                grandTag = nodeTag.tag;
                if (5 === grandTag || 6 === grandTag || 26 === grandTag || 27 === grandTag) {
                  targetInst$jscomp$0 = ancestorInst = nodeTag;
                  continue a;
                }
                container = container.parentNode;
              }
            }
            targetInst$jscomp$0 = targetInst$jscomp$0.return;
          }
        batchedUpdates$1(function() {
          var targetInst = ancestorInst, nativeEventTarget = getEventTarget(nativeEvent), dispatchQueue = [];
          a: {
            var reactName = topLevelEventsToReactNames.get(domEventName);
            if (void 0 !== reactName) {
              var SyntheticEventCtor = SyntheticEvent, reactEventType = domEventName;
              switch (domEventName) {
                case "keypress":
                  if (0 === getEventCharCode(nativeEvent)) break a;
                case "keydown":
                case "keyup":
                  SyntheticEventCtor = SyntheticKeyboardEvent;
                  break;
                case "focusin":
                  reactEventType = "focus";
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;
                case "focusout":
                  reactEventType = "blur";
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;
                case "beforeblur":
                case "afterblur":
                  SyntheticEventCtor = SyntheticFocusEvent;
                  break;
                case "click":
                  if (2 === nativeEvent.button) break a;
                case "auxclick":
                case "dblclick":
                case "mousedown":
                case "mousemove":
                case "mouseup":
                case "mouseout":
                case "mouseover":
                case "contextmenu":
                  SyntheticEventCtor = SyntheticMouseEvent;
                  break;
                case "drag":
                case "dragend":
                case "dragenter":
                case "dragexit":
                case "dragleave":
                case "dragover":
                case "dragstart":
                case "drop":
                  SyntheticEventCtor = SyntheticDragEvent;
                  break;
                case "touchcancel":
                case "touchend":
                case "touchmove":
                case "touchstart":
                  SyntheticEventCtor = SyntheticTouchEvent;
                  break;
                case ANIMATION_END:
                case ANIMATION_ITERATION:
                case ANIMATION_START:
                  SyntheticEventCtor = SyntheticAnimationEvent;
                  break;
                case TRANSITION_END:
                  SyntheticEventCtor = SyntheticTransitionEvent;
                  break;
                case "scroll":
                case "scrollend":
                  SyntheticEventCtor = SyntheticUIEvent;
                  break;
                case "wheel":
                  SyntheticEventCtor = SyntheticWheelEvent;
                  break;
                case "copy":
                case "cut":
                case "paste":
                  SyntheticEventCtor = SyntheticClipboardEvent;
                  break;
                case "gotpointercapture":
                case "lostpointercapture":
                case "pointercancel":
                case "pointerdown":
                case "pointermove":
                case "pointerout":
                case "pointerover":
                case "pointerup":
                  SyntheticEventCtor = SyntheticPointerEvent;
                  break;
                case "toggle":
                case "beforetoggle":
                  SyntheticEventCtor = SyntheticToggleEvent;
              }
              var inCapturePhase = 0 !== (eventSystemFlags & 4), accumulateTargetOnly = !inCapturePhase && ("scroll" === domEventName || "scrollend" === domEventName), reactEventName = inCapturePhase ? null !== reactName ? reactName + "Capture" : null : reactName;
              inCapturePhase = [];
              for (var instance = targetInst, lastHostComponent; null !== instance; ) {
                var _instance = instance;
                lastHostComponent = _instance.stateNode;
                _instance = _instance.tag;
                5 !== _instance && 26 !== _instance && 27 !== _instance || null === lastHostComponent || null === reactEventName || (_instance = getListener(instance, reactEventName), null != _instance && inCapturePhase.push(
                  createDispatchListener(instance, _instance, lastHostComponent)
                ));
                if (accumulateTargetOnly) break;
                instance = instance.return;
              }
              0 < inCapturePhase.length && (reactName = new SyntheticEventCtor(
                reactName,
                reactEventType,
                null,
                nativeEvent,
                nativeEventTarget
              ), dispatchQueue.push({ event: reactName, listeners: inCapturePhase }));
            }
          }
          if (0 === (eventSystemFlags & 7)) {
            a: {
              reactName = "mouseover" === domEventName || "pointerover" === domEventName;
              SyntheticEventCtor = "mouseout" === domEventName || "pointerout" === domEventName;
              if (reactName && nativeEvent !== currentReplayingEvent && (reactEventType = nativeEvent.relatedTarget || nativeEvent.fromElement) && (getClosestInstanceFromNode(reactEventType) || reactEventType[internalContainerInstanceKey]))
                break a;
              if (SyntheticEventCtor || reactName) {
                reactName = nativeEventTarget.window === nativeEventTarget ? nativeEventTarget : (reactName = nativeEventTarget.ownerDocument) ? reactName.defaultView || reactName.parentWindow : window;
                if (SyntheticEventCtor) {
                  if (reactEventType = nativeEvent.relatedTarget || nativeEvent.toElement, SyntheticEventCtor = targetInst, reactEventType = reactEventType ? getClosestInstanceFromNode(reactEventType) : null, null !== reactEventType && (accumulateTargetOnly = getNearestMountedFiber(reactEventType), inCapturePhase = reactEventType.tag, reactEventType !== accumulateTargetOnly || 5 !== inCapturePhase && 27 !== inCapturePhase && 6 !== inCapturePhase))
                    reactEventType = null;
                } else SyntheticEventCtor = null, reactEventType = targetInst;
                if (SyntheticEventCtor !== reactEventType) {
                  inCapturePhase = SyntheticMouseEvent;
                  _instance = "onMouseLeave";
                  reactEventName = "onMouseEnter";
                  instance = "mouse";
                  if ("pointerout" === domEventName || "pointerover" === domEventName)
                    inCapturePhase = SyntheticPointerEvent, _instance = "onPointerLeave", reactEventName = "onPointerEnter", instance = "pointer";
                  accumulateTargetOnly = null == SyntheticEventCtor ? reactName : getNodeFromInstance(SyntheticEventCtor);
                  lastHostComponent = null == reactEventType ? reactName : getNodeFromInstance(reactEventType);
                  reactName = new inCapturePhase(
                    _instance,
                    instance + "leave",
                    SyntheticEventCtor,
                    nativeEvent,
                    nativeEventTarget
                  );
                  reactName.target = accumulateTargetOnly;
                  reactName.relatedTarget = lastHostComponent;
                  _instance = null;
                  getClosestInstanceFromNode(nativeEventTarget) === targetInst && (inCapturePhase = new inCapturePhase(
                    reactEventName,
                    instance + "enter",
                    reactEventType,
                    nativeEvent,
                    nativeEventTarget
                  ), inCapturePhase.target = lastHostComponent, inCapturePhase.relatedTarget = accumulateTargetOnly, _instance = inCapturePhase);
                  accumulateTargetOnly = _instance;
                  if (SyntheticEventCtor && reactEventType)
                    b: {
                      inCapturePhase = SyntheticEventCtor;
                      reactEventName = reactEventType;
                      instance = 0;
                      for (lastHostComponent = inCapturePhase; lastHostComponent; lastHostComponent = getParent(lastHostComponent))
                        instance++;
                      lastHostComponent = 0;
                      for (_instance = reactEventName; _instance; _instance = getParent(_instance))
                        lastHostComponent++;
                      for (; 0 < instance - lastHostComponent; )
                        inCapturePhase = getParent(inCapturePhase), instance--;
                      for (; 0 < lastHostComponent - instance; )
                        reactEventName = getParent(reactEventName), lastHostComponent--;
                      for (; instance--; ) {
                        if (inCapturePhase === reactEventName || null !== reactEventName && inCapturePhase === reactEventName.alternate)
                          break b;
                        inCapturePhase = getParent(inCapturePhase);
                        reactEventName = getParent(reactEventName);
                      }
                      inCapturePhase = null;
                    }
                  else inCapturePhase = null;
                  null !== SyntheticEventCtor && accumulateEnterLeaveListenersForEvent(
                    dispatchQueue,
                    reactName,
                    SyntheticEventCtor,
                    inCapturePhase,
                    false
                  );
                  null !== reactEventType && null !== accumulateTargetOnly && accumulateEnterLeaveListenersForEvent(
                    dispatchQueue,
                    accumulateTargetOnly,
                    reactEventType,
                    inCapturePhase,
                    true
                  );
                }
              }
            }
            a: {
              reactName = targetInst ? getNodeFromInstance(targetInst) : window;
              SyntheticEventCtor = reactName.nodeName && reactName.nodeName.toLowerCase();
              if ("select" === SyntheticEventCtor || "input" === SyntheticEventCtor && "file" === reactName.type)
                var getTargetInstFunc = getTargetInstForChangeEvent;
              else if (isTextInputElement(reactName))
                if (isInputEventSupported)
                  getTargetInstFunc = getTargetInstForInputOrChangeEvent;
                else {
                  getTargetInstFunc = getTargetInstForInputEventPolyfill;
                  var handleEventFunc = handleEventsForInputEventPolyfill;
                }
              else
                SyntheticEventCtor = reactName.nodeName, !SyntheticEventCtor || "input" !== SyntheticEventCtor.toLowerCase() || "checkbox" !== reactName.type && "radio" !== reactName.type ? targetInst && isCustomElement(targetInst.elementType) && (getTargetInstFunc = getTargetInstForChangeEvent) : getTargetInstFunc = getTargetInstForClickEvent;
              if (getTargetInstFunc && (getTargetInstFunc = getTargetInstFunc(domEventName, targetInst))) {
                createAndAccumulateChangeEvent(
                  dispatchQueue,
                  getTargetInstFunc,
                  nativeEvent,
                  nativeEventTarget
                );
                break a;
              }
              handleEventFunc && handleEventFunc(domEventName, reactName, targetInst);
              "focusout" === domEventName && targetInst && "number" === reactName.type && null != targetInst.memoizedProps.value && setDefaultValue(reactName, "number", reactName.value);
            }
            handleEventFunc = targetInst ? getNodeFromInstance(targetInst) : window;
            switch (domEventName) {
              case "focusin":
                if (isTextInputElement(handleEventFunc) || "true" === handleEventFunc.contentEditable)
                  activeElement = handleEventFunc, activeElementInst = targetInst, lastSelection = null;
                break;
              case "focusout":
                lastSelection = activeElementInst = activeElement = null;
                break;
              case "mousedown":
                mouseDown = true;
                break;
              case "contextmenu":
              case "mouseup":
              case "dragend":
                mouseDown = false;
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
                break;
              case "selectionchange":
                if (skipSelectionChangeEvent) break;
              case "keydown":
              case "keyup":
                constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
            }
            var fallbackData;
            if (canUseCompositionEvent)
              b: {
                switch (domEventName) {
                  case "compositionstart":
                    var eventType = "onCompositionStart";
                    break b;
                  case "compositionend":
                    eventType = "onCompositionEnd";
                    break b;
                  case "compositionupdate":
                    eventType = "onCompositionUpdate";
                    break b;
                }
                eventType = void 0;
              }
            else
              isComposing ? isFallbackCompositionEnd(domEventName, nativeEvent) && (eventType = "onCompositionEnd") : "keydown" === domEventName && 229 === nativeEvent.keyCode && (eventType = "onCompositionStart");
            eventType && (useFallbackCompositionData && "ko" !== nativeEvent.locale && (isComposing || "onCompositionStart" !== eventType ? "onCompositionEnd" === eventType && isComposing && (fallbackData = getData()) : (root2 = nativeEventTarget, startText = "value" in root2 ? root2.value : root2.textContent, isComposing = true)), handleEventFunc = accumulateTwoPhaseListeners(targetInst, eventType), 0 < handleEventFunc.length && (eventType = new SyntheticCompositionEvent(
              eventType,
              domEventName,
              null,
              nativeEvent,
              nativeEventTarget
            ), dispatchQueue.push({ event: eventType, listeners: handleEventFunc }), fallbackData ? eventType.data = fallbackData : (fallbackData = getDataFromCustomEvent(nativeEvent), null !== fallbackData && (eventType.data = fallbackData))));
            if (fallbackData = canUseTextInputEvent ? getNativeBeforeInputChars(domEventName, nativeEvent) : getFallbackBeforeInputChars(domEventName, nativeEvent))
              eventType = accumulateTwoPhaseListeners(targetInst, "onBeforeInput"), 0 < eventType.length && (handleEventFunc = new SyntheticCompositionEvent(
                "onBeforeInput",
                "beforeinput",
                null,
                nativeEvent,
                nativeEventTarget
              ), dispatchQueue.push({
                event: handleEventFunc,
                listeners: eventType
              }), handleEventFunc.data = fallbackData);
            extractEvents$1(
              dispatchQueue,
              domEventName,
              targetInst,
              nativeEvent,
              nativeEventTarget
            );
          }
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        });
      }
      function createDispatchListener(instance, listener2, currentTarget) {
        return {
          instance,
          listener: listener2,
          currentTarget
        };
      }
      function accumulateTwoPhaseListeners(targetFiber, reactName) {
        for (var captureName = reactName + "Capture", listeners = []; null !== targetFiber; ) {
          var _instance2 = targetFiber, stateNode = _instance2.stateNode;
          _instance2 = _instance2.tag;
          5 !== _instance2 && 26 !== _instance2 && 27 !== _instance2 || null === stateNode || (_instance2 = getListener(targetFiber, captureName), null != _instance2 && listeners.unshift(
            createDispatchListener(targetFiber, _instance2, stateNode)
          ), _instance2 = getListener(targetFiber, reactName), null != _instance2 && listeners.push(
            createDispatchListener(targetFiber, _instance2, stateNode)
          ));
          if (3 === targetFiber.tag) return listeners;
          targetFiber = targetFiber.return;
        }
        return [];
      }
      function getParent(inst) {
        if (null === inst) return null;
        do
          inst = inst.return;
        while (inst && 5 !== inst.tag && 27 !== inst.tag);
        return inst ? inst : null;
      }
      function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
        for (var registrationName = event._reactName, listeners = []; null !== target && target !== common; ) {
          var _instance3 = target, alternate = _instance3.alternate, stateNode = _instance3.stateNode;
          _instance3 = _instance3.tag;
          if (null !== alternate && alternate === common) break;
          5 !== _instance3 && 26 !== _instance3 && 27 !== _instance3 || null === stateNode || (alternate = stateNode, inCapturePhase ? (stateNode = getListener(target, registrationName), null != stateNode && listeners.unshift(
            createDispatchListener(target, stateNode, alternate)
          )) : inCapturePhase || (stateNode = getListener(target, registrationName), null != stateNode && listeners.push(
            createDispatchListener(target, stateNode, alternate)
          )));
          target = target.return;
        }
        0 !== listeners.length && dispatchQueue.push({ event, listeners });
      }
      var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
      var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
      function normalizeMarkupForTextOrAttribute(markup) {
        return ("string" === typeof markup ? markup : "" + markup).replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
      }
      function checkForUnmatchedText(serverText, clientText) {
        clientText = normalizeMarkupForTextOrAttribute(clientText);
        return normalizeMarkupForTextOrAttribute(serverText) === clientText ? true : false;
      }
      function noop$1() {
      }
      function setProp(domElement, tag, key, value, props, prevValue) {
        switch (key) {
          case "children":
            "string" === typeof value ? "body" === tag || "textarea" === tag && "" === value || setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && "body" !== tag && setTextContent(domElement, "" + value);
            break;
          case "className":
            setValueForKnownAttribute(domElement, "class", value);
            break;
          case "tabIndex":
            setValueForKnownAttribute(domElement, "tabindex", value);
            break;
          case "dir":
          case "role":
          case "viewBox":
          case "width":
          case "height":
            setValueForKnownAttribute(domElement, key, value);
            break;
          case "style":
            setValueForStyles(domElement, value, prevValue);
            break;
          case "data":
            if ("object" !== tag) {
              setValueForKnownAttribute(domElement, "data", value);
              break;
            }
          case "src":
          case "href":
            if ("" === value && ("a" !== tag || "href" !== key)) {
              domElement.removeAttribute(key);
              break;
            }
            if (null == value || "function" === typeof value || "symbol" === typeof value || "boolean" === typeof value) {
              domElement.removeAttribute(key);
              break;
            }
            value = sanitizeURL("" + value);
            domElement.setAttribute(key, value);
            break;
          case "action":
          case "formAction":
            if ("function" === typeof value) {
              domElement.setAttribute(
                key,
                "javascript:throw new Error('A React form was unexpectedly submitted. If you called form.submit() manually, consider using form.requestSubmit() instead. If you\\'re trying to use event.stopPropagation() in a submit event handler, consider also calling event.preventDefault().')"
              );
              break;
            } else
              "function" === typeof prevValue && ("formAction" === key ? ("input" !== tag && setProp(domElement, tag, "name", props.name, props, null), setProp(
                domElement,
                tag,
                "formEncType",
                props.formEncType,
                props,
                null
              ), setProp(
                domElement,
                tag,
                "formMethod",
                props.formMethod,
                props,
                null
              ), setProp(
                domElement,
                tag,
                "formTarget",
                props.formTarget,
                props,
                null
              )) : (setProp(domElement, tag, "encType", props.encType, props, null), setProp(domElement, tag, "method", props.method, props, null), setProp(domElement, tag, "target", props.target, props, null)));
            if (null == value || "symbol" === typeof value || "boolean" === typeof value) {
              domElement.removeAttribute(key);
              break;
            }
            value = sanitizeURL("" + value);
            domElement.setAttribute(key, value);
            break;
          case "onClick":
            null != value && (domElement.onclick = noop$1);
            break;
          case "onScroll":
            null != value && listenToNonDelegatedEvent("scroll", domElement);
            break;
          case "onScrollEnd":
            null != value && listenToNonDelegatedEvent("scrollend", domElement);
            break;
          case "dangerouslySetInnerHTML":
            if (null != value) {
              if ("object" !== typeof value || !("__html" in value))
                throw Error(formatProdErrorMessage3(61));
              key = value.__html;
              if (null != key) {
                if (null != props.children) throw Error(formatProdErrorMessage3(60));
                domElement.innerHTML = key;
              }
            }
            break;
          case "multiple":
            domElement.multiple = value && "function" !== typeof value && "symbol" !== typeof value;
            break;
          case "muted":
            domElement.muted = value && "function" !== typeof value && "symbol" !== typeof value;
            break;
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
          case "defaultValue":
          case "defaultChecked":
          case "innerHTML":
          case "ref":
            break;
          case "autoFocus":
            break;
          case "xlinkHref":
            if (null == value || "function" === typeof value || "boolean" === typeof value || "symbol" === typeof value) {
              domElement.removeAttribute("xlink:href");
              break;
            }
            key = sanitizeURL("" + value);
            domElement.setAttributeNS(
              "http://www.w3.org/1999/xlink",
              "xlink:href",
              key
            );
            break;
          case "contentEditable":
          case "spellCheck":
          case "draggable":
          case "value":
          case "autoReverse":
          case "externalResourcesRequired":
          case "focusable":
          case "preserveAlpha":
            null != value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "" + value) : domElement.removeAttribute(key);
            break;
          case "inert":
          case "allowFullScreen":
          case "async":
          case "autoPlay":
          case "controls":
          case "default":
          case "defer":
          case "disabled":
          case "disablePictureInPicture":
          case "disableRemotePlayback":
          case "formNoValidate":
          case "hidden":
          case "loop":
          case "noModule":
          case "noValidate":
          case "open":
          case "playsInline":
          case "readOnly":
          case "required":
          case "reversed":
          case "scoped":
          case "seamless":
          case "itemScope":
            value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, "") : domElement.removeAttribute(key);
            break;
          case "capture":
          case "download":
            true === value ? domElement.setAttribute(key, "") : false !== value && null != value && "function" !== typeof value && "symbol" !== typeof value ? domElement.setAttribute(key, value) : domElement.removeAttribute(key);
            break;
          case "cols":
          case "rows":
          case "size":
          case "span":
            null != value && "function" !== typeof value && "symbol" !== typeof value && !isNaN(value) && 1 <= value ? domElement.setAttribute(key, value) : domElement.removeAttribute(key);
            break;
          case "rowSpan":
          case "start":
            null == value || "function" === typeof value || "symbol" === typeof value || isNaN(value) ? domElement.removeAttribute(key) : domElement.setAttribute(key, value);
            break;
          case "popover":
            listenToNonDelegatedEvent("beforetoggle", domElement);
            listenToNonDelegatedEvent("toggle", domElement);
            setValueForAttribute(domElement, "popover", value);
            break;
          case "xlinkActuate":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/1999/xlink",
              "xlink:actuate",
              value
            );
            break;
          case "xlinkArcrole":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/1999/xlink",
              "xlink:arcrole",
              value
            );
            break;
          case "xlinkRole":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/1999/xlink",
              "xlink:role",
              value
            );
            break;
          case "xlinkShow":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/1999/xlink",
              "xlink:show",
              value
            );
            break;
          case "xlinkTitle":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/1999/xlink",
              "xlink:title",
              value
            );
            break;
          case "xlinkType":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/1999/xlink",
              "xlink:type",
              value
            );
            break;
          case "xmlBase":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/XML/1998/namespace",
              "xml:base",
              value
            );
            break;
          case "xmlLang":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/XML/1998/namespace",
              "xml:lang",
              value
            );
            break;
          case "xmlSpace":
            setValueForNamespacedAttribute(
              domElement,
              "http://www.w3.org/XML/1998/namespace",
              "xml:space",
              value
            );
            break;
          case "is":
            setValueForAttribute(domElement, "is", value);
            break;
          case "innerText":
          case "textContent":
            break;
          default:
            if (!(2 < key.length) || "o" !== key[0] && "O" !== key[0] || "n" !== key[1] && "N" !== key[1])
              key = aliases.get(key) || key, setValueForAttribute(domElement, key, value);
        }
      }
      function setPropOnCustomElement(domElement, tag, key, value, props, prevValue) {
        switch (key) {
          case "style":
            setValueForStyles(domElement, value, prevValue);
            break;
          case "dangerouslySetInnerHTML":
            if (null != value) {
              if ("object" !== typeof value || !("__html" in value))
                throw Error(formatProdErrorMessage3(61));
              key = value.__html;
              if (null != key) {
                if (null != props.children) throw Error(formatProdErrorMessage3(60));
                domElement.innerHTML = key;
              }
            }
            break;
          case "children":
            "string" === typeof value ? setTextContent(domElement, value) : ("number" === typeof value || "bigint" === typeof value) && setTextContent(domElement, "" + value);
            break;
          case "onScroll":
            null != value && listenToNonDelegatedEvent("scroll", domElement);
            break;
          case "onScrollEnd":
            null != value && listenToNonDelegatedEvent("scrollend", domElement);
            break;
          case "onClick":
            null != value && (domElement.onclick = noop$1);
            break;
          case "suppressContentEditableWarning":
          case "suppressHydrationWarning":
          case "innerHTML":
          case "ref":
            break;
          case "innerText":
          case "textContent":
            break;
          default:
            if (!registrationNameDependencies.hasOwnProperty(key))
              a: {
                if ("o" === key[0] && "n" === key[1] && (props = key.endsWith("Capture"), tag = key.slice(2, props ? key.length - 7 : void 0), prevValue = domElement[internalPropsKey] || null, prevValue = null != prevValue ? prevValue[key] : null, "function" === typeof prevValue && domElement.removeEventListener(tag, prevValue, props), "function" === typeof value)) {
                  "function" !== typeof prevValue && null !== prevValue && (key in domElement ? domElement[key] = null : domElement.hasAttribute(key) && domElement.removeAttribute(key));
                  domElement.addEventListener(tag, value, props);
                  break a;
                }
                key in domElement ? domElement[key] = value : true === value ? domElement.setAttribute(key, "") : setValueForAttribute(domElement, key, value);
              }
        }
      }
      function setInitialProperties(domElement, tag, props) {
        switch (tag) {
          case "div":
          case "span":
          case "svg":
          case "path":
          case "a":
          case "g":
          case "p":
          case "li":
            break;
          case "img":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            var hasSrc = false, hasSrcSet = false, propKey;
            for (propKey in props)
              if (props.hasOwnProperty(propKey)) {
                var propValue = props[propKey];
                if (null != propValue)
                  switch (propKey) {
                    case "src":
                      hasSrc = true;
                      break;
                    case "srcSet":
                      hasSrcSet = true;
                      break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                      throw Error(formatProdErrorMessage3(137, tag));
                    default:
                      setProp(domElement, tag, propKey, propValue, props, null);
                  }
              }
            hasSrcSet && setProp(domElement, tag, "srcSet", props.srcSet, props, null);
            hasSrc && setProp(domElement, tag, "src", props.src, props, null);
            return;
          case "input":
            listenToNonDelegatedEvent("invalid", domElement);
            var defaultValue = propKey = propValue = hasSrcSet = null, checked = null, defaultChecked = null;
            for (hasSrc in props)
              if (props.hasOwnProperty(hasSrc)) {
                var propValue$188 = props[hasSrc];
                if (null != propValue$188)
                  switch (hasSrc) {
                    case "name":
                      hasSrcSet = propValue$188;
                      break;
                    case "type":
                      propValue = propValue$188;
                      break;
                    case "checked":
                      checked = propValue$188;
                      break;
                    case "defaultChecked":
                      defaultChecked = propValue$188;
                      break;
                    case "value":
                      propKey = propValue$188;
                      break;
                    case "defaultValue":
                      defaultValue = propValue$188;
                      break;
                    case "children":
                    case "dangerouslySetInnerHTML":
                      if (null != propValue$188)
                        throw Error(formatProdErrorMessage3(137, tag));
                      break;
                    default:
                      setProp(domElement, tag, hasSrc, propValue$188, props, null);
                  }
              }
            initInput(
              domElement,
              propKey,
              defaultValue,
              checked,
              defaultChecked,
              propValue,
              hasSrcSet,
              false
            );
            track(domElement);
            return;
          case "select":
            listenToNonDelegatedEvent("invalid", domElement);
            hasSrc = propValue = propKey = null;
            for (hasSrcSet in props)
              if (props.hasOwnProperty(hasSrcSet) && (defaultValue = props[hasSrcSet], null != defaultValue))
                switch (hasSrcSet) {
                  case "value":
                    propKey = defaultValue;
                    break;
                  case "defaultValue":
                    propValue = defaultValue;
                    break;
                  case "multiple":
                    hasSrc = defaultValue;
                  default:
                    setProp(domElement, tag, hasSrcSet, defaultValue, props, null);
                }
            tag = propKey;
            props = propValue;
            domElement.multiple = !!hasSrc;
            null != tag ? updateOptions2(domElement, !!hasSrc, tag, false) : null != props && updateOptions2(domElement, !!hasSrc, props, true);
            return;
          case "textarea":
            listenToNonDelegatedEvent("invalid", domElement);
            propKey = hasSrcSet = hasSrc = null;
            for (propValue in props)
              if (props.hasOwnProperty(propValue) && (defaultValue = props[propValue], null != defaultValue))
                switch (propValue) {
                  case "value":
                    hasSrc = defaultValue;
                    break;
                  case "defaultValue":
                    hasSrcSet = defaultValue;
                    break;
                  case "children":
                    propKey = defaultValue;
                    break;
                  case "dangerouslySetInnerHTML":
                    if (null != defaultValue) throw Error(formatProdErrorMessage3(91));
                    break;
                  default:
                    setProp(domElement, tag, propValue, defaultValue, props, null);
                }
            initTextarea(domElement, hasSrc, hasSrcSet, propKey);
            track(domElement);
            return;
          case "option":
            for (checked in props)
              if (props.hasOwnProperty(checked) && (hasSrc = props[checked], null != hasSrc))
                switch (checked) {
                  case "selected":
                    domElement.selected = hasSrc && "function" !== typeof hasSrc && "symbol" !== typeof hasSrc;
                    break;
                  default:
                    setProp(domElement, tag, checked, hasSrc, props, null);
                }
            return;
          case "dialog":
            listenToNonDelegatedEvent("beforetoggle", domElement);
            listenToNonDelegatedEvent("toggle", domElement);
            listenToNonDelegatedEvent("cancel", domElement);
            listenToNonDelegatedEvent("close", domElement);
            break;
          case "iframe":
          case "object":
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "video":
          case "audio":
            for (hasSrc = 0; hasSrc < mediaEventTypes.length; hasSrc++)
              listenToNonDelegatedEvent(mediaEventTypes[hasSrc], domElement);
            break;
          case "image":
            listenToNonDelegatedEvent("error", domElement);
            listenToNonDelegatedEvent("load", domElement);
            break;
          case "details":
            listenToNonDelegatedEvent("toggle", domElement);
            break;
          case "embed":
          case "source":
          case "link":
            listenToNonDelegatedEvent("error", domElement), listenToNonDelegatedEvent("load", domElement);
          case "area":
          case "base":
          case "br":
          case "col":
          case "hr":
          case "keygen":
          case "meta":
          case "param":
          case "track":
          case "wbr":
          case "menuitem":
            for (defaultChecked in props)
              if (props.hasOwnProperty(defaultChecked) && (hasSrc = props[defaultChecked], null != hasSrc))
                switch (defaultChecked) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    throw Error(formatProdErrorMessage3(137, tag));
                  default:
                    setProp(domElement, tag, defaultChecked, hasSrc, props, null);
                }
            return;
          default:
            if (isCustomElement(tag)) {
              for (propValue$188 in props)
                props.hasOwnProperty(propValue$188) && (hasSrc = props[propValue$188], void 0 !== hasSrc && setPropOnCustomElement(
                  domElement,
                  tag,
                  propValue$188,
                  hasSrc,
                  props,
                  void 0
                ));
              return;
            }
        }
        for (defaultValue in props)
          props.hasOwnProperty(defaultValue) && (hasSrc = props[defaultValue], null != hasSrc && setProp(domElement, tag, defaultValue, hasSrc, props, null));
      }
      function updateProperties(domElement, tag, lastProps, nextProps) {
        switch (tag) {
          case "div":
          case "span":
          case "svg":
          case "path":
          case "a":
          case "g":
          case "p":
          case "li":
            break;
          case "input":
            var name = null, type = null, value = null, defaultValue = null, lastDefaultValue = null, checked = null, defaultChecked = null;
            for (propKey in lastProps) {
              var lastProp = lastProps[propKey];
              if (lastProps.hasOwnProperty(propKey) && null != lastProp)
                switch (propKey) {
                  case "checked":
                    break;
                  case "value":
                    break;
                  case "defaultValue":
                    lastDefaultValue = lastProp;
                  default:
                    nextProps.hasOwnProperty(propKey) || setProp(domElement, tag, propKey, null, nextProps, lastProp);
                }
            }
            for (var propKey$205 in nextProps) {
              var propKey = nextProps[propKey$205];
              lastProp = lastProps[propKey$205];
              if (nextProps.hasOwnProperty(propKey$205) && (null != propKey || null != lastProp))
                switch (propKey$205) {
                  case "type":
                    type = propKey;
                    break;
                  case "name":
                    name = propKey;
                    break;
                  case "checked":
                    checked = propKey;
                    break;
                  case "defaultChecked":
                    defaultChecked = propKey;
                    break;
                  case "value":
                    value = propKey;
                    break;
                  case "defaultValue":
                    defaultValue = propKey;
                    break;
                  case "children":
                  case "dangerouslySetInnerHTML":
                    if (null != propKey)
                      throw Error(formatProdErrorMessage3(137, tag));
                    break;
                  default:
                    propKey !== lastProp && setProp(
                      domElement,
                      tag,
                      propKey$205,
                      propKey,
                      nextProps,
                      lastProp
                    );
                }
            }
            updateInput(
              domElement,
              value,
              defaultValue,
              lastDefaultValue,
              checked,
              defaultChecked,
              type,
              name
            );
            return;
          case "select":
            propKey = value = defaultValue = propKey$205 = null;
            for (type in lastProps)
              if (lastDefaultValue = lastProps[type], lastProps.hasOwnProperty(type) && null != lastDefaultValue)
                switch (type) {
                  case "value":
                    break;
                  case "multiple":
                    propKey = lastDefaultValue;
                  default:
                    nextProps.hasOwnProperty(type) || setProp(
                      domElement,
                      tag,
                      type,
                      null,
                      nextProps,
                      lastDefaultValue
                    );
                }
            for (name in nextProps)
              if (type = nextProps[name], lastDefaultValue = lastProps[name], nextProps.hasOwnProperty(name) && (null != type || null != lastDefaultValue))
                switch (name) {
                  case "value":
                    propKey$205 = type;
                    break;
                  case "defaultValue":
                    defaultValue = type;
                    break;
                  case "multiple":
                    value = type;
                  default:
                    type !== lastDefaultValue && setProp(
                      domElement,
                      tag,
                      name,
                      type,
                      nextProps,
                      lastDefaultValue
                    );
                }
            tag = defaultValue;
            lastProps = value;
            nextProps = propKey;
            null != propKey$205 ? updateOptions2(domElement, !!lastProps, propKey$205, false) : !!nextProps !== !!lastProps && (null != tag ? updateOptions2(domElement, !!lastProps, tag, true) : updateOptions2(domElement, !!lastProps, lastProps ? [] : "", false));
            return;
          case "textarea":
            propKey = propKey$205 = null;
            for (defaultValue in lastProps)
              if (name = lastProps[defaultValue], lastProps.hasOwnProperty(defaultValue) && null != name && !nextProps.hasOwnProperty(defaultValue))
                switch (defaultValue) {
                  case "value":
                    break;
                  case "children":
                    break;
                  default:
                    setProp(domElement, tag, defaultValue, null, nextProps, name);
                }
            for (value in nextProps)
              if (name = nextProps[value], type = lastProps[value], nextProps.hasOwnProperty(value) && (null != name || null != type))
                switch (value) {
                  case "value":
                    propKey$205 = name;
                    break;
                  case "defaultValue":
                    propKey = name;
                    break;
                  case "children":
                    break;
                  case "dangerouslySetInnerHTML":
                    if (null != name) throw Error(formatProdErrorMessage3(91));
                    break;
                  default:
                    name !== type && setProp(domElement, tag, value, name, nextProps, type);
                }
            updateTextarea(domElement, propKey$205, propKey);
            return;
          case "option":
            for (var propKey$221 in lastProps)
              if (propKey$205 = lastProps[propKey$221], lastProps.hasOwnProperty(propKey$221) && null != propKey$205 && !nextProps.hasOwnProperty(propKey$221))
                switch (propKey$221) {
                  case "selected":
                    domElement.selected = false;
                    break;
                  default:
                    setProp(
                      domElement,
                      tag,
                      propKey$221,
                      null,
                      nextProps,
                      propKey$205
                    );
                }
            for (lastDefaultValue in nextProps)
              if (propKey$205 = nextProps[lastDefaultValue], propKey = lastProps[lastDefaultValue], nextProps.hasOwnProperty(lastDefaultValue) && propKey$205 !== propKey && (null != propKey$205 || null != propKey))
                switch (lastDefaultValue) {
                  case "selected":
                    domElement.selected = propKey$205 && "function" !== typeof propKey$205 && "symbol" !== typeof propKey$205;
                    break;
                  default:
                    setProp(
                      domElement,
                      tag,
                      lastDefaultValue,
                      propKey$205,
                      nextProps,
                      propKey
                    );
                }
            return;
          case "img":
          case "link":
          case "area":
          case "base":
          case "br":
          case "col":
          case "embed":
          case "hr":
          case "keygen":
          case "meta":
          case "param":
          case "source":
          case "track":
          case "wbr":
          case "menuitem":
            for (var propKey$226 in lastProps)
              propKey$205 = lastProps[propKey$226], lastProps.hasOwnProperty(propKey$226) && null != propKey$205 && !nextProps.hasOwnProperty(propKey$226) && setProp(domElement, tag, propKey$226, null, nextProps, propKey$205);
            for (checked in nextProps)
              if (propKey$205 = nextProps[checked], propKey = lastProps[checked], nextProps.hasOwnProperty(checked) && propKey$205 !== propKey && (null != propKey$205 || null != propKey))
                switch (checked) {
                  case "children":
                  case "dangerouslySetInnerHTML":
                    if (null != propKey$205)
                      throw Error(formatProdErrorMessage3(137, tag));
                    break;
                  default:
                    setProp(
                      domElement,
                      tag,
                      checked,
                      propKey$205,
                      nextProps,
                      propKey
                    );
                }
            return;
          default:
            if (isCustomElement(tag)) {
              for (var propKey$231 in lastProps)
                propKey$205 = lastProps[propKey$231], lastProps.hasOwnProperty(propKey$231) && void 0 !== propKey$205 && !nextProps.hasOwnProperty(propKey$231) && setPropOnCustomElement(
                  domElement,
                  tag,
                  propKey$231,
                  void 0,
                  nextProps,
                  propKey$205
                );
              for (defaultChecked in nextProps)
                propKey$205 = nextProps[defaultChecked], propKey = lastProps[defaultChecked], !nextProps.hasOwnProperty(defaultChecked) || propKey$205 === propKey || void 0 === propKey$205 && void 0 === propKey || setPropOnCustomElement(
                  domElement,
                  tag,
                  defaultChecked,
                  propKey$205,
                  nextProps,
                  propKey
                );
              return;
            }
        }
        for (var propKey$236 in lastProps)
          propKey$205 = lastProps[propKey$236], lastProps.hasOwnProperty(propKey$236) && null != propKey$205 && !nextProps.hasOwnProperty(propKey$236) && setProp(domElement, tag, propKey$236, null, nextProps, propKey$205);
        for (lastProp in nextProps)
          propKey$205 = nextProps[lastProp], propKey = lastProps[lastProp], !nextProps.hasOwnProperty(lastProp) || propKey$205 === propKey || null == propKey$205 && null == propKey || setProp(domElement, tag, lastProp, propKey$205, nextProps, propKey);
      }
      var eventsEnabled = null;
      var selectionInformation = null;
      function getOwnerDocumentFromRootContainer(rootContainerElement) {
        return 9 === rootContainerElement.nodeType ? rootContainerElement : rootContainerElement.ownerDocument;
      }
      function getOwnHostContext(namespaceURI) {
        switch (namespaceURI) {
          case "http://www.w3.org/2000/svg":
            return 1;
          case "http://www.w3.org/1998/Math/MathML":
            return 2;
          default:
            return 0;
        }
      }
      function getChildHostContextProd(parentNamespace, type) {
        if (0 === parentNamespace)
          switch (type) {
            case "svg":
              return 1;
            case "math":
              return 2;
            default:
              return 0;
          }
        return 1 === parentNamespace && "foreignObject" === type ? 0 : parentNamespace;
      }
      function shouldSetTextContent(type, props) {
        return "textarea" === type || "noscript" === type || "string" === typeof props.children || "number" === typeof props.children || "bigint" === typeof props.children || "object" === typeof props.dangerouslySetInnerHTML && null !== props.dangerouslySetInnerHTML && null != props.dangerouslySetInnerHTML.__html;
      }
      var currentPopstateTransitionEvent = null;
      function shouldAttemptEagerTransition() {
        var event = window.event;
        if (event && "popstate" === event.type) {
          if (event === currentPopstateTransitionEvent) return false;
          currentPopstateTransitionEvent = event;
          return true;
        }
        currentPopstateTransitionEvent = null;
        return false;
      }
      var scheduleTimeout = "function" === typeof setTimeout ? setTimeout : void 0;
      var cancelTimeout = "function" === typeof clearTimeout ? clearTimeout : void 0;
      var localPromise = "function" === typeof Promise ? Promise : void 0;
      var scheduleMicrotask = "function" === typeof queueMicrotask ? queueMicrotask : "undefined" !== typeof localPromise ? function(callback) {
        return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
      } : scheduleTimeout;
      function handleErrorInNextTick(error) {
        setTimeout(function() {
          throw error;
        });
      }
      function isSingletonScope(type) {
        return "head" === type;
      }
      function clearSuspenseBoundary(parentInstance, suspenseInstance) {
        var node = suspenseInstance, possiblePreambleContribution = 0, depth = 0;
        do {
          var nextNode = node.nextSibling;
          parentInstance.removeChild(node);
          if (nextNode && 8 === nextNode.nodeType)
            if (node = nextNode.data, "/$" === node) {
              if (0 < possiblePreambleContribution && 8 > possiblePreambleContribution) {
                node = possiblePreambleContribution;
                var ownerDocument = parentInstance.ownerDocument;
                node & 1 && releaseSingletonInstance(ownerDocument.documentElement);
                node & 2 && releaseSingletonInstance(ownerDocument.body);
                if (node & 4)
                  for (node = ownerDocument.head, releaseSingletonInstance(node), ownerDocument = node.firstChild; ownerDocument; ) {
                    var nextNode$jscomp$0 = ownerDocument.nextSibling, nodeName = ownerDocument.nodeName;
                    ownerDocument[internalHoistableMarker] || "SCRIPT" === nodeName || "STYLE" === nodeName || "LINK" === nodeName && "stylesheet" === ownerDocument.rel.toLowerCase() || node.removeChild(ownerDocument);
                    ownerDocument = nextNode$jscomp$0;
                  }
              }
              if (0 === depth) {
                parentInstance.removeChild(nextNode);
                retryIfBlockedOn(suspenseInstance);
                return;
              }
              depth--;
            } else
              "$" === node || "$?" === node || "$!" === node ? depth++ : possiblePreambleContribution = node.charCodeAt(0) - 48;
          else possiblePreambleContribution = 0;
          node = nextNode;
        } while (node);
        retryIfBlockedOn(suspenseInstance);
      }
      function clearContainerSparingly(container) {
        var nextNode = container.firstChild;
        nextNode && 10 === nextNode.nodeType && (nextNode = nextNode.nextSibling);
        for (; nextNode; ) {
          var node = nextNode;
          nextNode = nextNode.nextSibling;
          switch (node.nodeName) {
            case "HTML":
            case "HEAD":
            case "BODY":
              clearContainerSparingly(node);
              detachDeletedInstance(node);
              continue;
            case "SCRIPT":
            case "STYLE":
              continue;
            case "LINK":
              if ("stylesheet" === node.rel.toLowerCase()) continue;
          }
          container.removeChild(node);
        }
      }
      function canHydrateInstance(instance, type, props, inRootOrSingleton) {
        for (; 1 === instance.nodeType; ) {
          var anyProps = props;
          if (instance.nodeName.toLowerCase() !== type.toLowerCase()) {
            if (!inRootOrSingleton && ("INPUT" !== instance.nodeName || "hidden" !== instance.type))
              break;
          } else if (!inRootOrSingleton)
            if ("input" === type && "hidden" === instance.type) {
              var name = null == anyProps.name ? null : "" + anyProps.name;
              if ("hidden" === anyProps.type && instance.getAttribute("name") === name)
                return instance;
            } else return instance;
          else if (!instance[internalHoistableMarker])
            switch (type) {
              case "meta":
                if (!instance.hasAttribute("itemprop")) break;
                return instance;
              case "link":
                name = instance.getAttribute("rel");
                if ("stylesheet" === name && instance.hasAttribute("data-precedence"))
                  break;
                else if (name !== anyProps.rel || instance.getAttribute("href") !== (null == anyProps.href || "" === anyProps.href ? null : anyProps.href) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin) || instance.getAttribute("title") !== (null == anyProps.title ? null : anyProps.title))
                  break;
                return instance;
              case "style":
                if (instance.hasAttribute("data-precedence")) break;
                return instance;
              case "script":
                name = instance.getAttribute("src");
                if ((name !== (null == anyProps.src ? null : anyProps.src) || instance.getAttribute("type") !== (null == anyProps.type ? null : anyProps.type) || instance.getAttribute("crossorigin") !== (null == anyProps.crossOrigin ? null : anyProps.crossOrigin)) && name && instance.hasAttribute("async") && !instance.hasAttribute("itemprop"))
                  break;
                return instance;
              default:
                return instance;
            }
          instance = getNextHydratable(instance.nextSibling);
          if (null === instance) break;
        }
        return null;
      }
      function canHydrateTextInstance(instance, text, inRootOrSingleton) {
        if ("" === text) return null;
        for (; 3 !== instance.nodeType; ) {
          if ((1 !== instance.nodeType || "INPUT" !== instance.nodeName || "hidden" !== instance.type) && !inRootOrSingleton)
            return null;
          instance = getNextHydratable(instance.nextSibling);
          if (null === instance) return null;
        }
        return instance;
      }
      function isSuspenseInstanceFallback(instance) {
        return "$!" === instance.data || "$?" === instance.data && "complete" === instance.ownerDocument.readyState;
      }
      function registerSuspenseInstanceRetry(instance, callback) {
        var ownerDocument = instance.ownerDocument;
        if ("$?" !== instance.data || "complete" === ownerDocument.readyState)
          callback();
        else {
          var listener2 = function() {
            callback();
            ownerDocument.removeEventListener("DOMContentLoaded", listener2);
          };
          ownerDocument.addEventListener("DOMContentLoaded", listener2);
          instance._reactRetry = listener2;
        }
      }
      function getNextHydratable(node) {
        for (; null != node; node = node.nextSibling) {
          var nodeType = node.nodeType;
          if (1 === nodeType || 3 === nodeType) break;
          if (8 === nodeType) {
            nodeType = node.data;
            if ("$" === nodeType || "$!" === nodeType || "$?" === nodeType || "F!" === nodeType || "F" === nodeType)
              break;
            if ("/$" === nodeType) return null;
          }
        }
        return node;
      }
      var previousHydratableOnEnteringScopedSingleton = null;
      function getParentSuspenseInstance(targetInstance) {
        targetInstance = targetInstance.previousSibling;
        for (var depth = 0; targetInstance; ) {
          if (8 === targetInstance.nodeType) {
            var data = targetInstance.data;
            if ("$" === data || "$!" === data || "$?" === data) {
              if (0 === depth) return targetInstance;
              depth--;
            } else "/$" === data && depth++;
          }
          targetInstance = targetInstance.previousSibling;
        }
        return null;
      }
      function resolveSingletonInstance(type, props, rootContainerInstance) {
        props = getOwnerDocumentFromRootContainer(rootContainerInstance);
        switch (type) {
          case "html":
            type = props.documentElement;
            if (!type) throw Error(formatProdErrorMessage3(452));
            return type;
          case "head":
            type = props.head;
            if (!type) throw Error(formatProdErrorMessage3(453));
            return type;
          case "body":
            type = props.body;
            if (!type) throw Error(formatProdErrorMessage3(454));
            return type;
          default:
            throw Error(formatProdErrorMessage3(451));
        }
      }
      function releaseSingletonInstance(instance) {
        for (var attributes = instance.attributes; attributes.length; )
          instance.removeAttributeNode(attributes[0]);
        detachDeletedInstance(instance);
      }
      var preloadPropsMap = /* @__PURE__ */ new Map();
      var preconnectsSet = /* @__PURE__ */ new Set();
      function getHoistableRoot(container) {
        return "function" === typeof container.getRootNode ? container.getRootNode() : 9 === container.nodeType ? container : container.ownerDocument;
      }
      var previousDispatcher = ReactDOMSharedInternals.d;
      ReactDOMSharedInternals.d = {
        f: flushSyncWork,
        r: requestFormReset,
        D: prefetchDNS,
        C: preconnect,
        L: preload,
        m: preloadModule,
        X: preinitScript,
        S: preinitStyle,
        M: preinitModuleScript
      };
      function flushSyncWork() {
        var previousWasRendering = previousDispatcher.f(), wasRendering = flushSyncWork$1();
        return previousWasRendering || wasRendering;
      }
      function requestFormReset(form) {
        var formInst = getInstanceFromNode(form);
        null !== formInst && 5 === formInst.tag && "form" === formInst.type ? requestFormReset$1(formInst) : previousDispatcher.r(form);
      }
      var globalDocument = "undefined" === typeof document ? null : document;
      function preconnectAs(rel, href, crossOrigin) {
        var ownerDocument = globalDocument;
        if (ownerDocument && "string" === typeof href && href) {
          var limitedEscapedHref = escapeSelectorAttributeValueInsideDoubleQuotes(href);
          limitedEscapedHref = 'link[rel="' + rel + '"][href="' + limitedEscapedHref + '"]';
          "string" === typeof crossOrigin && (limitedEscapedHref += '[crossorigin="' + crossOrigin + '"]');
          preconnectsSet.has(limitedEscapedHref) || (preconnectsSet.add(limitedEscapedHref), rel = { rel, crossOrigin, href }, null === ownerDocument.querySelector(limitedEscapedHref) && (href = ownerDocument.createElement("link"), setInitialProperties(href, "link", rel), markNodeAsHoistable(href), ownerDocument.head.appendChild(href)));
        }
      }
      function prefetchDNS(href) {
        previousDispatcher.D(href);
        preconnectAs("dns-prefetch", href, null);
      }
      function preconnect(href, crossOrigin) {
        previousDispatcher.C(href, crossOrigin);
        preconnectAs("preconnect", href, crossOrigin);
      }
      function preload(href, as, options2) {
        previousDispatcher.L(href, as, options2);
        var ownerDocument = globalDocument;
        if (ownerDocument && href && as) {
          var preloadSelector = 'link[rel="preload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"]';
          "image" === as ? options2 && options2.imageSrcSet ? (preloadSelector += '[imagesrcset="' + escapeSelectorAttributeValueInsideDoubleQuotes(
            options2.imageSrcSet
          ) + '"]', "string" === typeof options2.imageSizes && (preloadSelector += '[imagesizes="' + escapeSelectorAttributeValueInsideDoubleQuotes(
            options2.imageSizes
          ) + '"]')) : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]' : preloadSelector += '[href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]';
          var key = preloadSelector;
          switch (as) {
            case "style":
              key = getStyleKey(href);
              break;
            case "script":
              key = getScriptKey(href);
          }
          preloadPropsMap.has(key) || (href = assign2(
            {
              rel: "preload",
              href: "image" === as && options2 && options2.imageSrcSet ? void 0 : href,
              as
            },
            options2
          ), preloadPropsMap.set(key, href), null !== ownerDocument.querySelector(preloadSelector) || "style" === as && ownerDocument.querySelector(getStylesheetSelectorFromKey(key)) || "script" === as && ownerDocument.querySelector(getScriptSelectorFromKey(key)) || (as = ownerDocument.createElement("link"), setInitialProperties(as, "link", href), markNodeAsHoistable(as), ownerDocument.head.appendChild(as)));
        }
      }
      function preloadModule(href, options2) {
        previousDispatcher.m(href, options2);
        var ownerDocument = globalDocument;
        if (ownerDocument && href) {
          var as = options2 && "string" === typeof options2.as ? options2.as : "script", preloadSelector = 'link[rel="modulepreload"][as="' + escapeSelectorAttributeValueInsideDoubleQuotes(as) + '"][href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"]', key = preloadSelector;
          switch (as) {
            case "audioworklet":
            case "paintworklet":
            case "serviceworker":
            case "sharedworker":
            case "worker":
            case "script":
              key = getScriptKey(href);
          }
          if (!preloadPropsMap.has(key) && (href = assign2({ rel: "modulepreload", href }, options2), preloadPropsMap.set(key, href), null === ownerDocument.querySelector(preloadSelector))) {
            switch (as) {
              case "audioworklet":
              case "paintworklet":
              case "serviceworker":
              case "sharedworker":
              case "worker":
              case "script":
                if (ownerDocument.querySelector(getScriptSelectorFromKey(key)))
                  return;
            }
            as = ownerDocument.createElement("link");
            setInitialProperties(as, "link", href);
            markNodeAsHoistable(as);
            ownerDocument.head.appendChild(as);
          }
        }
      }
      function preinitStyle(href, precedence, options2) {
        previousDispatcher.S(href, precedence, options2);
        var ownerDocument = globalDocument;
        if (ownerDocument && href) {
          var styles = getResourcesFromRoot(ownerDocument).hoistableStyles, key = getStyleKey(href);
          precedence = precedence || "default";
          var resource = styles.get(key);
          if (!resource) {
            var state = { loading: 0, preload: null };
            if (resource = ownerDocument.querySelector(
              getStylesheetSelectorFromKey(key)
            ))
              state.loading = 5;
            else {
              href = assign2(
                { rel: "stylesheet", href, "data-precedence": precedence },
                options2
              );
              (options2 = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(href, options2);
              var link = resource = ownerDocument.createElement("link");
              markNodeAsHoistable(link);
              setInitialProperties(link, "link", href);
              link._p = new Promise(function(resolve, reject) {
                link.onload = resolve;
                link.onerror = reject;
              });
              link.addEventListener("load", function() {
                state.loading |= 1;
              });
              link.addEventListener("error", function() {
                state.loading |= 2;
              });
              state.loading |= 4;
              insertStylesheet(resource, precedence, ownerDocument);
            }
            resource = {
              type: "stylesheet",
              instance: resource,
              count: 1,
              state
            };
            styles.set(key, resource);
          }
        }
      }
      function preinitScript(src, options2) {
        previousDispatcher.X(src, options2);
        var ownerDocument = globalDocument;
        if (ownerDocument && src) {
          var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
          resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign2({ src, async: true }, options2), (options2 = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options2), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
            type: "script",
            instance: resource,
            count: 1,
            state: null
          }, scripts.set(key, resource));
        }
      }
      function preinitModuleScript(src, options2) {
        previousDispatcher.M(src, options2);
        var ownerDocument = globalDocument;
        if (ownerDocument && src) {
          var scripts = getResourcesFromRoot(ownerDocument).hoistableScripts, key = getScriptKey(src), resource = scripts.get(key);
          resource || (resource = ownerDocument.querySelector(getScriptSelectorFromKey(key)), resource || (src = assign2({ src, async: true, type: "module" }, options2), (options2 = preloadPropsMap.get(key)) && adoptPreloadPropsForScript(src, options2), resource = ownerDocument.createElement("script"), markNodeAsHoistable(resource), setInitialProperties(resource, "link", src), ownerDocument.head.appendChild(resource)), resource = {
            type: "script",
            instance: resource,
            count: 1,
            state: null
          }, scripts.set(key, resource));
        }
      }
      function getResource(type, currentProps, pendingProps, currentResource) {
        var JSCompiler_inline_result = (JSCompiler_inline_result = rootInstanceStackCursor.current) ? getHoistableRoot(JSCompiler_inline_result) : null;
        if (!JSCompiler_inline_result) throw Error(formatProdErrorMessage3(446));
        switch (type) {
          case "meta":
          case "title":
            return null;
          case "style":
            return "string" === typeof pendingProps.precedence && "string" === typeof pendingProps.href ? (currentProps = getStyleKey(pendingProps.href), pendingProps = getResourcesFromRoot(
              JSCompiler_inline_result
            ).hoistableStyles, currentResource = pendingProps.get(currentProps), currentResource || (currentResource = {
              type: "style",
              instance: null,
              count: 0,
              state: null
            }, pendingProps.set(currentProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
          case "link":
            if ("stylesheet" === pendingProps.rel && "string" === typeof pendingProps.href && "string" === typeof pendingProps.precedence) {
              type = getStyleKey(pendingProps.href);
              var styles$244 = getResourcesFromRoot(
                JSCompiler_inline_result
              ).hoistableStyles, resource$245 = styles$244.get(type);
              resource$245 || (JSCompiler_inline_result = JSCompiler_inline_result.ownerDocument || JSCompiler_inline_result, resource$245 = {
                type: "stylesheet",
                instance: null,
                count: 0,
                state: { loading: 0, preload: null }
              }, styles$244.set(type, resource$245), (styles$244 = JSCompiler_inline_result.querySelector(
                getStylesheetSelectorFromKey(type)
              )) && !styles$244._p && (resource$245.instance = styles$244, resource$245.state.loading = 5), preloadPropsMap.has(type) || (pendingProps = {
                rel: "preload",
                as: "style",
                href: pendingProps.href,
                crossOrigin: pendingProps.crossOrigin,
                integrity: pendingProps.integrity,
                media: pendingProps.media,
                hrefLang: pendingProps.hrefLang,
                referrerPolicy: pendingProps.referrerPolicy
              }, preloadPropsMap.set(type, pendingProps), styles$244 || preloadStylesheet(
                JSCompiler_inline_result,
                type,
                pendingProps,
                resource$245.state
              )));
              if (currentProps && null === currentResource)
                throw Error(formatProdErrorMessage3(528, ""));
              return resource$245;
            }
            if (currentProps && null !== currentResource)
              throw Error(formatProdErrorMessage3(529, ""));
            return null;
          case "script":
            return currentProps = pendingProps.async, pendingProps = pendingProps.src, "string" === typeof pendingProps && currentProps && "function" !== typeof currentProps && "symbol" !== typeof currentProps ? (currentProps = getScriptKey(pendingProps), pendingProps = getResourcesFromRoot(
              JSCompiler_inline_result
            ).hoistableScripts, currentResource = pendingProps.get(currentProps), currentResource || (currentResource = {
              type: "script",
              instance: null,
              count: 0,
              state: null
            }, pendingProps.set(currentProps, currentResource)), currentResource) : { type: "void", instance: null, count: 0, state: null };
          default:
            throw Error(formatProdErrorMessage3(444, type));
        }
      }
      function getStyleKey(href) {
        return 'href="' + escapeSelectorAttributeValueInsideDoubleQuotes(href) + '"';
      }
      function getStylesheetSelectorFromKey(key) {
        return 'link[rel="stylesheet"][' + key + "]";
      }
      function stylesheetPropsFromRawProps(rawProps) {
        return assign2({}, rawProps, {
          "data-precedence": rawProps.precedence,
          precedence: null
        });
      }
      function preloadStylesheet(ownerDocument, key, preloadProps, state) {
        ownerDocument.querySelector('link[rel="preload"][as="style"][' + key + "]") ? state.loading = 1 : (key = ownerDocument.createElement("link"), state.preload = key, key.addEventListener("load", function() {
          return state.loading |= 1;
        }), key.addEventListener("error", function() {
          return state.loading |= 2;
        }), setInitialProperties(key, "link", preloadProps), markNodeAsHoistable(key), ownerDocument.head.appendChild(key));
      }
      function getScriptKey(src) {
        return '[src="' + escapeSelectorAttributeValueInsideDoubleQuotes(src) + '"]';
      }
      function getScriptSelectorFromKey(key) {
        return "script[async]" + key;
      }
      function acquireResource(hoistableRoot, resource, props) {
        resource.count++;
        if (null === resource.instance)
          switch (resource.type) {
            case "style":
              var instance = hoistableRoot.querySelector(
                'style[data-href~="' + escapeSelectorAttributeValueInsideDoubleQuotes(props.href) + '"]'
              );
              if (instance)
                return resource.instance = instance, markNodeAsHoistable(instance), instance;
              var styleProps = assign2({}, props, {
                "data-href": props.href,
                "data-precedence": props.precedence,
                href: null,
                precedence: null
              });
              instance = (hoistableRoot.ownerDocument || hoistableRoot).createElement(
                "style"
              );
              markNodeAsHoistable(instance);
              setInitialProperties(instance, "style", styleProps);
              insertStylesheet(instance, props.precedence, hoistableRoot);
              return resource.instance = instance;
            case "stylesheet":
              styleProps = getStyleKey(props.href);
              var instance$250 = hoistableRoot.querySelector(
                getStylesheetSelectorFromKey(styleProps)
              );
              if (instance$250)
                return resource.state.loading |= 4, resource.instance = instance$250, markNodeAsHoistable(instance$250), instance$250;
              instance = stylesheetPropsFromRawProps(props);
              (styleProps = preloadPropsMap.get(styleProps)) && adoptPreloadPropsForStylesheet(instance, styleProps);
              instance$250 = (hoistableRoot.ownerDocument || hoistableRoot).createElement("link");
              markNodeAsHoistable(instance$250);
              var linkInstance = instance$250;
              linkInstance._p = new Promise(function(resolve, reject) {
                linkInstance.onload = resolve;
                linkInstance.onerror = reject;
              });
              setInitialProperties(instance$250, "link", instance);
              resource.state.loading |= 4;
              insertStylesheet(instance$250, props.precedence, hoistableRoot);
              return resource.instance = instance$250;
            case "script":
              instance$250 = getScriptKey(props.src);
              if (styleProps = hoistableRoot.querySelector(
                getScriptSelectorFromKey(instance$250)
              ))
                return resource.instance = styleProps, markNodeAsHoistable(styleProps), styleProps;
              instance = props;
              if (styleProps = preloadPropsMap.get(instance$250))
                instance = assign2({}, props), adoptPreloadPropsForScript(instance, styleProps);
              hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
              styleProps = hoistableRoot.createElement("script");
              markNodeAsHoistable(styleProps);
              setInitialProperties(styleProps, "link", instance);
              hoistableRoot.head.appendChild(styleProps);
              return resource.instance = styleProps;
            case "void":
              return null;
            default:
              throw Error(formatProdErrorMessage3(443, resource.type));
          }
        else
          "stylesheet" === resource.type && 0 === (resource.state.loading & 4) && (instance = resource.instance, resource.state.loading |= 4, insertStylesheet(instance, props.precedence, hoistableRoot));
        return resource.instance;
      }
      function insertStylesheet(instance, precedence, root3) {
        for (var nodes = root3.querySelectorAll(
          'link[rel="stylesheet"][data-precedence],style[data-precedence]'
        ), last2 = nodes.length ? nodes[nodes.length - 1] : null, prior = last2, i = 0; i < nodes.length; i++) {
          var node = nodes[i];
          if (node.dataset.precedence === precedence) prior = node;
          else if (prior !== last2) break;
        }
        prior ? prior.parentNode.insertBefore(instance, prior.nextSibling) : (precedence = 9 === root3.nodeType ? root3.head : root3, precedence.insertBefore(instance, precedence.firstChild));
      }
      function adoptPreloadPropsForStylesheet(stylesheetProps, preloadProps) {
        null == stylesheetProps.crossOrigin && (stylesheetProps.crossOrigin = preloadProps.crossOrigin);
        null == stylesheetProps.referrerPolicy && (stylesheetProps.referrerPolicy = preloadProps.referrerPolicy);
        null == stylesheetProps.title && (stylesheetProps.title = preloadProps.title);
      }
      function adoptPreloadPropsForScript(scriptProps, preloadProps) {
        null == scriptProps.crossOrigin && (scriptProps.crossOrigin = preloadProps.crossOrigin);
        null == scriptProps.referrerPolicy && (scriptProps.referrerPolicy = preloadProps.referrerPolicy);
        null == scriptProps.integrity && (scriptProps.integrity = preloadProps.integrity);
      }
      var tagCaches = null;
      function getHydratableHoistableCache(type, keyAttribute, ownerDocument) {
        if (null === tagCaches) {
          var cache = /* @__PURE__ */ new Map();
          var caches = tagCaches = /* @__PURE__ */ new Map();
          caches.set(ownerDocument, cache);
        } else
          caches = tagCaches, cache = caches.get(ownerDocument), cache || (cache = /* @__PURE__ */ new Map(), caches.set(ownerDocument, cache));
        if (cache.has(type)) return cache;
        cache.set(type, null);
        ownerDocument = ownerDocument.getElementsByTagName(type);
        for (caches = 0; caches < ownerDocument.length; caches++) {
          var node = ownerDocument[caches];
          if (!(node[internalHoistableMarker] || node[internalInstanceKey] || "link" === type && "stylesheet" === node.getAttribute("rel")) && "http://www.w3.org/2000/svg" !== node.namespaceURI) {
            var nodeKey = node.getAttribute(keyAttribute) || "";
            nodeKey = type + nodeKey;
            var existing = cache.get(nodeKey);
            existing ? existing.push(node) : cache.set(nodeKey, [node]);
          }
        }
        return cache;
      }
      function mountHoistable(hoistableRoot, type, instance) {
        hoistableRoot = hoistableRoot.ownerDocument || hoistableRoot;
        hoistableRoot.head.insertBefore(
          instance,
          "title" === type ? hoistableRoot.querySelector("head > title") : null
        );
      }
      function isHostHoistableType(type, props, hostContext) {
        if (1 === hostContext || null != props.itemProp) return false;
        switch (type) {
          case "meta":
          case "title":
            return true;
          case "style":
            if ("string" !== typeof props.precedence || "string" !== typeof props.href || "" === props.href)
              break;
            return true;
          case "link":
            if ("string" !== typeof props.rel || "string" !== typeof props.href || "" === props.href || props.onLoad || props.onError)
              break;
            switch (props.rel) {
              case "stylesheet":
                return type = props.disabled, "string" === typeof props.precedence && null == type;
              default:
                return true;
            }
          case "script":
            if (props.async && "function" !== typeof props.async && "symbol" !== typeof props.async && !props.onLoad && !props.onError && props.src && "string" === typeof props.src)
              return true;
        }
        return false;
      }
      function preloadResource(resource) {
        return "stylesheet" === resource.type && 0 === (resource.state.loading & 3) ? false : true;
      }
      var suspendedState = null;
      function noop6() {
      }
      function suspendResource(hoistableRoot, resource, props) {
        if (null === suspendedState) throw Error(formatProdErrorMessage3(475));
        var state = suspendedState;
        if ("stylesheet" === resource.type && ("string" !== typeof props.media || false !== matchMedia(props.media).matches) && 0 === (resource.state.loading & 4)) {
          if (null === resource.instance) {
            var key = getStyleKey(props.href), instance = hoistableRoot.querySelector(
              getStylesheetSelectorFromKey(key)
            );
            if (instance) {
              hoistableRoot = instance._p;
              null !== hoistableRoot && "object" === typeof hoistableRoot && "function" === typeof hoistableRoot.then && (state.count++, state = onUnsuspend.bind(state), hoistableRoot.then(state, state));
              resource.state.loading |= 4;
              resource.instance = instance;
              markNodeAsHoistable(instance);
              return;
            }
            instance = hoistableRoot.ownerDocument || hoistableRoot;
            props = stylesheetPropsFromRawProps(props);
            (key = preloadPropsMap.get(key)) && adoptPreloadPropsForStylesheet(props, key);
            instance = instance.createElement("link");
            markNodeAsHoistable(instance);
            var linkInstance = instance;
            linkInstance._p = new Promise(function(resolve, reject) {
              linkInstance.onload = resolve;
              linkInstance.onerror = reject;
            });
            setInitialProperties(instance, "link", props);
            resource.instance = instance;
          }
          null === state.stylesheets && (state.stylesheets = /* @__PURE__ */ new Map());
          state.stylesheets.set(resource, hoistableRoot);
          (hoistableRoot = resource.state.preload) && 0 === (resource.state.loading & 3) && (state.count++, resource = onUnsuspend.bind(state), hoistableRoot.addEventListener("load", resource), hoistableRoot.addEventListener("error", resource));
        }
      }
      function waitForCommitToBeReady() {
        if (null === suspendedState) throw Error(formatProdErrorMessage3(475));
        var state = suspendedState;
        state.stylesheets && 0 === state.count && insertSuspendedStylesheets(state, state.stylesheets);
        return 0 < state.count ? function(commit) {
          var stylesheetTimer = setTimeout(function() {
            state.stylesheets && insertSuspendedStylesheets(state, state.stylesheets);
            if (state.unsuspend) {
              var unsuspend = state.unsuspend;
              state.unsuspend = null;
              unsuspend();
            }
          }, 6e4);
          state.unsuspend = commit;
          return function() {
            state.unsuspend = null;
            clearTimeout(stylesheetTimer);
          };
        } : null;
      }
      function onUnsuspend() {
        this.count--;
        if (0 === this.count) {
          if (this.stylesheets) insertSuspendedStylesheets(this, this.stylesheets);
          else if (this.unsuspend) {
            var unsuspend = this.unsuspend;
            this.unsuspend = null;
            unsuspend();
          }
        }
      }
      var precedencesByRoot = null;
      function insertSuspendedStylesheets(state, resources) {
        state.stylesheets = null;
        null !== state.unsuspend && (state.count++, precedencesByRoot = /* @__PURE__ */ new Map(), resources.forEach(insertStylesheetIntoRoot, state), precedencesByRoot = null, onUnsuspend.call(state));
      }
      function insertStylesheetIntoRoot(root3, resource) {
        if (!(resource.state.loading & 4)) {
          var precedences = precedencesByRoot.get(root3);
          if (precedences) var last2 = precedences.get(null);
          else {
            precedences = /* @__PURE__ */ new Map();
            precedencesByRoot.set(root3, precedences);
            for (var nodes = root3.querySelectorAll(
              "link[data-precedence],style[data-precedence]"
            ), i = 0; i < nodes.length; i++) {
              var node = nodes[i];
              if ("LINK" === node.nodeName || "not all" !== node.getAttribute("media"))
                precedences.set(node.dataset.precedence, node), last2 = node;
            }
            last2 && precedences.set(null, last2);
          }
          nodes = resource.instance;
          node = nodes.getAttribute("data-precedence");
          i = precedences.get(node) || last2;
          i === last2 && precedences.set(null, nodes);
          precedences.set(node, nodes);
          this.count++;
          last2 = onUnsuspend.bind(this);
          nodes.addEventListener("load", last2);
          nodes.addEventListener("error", last2);
          i ? i.parentNode.insertBefore(nodes, i.nextSibling) : (root3 = 9 === root3.nodeType ? root3.head : root3, root3.insertBefore(nodes, root3.firstChild));
          resource.state.loading |= 4;
        }
      }
      var HostTransitionContext = {
        $$typeof: REACT_CONTEXT_TYPE,
        Provider: null,
        Consumer: null,
        _currentValue: sharedNotPendingObject,
        _currentValue2: sharedNotPendingObject,
        _threadCount: 0
      };
      function FiberRootNode(containerInfo, tag, hydrate, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, formState) {
        this.tag = 1;
        this.containerInfo = containerInfo;
        this.pingCache = this.current = this.pendingChildren = null;
        this.timeoutHandle = -1;
        this.callbackNode = this.next = this.pendingContext = this.context = this.cancelPendingCommit = null;
        this.callbackPriority = 0;
        this.expirationTimes = createLaneMap(-1);
        this.entangledLanes = this.shellSuspendCounter = this.errorRecoveryDisabledLanes = this.expiredLanes = this.warmLanes = this.pingedLanes = this.suspendedLanes = this.pendingLanes = 0;
        this.entanglements = createLaneMap(0);
        this.hiddenUpdates = createLaneMap(null);
        this.identifierPrefix = identifierPrefix;
        this.onUncaughtError = onUncaughtError;
        this.onCaughtError = onCaughtError;
        this.onRecoverableError = onRecoverableError;
        this.pooledCache = null;
        this.pooledCacheLanes = 0;
        this.formState = formState;
        this.incompleteTransitions = /* @__PURE__ */ new Map();
      }
      function createFiberRoot(containerInfo, tag, hydrate, initialChildren, hydrationCallbacks, isStrictMode, identifierPrefix, onUncaughtError, onCaughtError, onRecoverableError, transitionCallbacks, formState) {
        containerInfo = new FiberRootNode(
          containerInfo,
          tag,
          hydrate,
          identifierPrefix,
          onUncaughtError,
          onCaughtError,
          onRecoverableError,
          formState
        );
        tag = 1;
        true === isStrictMode && (tag |= 24);
        isStrictMode = createFiberImplClass(3, null, null, tag);
        containerInfo.current = isStrictMode;
        isStrictMode.stateNode = containerInfo;
        tag = createCache();
        tag.refCount++;
        containerInfo.pooledCache = tag;
        tag.refCount++;
        isStrictMode.memoizedState = {
          element: initialChildren,
          isDehydrated: hydrate,
          cache: tag
        };
        initializeUpdateQueue(isStrictMode);
        return containerInfo;
      }
      function getContextForSubtree(parentComponent) {
        if (!parentComponent) return emptyContextObject;
        parentComponent = emptyContextObject;
        return parentComponent;
      }
      function updateContainerImpl(rootFiber, lane, element, container, parentComponent, callback) {
        parentComponent = getContextForSubtree(parentComponent);
        null === container.context ? container.context = parentComponent : container.pendingContext = parentComponent;
        container = createUpdate(lane);
        container.payload = { element };
        callback = void 0 === callback ? null : callback;
        null !== callback && (container.callback = callback);
        element = enqueueUpdate(rootFiber, container, lane);
        null !== element && (scheduleUpdateOnFiber(element, rootFiber, lane), entangleTransitions(element, rootFiber, lane));
      }
      function markRetryLaneImpl(fiber, retryLane) {
        fiber = fiber.memoizedState;
        if (null !== fiber && null !== fiber.dehydrated) {
          var a2 = fiber.retryLane;
          fiber.retryLane = 0 !== a2 && a2 < retryLane ? a2 : retryLane;
        }
      }
      function markRetryLaneIfNotHydrated(fiber, retryLane) {
        markRetryLaneImpl(fiber, retryLane);
        (fiber = fiber.alternate) && markRetryLaneImpl(fiber, retryLane);
      }
      function attemptContinuousHydration(fiber) {
        if (13 === fiber.tag) {
          var root3 = enqueueConcurrentRenderForLane(fiber, 67108864);
          null !== root3 && scheduleUpdateOnFiber(root3, fiber, 67108864);
          markRetryLaneIfNotHydrated(fiber, 67108864);
        }
      }
      var _enabled = true;
      function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var prevTransition = ReactSharedInternals.T;
        ReactSharedInternals.T = null;
        var previousPriority = ReactDOMSharedInternals.p;
        try {
          ReactDOMSharedInternals.p = 2, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
        }
      }
      function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
        var prevTransition = ReactSharedInternals.T;
        ReactSharedInternals.T = null;
        var previousPriority = ReactDOMSharedInternals.p;
        try {
          ReactDOMSharedInternals.p = 8, dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
        } finally {
          ReactDOMSharedInternals.p = previousPriority, ReactSharedInternals.T = prevTransition;
        }
      }
      function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (_enabled) {
          var blockedOn = findInstanceBlockingEvent(nativeEvent);
          if (null === blockedOn)
            dispatchEventForPluginEventSystem(
              domEventName,
              eventSystemFlags,
              nativeEvent,
              return_targetInst,
              targetContainer
            ), clearIfContinuousEvent(domEventName, nativeEvent);
          else if (queueIfContinuousEvent(
            blockedOn,
            domEventName,
            eventSystemFlags,
            targetContainer,
            nativeEvent
          ))
            nativeEvent.stopPropagation();
          else if (clearIfContinuousEvent(domEventName, nativeEvent), eventSystemFlags & 4 && -1 < discreteReplayableEvents.indexOf(domEventName)) {
            for (; null !== blockedOn; ) {
              var fiber = getInstanceFromNode(blockedOn);
              if (null !== fiber)
                switch (fiber.tag) {
                  case 3:
                    fiber = fiber.stateNode;
                    if (fiber.current.memoizedState.isDehydrated) {
                      var lanes = getHighestPriorityLanes(fiber.pendingLanes);
                      if (0 !== lanes) {
                        var root3 = fiber;
                        root3.pendingLanes |= 2;
                        for (root3.entangledLanes |= 2; lanes; ) {
                          var lane = 1 << 31 - clz32(lanes);
                          root3.entanglements[1] |= lane;
                          lanes &= ~lane;
                        }
                        ensureRootIsScheduled(fiber);
                        0 === (executionContext & 6) && (workInProgressRootRenderTargetTime = now() + 500, flushSyncWorkAcrossRoots_impl(0, false));
                      }
                    }
                    break;
                  case 13:
                    root3 = enqueueConcurrentRenderForLane(fiber, 2), null !== root3 && scheduleUpdateOnFiber(root3, fiber, 2), flushSyncWork$1(), markRetryLaneIfNotHydrated(fiber, 2);
                }
              fiber = findInstanceBlockingEvent(nativeEvent);
              null === fiber && dispatchEventForPluginEventSystem(
                domEventName,
                eventSystemFlags,
                nativeEvent,
                return_targetInst,
                targetContainer
              );
              if (fiber === blockedOn) break;
              blockedOn = fiber;
            }
            null !== blockedOn && nativeEvent.stopPropagation();
          } else
            dispatchEventForPluginEventSystem(
              domEventName,
              eventSystemFlags,
              nativeEvent,
              null,
              targetContainer
            );
        }
      }
      function findInstanceBlockingEvent(nativeEvent) {
        nativeEvent = getEventTarget(nativeEvent);
        return findInstanceBlockingTarget(nativeEvent);
      }
      var return_targetInst = null;
      function findInstanceBlockingTarget(targetNode) {
        return_targetInst = null;
        targetNode = getClosestInstanceFromNode(targetNode);
        if (null !== targetNode) {
          var nearestMounted = getNearestMountedFiber(targetNode);
          if (null === nearestMounted) targetNode = null;
          else {
            var tag = nearestMounted.tag;
            if (13 === tag) {
              targetNode = getSuspenseInstanceFromFiber(nearestMounted);
              if (null !== targetNode) return targetNode;
              targetNode = null;
            } else if (3 === tag) {
              if (nearestMounted.stateNode.current.memoizedState.isDehydrated)
                return 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
              targetNode = null;
            } else nearestMounted !== targetNode && (targetNode = null);
          }
        }
        return_targetInst = targetNode;
        return null;
      }
      function getEventPriority(domEventName) {
        switch (domEventName) {
          case "beforetoggle":
          case "cancel":
          case "click":
          case "close":
          case "contextmenu":
          case "copy":
          case "cut":
          case "auxclick":
          case "dblclick":
          case "dragend":
          case "dragstart":
          case "drop":
          case "focusin":
          case "focusout":
          case "input":
          case "invalid":
          case "keydown":
          case "keypress":
          case "keyup":
          case "mousedown":
          case "mouseup":
          case "paste":
          case "pause":
          case "play":
          case "pointercancel":
          case "pointerdown":
          case "pointerup":
          case "ratechange":
          case "reset":
          case "resize":
          case "seeked":
          case "submit":
          case "toggle":
          case "touchcancel":
          case "touchend":
          case "touchstart":
          case "volumechange":
          case "change":
          case "selectionchange":
          case "textInput":
          case "compositionstart":
          case "compositionend":
          case "compositionupdate":
          case "beforeblur":
          case "afterblur":
          case "beforeinput":
          case "blur":
          case "fullscreenchange":
          case "focus":
          case "hashchange":
          case "popstate":
          case "select":
          case "selectstart":
            return 2;
          case "drag":
          case "dragenter":
          case "dragexit":
          case "dragleave":
          case "dragover":
          case "mousemove":
          case "mouseout":
          case "mouseover":
          case "pointermove":
          case "pointerout":
          case "pointerover":
          case "scroll":
          case "touchmove":
          case "wheel":
          case "mouseenter":
          case "mouseleave":
          case "pointerenter":
          case "pointerleave":
            return 8;
          case "message":
            switch (getCurrentPriorityLevel()) {
              case ImmediatePriority:
                return 2;
              case UserBlockingPriority:
                return 8;
              case NormalPriority$1:
              case LowPriority:
                return 32;
              case IdlePriority:
                return 268435456;
              default:
                return 32;
            }
          default:
            return 32;
        }
      }
      var hasScheduledReplayAttempt = false;
      var queuedFocus = null;
      var queuedDrag = null;
      var queuedMouse = null;
      var queuedPointers = /* @__PURE__ */ new Map();
      var queuedPointerCaptures = /* @__PURE__ */ new Map();
      var queuedExplicitHydrationTargets = [];
      var discreteReplayableEvents = "mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset".split(
        " "
      );
      function clearIfContinuousEvent(domEventName, nativeEvent) {
        switch (domEventName) {
          case "focusin":
          case "focusout":
            queuedFocus = null;
            break;
          case "dragenter":
          case "dragleave":
            queuedDrag = null;
            break;
          case "mouseover":
          case "mouseout":
            queuedMouse = null;
            break;
          case "pointerover":
          case "pointerout":
            queuedPointers.delete(nativeEvent.pointerId);
            break;
          case "gotpointercapture":
          case "lostpointercapture":
            queuedPointerCaptures.delete(nativeEvent.pointerId);
        }
      }
      function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        if (null === existingQueuedEvent || existingQueuedEvent.nativeEvent !== nativeEvent)
          return existingQueuedEvent = {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          }, null !== blockedOn && (blockedOn = getInstanceFromNode(blockedOn), null !== blockedOn && attemptContinuousHydration(blockedOn)), existingQueuedEvent;
        existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
        blockedOn = existingQueuedEvent.targetContainers;
        null !== targetContainer && -1 === blockedOn.indexOf(targetContainer) && blockedOn.push(targetContainer);
        return existingQueuedEvent;
      }
      function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
        switch (domEventName) {
          case "focusin":
            return queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedFocus,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ), true;
          case "dragenter":
            return queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedDrag,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ), true;
          case "mouseover":
            return queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(
              queuedMouse,
              blockedOn,
              domEventName,
              eventSystemFlags,
              targetContainer,
              nativeEvent
            ), true;
          case "pointerover":
            var pointerId = nativeEvent.pointerId;
            queuedPointers.set(
              pointerId,
              accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedPointers.get(pointerId) || null,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              )
            );
            return true;
          case "gotpointercapture":
            return pointerId = nativeEvent.pointerId, queuedPointerCaptures.set(
              pointerId,
              accumulateOrCreateContinuousQueuedReplayableEvent(
                queuedPointerCaptures.get(pointerId) || null,
                blockedOn,
                domEventName,
                eventSystemFlags,
                targetContainer,
                nativeEvent
              )
            ), true;
        }
        return false;
      }
      function attemptExplicitHydrationTarget(queuedTarget) {
        var targetInst = getClosestInstanceFromNode(queuedTarget.target);
        if (null !== targetInst) {
          var nearestMounted = getNearestMountedFiber(targetInst);
          if (null !== nearestMounted) {
            if (targetInst = nearestMounted.tag, 13 === targetInst) {
              if (targetInst = getSuspenseInstanceFromFiber(nearestMounted), null !== targetInst) {
                queuedTarget.blockedOn = targetInst;
                runWithPriority(queuedTarget.priority, function() {
                  if (13 === nearestMounted.tag) {
                    var lane = requestUpdateLane();
                    lane = getBumpedLaneForHydrationByLane(lane);
                    var root3 = enqueueConcurrentRenderForLane(nearestMounted, lane);
                    null !== root3 && scheduleUpdateOnFiber(root3, nearestMounted, lane);
                    markRetryLaneIfNotHydrated(nearestMounted, lane);
                  }
                });
                return;
              }
            } else if (3 === targetInst && nearestMounted.stateNode.current.memoizedState.isDehydrated) {
              queuedTarget.blockedOn = 3 === nearestMounted.tag ? nearestMounted.stateNode.containerInfo : null;
              return;
            }
          }
        }
        queuedTarget.blockedOn = null;
      }
      function attemptReplayContinuousQueuedEvent(queuedEvent) {
        if (null !== queuedEvent.blockedOn) return false;
        for (var targetContainers = queuedEvent.targetContainers; 0 < targetContainers.length; ) {
          var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.nativeEvent);
          if (null === nextBlockedOn) {
            nextBlockedOn = queuedEvent.nativeEvent;
            var nativeEventClone = new nextBlockedOn.constructor(
              nextBlockedOn.type,
              nextBlockedOn
            );
            currentReplayingEvent = nativeEventClone;
            nextBlockedOn.target.dispatchEvent(nativeEventClone);
            currentReplayingEvent = null;
          } else
            return targetContainers = getInstanceFromNode(nextBlockedOn), null !== targetContainers && attemptContinuousHydration(targetContainers), queuedEvent.blockedOn = nextBlockedOn, false;
          targetContainers.shift();
        }
        return true;
      }
      function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map3) {
        attemptReplayContinuousQueuedEvent(queuedEvent) && map3.delete(key);
      }
      function replayUnblockedEvents() {
        hasScheduledReplayAttempt = false;
        null !== queuedFocus && attemptReplayContinuousQueuedEvent(queuedFocus) && (queuedFocus = null);
        null !== queuedDrag && attemptReplayContinuousQueuedEvent(queuedDrag) && (queuedDrag = null);
        null !== queuedMouse && attemptReplayContinuousQueuedEvent(queuedMouse) && (queuedMouse = null);
        queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
        queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
      }
      function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
        queuedEvent.blockedOn === unblocked && (queuedEvent.blockedOn = null, hasScheduledReplayAttempt || (hasScheduledReplayAttempt = true, Scheduler.unstable_scheduleCallback(
          Scheduler.unstable_NormalPriority,
          replayUnblockedEvents
        )));
      }
      var lastScheduledReplayQueue = null;
      function scheduleReplayQueueIfNeeded(formReplayingQueue) {
        lastScheduledReplayQueue !== formReplayingQueue && (lastScheduledReplayQueue = formReplayingQueue, Scheduler.unstable_scheduleCallback(
          Scheduler.unstable_NormalPriority,
          function() {
            lastScheduledReplayQueue === formReplayingQueue && (lastScheduledReplayQueue = null);
            for (var i = 0; i < formReplayingQueue.length; i += 3) {
              var form = formReplayingQueue[i], submitterOrAction = formReplayingQueue[i + 1], formData = formReplayingQueue[i + 2];
              if ("function" !== typeof submitterOrAction)
                if (null === findInstanceBlockingTarget(submitterOrAction || form))
                  continue;
                else break;
              var formInst = getInstanceFromNode(form);
              null !== formInst && (formReplayingQueue.splice(i, 3), i -= 3, startHostTransition(
                formInst,
                {
                  pending: true,
                  data: formData,
                  method: form.method,
                  action: submitterOrAction
                },
                submitterOrAction,
                formData
              ));
            }
          }
        ));
      }
      function retryIfBlockedOn(unblocked) {
        function unblock(queuedEvent) {
          return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
        }
        null !== queuedFocus && scheduleCallbackIfUnblocked(queuedFocus, unblocked);
        null !== queuedDrag && scheduleCallbackIfUnblocked(queuedDrag, unblocked);
        null !== queuedMouse && scheduleCallbackIfUnblocked(queuedMouse, unblocked);
        queuedPointers.forEach(unblock);
        queuedPointerCaptures.forEach(unblock);
        for (var i = 0; i < queuedExplicitHydrationTargets.length; i++) {
          var queuedTarget = queuedExplicitHydrationTargets[i];
          queuedTarget.blockedOn === unblocked && (queuedTarget.blockedOn = null);
        }
        for (; 0 < queuedExplicitHydrationTargets.length && (i = queuedExplicitHydrationTargets[0], null === i.blockedOn); )
          attemptExplicitHydrationTarget(i), null === i.blockedOn && queuedExplicitHydrationTargets.shift();
        i = (unblocked.ownerDocument || unblocked).$$reactFormReplay;
        if (null != i)
          for (queuedTarget = 0; queuedTarget < i.length; queuedTarget += 3) {
            var form = i[queuedTarget], submitterOrAction = i[queuedTarget + 1], formProps = form[internalPropsKey] || null;
            if ("function" === typeof submitterOrAction)
              formProps || scheduleReplayQueueIfNeeded(i);
            else if (formProps) {
              var action = null;
              if (submitterOrAction && submitterOrAction.hasAttribute("formAction"))
                if (form = submitterOrAction, formProps = submitterOrAction[internalPropsKey] || null)
                  action = formProps.formAction;
                else {
                  if (null !== findInstanceBlockingTarget(form)) continue;
                }
              else action = formProps.action;
              "function" === typeof action ? i[queuedTarget + 1] = action : (i.splice(queuedTarget, 3), queuedTarget -= 3);
              scheduleReplayQueueIfNeeded(i);
            }
          }
      }
      function ReactDOMRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
        var root3 = this._internalRoot;
        if (null === root3) throw Error(formatProdErrorMessage3(409));
        var current2 = root3.current, lane = requestUpdateLane();
        updateContainerImpl(current2, lane, children, root3, null, null);
      };
      ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
        var root3 = this._internalRoot;
        if (null !== root3) {
          this._internalRoot = null;
          var container = root3.containerInfo;
          updateContainerImpl(root3.current, 2, null, root3, null, null);
          flushSyncWork$1();
          container[internalContainerInstanceKey] = null;
        }
      };
      function ReactDOMHydrationRoot(internalRoot) {
        this._internalRoot = internalRoot;
      }
      ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = function(target) {
        if (target) {
          var updatePriority = resolveUpdatePriority();
          target = { blockedOn: null, target, priority: updatePriority };
          for (var i = 0; i < queuedExplicitHydrationTargets.length && 0 !== updatePriority && updatePriority < queuedExplicitHydrationTargets[i].priority; i++) ;
          queuedExplicitHydrationTargets.splice(i, 0, target);
          0 === i && attemptExplicitHydrationTarget(target);
        }
      };
      var isomorphicReactPackageVersion$jscomp$inline_1785 = React79.version;
      if ("19.1.1" !== isomorphicReactPackageVersion$jscomp$inline_1785)
        throw Error(
          formatProdErrorMessage3(
            527,
            isomorphicReactPackageVersion$jscomp$inline_1785,
            "19.1.1"
          )
        );
      ReactDOMSharedInternals.findDOMNode = function(componentOrElement) {
        var fiber = componentOrElement._reactInternals;
        if (void 0 === fiber) {
          if ("function" === typeof componentOrElement.render)
            throw Error(formatProdErrorMessage3(188));
          componentOrElement = Object.keys(componentOrElement).join(",");
          throw Error(formatProdErrorMessage3(268, componentOrElement));
        }
        componentOrElement = findCurrentFiberUsingSlowPath(fiber);
        componentOrElement = null !== componentOrElement ? findCurrentHostFiberImpl(componentOrElement) : null;
        componentOrElement = null === componentOrElement ? null : componentOrElement.stateNode;
        return componentOrElement;
      };
      var internals$jscomp$inline_2256 = {
        bundleType: 0,
        version: "19.1.1",
        rendererPackageName: "react-dom",
        currentDispatcherRef: ReactSharedInternals,
        reconcilerVersion: "19.1.1"
      };
      if ("undefined" !== typeof __REACT_DEVTOOLS_GLOBAL_HOOK__) {
        hook$jscomp$inline_2257 = __REACT_DEVTOOLS_GLOBAL_HOOK__;
        if (!hook$jscomp$inline_2257.isDisabled && hook$jscomp$inline_2257.supportsFiber)
          try {
            rendererID = hook$jscomp$inline_2257.inject(
              internals$jscomp$inline_2256
            ), injectedHook = hook$jscomp$inline_2257;
          } catch (err) {
          }
      }
      var hook$jscomp$inline_2257;
      exports.createRoot = function(container, options2) {
        if (!isValidContainer(container)) throw Error(formatProdErrorMessage3(299));
        var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null;
        null !== options2 && void 0 !== options2 && (true === options2.unstable_strictMode && (isStrictMode = true), void 0 !== options2.identifierPrefix && (identifierPrefix = options2.identifierPrefix), void 0 !== options2.onUncaughtError && (onUncaughtError = options2.onUncaughtError), void 0 !== options2.onCaughtError && (onCaughtError = options2.onCaughtError), void 0 !== options2.onRecoverableError && (onRecoverableError = options2.onRecoverableError), void 0 !== options2.unstable_transitionCallbacks && (transitionCallbacks = options2.unstable_transitionCallbacks));
        options2 = createFiberRoot(
          container,
          1,
          false,
          null,
          null,
          isStrictMode,
          identifierPrefix,
          onUncaughtError,
          onCaughtError,
          onRecoverableError,
          transitionCallbacks,
          null
        );
        container[internalContainerInstanceKey] = options2.current;
        listenToAllSupportedEvents(container);
        return new ReactDOMRoot(options2);
      };
      exports.hydrateRoot = function(container, initialChildren, options2) {
        if (!isValidContainer(container)) throw Error(formatProdErrorMessage3(299));
        var isStrictMode = false, identifierPrefix = "", onUncaughtError = defaultOnUncaughtError, onCaughtError = defaultOnCaughtError, onRecoverableError = defaultOnRecoverableError, transitionCallbacks = null, formState = null;
        null !== options2 && void 0 !== options2 && (true === options2.unstable_strictMode && (isStrictMode = true), void 0 !== options2.identifierPrefix && (identifierPrefix = options2.identifierPrefix), void 0 !== options2.onUncaughtError && (onUncaughtError = options2.onUncaughtError), void 0 !== options2.onCaughtError && (onCaughtError = options2.onCaughtError), void 0 !== options2.onRecoverableError && (onRecoverableError = options2.onRecoverableError), void 0 !== options2.unstable_transitionCallbacks && (transitionCallbacks = options2.unstable_transitionCallbacks), void 0 !== options2.formState && (formState = options2.formState));
        initialChildren = createFiberRoot(
          container,
          1,
          true,
          initialChildren,
          null != options2 ? options2 : null,
          isStrictMode,
          identifierPrefix,
          onUncaughtError,
          onCaughtError,
          onRecoverableError,
          transitionCallbacks,
          formState
        );
        initialChildren.context = getContextForSubtree(null);
        options2 = initialChildren.current;
        isStrictMode = requestUpdateLane();
        isStrictMode = getBumpedLaneForHydrationByLane(isStrictMode);
        identifierPrefix = createUpdate(isStrictMode);
        identifierPrefix.callback = null;
        enqueueUpdate(options2, identifierPrefix, isStrictMode);
        options2 = isStrictMode;
        initialChildren.current.lanes = options2;
        markRootUpdated$1(initialChildren, options2);
        ensureRootIsScheduled(initialChildren);
        container[internalContainerInstanceKey] = initialChildren.current;
        listenToAllSupportedEvents(container);
        return new ReactDOMHydrationRoot(initialChildren);
      };
      exports.version = "19.1.1";
    }
  });

  // node_modules/react-dom/client.js
  var require_client = __commonJS({
    "node_modules/react-dom/client.js"(exports, module) {
      "use strict";
      function checkDCE() {
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined" || typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== "function") {
          return;
        }
        if (false) {
          throw new Error("^_^");
        }
        try {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
        } catch (err) {
          console.error(err);
        }
      }
      if (true) {
        checkDCE();
        module.exports = require_react_dom_client_production();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/react/cjs/react-jsx-runtime.production.js
  var require_react_jsx_runtime_production = __commonJS({
    "node_modules/react/cjs/react-jsx-runtime.production.js"(exports) {
      "use strict";
      var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      function jsxProd(type, config, maybeKey) {
        var key = null;
        void 0 !== maybeKey && (key = "" + maybeKey);
        void 0 !== config.key && (key = "" + config.key);
        if ("key" in config) {
          maybeKey = {};
          for (var propName in config)
            "key" !== propName && (maybeKey[propName] = config[propName]);
        } else maybeKey = config;
        config = maybeKey.ref;
        return {
          $$typeof: REACT_ELEMENT_TYPE,
          type,
          key,
          ref: void 0 !== config ? config : null,
          props: maybeKey
        };
      }
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.jsx = jsxProd;
      exports.jsxs = jsxProd;
    }
  });

  // node_modules/react/jsx-runtime.js
  var require_jsx_runtime = __commonJS({
    "node_modules/react/jsx-runtime.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_react_jsx_runtime_production();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/es-toolkit/dist/_internal/isUnsafeProperty.js
  var require_isUnsafeProperty = __commonJS({
    "node_modules/es-toolkit/dist/_internal/isUnsafeProperty.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function isUnsafeProperty(key) {
        return key === "__proto__";
      }
      exports.isUnsafeProperty = isUnsafeProperty;
    }
  });

  // node_modules/es-toolkit/dist/compat/_internal/isDeepKey.js
  var require_isDeepKey = __commonJS({
    "node_modules/es-toolkit/dist/compat/_internal/isDeepKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function isDeepKey(key) {
        switch (typeof key) {
          case "number":
          case "symbol": {
            return false;
          }
          case "string": {
            return key.includes(".") || key.includes("[") || key.includes("]");
          }
        }
      }
      exports.isDeepKey = isDeepKey;
    }
  });

  // node_modules/es-toolkit/dist/compat/_internal/toKey.js
  var require_toKey = __commonJS({
    "node_modules/es-toolkit/dist/compat/_internal/toKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function toKey(value) {
        if (typeof value === "string" || typeof value === "symbol") {
          return value;
        }
        if (Object.is(value?.valueOf?.(), -0)) {
          return "-0";
        }
        return String(value);
      }
      exports.toKey = toKey;
    }
  });

  // node_modules/es-toolkit/dist/compat/util/toPath.js
  var require_toPath = __commonJS({
    "node_modules/es-toolkit/dist/compat/util/toPath.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function toPath(deepKey) {
        const result = [];
        const length = deepKey.length;
        if (length === 0) {
          return result;
        }
        let index = 0;
        let key = "";
        let quoteChar = "";
        let bracket = false;
        if (deepKey.charCodeAt(0) === 46) {
          result.push("");
          index++;
        }
        while (index < length) {
          const char = deepKey[index];
          if (quoteChar) {
            if (char === "\\" && index + 1 < length) {
              index++;
              key += deepKey[index];
            } else if (char === quoteChar) {
              quoteChar = "";
            } else {
              key += char;
            }
          } else if (bracket) {
            if (char === '"' || char === "'") {
              quoteChar = char;
            } else if (char === "]") {
              bracket = false;
              result.push(key);
              key = "";
            } else {
              key += char;
            }
          } else {
            if (char === "[") {
              bracket = true;
              if (key) {
                result.push(key);
                key = "";
              }
            } else if (char === ".") {
              if (key) {
                result.push(key);
                key = "";
              }
            } else {
              key += char;
            }
          }
          index++;
        }
        if (key) {
          result.push(key);
        }
        return result;
      }
      exports.toPath = toPath;
    }
  });

  // node_modules/es-toolkit/dist/compat/object/get.js
  var require_get = __commonJS({
    "node_modules/es-toolkit/dist/compat/object/get.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var isUnsafeProperty = require_isUnsafeProperty();
      var isDeepKey = require_isDeepKey();
      var toKey = require_toKey();
      var toPath = require_toPath();
      function get5(object, path2, defaultValue) {
        if (object == null) {
          return defaultValue;
        }
        switch (typeof path2) {
          case "string": {
            if (isUnsafeProperty.isUnsafeProperty(path2)) {
              return defaultValue;
            }
            const result = object[path2];
            if (result === void 0) {
              if (isDeepKey.isDeepKey(path2)) {
                return get5(object, toPath.toPath(path2), defaultValue);
              } else {
                return defaultValue;
              }
            }
            return result;
          }
          case "number":
          case "symbol": {
            if (typeof path2 === "number") {
              path2 = toKey.toKey(path2);
            }
            const result = object[path2];
            if (result === void 0) {
              return defaultValue;
            }
            return result;
          }
          default: {
            if (Array.isArray(path2)) {
              return getWithPath(object, path2, defaultValue);
            }
            if (Object.is(path2?.valueOf(), -0)) {
              path2 = "-0";
            } else {
              path2 = String(path2);
            }
            if (isUnsafeProperty.isUnsafeProperty(path2)) {
              return defaultValue;
            }
            const result = object[path2];
            if (result === void 0) {
              return defaultValue;
            }
            return result;
          }
        }
      }
      function getWithPath(object, path2, defaultValue) {
        if (path2.length === 0) {
          return defaultValue;
        }
        let current2 = object;
        for (let index = 0; index < path2.length; index++) {
          if (current2 == null) {
            return defaultValue;
          }
          if (isUnsafeProperty.isUnsafeProperty(path2[index])) {
            return defaultValue;
          }
          current2 = current2[path2[index]];
        }
        if (current2 === void 0) {
          return defaultValue;
        }
        return current2;
      }
      exports.get = get5;
    }
  });

  // node_modules/es-toolkit/compat/get.js
  var require_get2 = __commonJS({
    "node_modules/es-toolkit/compat/get.js"(exports, module) {
      module.exports = require_get().get;
    }
  });

  // node_modules/react-is/cjs/react-is.production.js
  var require_react_is_production = __commonJS({
    "node_modules/react-is/cjs/react-is.production.js"(exports) {
      "use strict";
      var REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element");
      var REACT_PORTAL_TYPE = Symbol.for("react.portal");
      var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
      var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
      var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
      Symbol.for("react.provider");
      var REACT_CONSUMER_TYPE = Symbol.for("react.consumer");
      var REACT_CONTEXT_TYPE = Symbol.for("react.context");
      var REACT_FORWARD_REF_TYPE2 = Symbol.for("react.forward_ref");
      var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
      var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
      var REACT_MEMO_TYPE2 = Symbol.for("react.memo");
      var REACT_LAZY_TYPE = Symbol.for("react.lazy");
      var REACT_VIEW_TRANSITION_TYPE = Symbol.for("react.view_transition");
      var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference");
      function typeOf(object) {
        if ("object" === typeof object && null !== object) {
          var $$typeof = object.$$typeof;
          switch ($$typeof) {
            case REACT_ELEMENT_TYPE:
              switch (object = object.type, object) {
                case REACT_FRAGMENT_TYPE:
                case REACT_PROFILER_TYPE:
                case REACT_STRICT_MODE_TYPE:
                case REACT_SUSPENSE_TYPE:
                case REACT_SUSPENSE_LIST_TYPE:
                case REACT_VIEW_TRANSITION_TYPE:
                  return object;
                default:
                  switch (object = object && object.$$typeof, object) {
                    case REACT_CONTEXT_TYPE:
                    case REACT_FORWARD_REF_TYPE2:
                    case REACT_LAZY_TYPE:
                    case REACT_MEMO_TYPE2:
                      return object;
                    case REACT_CONSUMER_TYPE:
                      return object;
                    default:
                      return $$typeof;
                  }
              }
            case REACT_PORTAL_TYPE:
              return $$typeof;
          }
        }
      }
      exports.ContextConsumer = REACT_CONSUMER_TYPE;
      exports.ContextProvider = REACT_CONTEXT_TYPE;
      exports.Element = REACT_ELEMENT_TYPE;
      exports.ForwardRef = REACT_FORWARD_REF_TYPE2;
      exports.Fragment = REACT_FRAGMENT_TYPE;
      exports.Lazy = REACT_LAZY_TYPE;
      exports.Memo = REACT_MEMO_TYPE2;
      exports.Portal = REACT_PORTAL_TYPE;
      exports.Profiler = REACT_PROFILER_TYPE;
      exports.StrictMode = REACT_STRICT_MODE_TYPE;
      exports.Suspense = REACT_SUSPENSE_TYPE;
      exports.SuspenseList = REACT_SUSPENSE_LIST_TYPE;
      exports.isContextConsumer = function(object) {
        return typeOf(object) === REACT_CONSUMER_TYPE;
      };
      exports.isContextProvider = function(object) {
        return typeOf(object) === REACT_CONTEXT_TYPE;
      };
      exports.isElement = function(object) {
        return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
      };
      exports.isForwardRef = function(object) {
        return typeOf(object) === REACT_FORWARD_REF_TYPE2;
      };
      exports.isFragment = function(object) {
        return typeOf(object) === REACT_FRAGMENT_TYPE;
      };
      exports.isLazy = function(object) {
        return typeOf(object) === REACT_LAZY_TYPE;
      };
      exports.isMemo = function(object) {
        return typeOf(object) === REACT_MEMO_TYPE2;
      };
      exports.isPortal = function(object) {
        return typeOf(object) === REACT_PORTAL_TYPE;
      };
      exports.isProfiler = function(object) {
        return typeOf(object) === REACT_PROFILER_TYPE;
      };
      exports.isStrictMode = function(object) {
        return typeOf(object) === REACT_STRICT_MODE_TYPE;
      };
      exports.isSuspense = function(object) {
        return typeOf(object) === REACT_SUSPENSE_TYPE;
      };
      exports.isSuspenseList = function(object) {
        return typeOf(object) === REACT_SUSPENSE_LIST_TYPE;
      };
      exports.isValidElementType = function(type) {
        return "string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE2 || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE2 || type.$$typeof === REACT_CLIENT_REFERENCE || void 0 !== type.getModuleId) ? true : false;
      };
      exports.typeOf = typeOf;
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_react_is_production();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/es-toolkit/dist/array/uniqBy.js
  var require_uniqBy = __commonJS({
    "node_modules/es-toolkit/dist/array/uniqBy.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function uniqBy2(arr, mapper) {
        const map3 = /* @__PURE__ */ new Map();
        for (let i = 0; i < arr.length; i++) {
          const item = arr[i];
          const key = mapper(item);
          if (!map3.has(key)) {
            map3.set(key, item);
          }
        }
        return Array.from(map3.values());
      }
      exports.uniqBy = uniqBy2;
    }
  });

  // node_modules/es-toolkit/dist/function/identity.js
  var require_identity = __commonJS({
    "node_modules/es-toolkit/dist/function/identity.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function identity4(x2) {
        return x2;
      }
      exports.identity = identity4;
    }
  });

  // node_modules/es-toolkit/dist/predicate/isLength.js
  var require_isLength = __commonJS({
    "node_modules/es-toolkit/dist/predicate/isLength.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function isLength(value) {
        return Number.isSafeInteger(value) && value >= 0;
      }
      exports.isLength = isLength;
    }
  });

  // node_modules/es-toolkit/dist/compat/predicate/isArrayLike.js
  var require_isArrayLike = __commonJS({
    "node_modules/es-toolkit/dist/compat/predicate/isArrayLike.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var isLength = require_isLength();
      function isArrayLike(value) {
        return value != null && typeof value !== "function" && isLength.isLength(value.length);
      }
      exports.isArrayLike = isArrayLike;
    }
  });

  // node_modules/es-toolkit/dist/compat/predicate/isObjectLike.js
  var require_isObjectLike = __commonJS({
    "node_modules/es-toolkit/dist/compat/predicate/isObjectLike.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function isObjectLike(value) {
        return typeof value === "object" && value !== null;
      }
      exports.isObjectLike = isObjectLike;
    }
  });

  // node_modules/es-toolkit/dist/compat/predicate/isArrayLikeObject.js
  var require_isArrayLikeObject = __commonJS({
    "node_modules/es-toolkit/dist/compat/predicate/isArrayLikeObject.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var isArrayLike = require_isArrayLike();
      var isObjectLike = require_isObjectLike();
      function isArrayLikeObject(value) {
        return isObjectLike.isObjectLike(value) && isArrayLike.isArrayLike(value);
      }
      exports.isArrayLikeObject = isArrayLikeObject;
    }
  });

  // node_modules/es-toolkit/dist/compat/object/property.js
  var require_property = __commonJS({
    "node_modules/es-toolkit/dist/compat/object/property.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var get5 = require_get();
      function property(path2) {
        return function(object) {
          return get5.get(object, path2);
        };
      }
      exports.property = property;
    }
  });

  // node_modules/es-toolkit/dist/compat/predicate/isObject.js
  var require_isObject = __commonJS({
    "node_modules/es-toolkit/dist/compat/predicate/isObject.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function isObject(value) {
        return value !== null && (typeof value === "object" || typeof value === "function");
      }
      exports.isObject = isObject;
    }
  });

  // node_modules/es-toolkit/dist/predicate/isPrimitive.js
  var require_isPrimitive = __commonJS({
    "node_modules/es-toolkit/dist/predicate/isPrimitive.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function isPrimitive(value) {
        return value == null || typeof value !== "object" && typeof value !== "function";
      }
      exports.isPrimitive = isPrimitive;
    }
  });

  // node_modules/es-toolkit/dist/compat/util/eq.js
  var require_eq = __commonJS({
    "node_modules/es-toolkit/dist/compat/util/eq.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function eq(value, other) {
        return value === other || Number.isNaN(value) && Number.isNaN(other);
      }
      exports.eq = eq;
    }
  });

  // node_modules/es-toolkit/dist/compat/predicate/isMatchWith.js
  var require_isMatchWith = __commonJS({
    "node_modules/es-toolkit/dist/compat/predicate/isMatchWith.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var isMatch = require_isMatch();
      var isObject = require_isObject();
      var isPrimitive = require_isPrimitive();
      var eq = require_eq();
      function isMatchWith(target, source, compare) {
        if (typeof compare !== "function") {
          return isMatch.isMatch(target, source);
        }
        return isMatchWithInternal(target, source, function doesMatch(objValue, srcValue, key, object, source2, stack) {
          const isEqual = compare(objValue, srcValue, key, object, source2, stack);
          if (isEqual !== void 0) {
            return Boolean(isEqual);
          }
          return isMatchWithInternal(objValue, srcValue, doesMatch, stack);
        }, /* @__PURE__ */ new Map());
      }
      function isMatchWithInternal(target, source, compare, stack) {
        if (source === target) {
          return true;
        }
        switch (typeof source) {
          case "object": {
            return isObjectMatch(target, source, compare, stack);
          }
          case "function": {
            const sourceKeys = Object.keys(source);
            if (sourceKeys.length > 0) {
              return isMatchWithInternal(target, { ...source }, compare, stack);
            }
            return eq.eq(target, source);
          }
          default: {
            if (!isObject.isObject(target)) {
              return eq.eq(target, source);
            }
            if (typeof source === "string") {
              return source === "";
            }
            return true;
          }
        }
      }
      function isObjectMatch(target, source, compare, stack) {
        if (source == null) {
          return true;
        }
        if (Array.isArray(source)) {
          return isArrayMatch(target, source, compare, stack);
        }
        if (source instanceof Map) {
          return isMapMatch(target, source, compare, stack);
        }
        if (source instanceof Set) {
          return isSetMatch(target, source, compare, stack);
        }
        const keys = Object.keys(source);
        if (target == null) {
          return keys.length === 0;
        }
        if (keys.length === 0) {
          return true;
        }
        if (stack && stack.has(source)) {
          return stack.get(source) === target;
        }
        if (stack) {
          stack.set(source, target);
        }
        try {
          for (let i = 0; i < keys.length; i++) {
            const key = keys[i];
            if (!isPrimitive.isPrimitive(target) && !(key in target)) {
              return false;
            }
            if (source[key] === void 0 && target[key] !== void 0) {
              return false;
            }
            if (source[key] === null && target[key] !== null) {
              return false;
            }
            const isEqual = compare(target[key], source[key], key, target, source, stack);
            if (!isEqual) {
              return false;
            }
          }
          return true;
        } finally {
          if (stack) {
            stack.delete(source);
          }
        }
      }
      function isMapMatch(target, source, compare, stack) {
        if (source.size === 0) {
          return true;
        }
        if (!(target instanceof Map)) {
          return false;
        }
        for (const [key, sourceValue] of source.entries()) {
          const targetValue = target.get(key);
          const isEqual = compare(targetValue, sourceValue, key, target, source, stack);
          if (isEqual === false) {
            return false;
          }
        }
        return true;
      }
      function isArrayMatch(target, source, compare, stack) {
        if (source.length === 0) {
          return true;
        }
        if (!Array.isArray(target)) {
          return false;
        }
        const countedIndex = /* @__PURE__ */ new Set();
        for (let i = 0; i < source.length; i++) {
          const sourceItem = source[i];
          let found = false;
          for (let j = 0; j < target.length; j++) {
            if (countedIndex.has(j)) {
              continue;
            }
            const targetItem = target[j];
            let matches2 = false;
            const isEqual = compare(targetItem, sourceItem, i, target, source, stack);
            if (isEqual) {
              matches2 = true;
            }
            if (matches2) {
              countedIndex.add(j);
              found = true;
              break;
            }
          }
          if (!found) {
            return false;
          }
        }
        return true;
      }
      function isSetMatch(target, source, compare, stack) {
        if (source.size === 0) {
          return true;
        }
        if (!(target instanceof Set)) {
          return false;
        }
        return isArrayMatch([...target], [...source], compare, stack);
      }
      exports.isMatchWith = isMatchWith;
      exports.isSetMatch = isSetMatch;
    }
  });

  // node_modules/es-toolkit/dist/compat/predicate/isMatch.js
  var require_isMatch = __commonJS({
    "node_modules/es-toolkit/dist/compat/predicate/isMatch.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var isMatchWith = require_isMatchWith();
      function isMatch(target, source) {
        return isMatchWith.isMatchWith(target, source, () => void 0);
      }
      exports.isMatch = isMatch;
    }
  });

  // node_modules/es-toolkit/dist/compat/_internal/getSymbols.js
  var require_getSymbols = __commonJS({
    "node_modules/es-toolkit/dist/compat/_internal/getSymbols.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function getSymbols(object) {
        return Object.getOwnPropertySymbols(object).filter((symbol) => Object.prototype.propertyIsEnumerable.call(object, symbol));
      }
      exports.getSymbols = getSymbols;
    }
  });

  // node_modules/es-toolkit/dist/compat/_internal/getTag.js
  var require_getTag = __commonJS({
    "node_modules/es-toolkit/dist/compat/_internal/getTag.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function getTag(value) {
        if (value == null) {
          return value === void 0 ? "[object Undefined]" : "[object Null]";
        }
        return Object.prototype.toString.call(value);
      }
      exports.getTag = getTag;
    }
  });

  // node_modules/es-toolkit/dist/compat/_internal/tags.js
  var require_tags = __commonJS({
    "node_modules/es-toolkit/dist/compat/_internal/tags.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var regexpTag = "[object RegExp]";
      var stringTag = "[object String]";
      var numberTag = "[object Number]";
      var booleanTag = "[object Boolean]";
      var argumentsTag = "[object Arguments]";
      var symbolTag = "[object Symbol]";
      var dateTag = "[object Date]";
      var mapTag = "[object Map]";
      var setTag = "[object Set]";
      var arrayTag = "[object Array]";
      var functionTag = "[object Function]";
      var arrayBufferTag = "[object ArrayBuffer]";
      var objectTag = "[object Object]";
      var errorTag = "[object Error]";
      var dataViewTag = "[object DataView]";
      var uint8ArrayTag = "[object Uint8Array]";
      var uint8ClampedArrayTag = "[object Uint8ClampedArray]";
      var uint16ArrayTag = "[object Uint16Array]";
      var uint32ArrayTag = "[object Uint32Array]";
      var bigUint64ArrayTag = "[object BigUint64Array]";
      var int8ArrayTag = "[object Int8Array]";
      var int16ArrayTag = "[object Int16Array]";
      var int32ArrayTag = "[object Int32Array]";
      var bigInt64ArrayTag = "[object BigInt64Array]";
      var float32ArrayTag = "[object Float32Array]";
      var float64ArrayTag = "[object Float64Array]";
      exports.argumentsTag = argumentsTag;
      exports.arrayBufferTag = arrayBufferTag;
      exports.arrayTag = arrayTag;
      exports.bigInt64ArrayTag = bigInt64ArrayTag;
      exports.bigUint64ArrayTag = bigUint64ArrayTag;
      exports.booleanTag = booleanTag;
      exports.dataViewTag = dataViewTag;
      exports.dateTag = dateTag;
      exports.errorTag = errorTag;
      exports.float32ArrayTag = float32ArrayTag;
      exports.float64ArrayTag = float64ArrayTag;
      exports.functionTag = functionTag;
      exports.int16ArrayTag = int16ArrayTag;
      exports.int32ArrayTag = int32ArrayTag;
      exports.int8ArrayTag = int8ArrayTag;
      exports.mapTag = mapTag;
      exports.numberTag = numberTag;
      exports.objectTag = objectTag;
      exports.regexpTag = regexpTag;
      exports.setTag = setTag;
      exports.stringTag = stringTag;
      exports.symbolTag = symbolTag;
      exports.uint16ArrayTag = uint16ArrayTag;
      exports.uint32ArrayTag = uint32ArrayTag;
      exports.uint8ArrayTag = uint8ArrayTag;
      exports.uint8ClampedArrayTag = uint8ClampedArrayTag;
    }
  });

  // node_modules/es-toolkit/dist/predicate/isTypedArray.js
  var require_isTypedArray = __commonJS({
    "node_modules/es-toolkit/dist/predicate/isTypedArray.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function isTypedArray(x2) {
        return ArrayBuffer.isView(x2) && !(x2 instanceof DataView);
      }
      exports.isTypedArray = isTypedArray;
    }
  });

  // node_modules/es-toolkit/dist/object/cloneDeepWith.js
  var require_cloneDeepWith = __commonJS({
    "node_modules/es-toolkit/dist/object/cloneDeepWith.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var getSymbols = require_getSymbols();
      var getTag = require_getTag();
      var tags = require_tags();
      var isPrimitive = require_isPrimitive();
      var isTypedArray = require_isTypedArray();
      function cloneDeepWith(obj, cloneValue) {
        return cloneDeepWithImpl(obj, void 0, obj, /* @__PURE__ */ new Map(), cloneValue);
      }
      function cloneDeepWithImpl(valueToClone, keyToClone, objectToClone, stack = /* @__PURE__ */ new Map(), cloneValue = void 0) {
        const cloned = cloneValue?.(valueToClone, keyToClone, objectToClone, stack);
        if (cloned !== void 0) {
          return cloned;
        }
        if (isPrimitive.isPrimitive(valueToClone)) {
          return valueToClone;
        }
        if (stack.has(valueToClone)) {
          return stack.get(valueToClone);
        }
        if (Array.isArray(valueToClone)) {
          const result = new Array(valueToClone.length);
          stack.set(valueToClone, result);
          for (let i = 0; i < valueToClone.length; i++) {
            result[i] = cloneDeepWithImpl(valueToClone[i], i, objectToClone, stack, cloneValue);
          }
          if (Object.hasOwn(valueToClone, "index")) {
            result.index = valueToClone.index;
          }
          if (Object.hasOwn(valueToClone, "input")) {
            result.input = valueToClone.input;
          }
          return result;
        }
        if (valueToClone instanceof Date) {
          return new Date(valueToClone.getTime());
        }
        if (valueToClone instanceof RegExp) {
          const result = new RegExp(valueToClone.source, valueToClone.flags);
          result.lastIndex = valueToClone.lastIndex;
          return result;
        }
        if (valueToClone instanceof Map) {
          const result = /* @__PURE__ */ new Map();
          stack.set(valueToClone, result);
          for (const [key, value] of valueToClone) {
            result.set(key, cloneDeepWithImpl(value, key, objectToClone, stack, cloneValue));
          }
          return result;
        }
        if (valueToClone instanceof Set) {
          const result = /* @__PURE__ */ new Set();
          stack.set(valueToClone, result);
          for (const value of valueToClone) {
            result.add(cloneDeepWithImpl(value, void 0, objectToClone, stack, cloneValue));
          }
          return result;
        }
        if (typeof Buffer !== "undefined" && Buffer.isBuffer(valueToClone)) {
          return valueToClone.subarray();
        }
        if (isTypedArray.isTypedArray(valueToClone)) {
          const result = new (Object.getPrototypeOf(valueToClone)).constructor(valueToClone.length);
          stack.set(valueToClone, result);
          for (let i = 0; i < valueToClone.length; i++) {
            result[i] = cloneDeepWithImpl(valueToClone[i], i, objectToClone, stack, cloneValue);
          }
          return result;
        }
        if (valueToClone instanceof ArrayBuffer || typeof SharedArrayBuffer !== "undefined" && valueToClone instanceof SharedArrayBuffer) {
          return valueToClone.slice(0);
        }
        if (valueToClone instanceof DataView) {
          const result = new DataView(valueToClone.buffer.slice(0), valueToClone.byteOffset, valueToClone.byteLength);
          stack.set(valueToClone, result);
          copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
          return result;
        }
        if (typeof File !== "undefined" && valueToClone instanceof File) {
          const result = new File([valueToClone], valueToClone.name, {
            type: valueToClone.type
          });
          stack.set(valueToClone, result);
          copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
          return result;
        }
        if (valueToClone instanceof Blob) {
          const result = new Blob([valueToClone], { type: valueToClone.type });
          stack.set(valueToClone, result);
          copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
          return result;
        }
        if (valueToClone instanceof Error) {
          const result = new valueToClone.constructor();
          stack.set(valueToClone, result);
          result.message = valueToClone.message;
          result.name = valueToClone.name;
          result.stack = valueToClone.stack;
          result.cause = valueToClone.cause;
          copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
          return result;
        }
        if (typeof valueToClone === "object" && isCloneableObject(valueToClone)) {
          const result = Object.create(Object.getPrototypeOf(valueToClone));
          stack.set(valueToClone, result);
          copyProperties(result, valueToClone, objectToClone, stack, cloneValue);
          return result;
        }
        return valueToClone;
      }
      function copyProperties(target, source, objectToClone = target, stack, cloneValue) {
        const keys = [...Object.keys(source), ...getSymbols.getSymbols(source)];
        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];
          const descriptor = Object.getOwnPropertyDescriptor(target, key);
          if (descriptor == null || descriptor.writable) {
            target[key] = cloneDeepWithImpl(source[key], key, objectToClone, stack, cloneValue);
          }
        }
      }
      function isCloneableObject(object) {
        switch (getTag.getTag(object)) {
          case tags.argumentsTag:
          case tags.arrayTag:
          case tags.arrayBufferTag:
          case tags.dataViewTag:
          case tags.booleanTag:
          case tags.dateTag:
          case tags.float32ArrayTag:
          case tags.float64ArrayTag:
          case tags.int8ArrayTag:
          case tags.int16ArrayTag:
          case tags.int32ArrayTag:
          case tags.mapTag:
          case tags.numberTag:
          case tags.objectTag:
          case tags.regexpTag:
          case tags.setTag:
          case tags.stringTag:
          case tags.symbolTag:
          case tags.uint8ArrayTag:
          case tags.uint8ClampedArrayTag:
          case tags.uint16ArrayTag:
          case tags.uint32ArrayTag: {
            return true;
          }
          default: {
            return false;
          }
        }
      }
      exports.cloneDeepWith = cloneDeepWith;
      exports.cloneDeepWithImpl = cloneDeepWithImpl;
      exports.copyProperties = copyProperties;
    }
  });

  // node_modules/es-toolkit/dist/object/cloneDeep.js
  var require_cloneDeep = __commonJS({
    "node_modules/es-toolkit/dist/object/cloneDeep.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var cloneDeepWith = require_cloneDeepWith();
      function cloneDeep(obj) {
        return cloneDeepWith.cloneDeepWithImpl(obj, void 0, obj, /* @__PURE__ */ new Map(), void 0);
      }
      exports.cloneDeep = cloneDeep;
    }
  });

  // node_modules/es-toolkit/dist/compat/predicate/matches.js
  var require_matches = __commonJS({
    "node_modules/es-toolkit/dist/compat/predicate/matches.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var isMatch = require_isMatch();
      var cloneDeep = require_cloneDeep();
      function matches2(source) {
        source = cloneDeep.cloneDeep(source);
        return (target) => {
          return isMatch.isMatch(target, source);
        };
      }
      exports.matches = matches2;
    }
  });

  // node_modules/es-toolkit/dist/compat/object/cloneDeepWith.js
  var require_cloneDeepWith2 = __commonJS({
    "node_modules/es-toolkit/dist/compat/object/cloneDeepWith.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var cloneDeepWith$1 = require_cloneDeepWith();
      var tags = require_tags();
      function cloneDeepWith(obj, customizer) {
        return cloneDeepWith$1.cloneDeepWith(obj, (value, key, object, stack) => {
          const cloned = customizer?.(value, key, object, stack);
          if (cloned !== void 0) {
            return cloned;
          }
          if (typeof obj !== "object") {
            return void 0;
          }
          switch (Object.prototype.toString.call(obj)) {
            case tags.numberTag:
            case tags.stringTag:
            case tags.booleanTag: {
              const result = new obj.constructor(obj?.valueOf());
              cloneDeepWith$1.copyProperties(result, obj);
              return result;
            }
            case tags.argumentsTag: {
              const result = {};
              cloneDeepWith$1.copyProperties(result, obj);
              result.length = obj.length;
              result[Symbol.iterator] = obj[Symbol.iterator];
              return result;
            }
            default: {
              return void 0;
            }
          }
        });
      }
      exports.cloneDeepWith = cloneDeepWith;
    }
  });

  // node_modules/es-toolkit/dist/compat/object/cloneDeep.js
  var require_cloneDeep2 = __commonJS({
    "node_modules/es-toolkit/dist/compat/object/cloneDeep.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var cloneDeepWith = require_cloneDeepWith2();
      function cloneDeep(obj) {
        return cloneDeepWith.cloneDeepWith(obj);
      }
      exports.cloneDeep = cloneDeep;
    }
  });

  // node_modules/es-toolkit/dist/compat/_internal/isIndex.js
  var require_isIndex = __commonJS({
    "node_modules/es-toolkit/dist/compat/_internal/isIndex.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var IS_UNSIGNED_INTEGER = /^(?:0|[1-9]\d*)$/;
      function isIndex(value, length = Number.MAX_SAFE_INTEGER) {
        switch (typeof value) {
          case "number": {
            return Number.isInteger(value) && value >= 0 && value < length;
          }
          case "symbol": {
            return false;
          }
          case "string": {
            return IS_UNSIGNED_INTEGER.test(value);
          }
        }
      }
      exports.isIndex = isIndex;
    }
  });

  // node_modules/es-toolkit/dist/compat/predicate/isArguments.js
  var require_isArguments = __commonJS({
    "node_modules/es-toolkit/dist/compat/predicate/isArguments.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var getTag = require_getTag();
      function isArguments(value) {
        return value !== null && typeof value === "object" && getTag.getTag(value) === "[object Arguments]";
      }
      exports.isArguments = isArguments;
    }
  });

  // node_modules/es-toolkit/dist/compat/object/has.js
  var require_has = __commonJS({
    "node_modules/es-toolkit/dist/compat/object/has.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var isDeepKey = require_isDeepKey();
      var isIndex = require_isIndex();
      var isArguments = require_isArguments();
      var toPath = require_toPath();
      function has2(object, path2) {
        let resolvedPath;
        if (Array.isArray(path2)) {
          resolvedPath = path2;
        } else if (typeof path2 === "string" && isDeepKey.isDeepKey(path2) && object?.[path2] == null) {
          resolvedPath = toPath.toPath(path2);
        } else {
          resolvedPath = [path2];
        }
        if (resolvedPath.length === 0) {
          return false;
        }
        let current2 = object;
        for (let i = 0; i < resolvedPath.length; i++) {
          const key = resolvedPath[i];
          if (current2 == null || !Object.hasOwn(current2, key)) {
            const isSparseIndex = (Array.isArray(current2) || isArguments.isArguments(current2)) && isIndex.isIndex(key) && key < current2.length;
            if (!isSparseIndex) {
              return false;
            }
          }
          current2 = current2[key];
        }
        return true;
      }
      exports.has = has2;
    }
  });

  // node_modules/es-toolkit/dist/compat/predicate/matchesProperty.js
  var require_matchesProperty = __commonJS({
    "node_modules/es-toolkit/dist/compat/predicate/matchesProperty.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var isMatch = require_isMatch();
      var toKey = require_toKey();
      var cloneDeep = require_cloneDeep2();
      var get5 = require_get();
      var has2 = require_has();
      function matchesProperty(property, source) {
        switch (typeof property) {
          case "object": {
            if (Object.is(property?.valueOf(), -0)) {
              property = "-0";
            }
            break;
          }
          case "number": {
            property = toKey.toKey(property);
            break;
          }
        }
        source = cloneDeep.cloneDeep(source);
        return function(target) {
          const result = get5.get(target, property);
          if (result === void 0) {
            return has2.has(target, property);
          }
          if (source === void 0) {
            return result === void 0;
          }
          return isMatch.isMatch(result, source);
        };
      }
      exports.matchesProperty = matchesProperty;
    }
  });

  // node_modules/es-toolkit/dist/compat/util/iteratee.js
  var require_iteratee = __commonJS({
    "node_modules/es-toolkit/dist/compat/util/iteratee.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var identity4 = require_identity();
      var property = require_property();
      var matches2 = require_matches();
      var matchesProperty = require_matchesProperty();
      function iteratee(value) {
        if (value == null) {
          return identity4.identity;
        }
        switch (typeof value) {
          case "function": {
            return value;
          }
          case "object": {
            if (Array.isArray(value) && value.length === 2) {
              return matchesProperty.matchesProperty(value[0], value[1]);
            }
            return matches2.matches(value);
          }
          case "string":
          case "symbol":
          case "number": {
            return property.property(value);
          }
        }
      }
      exports.iteratee = iteratee;
    }
  });

  // node_modules/es-toolkit/dist/compat/array/uniqBy.js
  var require_uniqBy2 = __commonJS({
    "node_modules/es-toolkit/dist/compat/array/uniqBy.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var uniqBy$1 = require_uniqBy();
      var identity4 = require_identity();
      var isArrayLikeObject = require_isArrayLikeObject();
      var iteratee = require_iteratee();
      function uniqBy2(array, iteratee$1 = identity4.identity) {
        if (!isArrayLikeObject.isArrayLikeObject(array)) {
          return [];
        }
        return uniqBy$1.uniqBy(Array.from(array), iteratee.iteratee(iteratee$1));
      }
      exports.uniqBy = uniqBy2;
    }
  });

  // node_modules/es-toolkit/compat/uniqBy.js
  var require_uniqBy3 = __commonJS({
    "node_modules/es-toolkit/compat/uniqBy.js"(exports, module) {
      module.exports = require_uniqBy2().uniqBy;
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.js
  var require_use_sync_external_store_shim_production = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.js"(exports) {
      "use strict";
      var React79 = require_react();
      function is2(x2, y2) {
        return x2 === y2 && (0 !== x2 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
      }
      var objectIs = "function" === typeof Object.is ? Object.is : is2;
      var useState49 = React79.useState;
      var useEffect49 = React79.useEffect;
      var useLayoutEffect3 = React79.useLayoutEffect;
      var useDebugValue2 = React79.useDebugValue;
      function useSyncExternalStore$2(subscribe, getSnapshot) {
        var value = getSnapshot(), _useState = useState49({ inst: { value, getSnapshot } }), inst = _useState[0].inst, forceUpdate = _useState[1];
        useLayoutEffect3(
          function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
          },
          [subscribe, value, getSnapshot]
        );
        useEffect49(
          function() {
            checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            return subscribe(function() {
              checkIfSnapshotChanged(inst) && forceUpdate({ inst });
            });
          },
          [subscribe]
        );
        useDebugValue2(value);
        return value;
      }
      function checkIfSnapshotChanged(inst) {
        var latestGetSnapshot = inst.getSnapshot;
        inst = inst.value;
        try {
          var nextValue = latestGetSnapshot();
          return !objectIs(inst, nextValue);
        } catch (error) {
          return true;
        }
      }
      function useSyncExternalStore$1(subscribe, getSnapshot) {
        return getSnapshot();
      }
      var shim = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? useSyncExternalStore$1 : useSyncExternalStore$2;
      exports.useSyncExternalStore = void 0 !== React79.useSyncExternalStore ? React79.useSyncExternalStore : shim;
    }
  });

  // node_modules/use-sync-external-store/shim/index.js
  var require_shim = __commonJS({
    "node_modules/use-sync-external-store/shim/index.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_use_sync_external_store_shim_production();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.js
  var require_with_selector_production = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.js"(exports) {
      "use strict";
      var React79 = require_react();
      var shim = require_shim();
      function is2(x2, y2) {
        return x2 === y2 && (0 !== x2 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
      }
      var objectIs = "function" === typeof Object.is ? Object.is : is2;
      var useSyncExternalStore2 = shim.useSyncExternalStore;
      var useRef17 = React79.useRef;
      var useEffect49 = React79.useEffect;
      var useMemo14 = React79.useMemo;
      var useDebugValue2 = React79.useDebugValue;
      exports.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
        var instRef = useRef17(null);
        if (null === instRef.current) {
          var inst = { hasValue: false, value: null };
          instRef.current = inst;
        } else inst = instRef.current;
        instRef = useMemo14(
          function() {
            function memoizedSelector(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                nextSnapshot = selector(nextSnapshot);
                if (void 0 !== isEqual && inst.hasValue) {
                  var currentSelection = inst.value;
                  if (isEqual(currentSelection, nextSnapshot))
                    return memoizedSelection = currentSelection;
                }
                return memoizedSelection = nextSnapshot;
              }
              currentSelection = memoizedSelection;
              if (objectIs(memoizedSnapshot, nextSnapshot)) return currentSelection;
              var nextSelection = selector(nextSnapshot);
              if (void 0 !== isEqual && isEqual(currentSelection, nextSelection))
                return memoizedSnapshot = nextSnapshot, currentSelection;
              memoizedSnapshot = nextSnapshot;
              return memoizedSelection = nextSelection;
            }
            var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
            return [
              function() {
                return memoizedSelector(getSnapshot());
              },
              null === maybeGetServerSnapshot ? void 0 : function() {
                return memoizedSelector(maybeGetServerSnapshot());
              }
            ];
          },
          [getSnapshot, getServerSnapshot, selector, isEqual]
        );
        var value = useSyncExternalStore2(subscribe, instRef[0], instRef[1]);
        useEffect49(
          function() {
            inst.hasValue = true;
            inst.value = value;
          },
          [value]
        );
        useDebugValue2(value);
        return value;
      };
    }
  });

  // node_modules/use-sync-external-store/shim/with-selector.js
  var require_with_selector = __commonJS({
    "node_modules/use-sync-external-store/shim/with-selector.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_with_selector_production();
      } else {
        module.exports = null;
      }
    }
  });

  // node_modules/es-toolkit/dist/compat/_internal/compareValues.js
  var require_compareValues = __commonJS({
    "node_modules/es-toolkit/dist/compat/_internal/compareValues.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function getPriority(a2) {
        if (typeof a2 === "symbol") {
          return 1;
        }
        if (a2 === null) {
          return 2;
        }
        if (a2 === void 0) {
          return 3;
        }
        if (a2 !== a2) {
          return 4;
        }
        return 0;
      }
      var compareValues = (a2, b, order) => {
        if (a2 !== b) {
          const aPriority = getPriority(a2);
          const bPriority = getPriority(b);
          if (aPriority === bPriority && aPriority === 0) {
            if (a2 < b) {
              return order === "desc" ? 1 : -1;
            }
            if (a2 > b) {
              return order === "desc" ? -1 : 1;
            }
          }
          return order === "desc" ? bPriority - aPriority : aPriority - bPriority;
        }
        return 0;
      };
      exports.compareValues = compareValues;
    }
  });

  // node_modules/es-toolkit/dist/compat/predicate/isSymbol.js
  var require_isSymbol = __commonJS({
    "node_modules/es-toolkit/dist/compat/predicate/isSymbol.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function isSymbol(value) {
        return typeof value === "symbol" || value instanceof Symbol;
      }
      exports.isSymbol = isSymbol;
    }
  });

  // node_modules/es-toolkit/dist/compat/_internal/isKey.js
  var require_isKey = __commonJS({
    "node_modules/es-toolkit/dist/compat/_internal/isKey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var isSymbol = require_isSymbol();
      var regexIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
      var regexIsPlainProp = /^\w*$/;
      function isKey(value, object) {
        if (Array.isArray(value)) {
          return false;
        }
        if (typeof value === "number" || typeof value === "boolean" || value == null || isSymbol.isSymbol(value)) {
          return true;
        }
        return typeof value === "string" && (regexIsPlainProp.test(value) || !regexIsDeepProp.test(value)) || object != null && Object.hasOwn(object, value);
      }
      exports.isKey = isKey;
    }
  });

  // node_modules/es-toolkit/dist/compat/array/orderBy.js
  var require_orderBy = __commonJS({
    "node_modules/es-toolkit/dist/compat/array/orderBy.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var compareValues = require_compareValues();
      var isKey = require_isKey();
      var toPath = require_toPath();
      function orderBy(collection, criteria, orders, guard) {
        if (collection == null) {
          return [];
        }
        orders = guard ? void 0 : orders;
        if (!Array.isArray(collection)) {
          collection = Object.values(collection);
        }
        if (!Array.isArray(criteria)) {
          criteria = criteria == null ? [null] : [criteria];
        }
        if (criteria.length === 0) {
          criteria = [null];
        }
        if (!Array.isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }
        orders = orders.map((order) => String(order));
        const getValueByNestedPath = (object, path2) => {
          let target = object;
          for (let i = 0; i < path2.length && target != null; ++i) {
            target = target[path2[i]];
          }
          return target;
        };
        const getValueByCriterion = (criterion, object) => {
          if (object == null || criterion == null) {
            return object;
          }
          if (typeof criterion === "object" && "key" in criterion) {
            if (Object.hasOwn(object, criterion.key)) {
              return object[criterion.key];
            }
            return getValueByNestedPath(object, criterion.path);
          }
          if (typeof criterion === "function") {
            return criterion(object);
          }
          if (Array.isArray(criterion)) {
            return getValueByNestedPath(object, criterion);
          }
          if (typeof object === "object") {
            return object[criterion];
          }
          return object;
        };
        const preparedCriteria = criteria.map((criterion) => {
          if (Array.isArray(criterion) && criterion.length === 1) {
            criterion = criterion[0];
          }
          if (criterion == null || typeof criterion === "function" || Array.isArray(criterion) || isKey.isKey(criterion)) {
            return criterion;
          }
          return { key: criterion, path: toPath.toPath(criterion) };
        });
        const preparedCollection = collection.map((item) => ({
          original: item,
          criteria: preparedCriteria.map((criterion) => getValueByCriterion(criterion, item))
        }));
        return preparedCollection.slice().sort((a2, b) => {
          for (let i = 0; i < preparedCriteria.length; i++) {
            const comparedResult = compareValues.compareValues(a2.criteria[i], b.criteria[i], orders[i]);
            if (comparedResult !== 0) {
              return comparedResult;
            }
          }
          return 0;
        }).map((item) => item.original);
      }
      exports.orderBy = orderBy;
    }
  });

  // node_modules/es-toolkit/dist/array/flatten.js
  var require_flatten = __commonJS({
    "node_modules/es-toolkit/dist/array/flatten.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function flatten(arr, depth = 1) {
        const result = [];
        const flooredDepth = Math.floor(depth);
        const recursive = (arr2, currentDepth) => {
          for (let i = 0; i < arr2.length; i++) {
            const item = arr2[i];
            if (Array.isArray(item) && currentDepth < flooredDepth) {
              recursive(item, currentDepth + 1);
            } else {
              result.push(item);
            }
          }
        };
        recursive(arr, 0);
        return result;
      }
      exports.flatten = flatten;
    }
  });

  // node_modules/es-toolkit/dist/compat/_internal/isIterateeCall.js
  var require_isIterateeCall = __commonJS({
    "node_modules/es-toolkit/dist/compat/_internal/isIterateeCall.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var isIndex = require_isIndex();
      var isArrayLike = require_isArrayLike();
      var isObject = require_isObject();
      var eq = require_eq();
      function isIterateeCall(value, index, object) {
        if (!isObject.isObject(object)) {
          return false;
        }
        if (typeof index === "number" && isArrayLike.isArrayLike(object) && isIndex.isIndex(index) && index < object.length || typeof index === "string" && index in object) {
          return eq.eq(object[index], value);
        }
        return false;
      }
      exports.isIterateeCall = isIterateeCall;
    }
  });

  // node_modules/es-toolkit/dist/compat/array/sortBy.js
  var require_sortBy = __commonJS({
    "node_modules/es-toolkit/dist/compat/array/sortBy.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var orderBy = require_orderBy();
      var flatten = require_flatten();
      var isIterateeCall = require_isIterateeCall();
      function sortBy5(collection, ...criteria) {
        const length = criteria.length;
        if (length > 1 && isIterateeCall.isIterateeCall(collection, criteria[0], criteria[1])) {
          criteria = [];
        } else if (length > 2 && isIterateeCall.isIterateeCall(criteria[0], criteria[1], criteria[2])) {
          criteria = [criteria[0]];
        }
        return orderBy.orderBy(collection, flatten.flatten(criteria), ["asc"]);
      }
      exports.sortBy = sortBy5;
    }
  });

  // node_modules/es-toolkit/compat/sortBy.js
  var require_sortBy2 = __commonJS({
    "node_modules/es-toolkit/compat/sortBy.js"(exports, module) {
      module.exports = require_sortBy().sortBy;
    }
  });

  // node_modules/es-toolkit/dist/compat/util/toNumber.js
  var require_toNumber = __commonJS({
    "node_modules/es-toolkit/dist/compat/util/toNumber.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var isSymbol = require_isSymbol();
      function toNumber(value) {
        if (isSymbol.isSymbol(value)) {
          return NaN;
        }
        return Number(value);
      }
      exports.toNumber = toNumber;
    }
  });

  // node_modules/es-toolkit/dist/compat/util/toFinite.js
  var require_toFinite = __commonJS({
    "node_modules/es-toolkit/dist/compat/util/toFinite.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var toNumber = require_toNumber();
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber.toNumber(value);
        if (value === Infinity || value === -Infinity) {
          const sign2 = value < 0 ? -1 : 1;
          return sign2 * Number.MAX_VALUE;
        }
        return value === value ? value : 0;
      }
      exports.toFinite = toFinite;
    }
  });

  // node_modules/es-toolkit/dist/compat/math/range.js
  var require_range = __commonJS({
    "node_modules/es-toolkit/dist/compat/math/range.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var isIterateeCall = require_isIterateeCall();
      var toFinite = require_toFinite();
      function range4(start, end, step) {
        if (step && typeof step !== "number" && isIterateeCall.isIterateeCall(start, end, step)) {
          end = step = void 0;
        }
        start = toFinite.toFinite(start);
        if (end === void 0) {
          end = start;
          start = 0;
        } else {
          end = toFinite.toFinite(end);
        }
        step = step === void 0 ? start < end ? 1 : -1 : toFinite.toFinite(step);
        const length = Math.max(Math.ceil((end - start) / (step || 1)), 0);
        const result = new Array(length);
        for (let index = 0; index < length; index++) {
          result[index] = start;
          start += step;
        }
        return result;
      }
      exports.range = range4;
    }
  });

  // node_modules/es-toolkit/compat/range.js
  var require_range2 = __commonJS({
    "node_modules/es-toolkit/compat/range.js"(exports, module) {
      module.exports = require_range().range;
    }
  });

  // node_modules/decimal.js-light/decimal.js
  var require_decimal = __commonJS({
    "node_modules/decimal.js-light/decimal.js"(exports, module) {
      (function(globalScope) {
        "use strict";
        var MAX_DIGITS = 1e9, Decimal3 = {
          // These values must be integers within the stated ranges (inclusive).
          // Most of these values can be changed during run-time using `Decimal.config`.
          // The maximum number of significant digits of the result of a calculation or base conversion.
          // E.g. `Decimal.config({ precision: 20 });`
          precision: 20,
          // 1 to MAX_DIGITS
          // The rounding mode used by default by `toInteger`, `toDecimalPlaces`, `toExponential`,
          // `toFixed`, `toPrecision` and `toSignificantDigits`.
          //
          // ROUND_UP         0 Away from zero.
          // ROUND_DOWN       1 Towards zero.
          // ROUND_CEIL       2 Towards +Infinity.
          // ROUND_FLOOR      3 Towards -Infinity.
          // ROUND_HALF_UP    4 Towards nearest neighbour. If equidistant, up.
          // ROUND_HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.
          // ROUND_HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.
          // ROUND_HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.
          // ROUND_HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.
          //
          // E.g.
          // `Decimal.rounding = 4;`
          // `Decimal.rounding = Decimal.ROUND_HALF_UP;`
          rounding: 4,
          // 0 to 8
          // The exponent value at and beneath which `toString` returns exponential notation.
          // JavaScript numbers: -7
          toExpNeg: -7,
          // 0 to -MAX_E
          // The exponent value at and above which `toString` returns exponential notation.
          // JavaScript numbers: 21
          toExpPos: 21,
          // 0 to MAX_E
          // The natural logarithm of 10.
          // 115 digits
          LN10: "2.302585092994045684017991454684364207601101488628772976033327900967572609677352480235997205089598298341967784042286"
        }, external = true, decimalError = "[DecimalError] ", invalidArgument = decimalError + "Invalid argument: ", exponentOutOfRange = decimalError + "Exponent out of range: ", mathfloor = Math.floor, mathpow = Math.pow, isDecimal = /^(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i, ONE, BASE = 1e7, LOG_BASE = 7, MAX_SAFE_INTEGER = 9007199254740991, MAX_E = mathfloor(MAX_SAFE_INTEGER / LOG_BASE), P = {};
        P.absoluteValue = P.abs = function() {
          var x2 = new this.constructor(this);
          if (x2.s) x2.s = 1;
          return x2;
        };
        P.comparedTo = P.cmp = function(y2) {
          var i, j, xdL, ydL, x2 = this;
          y2 = new x2.constructor(y2);
          if (x2.s !== y2.s) return x2.s || -y2.s;
          if (x2.e !== y2.e) return x2.e > y2.e ^ x2.s < 0 ? 1 : -1;
          xdL = x2.d.length;
          ydL = y2.d.length;
          for (i = 0, j = xdL < ydL ? xdL : ydL; i < j; ++i) {
            if (x2.d[i] !== y2.d[i]) return x2.d[i] > y2.d[i] ^ x2.s < 0 ? 1 : -1;
          }
          return xdL === ydL ? 0 : xdL > ydL ^ x2.s < 0 ? 1 : -1;
        };
        P.decimalPlaces = P.dp = function() {
          var x2 = this, w = x2.d.length - 1, dp = (w - x2.e) * LOG_BASE;
          w = x2.d[w];
          if (w) for (; w % 10 == 0; w /= 10) dp--;
          return dp < 0 ? 0 : dp;
        };
        P.dividedBy = P.div = function(y2) {
          return divide(this, new this.constructor(y2));
        };
        P.dividedToIntegerBy = P.idiv = function(y2) {
          var x2 = this, Ctor = x2.constructor;
          return round(divide(x2, new Ctor(y2), 0, 1), Ctor.precision);
        };
        P.equals = P.eq = function(y2) {
          return !this.cmp(y2);
        };
        P.exponent = function() {
          return getBase10Exponent(this);
        };
        P.greaterThan = P.gt = function(y2) {
          return this.cmp(y2) > 0;
        };
        P.greaterThanOrEqualTo = P.gte = function(y2) {
          return this.cmp(y2) >= 0;
        };
        P.isInteger = P.isint = function() {
          return this.e > this.d.length - 2;
        };
        P.isNegative = P.isneg = function() {
          return this.s < 0;
        };
        P.isPositive = P.ispos = function() {
          return this.s > 0;
        };
        P.isZero = function() {
          return this.s === 0;
        };
        P.lessThan = P.lt = function(y2) {
          return this.cmp(y2) < 0;
        };
        P.lessThanOrEqualTo = P.lte = function(y2) {
          return this.cmp(y2) < 1;
        };
        P.logarithm = P.log = function(base) {
          var r2, x2 = this, Ctor = x2.constructor, pr = Ctor.precision, wpr = pr + 5;
          if (base === void 0) {
            base = new Ctor(10);
          } else {
            base = new Ctor(base);
            if (base.s < 1 || base.eq(ONE)) throw Error(decimalError + "NaN");
          }
          if (x2.s < 1) throw Error(decimalError + (x2.s ? "NaN" : "-Infinity"));
          if (x2.eq(ONE)) return new Ctor(0);
          external = false;
          r2 = divide(ln(x2, wpr), ln(base, wpr), wpr);
          external = true;
          return round(r2, pr);
        };
        P.minus = P.sub = function(y2) {
          var x2 = this;
          y2 = new x2.constructor(y2);
          return x2.s == y2.s ? subtract(x2, y2) : add(x2, (y2.s = -y2.s, y2));
        };
        P.modulo = P.mod = function(y2) {
          var q, x2 = this, Ctor = x2.constructor, pr = Ctor.precision;
          y2 = new Ctor(y2);
          if (!y2.s) throw Error(decimalError + "NaN");
          if (!x2.s) return round(new Ctor(x2), pr);
          external = false;
          q = divide(x2, y2, 0, 1).times(y2);
          external = true;
          return x2.minus(q);
        };
        P.naturalExponential = P.exp = function() {
          return exp(this);
        };
        P.naturalLogarithm = P.ln = function() {
          return ln(this);
        };
        P.negated = P.neg = function() {
          var x2 = new this.constructor(this);
          x2.s = -x2.s || 0;
          return x2;
        };
        P.plus = P.add = function(y2) {
          var x2 = this;
          y2 = new x2.constructor(y2);
          return x2.s == y2.s ? add(x2, y2) : subtract(x2, (y2.s = -y2.s, y2));
        };
        P.precision = P.sd = function(z) {
          var e, sd, w, x2 = this;
          if (z !== void 0 && z !== !!z && z !== 1 && z !== 0) throw Error(invalidArgument + z);
          e = getBase10Exponent(x2) + 1;
          w = x2.d.length - 1;
          sd = w * LOG_BASE + 1;
          w = x2.d[w];
          if (w) {
            for (; w % 10 == 0; w /= 10) sd--;
            for (w = x2.d[0]; w >= 10; w /= 10) sd++;
          }
          return z && e > sd ? e : sd;
        };
        P.squareRoot = P.sqrt = function() {
          var e, n, pr, r2, s2, t, wpr, x2 = this, Ctor = x2.constructor;
          if (x2.s < 1) {
            if (!x2.s) return new Ctor(0);
            throw Error(decimalError + "NaN");
          }
          e = getBase10Exponent(x2);
          external = false;
          s2 = Math.sqrt(+x2);
          if (s2 == 0 || s2 == 1 / 0) {
            n = digitsToString(x2.d);
            if ((n.length + e) % 2 == 0) n += "0";
            s2 = Math.sqrt(n);
            e = mathfloor((e + 1) / 2) - (e < 0 || e % 2);
            if (s2 == 1 / 0) {
              n = "5e" + e;
            } else {
              n = s2.toExponential();
              n = n.slice(0, n.indexOf("e") + 1) + e;
            }
            r2 = new Ctor(n);
          } else {
            r2 = new Ctor(s2.toString());
          }
          pr = Ctor.precision;
          s2 = wpr = pr + 3;
          for (; ; ) {
            t = r2;
            r2 = t.plus(divide(x2, t, wpr + 2)).times(0.5);
            if (digitsToString(t.d).slice(0, wpr) === (n = digitsToString(r2.d)).slice(0, wpr)) {
              n = n.slice(wpr - 3, wpr + 1);
              if (s2 == wpr && n == "4999") {
                round(t, pr + 1, 0);
                if (t.times(t).eq(x2)) {
                  r2 = t;
                  break;
                }
              } else if (n != "9999") {
                break;
              }
              wpr += 4;
            }
          }
          external = true;
          return round(r2, pr);
        };
        P.times = P.mul = function(y2) {
          var carry, e, i, k2, r2, rL, t, xdL, ydL, x2 = this, Ctor = x2.constructor, xd = x2.d, yd = (y2 = new Ctor(y2)).d;
          if (!x2.s || !y2.s) return new Ctor(0);
          y2.s *= x2.s;
          e = x2.e + y2.e;
          xdL = xd.length;
          ydL = yd.length;
          if (xdL < ydL) {
            r2 = xd;
            xd = yd;
            yd = r2;
            rL = xdL;
            xdL = ydL;
            ydL = rL;
          }
          r2 = [];
          rL = xdL + ydL;
          for (i = rL; i--; ) r2.push(0);
          for (i = ydL; --i >= 0; ) {
            carry = 0;
            for (k2 = xdL + i; k2 > i; ) {
              t = r2[k2] + yd[i] * xd[k2 - i - 1] + carry;
              r2[k2--] = t % BASE | 0;
              carry = t / BASE | 0;
            }
            r2[k2] = (r2[k2] + carry) % BASE | 0;
          }
          for (; !r2[--rL]; ) r2.pop();
          if (carry) ++e;
          else r2.shift();
          y2.d = r2;
          y2.e = e;
          return external ? round(y2, Ctor.precision) : y2;
        };
        P.toDecimalPlaces = P.todp = function(dp, rm) {
          var x2 = this, Ctor = x2.constructor;
          x2 = new Ctor(x2);
          if (dp === void 0) return x2;
          checkInt32(dp, 0, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);
          return round(x2, dp + getBase10Exponent(x2) + 1, rm);
        };
        P.toExponential = function(dp, rm) {
          var str, x2 = this, Ctor = x2.constructor;
          if (dp === void 0) {
            str = toString(x2, true);
          } else {
            checkInt32(dp, 0, MAX_DIGITS);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
            x2 = round(new Ctor(x2), dp + 1, rm);
            str = toString(x2, true, dp + 1);
          }
          return str;
        };
        P.toFixed = function(dp, rm) {
          var str, y2, x2 = this, Ctor = x2.constructor;
          if (dp === void 0) return toString(x2);
          checkInt32(dp, 0, MAX_DIGITS);
          if (rm === void 0) rm = Ctor.rounding;
          else checkInt32(rm, 0, 8);
          y2 = round(new Ctor(x2), dp + getBase10Exponent(x2) + 1, rm);
          str = toString(y2.abs(), false, dp + getBase10Exponent(y2) + 1);
          return x2.isneg() && !x2.isZero() ? "-" + str : str;
        };
        P.toInteger = P.toint = function() {
          var x2 = this, Ctor = x2.constructor;
          return round(new Ctor(x2), getBase10Exponent(x2) + 1, Ctor.rounding);
        };
        P.toNumber = function() {
          return +this;
        };
        P.toPower = P.pow = function(y2) {
          var e, k2, pr, r2, sign2, yIsInt, x2 = this, Ctor = x2.constructor, guard = 12, yn = +(y2 = new Ctor(y2));
          if (!y2.s) return new Ctor(ONE);
          x2 = new Ctor(x2);
          if (!x2.s) {
            if (y2.s < 1) throw Error(decimalError + "Infinity");
            return x2;
          }
          if (x2.eq(ONE)) return x2;
          pr = Ctor.precision;
          if (y2.eq(ONE)) return round(x2, pr);
          e = y2.e;
          k2 = y2.d.length - 1;
          yIsInt = e >= k2;
          sign2 = x2.s;
          if (!yIsInt) {
            if (sign2 < 0) throw Error(decimalError + "NaN");
          } else if ((k2 = yn < 0 ? -yn : yn) <= MAX_SAFE_INTEGER) {
            r2 = new Ctor(ONE);
            e = Math.ceil(pr / LOG_BASE + 4);
            external = false;
            for (; ; ) {
              if (k2 % 2) {
                r2 = r2.times(x2);
                truncate(r2.d, e);
              }
              k2 = mathfloor(k2 / 2);
              if (k2 === 0) break;
              x2 = x2.times(x2);
              truncate(x2.d, e);
            }
            external = true;
            return y2.s < 0 ? new Ctor(ONE).div(r2) : round(r2, pr);
          }
          sign2 = sign2 < 0 && y2.d[Math.max(e, k2)] & 1 ? -1 : 1;
          x2.s = 1;
          external = false;
          r2 = y2.times(ln(x2, pr + guard));
          external = true;
          r2 = exp(r2);
          r2.s = sign2;
          return r2;
        };
        P.toPrecision = function(sd, rm) {
          var e, str, x2 = this, Ctor = x2.constructor;
          if (sd === void 0) {
            e = getBase10Exponent(x2);
            str = toString(x2, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);
          } else {
            checkInt32(sd, 1, MAX_DIGITS);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
            x2 = round(new Ctor(x2), sd, rm);
            e = getBase10Exponent(x2);
            str = toString(x2, sd <= e || e <= Ctor.toExpNeg, sd);
          }
          return str;
        };
        P.toSignificantDigits = P.tosd = function(sd, rm) {
          var x2 = this, Ctor = x2.constructor;
          if (sd === void 0) {
            sd = Ctor.precision;
            rm = Ctor.rounding;
          } else {
            checkInt32(sd, 1, MAX_DIGITS);
            if (rm === void 0) rm = Ctor.rounding;
            else checkInt32(rm, 0, 8);
          }
          return round(new Ctor(x2), sd, rm);
        };
        P.toString = P.valueOf = P.val = P.toJSON = function() {
          var x2 = this, e = getBase10Exponent(x2), Ctor = x2.constructor;
          return toString(x2, e <= Ctor.toExpNeg || e >= Ctor.toExpPos);
        };
        function add(x2, y2) {
          var carry, d, e, i, k2, len, xd, yd, Ctor = x2.constructor, pr = Ctor.precision;
          if (!x2.s || !y2.s) {
            if (!y2.s) y2 = new Ctor(x2);
            return external ? round(y2, pr) : y2;
          }
          xd = x2.d;
          yd = y2.d;
          k2 = x2.e;
          e = y2.e;
          xd = xd.slice();
          i = k2 - e;
          if (i) {
            if (i < 0) {
              d = xd;
              i = -i;
              len = yd.length;
            } else {
              d = yd;
              e = k2;
              len = xd.length;
            }
            k2 = Math.ceil(pr / LOG_BASE);
            len = k2 > len ? k2 + 1 : len + 1;
            if (i > len) {
              i = len;
              d.length = 1;
            }
            d.reverse();
            for (; i--; ) d.push(0);
            d.reverse();
          }
          len = xd.length;
          i = yd.length;
          if (len - i < 0) {
            i = len;
            d = yd;
            yd = xd;
            xd = d;
          }
          for (carry = 0; i; ) {
            carry = (xd[--i] = xd[i] + yd[i] + carry) / BASE | 0;
            xd[i] %= BASE;
          }
          if (carry) {
            xd.unshift(carry);
            ++e;
          }
          for (len = xd.length; xd[--len] == 0; ) xd.pop();
          y2.d = xd;
          y2.e = e;
          return external ? round(y2, pr) : y2;
        }
        function checkInt32(i, min2, max2) {
          if (i !== ~~i || i < min2 || i > max2) {
            throw Error(invalidArgument + i);
          }
        }
        function digitsToString(d) {
          var i, k2, ws, indexOfLastWord = d.length - 1, str = "", w = d[0];
          if (indexOfLastWord > 0) {
            str += w;
            for (i = 1; i < indexOfLastWord; i++) {
              ws = d[i] + "";
              k2 = LOG_BASE - ws.length;
              if (k2) str += getZeroString(k2);
              str += ws;
            }
            w = d[i];
            ws = w + "";
            k2 = LOG_BASE - ws.length;
            if (k2) str += getZeroString(k2);
          } else if (w === 0) {
            return "0";
          }
          for (; w % 10 === 0; ) w /= 10;
          return str + w;
        }
        var divide = /* @__PURE__ */ function() {
          function multiplyInteger(x2, k2) {
            var temp, carry = 0, i = x2.length;
            for (x2 = x2.slice(); i--; ) {
              temp = x2[i] * k2 + carry;
              x2[i] = temp % BASE | 0;
              carry = temp / BASE | 0;
            }
            if (carry) x2.unshift(carry);
            return x2;
          }
          function compare(a2, b, aL, bL) {
            var i, r2;
            if (aL != bL) {
              r2 = aL > bL ? 1 : -1;
            } else {
              for (i = r2 = 0; i < aL; i++) {
                if (a2[i] != b[i]) {
                  r2 = a2[i] > b[i] ? 1 : -1;
                  break;
                }
              }
            }
            return r2;
          }
          function subtract2(a2, b, aL) {
            var i = 0;
            for (; aL--; ) {
              a2[aL] -= i;
              i = a2[aL] < b[aL] ? 1 : 0;
              a2[aL] = i * BASE + a2[aL] - b[aL];
            }
            for (; !a2[0] && a2.length > 1; ) a2.shift();
          }
          return function(x2, y2, pr, dp) {
            var cmp, e, i, k2, prod, prodL, q, qd, rem, remL, rem0, sd, t, xi, xL, yd0, yL, yz, Ctor = x2.constructor, sign2 = x2.s == y2.s ? 1 : -1, xd = x2.d, yd = y2.d;
            if (!x2.s) return new Ctor(x2);
            if (!y2.s) throw Error(decimalError + "Division by zero");
            e = x2.e - y2.e;
            yL = yd.length;
            xL = xd.length;
            q = new Ctor(sign2);
            qd = q.d = [];
            for (i = 0; yd[i] == (xd[i] || 0); ) ++i;
            if (yd[i] > (xd[i] || 0)) --e;
            if (pr == null) {
              sd = pr = Ctor.precision;
            } else if (dp) {
              sd = pr + (getBase10Exponent(x2) - getBase10Exponent(y2)) + 1;
            } else {
              sd = pr;
            }
            if (sd < 0) return new Ctor(0);
            sd = sd / LOG_BASE + 2 | 0;
            i = 0;
            if (yL == 1) {
              k2 = 0;
              yd = yd[0];
              sd++;
              for (; (i < xL || k2) && sd--; i++) {
                t = k2 * BASE + (xd[i] || 0);
                qd[i] = t / yd | 0;
                k2 = t % yd | 0;
              }
            } else {
              k2 = BASE / (yd[0] + 1) | 0;
              if (k2 > 1) {
                yd = multiplyInteger(yd, k2);
                xd = multiplyInteger(xd, k2);
                yL = yd.length;
                xL = xd.length;
              }
              xi = yL;
              rem = xd.slice(0, yL);
              remL = rem.length;
              for (; remL < yL; ) rem[remL++] = 0;
              yz = yd.slice();
              yz.unshift(0);
              yd0 = yd[0];
              if (yd[1] >= BASE / 2) ++yd0;
              do {
                k2 = 0;
                cmp = compare(yd, rem, yL, remL);
                if (cmp < 0) {
                  rem0 = rem[0];
                  if (yL != remL) rem0 = rem0 * BASE + (rem[1] || 0);
                  k2 = rem0 / yd0 | 0;
                  if (k2 > 1) {
                    if (k2 >= BASE) k2 = BASE - 1;
                    prod = multiplyInteger(yd, k2);
                    prodL = prod.length;
                    remL = rem.length;
                    cmp = compare(prod, rem, prodL, remL);
                    if (cmp == 1) {
                      k2--;
                      subtract2(prod, yL < prodL ? yz : yd, prodL);
                    }
                  } else {
                    if (k2 == 0) cmp = k2 = 1;
                    prod = yd.slice();
                  }
                  prodL = prod.length;
                  if (prodL < remL) prod.unshift(0);
                  subtract2(rem, prod, remL);
                  if (cmp == -1) {
                    remL = rem.length;
                    cmp = compare(yd, rem, yL, remL);
                    if (cmp < 1) {
                      k2++;
                      subtract2(rem, yL < remL ? yz : yd, remL);
                    }
                  }
                  remL = rem.length;
                } else if (cmp === 0) {
                  k2++;
                  rem = [0];
                }
                qd[i++] = k2;
                if (cmp && rem[0]) {
                  rem[remL++] = xd[xi] || 0;
                } else {
                  rem = [xd[xi]];
                  remL = 1;
                }
              } while ((xi++ < xL || rem[0] !== void 0) && sd--);
            }
            if (!qd[0]) qd.shift();
            q.e = e;
            return round(q, dp ? pr + getBase10Exponent(q) + 1 : pr);
          };
        }();
        function exp(x2, sd) {
          var denominator, guard, pow2, sum, t, wpr, i = 0, k2 = 0, Ctor = x2.constructor, pr = Ctor.precision;
          if (getBase10Exponent(x2) > 16) throw Error(exponentOutOfRange + getBase10Exponent(x2));
          if (!x2.s) return new Ctor(ONE);
          if (sd == null) {
            external = false;
            wpr = pr;
          } else {
            wpr = sd;
          }
          t = new Ctor(0.03125);
          while (x2.abs().gte(0.1)) {
            x2 = x2.times(t);
            k2 += 5;
          }
          guard = Math.log(mathpow(2, k2)) / Math.LN10 * 2 + 5 | 0;
          wpr += guard;
          denominator = pow2 = sum = new Ctor(ONE);
          Ctor.precision = wpr;
          for (; ; ) {
            pow2 = round(pow2.times(x2), wpr);
            denominator = denominator.times(++i);
            t = sum.plus(divide(pow2, denominator, wpr));
            if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
              while (k2--) sum = round(sum.times(sum), wpr);
              Ctor.precision = pr;
              return sd == null ? (external = true, round(sum, pr)) : sum;
            }
            sum = t;
          }
        }
        function getBase10Exponent(x2) {
          var e = x2.e * LOG_BASE, w = x2.d[0];
          for (; w >= 10; w /= 10) e++;
          return e;
        }
        function getLn10(Ctor, sd, pr) {
          if (sd > Ctor.LN10.sd()) {
            external = true;
            if (pr) Ctor.precision = pr;
            throw Error(decimalError + "LN10 precision limit exceeded");
          }
          return round(new Ctor(Ctor.LN10), sd);
        }
        function getZeroString(k2) {
          var zs = "";
          for (; k2--; ) zs += "0";
          return zs;
        }
        function ln(y2, sd) {
          var c2, c0, denominator, e, numerator, sum, t, wpr, x2, n = 1, guard = 10, x3 = y2, xd = x3.d, Ctor = x3.constructor, pr = Ctor.precision;
          if (x3.s < 1) throw Error(decimalError + (x3.s ? "NaN" : "-Infinity"));
          if (x3.eq(ONE)) return new Ctor(0);
          if (sd == null) {
            external = false;
            wpr = pr;
          } else {
            wpr = sd;
          }
          if (x3.eq(10)) {
            if (sd == null) external = true;
            return getLn10(Ctor, wpr);
          }
          wpr += guard;
          Ctor.precision = wpr;
          c2 = digitsToString(xd);
          c0 = c2.charAt(0);
          e = getBase10Exponent(x3);
          if (Math.abs(e) < 15e14) {
            while (c0 < 7 && c0 != 1 || c0 == 1 && c2.charAt(1) > 3) {
              x3 = x3.times(y2);
              c2 = digitsToString(x3.d);
              c0 = c2.charAt(0);
              n++;
            }
            e = getBase10Exponent(x3);
            if (c0 > 1) {
              x3 = new Ctor("0." + c2);
              e++;
            } else {
              x3 = new Ctor(c0 + "." + c2.slice(1));
            }
          } else {
            t = getLn10(Ctor, wpr + 2, pr).times(e + "");
            x3 = ln(new Ctor(c0 + "." + c2.slice(1)), wpr - guard).plus(t);
            Ctor.precision = pr;
            return sd == null ? (external = true, round(x3, pr)) : x3;
          }
          sum = numerator = x3 = divide(x3.minus(ONE), x3.plus(ONE), wpr);
          x2 = round(x3.times(x3), wpr);
          denominator = 3;
          for (; ; ) {
            numerator = round(numerator.times(x2), wpr);
            t = sum.plus(divide(numerator, new Ctor(denominator), wpr));
            if (digitsToString(t.d).slice(0, wpr) === digitsToString(sum.d).slice(0, wpr)) {
              sum = sum.times(2);
              if (e !== 0) sum = sum.plus(getLn10(Ctor, wpr + 2, pr).times(e + ""));
              sum = divide(sum, new Ctor(n), wpr);
              Ctor.precision = pr;
              return sd == null ? (external = true, round(sum, pr)) : sum;
            }
            sum = t;
            denominator += 2;
          }
        }
        function parseDecimal(x2, str) {
          var e, i, len;
          if ((e = str.indexOf(".")) > -1) str = str.replace(".", "");
          if ((i = str.search(/e/i)) > 0) {
            if (e < 0) e = i;
            e += +str.slice(i + 1);
            str = str.substring(0, i);
          } else if (e < 0) {
            e = str.length;
          }
          for (i = 0; str.charCodeAt(i) === 48; ) ++i;
          for (len = str.length; str.charCodeAt(len - 1) === 48; ) --len;
          str = str.slice(i, len);
          if (str) {
            len -= i;
            e = e - i - 1;
            x2.e = mathfloor(e / LOG_BASE);
            x2.d = [];
            i = (e + 1) % LOG_BASE;
            if (e < 0) i += LOG_BASE;
            if (i < len) {
              if (i) x2.d.push(+str.slice(0, i));
              for (len -= LOG_BASE; i < len; ) x2.d.push(+str.slice(i, i += LOG_BASE));
              str = str.slice(i);
              i = LOG_BASE - str.length;
            } else {
              i -= len;
            }
            for (; i--; ) str += "0";
            x2.d.push(+str);
            if (external && (x2.e > MAX_E || x2.e < -MAX_E)) throw Error(exponentOutOfRange + e);
          } else {
            x2.s = 0;
            x2.e = 0;
            x2.d = [0];
          }
          return x2;
        }
        function round(x2, sd, rm) {
          var i, j, k2, n, rd, doRound, w, xdi, xd = x2.d;
          for (n = 1, k2 = xd[0]; k2 >= 10; k2 /= 10) n++;
          i = sd - n;
          if (i < 0) {
            i += LOG_BASE;
            j = sd;
            w = xd[xdi = 0];
          } else {
            xdi = Math.ceil((i + 1) / LOG_BASE);
            k2 = xd.length;
            if (xdi >= k2) return x2;
            w = k2 = xd[xdi];
            for (n = 1; k2 >= 10; k2 /= 10) n++;
            i %= LOG_BASE;
            j = i - LOG_BASE + n;
          }
          if (rm !== void 0) {
            k2 = mathpow(10, n - j - 1);
            rd = w / k2 % 10 | 0;
            doRound = sd < 0 || xd[xdi + 1] !== void 0 || w % k2;
            doRound = rm < 4 ? (rd || doRound) && (rm == 0 || rm == (x2.s < 0 ? 3 : 2)) : rd > 5 || rd == 5 && (rm == 4 || doRound || rm == 6 && // Check whether the digit to the left of the rounding digit is odd.
            (i > 0 ? j > 0 ? w / mathpow(10, n - j) : 0 : xd[xdi - 1]) % 10 & 1 || rm == (x2.s < 0 ? 8 : 7));
          }
          if (sd < 1 || !xd[0]) {
            if (doRound) {
              k2 = getBase10Exponent(x2);
              xd.length = 1;
              sd = sd - k2 - 1;
              xd[0] = mathpow(10, (LOG_BASE - sd % LOG_BASE) % LOG_BASE);
              x2.e = mathfloor(-sd / LOG_BASE) || 0;
            } else {
              xd.length = 1;
              xd[0] = x2.e = x2.s = 0;
            }
            return x2;
          }
          if (i == 0) {
            xd.length = xdi;
            k2 = 1;
            xdi--;
          } else {
            xd.length = xdi + 1;
            k2 = mathpow(10, LOG_BASE - i);
            xd[xdi] = j > 0 ? (w / mathpow(10, n - j) % mathpow(10, j) | 0) * k2 : 0;
          }
          if (doRound) {
            for (; ; ) {
              if (xdi == 0) {
                if ((xd[0] += k2) == BASE) {
                  xd[0] = 1;
                  ++x2.e;
                }
                break;
              } else {
                xd[xdi] += k2;
                if (xd[xdi] != BASE) break;
                xd[xdi--] = 0;
                k2 = 1;
              }
            }
          }
          for (i = xd.length; xd[--i] === 0; ) xd.pop();
          if (external && (x2.e > MAX_E || x2.e < -MAX_E)) {
            throw Error(exponentOutOfRange + getBase10Exponent(x2));
          }
          return x2;
        }
        function subtract(x2, y2) {
          var d, e, i, j, k2, len, xd, xe, xLTy, yd, Ctor = x2.constructor, pr = Ctor.precision;
          if (!x2.s || !y2.s) {
            if (y2.s) y2.s = -y2.s;
            else y2 = new Ctor(x2);
            return external ? round(y2, pr) : y2;
          }
          xd = x2.d;
          yd = y2.d;
          e = y2.e;
          xe = x2.e;
          xd = xd.slice();
          k2 = xe - e;
          if (k2) {
            xLTy = k2 < 0;
            if (xLTy) {
              d = xd;
              k2 = -k2;
              len = yd.length;
            } else {
              d = yd;
              e = xe;
              len = xd.length;
            }
            i = Math.max(Math.ceil(pr / LOG_BASE), len) + 2;
            if (k2 > i) {
              k2 = i;
              d.length = 1;
            }
            d.reverse();
            for (i = k2; i--; ) d.push(0);
            d.reverse();
          } else {
            i = xd.length;
            len = yd.length;
            xLTy = i < len;
            if (xLTy) len = i;
            for (i = 0; i < len; i++) {
              if (xd[i] != yd[i]) {
                xLTy = xd[i] < yd[i];
                break;
              }
            }
            k2 = 0;
          }
          if (xLTy) {
            d = xd;
            xd = yd;
            yd = d;
            y2.s = -y2.s;
          }
          len = xd.length;
          for (i = yd.length - len; i > 0; --i) xd[len++] = 0;
          for (i = yd.length; i > k2; ) {
            if (xd[--i] < yd[i]) {
              for (j = i; j && xd[--j] === 0; ) xd[j] = BASE - 1;
              --xd[j];
              xd[i] += BASE;
            }
            xd[i] -= yd[i];
          }
          for (; xd[--len] === 0; ) xd.pop();
          for (; xd[0] === 0; xd.shift()) --e;
          if (!xd[0]) return new Ctor(0);
          y2.d = xd;
          y2.e = e;
          return external ? round(y2, pr) : y2;
        }
        function toString(x2, isExp, sd) {
          var k2, e = getBase10Exponent(x2), str = digitsToString(x2.d), len = str.length;
          if (isExp) {
            if (sd && (k2 = sd - len) > 0) {
              str = str.charAt(0) + "." + str.slice(1) + getZeroString(k2);
            } else if (len > 1) {
              str = str.charAt(0) + "." + str.slice(1);
            }
            str = str + (e < 0 ? "e" : "e+") + e;
          } else if (e < 0) {
            str = "0." + getZeroString(-e - 1) + str;
            if (sd && (k2 = sd - len) > 0) str += getZeroString(k2);
          } else if (e >= len) {
            str += getZeroString(e + 1 - len);
            if (sd && (k2 = sd - e - 1) > 0) str = str + "." + getZeroString(k2);
          } else {
            if ((k2 = e + 1) < len) str = str.slice(0, k2) + "." + str.slice(k2);
            if (sd && (k2 = sd - len) > 0) {
              if (e + 1 === len) str += ".";
              str += getZeroString(k2);
            }
          }
          return x2.s < 0 ? "-" + str : str;
        }
        function truncate(arr, len) {
          if (arr.length > len) {
            arr.length = len;
            return true;
          }
        }
        function clone(obj) {
          var i, p, ps;
          function Decimal4(value) {
            var x2 = this;
            if (!(x2 instanceof Decimal4)) return new Decimal4(value);
            x2.constructor = Decimal4;
            if (value instanceof Decimal4) {
              x2.s = value.s;
              x2.e = value.e;
              x2.d = (value = value.d) ? value.slice() : value;
              return;
            }
            if (typeof value === "number") {
              if (value * 0 !== 0) {
                throw Error(invalidArgument + value);
              }
              if (value > 0) {
                x2.s = 1;
              } else if (value < 0) {
                value = -value;
                x2.s = -1;
              } else {
                x2.s = 0;
                x2.e = 0;
                x2.d = [0];
                return;
              }
              if (value === ~~value && value < 1e7) {
                x2.e = 0;
                x2.d = [value];
                return;
              }
              return parseDecimal(x2, value.toString());
            } else if (typeof value !== "string") {
              throw Error(invalidArgument + value);
            }
            if (value.charCodeAt(0) === 45) {
              value = value.slice(1);
              x2.s = -1;
            } else {
              x2.s = 1;
            }
            if (isDecimal.test(value)) parseDecimal(x2, value);
            else throw Error(invalidArgument + value);
          }
          Decimal4.prototype = P;
          Decimal4.ROUND_UP = 0;
          Decimal4.ROUND_DOWN = 1;
          Decimal4.ROUND_CEIL = 2;
          Decimal4.ROUND_FLOOR = 3;
          Decimal4.ROUND_HALF_UP = 4;
          Decimal4.ROUND_HALF_DOWN = 5;
          Decimal4.ROUND_HALF_EVEN = 6;
          Decimal4.ROUND_HALF_CEIL = 7;
          Decimal4.ROUND_HALF_FLOOR = 8;
          Decimal4.clone = clone;
          Decimal4.config = Decimal4.set = config;
          if (obj === void 0) obj = {};
          if (obj) {
            ps = ["precision", "rounding", "toExpNeg", "toExpPos", "LN10"];
            for (i = 0; i < ps.length; ) if (!obj.hasOwnProperty(p = ps[i++])) obj[p] = this[p];
          }
          Decimal4.config(obj);
          return Decimal4;
        }
        function config(obj) {
          if (!obj || typeof obj !== "object") {
            throw Error(decimalError + "Object expected");
          }
          var i, p, v, ps = [
            "precision",
            1,
            MAX_DIGITS,
            "rounding",
            0,
            8,
            "toExpNeg",
            -1 / 0,
            0,
            "toExpPos",
            0,
            1 / 0
          ];
          for (i = 0; i < ps.length; i += 3) {
            if ((v = obj[p = ps[i]]) !== void 0) {
              if (mathfloor(v) === v && v >= ps[i + 1] && v <= ps[i + 2]) this[p] = v;
              else throw Error(invalidArgument + p + ": " + v);
            }
          }
          if ((v = obj[p = "LN10"]) !== void 0) {
            if (v == Math.LN10) this[p] = new this(v);
            else throw Error(invalidArgument + p + ": " + v);
          }
          return this;
        }
        Decimal3 = clone(Decimal3);
        Decimal3["default"] = Decimal3.Decimal = Decimal3;
        ONE = new Decimal3(1);
        if (typeof define == "function" && define.amd) {
          define(function() {
            return Decimal3;
          });
        } else if (typeof module != "undefined" && module.exports) {
          module.exports = Decimal3;
        } else {
          if (!globalScope) {
            globalScope = typeof self != "undefined" && self && self.self == self ? self : Function("return this")();
          }
          globalScope.Decimal = Decimal3;
        }
      })(exports);
    }
  });

  // node_modules/eventemitter3/index.js
  var require_eventemitter3 = __commonJS({
    "node_modules/eventemitter3/index.js"(exports, module) {
      "use strict";
      var has2 = Object.prototype.hasOwnProperty;
      var prefix2 = "~";
      function Events() {
      }
      if (Object.create) {
        Events.prototype = /* @__PURE__ */ Object.create(null);
        if (!new Events().__proto__) prefix2 = false;
      }
      function EE(fn, context, once) {
        this.fn = fn;
        this.context = context;
        this.once = once || false;
      }
      function addListener2(emitter, event, fn, context, once) {
        if (typeof fn !== "function") {
          throw new TypeError("The listener must be a function");
        }
        var listener2 = new EE(fn, context || emitter, once), evt = prefix2 ? prefix2 + event : event;
        if (!emitter._events[evt]) emitter._events[evt] = listener2, emitter._eventsCount++;
        else if (!emitter._events[evt].fn) emitter._events[evt].push(listener2);
        else emitter._events[evt] = [emitter._events[evt], listener2];
        return emitter;
      }
      function clearEvent(emitter, evt) {
        if (--emitter._eventsCount === 0) emitter._events = new Events();
        else delete emitter._events[evt];
      }
      function EventEmitter2() {
        this._events = new Events();
        this._eventsCount = 0;
      }
      EventEmitter2.prototype.eventNames = function eventNames() {
        var names = [], events, name;
        if (this._eventsCount === 0) return names;
        for (name in events = this._events) {
          if (has2.call(events, name)) names.push(prefix2 ? name.slice(1) : name);
        }
        if (Object.getOwnPropertySymbols) {
          return names.concat(Object.getOwnPropertySymbols(events));
        }
        return names;
      };
      EventEmitter2.prototype.listeners = function listeners(event) {
        var evt = prefix2 ? prefix2 + event : event, handlers = this._events[evt];
        if (!handlers) return [];
        if (handlers.fn) return [handlers.fn];
        for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
          ee[i] = handlers[i].fn;
        }
        return ee;
      };
      EventEmitter2.prototype.listenerCount = function listenerCount(event) {
        var evt = prefix2 ? prefix2 + event : event, listeners = this._events[evt];
        if (!listeners) return 0;
        if (listeners.fn) return 1;
        return listeners.length;
      };
      EventEmitter2.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
        var evt = prefix2 ? prefix2 + event : event;
        if (!this._events[evt]) return false;
        var listeners = this._events[evt], len = arguments.length, args, i;
        if (listeners.fn) {
          if (listeners.once) this.removeListener(event, listeners.fn, void 0, true);
          switch (len) {
            case 1:
              return listeners.fn.call(listeners.context), true;
            case 2:
              return listeners.fn.call(listeners.context, a1), true;
            case 3:
              return listeners.fn.call(listeners.context, a1, a2), true;
            case 4:
              return listeners.fn.call(listeners.context, a1, a2, a3), true;
            case 5:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
            case 6:
              return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
          }
          for (i = 1, args = new Array(len - 1); i < len; i++) {
            args[i - 1] = arguments[i];
          }
          listeners.fn.apply(listeners.context, args);
        } else {
          var length = listeners.length, j;
          for (i = 0; i < length; i++) {
            if (listeners[i].once) this.removeListener(event, listeners[i].fn, void 0, true);
            switch (len) {
              case 1:
                listeners[i].fn.call(listeners[i].context);
                break;
              case 2:
                listeners[i].fn.call(listeners[i].context, a1);
                break;
              case 3:
                listeners[i].fn.call(listeners[i].context, a1, a2);
                break;
              case 4:
                listeners[i].fn.call(listeners[i].context, a1, a2, a3);
                break;
              default:
                if (!args) for (j = 1, args = new Array(len - 1); j < len; j++) {
                  args[j - 1] = arguments[j];
                }
                listeners[i].fn.apply(listeners[i].context, args);
            }
          }
        }
        return true;
      };
      EventEmitter2.prototype.on = function on(event, fn, context) {
        return addListener2(this, event, fn, context, false);
      };
      EventEmitter2.prototype.once = function once(event, fn, context) {
        return addListener2(this, event, fn, context, true);
      };
      EventEmitter2.prototype.removeListener = function removeListener2(event, fn, context, once) {
        var evt = prefix2 ? prefix2 + event : event;
        if (!this._events[evt]) return this;
        if (!fn) {
          clearEvent(this, evt);
          return this;
        }
        var listeners = this._events[evt];
        if (listeners.fn) {
          if (listeners.fn === fn && (!once || listeners.once) && (!context || listeners.context === context)) {
            clearEvent(this, evt);
          }
        } else {
          for (var i = 0, events = [], length = listeners.length; i < length; i++) {
            if (listeners[i].fn !== fn || once && !listeners[i].once || context && listeners[i].context !== context) {
              events.push(listeners[i]);
            }
          }
          if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
          else clearEvent(this, evt);
        }
        return this;
      };
      EventEmitter2.prototype.removeAllListeners = function removeAllListeners(event) {
        var evt;
        if (event) {
          evt = prefix2 ? prefix2 + event : event;
          if (this._events[evt]) clearEvent(this, evt);
        } else {
          this._events = new Events();
          this._eventsCount = 0;
        }
        return this;
      };
      EventEmitter2.prototype.off = EventEmitter2.prototype.removeListener;
      EventEmitter2.prototype.addListener = EventEmitter2.prototype.on;
      EventEmitter2.prefixed = prefix2;
      EventEmitter2.EventEmitter = EventEmitter2;
      if ("undefined" !== typeof module) {
        module.exports = EventEmitter2;
      }
    }
  });

  // node_modules/es-toolkit/dist/function/debounce.js
  var require_debounce = __commonJS({
    "node_modules/es-toolkit/dist/function/debounce.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function debounce(func, debounceMs, { signal, edges } = {}) {
        let pendingThis = void 0;
        let pendingArgs = null;
        const leading = edges != null && edges.includes("leading");
        const trailing = edges == null || edges.includes("trailing");
        const invoke = () => {
          if (pendingArgs !== null) {
            func.apply(pendingThis, pendingArgs);
            pendingThis = void 0;
            pendingArgs = null;
          }
        };
        const onTimerEnd = () => {
          if (trailing) {
            invoke();
          }
          cancel();
        };
        let timeoutId = null;
        const schedule = () => {
          if (timeoutId != null) {
            clearTimeout(timeoutId);
          }
          timeoutId = setTimeout(() => {
            timeoutId = null;
            onTimerEnd();
          }, debounceMs);
        };
        const cancelTimer = () => {
          if (timeoutId !== null) {
            clearTimeout(timeoutId);
            timeoutId = null;
          }
        };
        const cancel = () => {
          cancelTimer();
          pendingThis = void 0;
          pendingArgs = null;
        };
        const flush = () => {
          invoke();
        };
        const debounced = function(...args) {
          if (signal?.aborted) {
            return;
          }
          pendingThis = this;
          pendingArgs = args;
          const isFirstCall = timeoutId == null;
          schedule();
          if (leading && isFirstCall) {
            invoke();
          }
        };
        debounced.schedule = schedule;
        debounced.cancel = cancel;
        debounced.flush = flush;
        signal?.addEventListener("abort", cancel, { once: true });
        return debounced;
      }
      exports.debounce = debounce;
    }
  });

  // node_modules/es-toolkit/dist/compat/function/debounce.js
  var require_debounce2 = __commonJS({
    "node_modules/es-toolkit/dist/compat/function/debounce.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var debounce$1 = require_debounce();
      function debounce(func, debounceMs = 0, options = {}) {
        if (typeof options !== "object") {
          options = {};
        }
        const { leading = false, trailing = true, maxWait } = options;
        const edges = Array(2);
        if (leading) {
          edges[0] = "leading";
        }
        if (trailing) {
          edges[1] = "trailing";
        }
        let result = void 0;
        let pendingAt = null;
        const _debounced = debounce$1.debounce(function(...args) {
          result = func.apply(this, args);
          pendingAt = null;
        }, debounceMs, { edges });
        const debounced = function(...args) {
          if (maxWait != null) {
            if (pendingAt === null) {
              pendingAt = Date.now();
            }
            if (Date.now() - pendingAt >= maxWait) {
              result = func.apply(this, args);
              pendingAt = Date.now();
              _debounced.cancel();
              _debounced.schedule();
              return result;
            }
          }
          _debounced.apply(this, args);
          return result;
        };
        const flush = () => {
          _debounced.flush();
          return result;
        };
        debounced.cancel = _debounced.cancel;
        debounced.flush = flush;
        return debounced;
      }
      exports.debounce = debounce;
    }
  });

  // node_modules/es-toolkit/dist/compat/function/throttle.js
  var require_throttle = __commonJS({
    "node_modules/es-toolkit/dist/compat/function/throttle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var debounce = require_debounce2();
      function throttle2(func, throttleMs = 0, options = {}) {
        const { leading = true, trailing = true } = options;
        return debounce.debounce(func, throttleMs, {
          leading,
          maxWait: throttleMs,
          trailing
        });
      }
      exports.throttle = throttle2;
    }
  });

  // node_modules/es-toolkit/compat/throttle.js
  var require_throttle2 = __commonJS({
    "node_modules/es-toolkit/compat/throttle.js"(exports, module) {
      module.exports = require_throttle().throttle;
    }
  });

  // node_modules/es-toolkit/dist/array/last.js
  var require_last = __commonJS({
    "node_modules/es-toolkit/dist/array/last.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function last2(arr) {
        return arr[arr.length - 1];
      }
      exports.last = last2;
    }
  });

  // node_modules/es-toolkit/dist/compat/_internal/toArray.js
  var require_toArray = __commonJS({
    "node_modules/es-toolkit/dist/compat/_internal/toArray.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function toArray2(value) {
        return Array.isArray(value) ? value : Array.from(value);
      }
      exports.toArray = toArray2;
    }
  });

  // node_modules/es-toolkit/dist/compat/array/last.js
  var require_last2 = __commonJS({
    "node_modules/es-toolkit/dist/compat/array/last.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      var last$1 = require_last();
      var toArray2 = require_toArray();
      var isArrayLike = require_isArrayLike();
      function last2(array) {
        if (!isArrayLike.isArrayLike(array)) {
          return void 0;
        }
        return last$1.last(toArray2.toArray(array));
      }
      exports.last = last2;
    }
  });

  // node_modules/es-toolkit/compat/last.js
  var require_last3 = __commonJS({
    "node_modules/es-toolkit/compat/last.js"(exports, module) {
      module.exports = require_last2().last;
    }
  });

  // node_modules/es-toolkit/dist/compat/predicate/isPlainObject.js
  var require_isPlainObject = __commonJS({
    "node_modules/es-toolkit/dist/compat/predicate/isPlainObject.js"(exports) {
      "use strict";
      Object.defineProperty(exports, Symbol.toStringTag, { value: "Module" });
      function isPlainObject4(object) {
        if (typeof object !== "object") {
          return false;
        }
        if (object == null) {
          return false;
        }
        if (Object.getPrototypeOf(object) === null) {
          return true;
        }
        if (Object.prototype.toString.call(object) !== "[object Object]") {
          const tag = object[Symbol.toStringTag];
          if (tag == null) {
            return false;
          }
          const isTagReadonly = !Object.getOwnPropertyDescriptor(object, Symbol.toStringTag)?.writable;
          if (isTagReadonly) {
            return false;
          }
          return object.toString() === `[object ${tag}]`;
        }
        let proto2 = object;
        while (Object.getPrototypeOf(proto2) !== null) {
          proto2 = Object.getPrototypeOf(proto2);
        }
        return Object.getPrototypeOf(object) === proto2;
      }
      exports.isPlainObject = isPlainObject4;
    }
  });

  // node_modules/es-toolkit/compat/isPlainObject.js
  var require_isPlainObject2 = __commonJS({
    "node_modules/es-toolkit/compat/isPlainObject.js"(exports, module) {
      module.exports = require_isPlainObject().isPlainObject;
    }
  });

  // node_modules/use-sync-external-store/cjs/use-sync-external-store-with-selector.production.js
  var require_use_sync_external_store_with_selector_production = __commonJS({
    "node_modules/use-sync-external-store/cjs/use-sync-external-store-with-selector.production.js"(exports) {
      "use strict";
      var React79 = require_react();
      function is2(x2, y2) {
        return x2 === y2 && (0 !== x2 || 1 / x2 === 1 / y2) || x2 !== x2 && y2 !== y2;
      }
      var objectIs = "function" === typeof Object.is ? Object.is : is2;
      var useSyncExternalStore2 = React79.useSyncExternalStore;
      var useRef17 = React79.useRef;
      var useEffect49 = React79.useEffect;
      var useMemo14 = React79.useMemo;
      var useDebugValue2 = React79.useDebugValue;
      exports.useSyncExternalStoreWithSelector = function(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
        var instRef = useRef17(null);
        if (null === instRef.current) {
          var inst = { hasValue: false, value: null };
          instRef.current = inst;
        } else inst = instRef.current;
        instRef = useMemo14(
          function() {
            function memoizedSelector(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                nextSnapshot = selector(nextSnapshot);
                if (void 0 !== isEqual && inst.hasValue) {
                  var currentSelection = inst.value;
                  if (isEqual(currentSelection, nextSnapshot))
                    return memoizedSelection = currentSelection;
                }
                return memoizedSelection = nextSnapshot;
              }
              currentSelection = memoizedSelection;
              if (objectIs(memoizedSnapshot, nextSnapshot)) return currentSelection;
              var nextSelection = selector(nextSnapshot);
              if (void 0 !== isEqual && isEqual(currentSelection, nextSelection))
                return memoizedSnapshot = nextSnapshot, currentSelection;
              memoizedSnapshot = nextSnapshot;
              return memoizedSelection = nextSelection;
            }
            var hasMemo = false, memoizedSnapshot, memoizedSelection, maybeGetServerSnapshot = void 0 === getServerSnapshot ? null : getServerSnapshot;
            return [
              function() {
                return memoizedSelector(getSnapshot());
              },
              null === maybeGetServerSnapshot ? void 0 : function() {
                return memoizedSelector(maybeGetServerSnapshot());
              }
            ];
          },
          [getSnapshot, getServerSnapshot, selector, isEqual]
        );
        var value = useSyncExternalStore2(subscribe, instRef[0], instRef[1]);
        useEffect49(
          function() {
            inst.hasValue = true;
            inst.value = value;
          },
          [value]
        );
        useDebugValue2(value);
        return value;
      };
    }
  });

  // node_modules/use-sync-external-store/with-selector.js
  var require_with_selector2 = __commonJS({
    "node_modules/use-sync-external-store/with-selector.js"(exports, module) {
      "use strict";
      if (true) {
        module.exports = require_use_sync_external_store_with_selector_production();
      } else {
        module.exports = null;
      }
    }
  });

  // index.tsx
  var import_react87 = __toESM(require_react());
  var import_client = __toESM(require_client());

  // App.tsx
  var import_react86 = __toESM(require_react());

  // components/auth/LoginPage.tsx
  var import_react2 = __toESM(require_react());

  // components/icons/Icons.tsx
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  var PulseIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3.75 12h3l2.25-6 3 12 2.25-9h3.75" }) });
  var CreditCardIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M2.25 8.25h19.5M2.25 9h19.5m-16.5 5.25h6m-6 2.25h3m-3.75 3h15a2.25 2.25 0 002.25-2.25V6.75A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25v10.5A2.25 2.25 0 004.5 19.5z" }) });
  var ArrowUpIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4.5 15.75l7.5-7.5 7.5 7.5" }) });
  var ArrowDownIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19.5 8.25l-7.5 7.5-7.5-7.5" }) });
  var ClockIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var EnvelopeIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M21.75 6.75v10.5a2.25 2.25 0 01-2.25 2.25h-15a2.25 2.25 0 01-2.25-2.25V6.75m19.5 0A2.25 2.25 0 0019.5 4.5h-15a2.25 2.25 0 00-2.25 2.25m19.5 0v.243a2.25 2.25 0 01-1.07 1.916l-7.5 4.615a2.25 2.25 0 01-2.36 0L3.32 8.91a2.25 2.25 0 01-1.07-1.916V6.75" }) });
  var BellIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M14.857 17.082a23.848 23.848 0 005.454-1.31A8.967 8.967 0 0118 9.75v-.7V9A6 6 0 006 9v.75a8.967 8.967 0 01-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 01-5.714 0m5.714 0a3 3 0 11-5.714 0" }) });
  var MagnifyingGlassIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607z" }) });
  var UserCircleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M17.982 18.725A7.488 7.488 0 0012 15.75a7.488 7.488 0 00-5.982 2.975m11.963 0a9 9 0 10-11.963 0m11.963 0A8.966 8.966 0 0112 21a8.966 8.966 0 01-5.982-2.275M15 9.75a3 3 0 11-6 0 3 3 0 016 0z" }) });
  var ArrowRightOnRectangleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15.75 9V5.25A2.25 2.25 0 0013.5 3h-6a2.25 2.25 0 00-2.25 2.25v13.5A2.25 2.25 0 007.5 21h6a2.25 2.25 0 002.25-2.25V15m3 0l3-3m0 0l-3-3m3 3H9" }) });
  var LockClosedIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M16.5 10.5V6.75a4.5 4.5 0 00-9 0v3.75m-.75 11.25h10.5a2.25 2.25 0 002.25-2.25v-6.75a2.25 2.25 0 00-2.25-2.25H6.75a2.25 2.25 0 00-2.25 2.25v6.75a2.25 2.25 0 002.25 2.25z" }) });
  var UserPlusIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19 7.5v3m0 0v3m0-3h3m-3 0h-3m-2.25-4.125a3.375 3.375 0 11-6.75 0 3.375 3.375 0 016.75 0zM4 19.235v-.11a6.375 6.375 0 0112.75 0v.109A12.318 12.318 0 0110.374 21c-2.331 0-4.512-.645-6.374-1.766z" }) });
  var PencilIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M16.862 4.487l1.687-1.688a1.875 1.875 0 112.652 2.652L10.582 16.07a4.5 4.5 0 01-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 011.13-1.897l8.932-8.931zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0115.75 21H5.25A2.25 2.25 0 013 18.75V8.25A2.25 2.25 0 015.25 6H10" }) });
  var TrashIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M14.74 9l-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 01-2.244 2.077H8.084a2.25 2.25 0 01-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 00-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 013.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 00-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 00-7.5 0" }) });
  var EllipsisVerticalIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 6.75a.75.75 0 110-1.5.75.75 0 010 1.5zM12 12.75a.75.75 0 110-1.5.75.75 0 010 1.5zM12 18.75a.75.75 0 110-1.5.75.75 0 010 1.5z" }) });
  var CheckCircleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var XCircleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9.75 9.75l4.5 4.5m0-4.5l-4.5 4.5M21 12a9 9 0 11-18 0 9 9 0 0118 0z" }) });
  var CameraIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6.827 6.175A2.31 2.31 0 015.186 7.23c-.38.054-.757.112-1.134.175C2.999 7.58 2.25 8.507 2.25 9.574V18a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9.574c0-1.067-.75-1.994-1.802-2.169a47.865 47.865 0 00-1.134-.175 2.31 2.31 0 01-1.64-1.055l-.822-1.316a2.192 2.192 0 00-1.736-1.039 48.776 48.776 0 00-5.232 0 2.192 2.192 0 00-1.736 1.039l-.821 1.316z" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M16.5 12.75a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0zM18.75 10.5h.008v.008h-.008V10.5z" })
  ] });
  var XMarkIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 18L18 6M6 6l12 12" }) });
  var ShieldCheckIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9 12.75L11.25 15 15 9.75m-3-7.036A11.959 11.959 0 013.598 6 11.99 11.99 0 003 9.749c0 5.592 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.31-.21-2.571-.598-3.751h-.152c-3.196 0-6.1-1.248-8.25-3.286zm0 13.036h.008v.008h-.008v-.008z" }) });
  var CheckIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4.5 12.75l6 6 9-13.5" }) });
  var ExclamationTriangleIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" }) });
  var PlusIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 4.5v15m7.5-7.5h-15" }) });
  var DocumentDuplicateIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 01-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 011.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 00-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 01-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 00-3.375-3.375h-1.5a1.125 1.125 0 01-1.125-1.125v-1.5a3.375 3.375 0 00-3.375-3.375H9.75" }) });
  var ArrowDownTrayIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3 16.5v2.25A2.25 2.25 0 005.25 21h13.5A2.25 2.25 0 0021 18.75V16.5M16.5 12L12 16.5m0 0L7.5 12m4.5 4.5V3" }) });
  var ChatBubbleBottomCenterTextIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M8.625 12a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H8.25m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0H12m4.125 0a.375.375 0 11-.75 0 .375.375 0 01.75 0zm0 0h-.375M21 12c0 4.556-4.03 8.25-9 8.25a9.76 9.76 0 01-2.53-.428m-3.44-1.822A10.024 10.024 0 003 12c0-4.556 4.03-8.25 9-8.25 4.97 0 9 3.694 9 8.25z" }) });
  var SparklesIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.898 20.562L16.25 21.75l-.648-1.188a2.25 2.25 0 01-1.47-1.47L12.964 18l1.188-.648a2.25 2.25 0 011.47-1.47L16.25 15l.648 1.188a2.25 2.25 0 011.47 1.47L19.536 18l-1.188.648a2.25 2.25 0 01-1.47 1.47z" }) });
  var PaperClipIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M18.375 12.739l-7.693 7.693a4.5 4.5 0 01-6.364-6.364l10.94-10.94A3 3 0 1119.5 7.372L8.552 18.32m.009-.01l-.01.01m5.699-9.94l-7.693 7.693a2.25 2.25 0 003.182 3.182l7.693-7.693a.75.75 0 111.06 1.06l-7.693 7.693a4.5 4.5 0 01-6.364-6.364l10.94-10.94A3 3 0 1119.5 7.372L8.552 18.32" }) });
  var HandThumbUpIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6.633 10.5c.806 0 1.533-.446 2.031-1.08a9.041 9.041 0 012.861-2.4c.723-.384 1.35-.956 1.653-1.715a4.498 4.498 0 00.322-1.672V3a.75.75 0 01.75-.75A2.25 2.25 0 0116.5 4.5c0 1.152-.26 2.243-.723 3.218-.266.558.107 1.282.725 1.282h3.126c1.026 0 1.945.694 2.054 1.715.045.422.068.85.068 1.285a11.95 11.95 0 01-2.649 7.521c-.388.482-.987.729-1.605.729H13.48c-.483 0-.964-.078-1.423-.23l-3.114-1.04a4.501 4.501 0 00-1.423-.23H5.904M6.633 10.5l-1.87-1.87a.75.75 0 00-1.06 1.06L5.573 10.5H6.633z" }) });
  var HandThumbDownIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M7.864 4.243A7.5 7.5 0 0119.5 10.5c0 2.92-.556 5.709-1.588 8.188a11.952 11.952 0 01-6.18 4.805A12 12 0 013 10.5a7.5 7.5 0 014.864-6.257zM15 9.75a3 3 0 11-6 0 3 3 0 016 0z" }) });
  var SunIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 3v2.25m6.364.386l-1.591 1.591M21 12h-2.25m-.386 6.364l-1.591-1.591M12 18.75V21m-4.773-4.227l-1.591 1.591M5.25 12H3m4.227-4.773L5.636 5.636M15.75 12a3.75 3.75 0 11-7.5 0 3.75 3.75 0 017.5 0z" }) });
  var MoonIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M21.752 15.002A9.718 9.718 0 0118 15.75c-5.385 0-9.75-4.365-9.75-9.75 0-1.33.266-2.597.748-3.752A9.753 9.753 0 003 11.25C3 16.635 7.365 21 12.75 21a9.753 9.753 0 009.002-5.998z" }) });
  var PaperAirplaneIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 12L3.269 3.126A59.768 59.768 0 0121.485 12 59.77 59.77 0 013.27 20.876L5.999 12zm0 0h7.5" }) });
  var MegaphoneIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M9.568 3H5.25A2.25 2.25 0 003 5.25v4.318c0 .597.237 1.17.659 1.591l9.581 9.581c.699.699 1.78.872 2.607.33a18.095 18.095 0 005.223-5.223c.542-.827.369-1.908-.33-2.607L11.16 3.66A2.25 2.25 0 009.568 3z" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M6 6h.008v.008H6V6z" })
  ] });
  var BellAlertIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: [
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M14.857 17.082a23.848 23.848 0 005.454-1.31A8.967 8.967 0 0118 9.75v-.7V9A6 6 0 006 9v.75a8.967 8.967 0 01-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 01-5.714 0m5.714 0a3 3 0 11-5.714 0" }),
    /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M12 6.75a.75.75 0 110-1.5.75.75 0 010 1.5z" })
  ] });
  var ChevronUpDownIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M8.25 15L12 18.75 15.75 15m-7.5-6L12 5.25 15.75 9" }) });
  var ChevronUpIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M4.5 15.75l7.5-7.5 7.5 7.5" }) });
  var ChevronDownIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M19.5 8.25l-7.5 7.5-7.5-7.5" }) });
  var Bars3Icon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" }) });
  var ArrowLeftIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18" }) });
  var KeyIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M15.75 5.25a3 3 0 013 3m3 0a6 6 0 01-7.029 5.912c-.563-.097-1.159.026-1.563.43L10.5 17.25H8.25v2.25H6v2.25H2.25v-2.818c0-.597.237-1.17.659-1.591l6.499-6.499c.404-.404.527-1 .43-1.563A6 6 0 1121.75 8.25z" }) });
  var SwitchHorizontalIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M7.5 21L3 16.5m0 0L7.5 12M3 16.5h18M16.5 3L21 7.5m0 0L16.5 12M21 7.5H3" }) });
  var ClipboardDocumentCheckIcon = (props) => /* @__PURE__ */ (0, import_jsx_runtime.jsx)("svg", { xmlns: "http://www.w3.org/2000/svg", fill: "none", viewBox: "0 0 24 24", strokeWidth: 1.5, stroke: "currentColor", ...props, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)("path", { strokeLinecap: "round", strokeLinejoin: "round", d: "M10.125 2.25h-4.5c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125v-9M10.125 2.25h.375a9 9 0 019 9v.375M10.125 2.25A3.375 3.375 0 0113.5 5.625v1.5c0 .621.504 1.125 1.125 1.125h1.5a3.375 3.375 0 013.375 3.375M9 15l2.25 2.25L15 12" }) });

  // components/auth/ForgotPasswordForm.tsx
  var import_react = __toESM(require_react());
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var ForgotPasswordForm = ({ onClose, onBackToLogin }) => {
    const [email, setEmail] = (0, import_react.useState)("");
    const [submitted, setSubmitted] = (0, import_react.useState)(false);
    const [error, setError] = (0, import_react.useState)("");
    const validate = () => {
      if (!email) {
        setError("Email address is required.");
        return false;
      } else if (!/\S+@\S+\.\S+/.test(email)) {
        setError("Email address is invalid.");
        return false;
      }
      setError("");
      return true;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        console.log(`Password reset requested for: ${email}`);
        setSubmitted(true);
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { className: "fixed inset-0 z-50 flex items-center justify-center bg-gray-500 bg-opacity-75", children: /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { className: "relative bg-white dark:bg-dark-card rounded-lg shadow-xl p-8 max-w-md w-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("button", { onClick: onClose, className: "absolute top-4 right-4 text-gray-400 hover:text-gray-600 dark:hover:text-gray-300", children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(XMarkIcon, { className: "h-6 w-6" }) }),
      !submitted ? /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("form", { onSubmit: handleSubmit, className: "space-y-6", noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("h2", { className: "text-2xl font-bold text-center text-gray-900 dark:text-white", children: "Forgot Password?" }),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("p", { className: "mt-2 text-center text-sm text-gray-600 dark:text-gray-400", children: "No problem. Enter your email and we'll send you a reset link." })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("label", { htmlFor: "reset-email", className: "sr-only", children: "Email address" }),
          /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { className: "relative", children: [
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("div", { className: "pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3", children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(EnvelopeIcon, { className: "h-5 w-5 text-gray-400" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
              "input",
              {
                id: "reset-email",
                name: "email",
                type: "email",
                autoComplete: "email",
                required: true,
                value: email,
                onChange: (e) => setEmail(e.target.value),
                className: `relative block w-full appearance-none rounded-md border ${error ? "border-red-500" : "border-gray-300 dark:border-gray-600"} bg-white dark:bg-gray-700 px-3 py-3 pl-10 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:z-10 focus:border-primary focus:outline-none focus:ring-primary sm:text-sm`,
                placeholder: "Enter your email address"
              }
            )
          ] }),
          error && /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("p", { className: "mt-2 text-sm text-red-600 dark:text-red-400", children: error })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)(
          "button",
          {
            type: "submit",
            className: "group relative flex w-full justify-center rounded-md border border-transparent bg-primary py-3 px-4 text-sm font-semibold text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(PaperAirplaneIcon, { className: "h-5 w-5 mr-2 -ml-1" }),
              "Send Reset Link"
            ]
          }
        )
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("div", { className: "text-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(CheckCircleIcon, { className: "h-16 w-16 text-green-500 mx-auto mb-4" }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("h2", { className: "text-2xl font-bold text-gray-900 dark:text-white", children: "Check your email" }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsxs)("p", { className: "mt-2 text-sm text-gray-600 dark:text-gray-400", children: [
          "We've sent a password reset link to ",
          /* @__PURE__ */ (0, import_jsx_runtime2.jsx)("span", { className: "font-medium text-gray-800 dark:text-gray-200", children: email }),
          ". Please follow the instructions in the email to reset your password."
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(
          "button",
          {
            onClick: onBackToLogin,
            className: "mt-6 group relative flex w-full justify-center rounded-md border border-transparent bg-secondary py-3 px-4 text-sm font-semibold text-white hover:bg-secondary/90 focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2",
            children: "Back to Login"
          }
        )
      ] })
    ] }) });
  };
  var ForgotPasswordForm_default = ForgotPasswordForm;

  // components/auth/LoginPage.tsx
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var BACKEND_URL = "https://tabeel-backend.onrender.com";
  var LoginPage = ({ onLogin }) => {
    const [isForgotPasswordOpen, setForgotPasswordOpen] = (0, import_react2.useState)(false);
    const [email, setEmail] = (0, import_react2.useState)("admin@tabdeel.com");
    const [password, setPassword] = (0, import_react2.useState)("password");
    const [errors, setErrors] = (0, import_react2.useState)({});
    const [loginError, setLoginError] = (0, import_react2.useState)(null);
    const validate = () => {
      const newErrors = {};
      if (!email) {
        newErrors.email = "Email address is required.";
      } else if (!/\S+@\S+\.\S+/.test(email)) {
        newErrors.email = "Email address is invalid.";
      }
      if (!password) {
        newErrors.password = "Password is required.";
      }
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const login = async () => {
      setLoginError(null);
      try {
        const response = await fetch(`${BACKEND_URL}/api/login`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ email, password })
        });
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.error || "Login failed. Please check your credentials.");
        }
        onLogin();
      } catch (error) {
        console.error("Login failed:", error);
        setLoginError(error.message);
      }
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        login();
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)(import_jsx_runtime3.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "min-h-screen flex items-center justify-center bg-gray-50 dark:bg-gray-900 px-4", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "w-full max-w-md space-y-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "mx-auto h-16 w-16 flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(PulseIcon, { className: "h-16 w-16 text-primary" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("h2", { className: "mt-6 text-center text-3xl font-bold tracking-tight text-gray-900 dark:text-white", children: "Tabdeel Pulse" }),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { className: "mt-2 text-center text-sm text-gray-600 dark:text-gray-400", children: "Sign in to your account" })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("form", { className: "mt-8 space-y-6", onSubmit: handleSubmit, noValidate: true, children: [
          /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("label", { htmlFor: "email-address", className: "sr-only", children: "Email address" }),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "relative", children: [
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(EnvelopeIcon, { className: "h-5 w-5 text-gray-400" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                  "input",
                  {
                    id: "email-address",
                    name: "email",
                    type: "email",
                    autoComplete: "email",
                    required: true,
                    className: `relative block w-full appearance-none rounded-md border ${errors.email ? "border-red-500" : "border-gray-300 dark:border-gray-600"} bg-white dark:bg-gray-700 px-3 py-3 pl-10 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:z-10 focus:border-primary focus:outline-none focus:ring-primary sm:text-sm`,
                    placeholder: "Email address",
                    value: email,
                    onChange: (e) => setEmail(e.target.value)
                  }
                )
              ] }),
              errors.email && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { className: "mt-2 text-sm text-red-600 dark:text-red-400", children: errors.email })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("label", { htmlFor: "password", className: "sr-only", children: "Password" }),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "relative", children: [
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "pointer-events-none absolute inset-y-0 left-0 flex items-center pl-3", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(LockClosedIcon, { className: "h-5 w-5 text-gray-400" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                  "input",
                  {
                    id: "password",
                    name: "password",
                    type: "password",
                    autoComplete: "current-password",
                    required: true,
                    className: `relative block w-full appearance-none rounded-md border ${errors.password ? "border-red-500" : "border-gray-300 dark:border-gray-600"} bg-white dark:bg-gray-700 px-3 py-3 pl-10 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400 focus:z-10 focus:border-primary focus:outline-none focus:ring-primary sm:text-sm`,
                    placeholder: "Password",
                    value: password,
                    onChange: (e) => setPassword(e.target.value)
                  }
                )
              ] }),
              errors.password && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { className: "mt-2 text-sm text-red-600 dark:text-red-400", children: errors.password })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime3.jsxs)("div", { className: "flex items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
                "input",
                {
                  id: "remember-me",
                  name: "remember-me",
                  type: "checkbox",
                  className: "h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("label", { htmlFor: "remember-me", className: "ml-2 block text-sm text-gray-900 dark:text-gray-300", children: "Remember me" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { className: "text-sm", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
              "button",
              {
                type: "button",
                onClick: () => setForgotPasswordOpen(true),
                className: "font-medium text-primary hover:text-primary/80 focus:outline-none",
                children: "Forgot your password?"
              }
            ) })
          ] }),
          loginError && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("p", { className: "mt-2 text-sm text-red-600 dark:text-red-400 text-center", children: loginError }),
          /* @__PURE__ */ (0, import_jsx_runtime3.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
            "button",
            {
              type: "submit",
              className: "group relative flex w-full justify-center rounded-md border border-transparent bg-primary py-3 px-4 text-sm font-semibold text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
              children: "Sign in"
            }
          ) })
        ] })
      ] }) }),
      isForgotPasswordOpen && /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(
        ForgotPasswordForm_default,
        {
          onClose: () => setForgotPasswordOpen(false),
          onBackToLogin: () => setForgotPasswordOpen(false)
        }
      )
    ] });
  };
  var LoginPage_default = LoginPage;

  // components/layout/MainLayout.tsx
  var import_react84 = __toESM(require_react());

  // components/layout/Sidebar.tsx
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var Sidebar = ({ activePage, onNavigate, isOpen, setOpen }) => {
    const mainNav = [
      { id: "dashboard", href: "#", label: "Dashboard" },
      { id: "announcements", href: "#", label: "Announcements" },
      { id: "finance", href: "#", label: "Finance" },
      { id: "service-jobs", href: "#", label: "Service Jobs" },
      { id: "messages", href: "#", label: "Messages" }
    ];
    const tasksNav = [
      { id: "tasks", href: "#", label: "Tasks" }
    ];
    const accountNav = [
      { id: "profile", href: "#", label: "Profile" }
    ];
    const adminNav = [
      { id: "users", href: "#", label: "Users" },
      { id: "roles", href: "#", label: "Roles & Permissions" },
      { id: "projects", href: "#", label: "Projects" },
      { id: "account-heads", href: "#", label: "Account Heads" },
      { id: "settings", href: "#", label: "Settings" }
    ];
    const NavItem = ({ link, isActive = false, onClick }) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
      "a",
      {
        href: link.href,
        onClick: (e) => {
          e.preventDefault();
          onClick();
        },
        className: `flex items-center p-3 my-1 rounded-lg transition-colors ${isActive ? "bg-primary text-white shadow-lg" : "text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700"}`,
        children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { className: "font-header font-medium", children: link.label })
      }
    ) });
    return /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)(import_jsx_runtime4.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(
        "div",
        {
          className: `fixed inset-0 bg-black bg-opacity-50 z-30 lg:hidden transition-opacity ${isOpen ? "opacity-100" : "opacity-0 pointer-events-none"}`,
          onClick: () => setOpen(false),
          "aria-hidden": "true"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("aside", { className: `fixed inset-y-0 left-0 w-64 flex-shrink-0 bg-white dark:bg-dark-card border-r border-gray-200 dark:border-gray-700 flex flex-col z-40 transform transition-transform duration-300 ease-in-out lg:relative lg:translate-x-0 ${isOpen ? "translate-x-0" : "-translate-x-full"}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("div", { className: "h-20 flex items-center justify-center px-4 border-b border-gray-200 dark:border-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "flex items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(PulseIcon, { className: "h-10 w-10 mr-3 text-primary" }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("span", { className: "text-2xl font-bold text-gray-800 dark:text-white font-header", children: "Tabdeel Pulse" })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("nav", { className: "flex-1 px-4 py-4 overflow-y-auto", children: [
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("ul", { children: mainNav.map((link) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(NavItem, { link, isActive: activePage === link.id, onClick: () => onNavigate(link.id) }, link.id)) }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "mt-8", children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("h3", { className: "px-3 text-xs font-semibold uppercase text-gray-500 dark:text-gray-400 tracking-wider", children: "Tasks" }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("ul", { className: "mt-2", children: tasksNav.map((link) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(NavItem, { link, isActive: activePage === link.id, onClick: () => onNavigate(link.id) }, link.id)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "mt-8", children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("h3", { className: "px-3 text-xs font-semibold uppercase text-gray-500 dark:text-gray-400 tracking-wider", children: "Account" }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("ul", { className: "mt-2", children: accountNav.map((link) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(NavItem, { link, isActive: activePage === link.id, onClick: () => onNavigate(link.id) }, link.id)) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime4.jsxs)("div", { className: "mt-8", children: [
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("h3", { className: "px-3 text-xs font-semibold uppercase text-gray-500 dark:text-gray-400 tracking-wider", children: "Administration" }),
            /* @__PURE__ */ (0, import_jsx_runtime4.jsx)("ul", { className: "mt-2", children: adminNav.map((link) => /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(NavItem, { link, isActive: activePage === link.id, onClick: () => onNavigate(link.id) }, link.id)) })
          ] })
        ] })
      ] })
    ] });
  };
  var Sidebar_default = Sidebar;

  // components/layout/Header.tsx
  var import_react7 = __toESM(require_react());

  // components/layout/NotificationDropdown.tsx
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var NotificationDropdown = ({ notifications, onMarkAllRead, onNotificationClick }) => {
    const unreadCount = notifications.filter((n) => !n.read).length;
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "absolute right-0 mt-2 w-80 sm:w-96 origin-top-right rounded-md bg-white dark:bg-dark-card shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-10", children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "p-4 border-b border-gray-200 dark:border-gray-700", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "flex justify-between items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("h3", { className: "text-lg font-semibold text-gray-900 dark:text-white", children: "Notifications" }),
        unreadCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          "button",
          {
            onClick: onMarkAllRead,
            className: "text-sm font-medium text-primary hover:text-primary/80 focus:outline-none",
            children: "Mark all as read"
          }
        )
      ] }) }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("ul", { className: "max-h-80 overflow-y-auto divide-y divide-gray-200 dark:divide-gray-700", children: notifications.map((notification) => /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("li", { className: "hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(
        "button",
        {
          onClick: () => onNotificationClick(notification),
          className: "w-full text-left p-4 flex items-start space-x-4",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "relative flex-shrink-0", children: [
              /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(notification.icon, { className: "h-5 w-5 text-primary" }) }),
              !notification.read && /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("span", { className: "absolute top-0 right-0 block h-2.5 w-2.5 rounded-full bg-blue-500 ring-2 ring-white dark:ring-dark-card" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)("div", { className: "flex-1 min-w-0", children: [
              /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("p", { className: "text-sm font-semibold text-gray-900 dark:text-white", children: notification.title }),
              /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400 mt-1", children: notification.description }),
              /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("p", { className: "text-xs text-gray-400 dark:text-gray-500 mt-2", children: notification.timestamp })
            ] })
          ]
        }
      ) }, notification.id)) }),
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "p-2 border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-dark-card/50 text-center", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("a", { href: "#", className: "text-sm font-medium text-primary hover:text-primary/80", children: "View all notifications" }) })
    ] });
  };
  var NotificationDropdown_default = NotificationDropdown;

  // hooks/useAuth.ts
  var import_react6 = __toESM(require_react());

  // components/roles/RoleManagementPage.tsx
  var import_react5 = __toESM(require_react());

  // components/roles/EditRoleModal.tsx
  var import_react3 = __toESM(require_react());

  // components/roles/permissions.ts
  var allPermissions = [
    { id: "users:create", label: "Create Users", description: "Can add new users to the system." },
    { id: "users:read", label: "Read Users", description: "Can view user lists and profiles." },
    { id: "users:update", label: "Update Users", description: "Can edit user details and roles." },
    { id: "users:delete", label: "Delete Users", description: "Can remove users from the system." },
    { id: "users:reset_password", label: "Reset User Passwords", description: "Can send password reset links to users." },
    { id: "finance:approve", label: "Approve Finance", description: "Can approve or reject financial transactions." },
    { id: "jobs:assign", label: "Assign Jobs", description: "Can assign service jobs to technicians." },
    { id: "roles:manage", label: "Manage Roles", description: "Can create roles and edit role permissions." },
    { id: "projects:create", label: "Create Projects", description: "Can create new projects." },
    { id: "projects:update", label: "Update Projects", description: "Can edit existing project details." },
    { id: "projects:delete", label: "Delete Projects", description: "Can delete projects." },
    { id: "accounts:create", label: "Create Account Heads", description: "Can add new account heads." },
    { id: "accounts:update", label: "Update Account Heads", description: "Can edit existing account heads." },
    { id: "accounts:delete", label: "Delete Account Heads", description: "Can delete account heads." },
    { id: "announcements:create", label: "Create Announcements", description: "Can create and publish company-wide announcements." },
    { id: "system:admin", label: "System Admin", description: "Full access to all system settings." }
  ];

  // components/roles/EditRoleModal.tsx
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var EditRoleModal = ({ isOpen, onClose, role, onSave }) => {
    const [selectedPermissions, setSelectedPermissions] = (0, import_react3.useState)(/* @__PURE__ */ new Set());
    (0, import_react3.useEffect)(() => {
      if (role) {
        setSelectedPermissions(new Set(role.permissions));
      }
    }, [role]);
    const handlePermissionChange = (permission) => {
      setSelectedPermissions((prev) => {
        const newSet = new Set(prev);
        if (newSet.has(permission)) {
          newSet.delete(permission);
        } else {
          newSet.add(permission);
        }
        return newSet;
      });
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      onSave(role.id, Array.from(selectedPermissions));
    };
    if (!isOpen) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("form", { onSubmit: handleSubmit, children: [
        /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("h3", { className: "text-xl leading-6 font-bold text-gray-900 dark:text-white", id: "modal-title", children: [
              "Edit Permissions for ",
              /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("span", { className: "text-primary", children: role.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "mt-4 max-h-[60vh] overflow-y-auto pr-2", children: /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("fieldset", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("legend", { className: "sr-only", children: "Permissions" }),
            /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "space-y-4", children: allPermissions.map((permission) => /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { className: "relative flex items-start p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors", children: [
              /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("div", { className: "flex items-center h-5", children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
                "input",
                {
                  id: permission.id,
                  "aria-describedby": `${permission.id}-description`,
                  name: "permissions",
                  type: "checkbox",
                  checked: selectedPermissions.has(permission.id),
                  onChange: () => handlePermissionChange(permission.id),
                  className: "focus:ring-primary h-5 w-5 text-primary border-gray-300 dark:border-gray-500 rounded bg-gray-100 dark:bg-gray-600"
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { className: "ml-4 text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("label", { htmlFor: permission.id, className: "font-medium text-gray-900 dark:text-white", children: permission.label }),
                /* @__PURE__ */ (0, import_jsx_runtime6.jsx)("p", { id: `${permission.id}-description`, className: "text-gray-500 dark:text-gray-400", children: permission.description })
              ] })
            ] }, permission.id)) })
          ] }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime6.jsxs)(
            "button",
            {
              type: "submit",
              className: "w-full inline-flex items-center justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(CheckIcon, { className: "h-5 w-5 mr-2" }),
                "Save Changes"
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
            "button",
            {
              type: "button",
              onClick: onClose,
              className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm",
              children: "Cancel"
            }
          )
        ] })
      ] }) })
    ] });
  };
  var EditRoleModal_default = EditRoleModal;

  // components/roles/CreateRoleModal.tsx
  var import_react4 = __toESM(require_react());
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var CreateRoleModal = ({ isOpen, onClose, onSave }) => {
    const [name, setName] = (0, import_react4.useState)("");
    const [description, setDescription] = (0, import_react4.useState)("");
    const [selectedPermissions, setSelectedPermissions] = (0, import_react4.useState)(/* @__PURE__ */ new Set());
    const [errors, setErrors] = (0, import_react4.useState)({});
    (0, import_react4.useEffect)(() => {
      if (isOpen) {
        setName("");
        setDescription("");
        setSelectedPermissions(/* @__PURE__ */ new Set());
        setErrors({});
      }
    }, [isOpen]);
    const validate = () => {
      const newErrors = {};
      if (!name.trim()) {
        newErrors.name = "Role name is required.";
      }
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handlePermissionChange = (permission) => {
      setSelectedPermissions((prev) => {
        const newSet = new Set(prev);
        if (newSet.has(permission)) {
          newSet.delete(permission);
        } else {
          newSet.add(permission);
        }
        return newSet;
      });
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onSave({
          id: name.trim().replace(/\s+/g, "-").toLowerCase(),
          // Simple unique ID generation
          name: name.trim(),
          description,
          permissions: Array.from(selectedPermissions)
        });
      }
    };
    if (!isOpen) return null;
    const isFormValid = name.trim();
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-2xl sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("h3", { className: "text-xl leading-6 font-bold text-gray-900 dark:text-white", id: "modal-title", children: "Create New Role" }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "mt-4 max-h-[60vh] overflow-y-auto pr-2 space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("label", { htmlFor: "role-name", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Role Name" }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
                "input",
                {
                  type: "text",
                  id: "role-name",
                  value: name,
                  onChange: (e) => setName(e.target.value),
                  required: true,
                  className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.name ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary`
                }
              ),
              errors.name && /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("label", { htmlFor: "role-description", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Description" }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
                "textarea",
                {
                  id: "role-description",
                  rows: 3,
                  value: description,
                  onChange: (e) => setDescription(e.target.value),
                  className: "mt-1 block w-full shadow-sm sm:text-sm border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary"
                }
              )
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("fieldset", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("legend", { className: "text-sm font-medium text-gray-700 dark:text-gray-300", children: "Permissions" }),
              /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "space-y-4 mt-2", children: allPermissions.map((permission) => /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "relative flex items-start p-3 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors", children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("div", { className: "flex items-center h-5", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
                  "input",
                  {
                    id: `create-${permission.id}`,
                    "aria-describedby": `create-${permission.id}-description`,
                    name: "permissions",
                    type: "checkbox",
                    checked: selectedPermissions.has(permission.id),
                    onChange: () => handlePermissionChange(permission.id),
                    className: "focus:ring-primary h-5 w-5 text-primary border-gray-300 dark:border-gray-500 rounded bg-gray-100 dark:bg-gray-600"
                  }
                ) }),
                /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "ml-4 text-sm", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("label", { htmlFor: `create-${permission.id}`, className: "font-medium text-gray-900 dark:text-white", children: permission.label }),
                  /* @__PURE__ */ (0, import_jsx_runtime7.jsx)("p", { id: `create-${permission.id}-description`, className: "text-gray-500 dark:text-gray-400", children: permission.description })
                ] })
              ] }, permission.id)) })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime7.jsxs)(
            "button",
            {
              type: "submit",
              disabled: !isFormValid,
              className: "w-full inline-flex items-center justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(CheckIcon, { className: "h-5 w-5 mr-2" }),
                "Create Role"
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
            "button",
            {
              type: "button",
              onClick: onClose,
              className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm",
              children: "Cancel"
            }
          )
        ] })
      ] }) })
    ] });
  };
  var CreateRoleModal_default = CreateRoleModal;

  // components/roles/RoleManagementPage.tsx
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  var initialRoles = [
    {
      id: "Administrator",
      name: "Administrator",
      description: "Has full access to all system features and settings.",
      permissions: ["users:create", "users:read", "users:update", "users:delete", "users:reset_password", "finance:approve", "jobs:assign", "roles:manage", "projects:create", "projects:update", "projects:delete", "accounts:create", "accounts:update", "accounts:delete", "announcements:create", "system:admin"]
    },
    {
      id: "Manager",
      name: "Manager",
      description: "Can manage projects, assign jobs, and oversee team members.",
      // FIX: Replaced invalid 'projects:read' permission with 'projects:update' which is a valid permission.
      permissions: ["users:read", "users:update", "jobs:assign", "projects:update", "announcements:create"]
    },
    {
      id: "Technician",
      name: "Technician",
      description: "Field executive responsible for completing service jobs.",
      permissions: ["jobs:assign"]
    },
    {
      id: "Finance",
      name: "Finance",
      description: "Manages financial transactions, approvals, and reporting.",
      permissions: ["finance:approve", "users:read"]
    }
  ];
  var RoleManagementPage = () => {
    const [isEditModalOpen, setIsEditModalOpen] = (0, import_react5.useState)(false);
    const [isCreateModalOpen, setIsCreateModalOpen] = (0, import_react5.useState)(false);
    const [selectedRole, setSelectedRole] = (0, import_react5.useState)(null);
    const { roles, setRoles, hasPermission } = useAuth();
    const handleEditRole = (role) => {
      setSelectedRole(role);
      setIsEditModalOpen(true);
    };
    const handleCreateRole = (newRole) => {
      setRoles((prevRoles) => [...prevRoles, newRole]);
      setIsCreateModalOpen(false);
    };
    const handleUpdateRolePermissions = (roleId, updatedPermissions) => {
      setRoles(
        (prevRoles) => prevRoles.map(
          (role) => role.id === roleId ? { ...role, permissions: updatedPermissions } : role
        )
      );
      setIsEditModalOpen(false);
      setSelectedRole(null);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "flex justify-between items-center mb-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Roles & Permissions" }),
        hasPermission("roles:manage") && /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(
          "button",
          {
            onClick: () => setIsCreateModalOpen(true),
            className: "inline-flex items-center justify-center rounded-md border border-transparent bg-primary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(PlusIcon, { className: "h-5 w-5 mr-2" }),
              "Create New Role"
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 gap-6", children: roles.map((role) => /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "bg-white dark:bg-dark-card shadow-md rounded-lg p-6 flex flex-col justify-between", children: [
        /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "flex items-center mb-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(ShieldCheckIcon, { className: "h-8 w-8 text-primary mr-3" }),
            /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("h2", { className: "text-xl font-bold text-gray-900 dark:text-white", children: role.name })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-4 text-sm", children: role.description }),
          /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("h3", { className: "text-sm font-semibold text-gray-700 dark:text-gray-300 mb-2", children: "Permissions:" }),
            /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("div", { className: "flex flex-wrap gap-2", children: [
              role.permissions.slice(0, 5).map((permission) => /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("span", { className: "px-2 py-1 text-xs font-medium bg-primary/10 text-primary rounded-full", children: permission }, permission)),
              role.permissions.length > 5 && /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)("span", { className: "px-2 py-1 text-xs font-medium bg-gray-200 dark:bg-gray-700 text-gray-600 dark:text-gray-300 rounded-full", children: [
                "+",
                role.permissions.length - 5,
                " more"
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime8.jsx)("div", { className: "mt-6 text-right", children: hasPermission("roles:manage") && /* @__PURE__ */ (0, import_jsx_runtime8.jsxs)(
          "button",
          {
            onClick: () => handleEditRole(role),
            className: "inline-flex items-center justify-center rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 shadow-sm hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(PencilIcon, { className: "h-4 w-4 mr-2" }),
              "Edit Permissions"
            ]
          }
        ) })
      ] }, role.id)) }),
      selectedRole && /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
        EditRoleModal_default,
        {
          isOpen: isEditModalOpen,
          onClose: () => setIsEditModalOpen(false),
          role: selectedRole,
          onSave: handleUpdateRolePermissions
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(
        CreateRoleModal_default,
        {
          isOpen: isCreateModalOpen,
          onClose: () => setIsCreateModalOpen(false),
          onSave: handleCreateRole
        }
      )
    ] });
  };
  var RoleManagementPage_default = RoleManagementPage;

  // hooks/useAuth.ts
  var AuthContext = (0, import_react6.createContext)(void 0);
  var AuthProvider = ({ children }) => {
    const [allUsers, setAllUsers] = (0, import_react6.useState)([]);
    const [activeUser, setActiveUser] = (0, import_react6.useState)(null);
    const [roles, setRoles] = (0, import_react6.useState)(() => {
      try {
        const storedRoles = localStorage.getItem("tabdeel-pulse-roles");
        if (storedRoles) {
          const parsed = JSON.parse(storedRoles);
          if (Array.isArray(parsed)) return parsed;
        }
      } catch (error) {
        console.error("Failed to parse roles from localStorage", error);
      }
      return initialRoles;
    });
    (0, import_react6.useEffect)(() => {
      try {
        localStorage.setItem("tabdeel-pulse-roles", JSON.stringify(roles));
      } catch (error) {
        console.error("Failed to save roles to localStorage", error);
      }
    }, [roles]);
    const enhanceUser = (0, import_react6.useCallback)((user) => {
      const role = roles.find((r2) => r2.id === user.roleId);
      return {
        ...user,
        permissions: role ? role.permissions : [],
        financialLimit: role?.id === "Administrator" ? 1e5 : role?.id === "Manager" ? 5e4 : 0
      };
    }, [roles]);
    (0, import_react6.useEffect)(() => {
      const fetchUsers = async () => {
        try {
          const response = await fetch("/api/users");
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          const usersFromApi = await response.json();
          const enhancedUsers = usersFromApi.map((u) => enhanceUser(u));
          setAllUsers(enhancedUsers);
          const initialAdmin = enhancedUsers.find((u) => u.id === 1);
          if (initialAdmin) {
            setActiveUser(initialAdmin);
          }
        } catch (error) {
          console.error("Error fetching users:", error);
        }
      };
      fetchUsers();
    }, [enhanceUser]);
    const originalUser = (0, import_react6.useMemo)(() => allUsers.find((u) => u.id === 1) || null, [allUsers]);
    const switchUser = (0, import_react6.useCallback)((userId) => {
      const userToSwitchTo = allUsers.find((u) => u.id === userId);
      setActiveUser(userToSwitchTo || null);
    }, [allUsers]);
    const addUser = async (newUserData) => {
      try {
        const response = await fetch("/api/users", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(newUserData)
        });
        if (!response.ok) throw new Error("Failed to add user");
        const addedUserFromApi = await response.json();
        const enhancedNewUser = enhanceUser(addedUserFromApi);
        setAllUsers((prevUsers) => [enhancedNewUser, ...prevUsers]);
      } catch (error) {
        console.error("Error adding user:", error);
      }
    };
    const updateUser = async (updatedUser) => {
      try {
        const response = await fetch(`/api/users/${updatedUser.id}`, {
          method: "PUT",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify(updatedUser)
        });
        if (!response.ok) throw new Error("Failed to update user");
        const updatedUserFromApi = await response.json();
        const enhancedUser = enhanceUser(updatedUserFromApi);
        setAllUsers((users) => users.map((user) => user.id === enhancedUser.id ? enhancedUser : user));
        if (activeUser?.id === enhancedUser.id) {
          setActiveUser(enhancedUser);
        }
      } catch (error) {
        console.error("Error updating user:", error);
      }
    };
    const deleteUser = async (userId) => {
      try {
        const response = await fetch(`/api/users/${userId}`, {
          method: "DELETE"
        });
        if (!response.ok) {
          throw new Error("Failed to delete user");
        }
        setAllUsers((users) => users.filter((user) => user.id !== userId));
        if (activeUser?.id === userId && originalUser) {
          setActiveUser(originalUser);
        }
      } catch (error) {
        console.error("Error deleting user:", error);
      }
    };
    const hasPermission = (0, import_react6.useMemo)(() => (permission) => {
      if (!activeUser) return false;
      if (activeUser.permissions.includes("system:admin")) {
        return true;
      }
      return activeUser.permissions.includes(permission);
    }, [activeUser]);
    const value = {
      user: activeUser,
      originalUser,
      allUsers,
      roles,
      setRoles,
      switchUser,
      hasPermission,
      addUser,
      updateUser,
      deleteUser
    };
    return import_react6.default.createElement(AuthContext.Provider, { value }, children);
  };
  var useAuth = () => {
    const context = (0, import_react6.useContext)(AuthContext);
    if (context === void 0) {
      throw new Error("useAuth must be used within an AuthProvider");
    }
    return context;
  };

  // components/layout/Header.tsx
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  var mockNotifications = [
    { id: "1", title: "Payment Approved", description: "Payment of AED 42,500.75 to Bosch Security has been approved.", timestamp: "15m ago", read: false, icon: CheckCircleIcon, link: "finance" },
    { id: "2", title: "New Message", description: 'You have a new message from Shiraj in "Q3 Marketing Campaign".', timestamp: "1h ago", read: false, icon: ChatBubbleBottomCenterTextIcon, link: "messages" },
    { id: "3", title: "Payment Rejected", description: "Payment to Hikvision Middle East was rejected.", timestamp: "3h ago", read: false, icon: XCircleIcon, link: "finance" },
    { id: "4", title: "Upcoming Payment", description: "A recurring payment of AED 2850.50 to DEWA is due tomorrow.", timestamp: "1d ago", read: false, icon: CreditCardIcon, link: "finance" },
    { id: "5", title: "System Update", description: "The system will be down for maintenance tonight at 2 AM.", timestamp: "2d ago", read: true, icon: CreditCardIcon, link: "dashboard" }
  ];
  var Header = ({ user, tasks, onLogout, onNavigate, onToggleSidebar }) => {
    const { originalUser, allUsers, switchUser } = useAuth();
    const [dropdownOpen, setDropdownOpen] = (0, import_react7.useState)(false);
    const [notificationOpen, setNotificationOpen] = (0, import_react7.useState)(false);
    const [impersonateOpen, setImpersonateOpen] = (0, import_react7.useState)(false);
    const [notifications, setNotifications] = (0, import_react7.useState)(mockNotifications);
    const dropdownRef = (0, import_react7.useRef)(null);
    const notificationRef = (0, import_react7.useRef)(null);
    const impersonateRef = (0, import_react7.useRef)(null);
    (0, import_react7.useEffect)(() => {
      const handleClickOutside = (event) => {
        if (dropdownRef.current && !dropdownRef.current.contains(event.target)) {
          setDropdownOpen(false);
        }
        if (notificationRef.current && !notificationRef.current.contains(event.target)) {
          setNotificationOpen(false);
        }
        if (impersonateRef.current && !impersonateRef.current.contains(event.target)) {
          setImpersonateOpen(false);
        }
      };
      document.addEventListener("mousedown", handleClickOutside);
      return () => document.removeEventListener("mousedown", handleClickOutside);
    }, []);
    const closeAllDropdowns = () => {
      setDropdownOpen(false);
      setNotificationOpen(false);
      setImpersonateOpen(false);
    };
    const toggleUserDropdown = () => {
      const isOpen = dropdownOpen;
      closeAllDropdowns();
      setDropdownOpen(!isOpen);
    };
    const toggleNotificationDropdown = () => {
      const isOpen = notificationOpen;
      closeAllDropdowns();
      setNotificationOpen(!isOpen);
    };
    const toggleImpersonateDropdown = () => {
      const isOpen = impersonateOpen;
      closeAllDropdowns();
      setImpersonateOpen(!isOpen);
    };
    const handleMarkAllRead = () => {
      setNotifications(notifications.map((n) => ({ ...n, read: true })));
    };
    const handleNotificationClick = (notification) => {
      if (!notification.read) {
        setNotifications(
          (prev) => prev.map((n) => n.id === notification.id ? { ...n, read: true } : n)
        );
      }
      onNavigate(notification.link);
      setNotificationOpen(false);
    };
    const unreadCount = notifications.filter((n) => !n.read).length;
    const incompleteTasksCount = tasks.filter((t) => !t.isCompleted).length;
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("header", { className: "h-20 flex-shrink-0 flex items-center justify-between px-4 sm:px-6 bg-white dark:bg-dark-card border-b border-gray-200 dark:border-gray-700", children: [
      /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "flex items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
          "button",
          {
            onClick: onToggleSidebar,
            className: "lg:hidden text-gray-500 dark:text-gray-400 hover:text-primary dark:hover:text-white mr-4",
            "aria-label": "Toggle sidebar",
            children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(Bars3Icon, { className: "h-6 w-6" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "relative hidden md:block", children: [
          /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(MagnifyingGlassIcon, { className: "absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-gray-400" }),
          /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
            "input",
            {
              type: "text",
              placeholder: "Search...",
              className: "w-64 pl-10 pr-4 py-2 rounded-lg bg-gray-100 dark:bg-gray-700 border border-transparent focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent"
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "flex items-center space-x-3 sm:space-x-6", children: [
        originalUser && user?.id === originalUser.id && /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "relative", ref: impersonateRef, children: [
          /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
            "button",
            {
              onClick: toggleImpersonateDropdown,
              className: "text-gray-500 dark:text-gray-400 hover:text-primary dark:hover:text-white",
              "aria-label": "Switch user view",
              children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(SwitchHorizontalIcon, { className: "h-6 w-6" })
            }
          ),
          impersonateOpen && /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "absolute right-0 mt-2 w-72 origin-top-right rounded-md bg-white dark:bg-dark-card shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-10", children: [
            /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "p-2 border-b border-gray-200 dark:border-gray-700", children: [
              /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("h3", { className: "text-sm font-semibold text-gray-900 dark:text-white px-2", children: "Switch User View" }),
              /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400 px-2", children: "Test application as another user." })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("ul", { className: "py-1 max-h-80 overflow-y-auto", children: allUsers.map((testUser) => /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(
              "button",
              {
                onClick: () => {
                  switchUser(testUser.id);
                  setImpersonateOpen(false);
                },
                className: "w-full text-left flex items-center justify-between px-3 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "flex items-center", children: [
                    /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("img", { src: testUser.avatarUrl, alt: testUser.name, className: "h-8 w-8 rounded-full object-cover mr-3" }),
                    /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { className: "font-medium", children: testUser.name }),
                      /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: testUser.role })
                    ] })
                  ] }),
                  user.id === testUser.id && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(CheckIcon, { className: "h-5 w-5 text-primary" })
                ]
              }
            ) }, testUser.id)) })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "relative", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(
          "button",
          {
            onClick: () => onNavigate("tasks"),
            className: "relative text-gray-500 dark:text-gray-400 hover:text-primary dark:hover:text-white",
            "aria-label": `Tasks (${incompleteTasksCount} incomplete)`,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ClipboardDocumentCheckIcon, { className: "h-6 w-6" }),
              incompleteTasksCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { className: "absolute -top-1 -right-1 flex h-4 w-4", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { className: "relative inline-flex rounded-full h-4 w-4 bg-primary justify-center items-center text-xs text-white", children: incompleteTasksCount }) })
            ]
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "relative", ref: notificationRef, children: [
          /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(
            "button",
            {
              onClick: toggleNotificationDropdown,
              className: "relative text-gray-500 dark:text-gray-400 hover:text-primary dark:hover:text-white",
              "aria-label": `Notifications (${unreadCount} unread)`,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(BellIcon, { className: "h-6 w-6" }),
                unreadCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("span", { className: "absolute -top-1 -right-1 flex h-4 w-4", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { className: "animate-ping absolute inline-flex h-full w-full rounded-full bg-secondary opacity-75" }),
                  /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("span", { className: "relative inline-flex rounded-full h-4 w-4 bg-secondary justify-center items-center text-xs text-white", children: unreadCount })
                ] })
              ]
            }
          ),
          notificationOpen && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
            NotificationDropdown_default,
            {
              notifications,
              onMarkAllRead: handleMarkAllRead,
              onNotificationClick: handleNotificationClick
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "relative", ref: dropdownRef, children: [
          /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("button", { onClick: toggleUserDropdown, className: "flex items-center space-x-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("img", { src: user.avatarUrl, alt: user.name, className: "h-10 w-10 rounded-full object-cover" }),
            /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "text-left hidden md:block", children: [
              /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { className: "font-semibold text-sm text-gray-800 dark:text-gray-200", children: user.name }),
              /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: user.role })
            ] })
          ] }),
          dropdownOpen && /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("div", { className: "absolute right-0 mt-2 w-56 origin-top-right rounded-md bg-white dark:bg-dark-card shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-10", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "py-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)("div", { className: "px-4 py-3 border-b border-gray-200 dark:border-gray-600", children: [
              /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { className: "text-sm font-medium text-gray-900 dark:text-white", children: user.name }),
              /* @__PURE__ */ (0, import_jsx_runtime9.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400 truncate", children: user.email })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(
              "button",
              {
                onClick: () => {
                  onNavigate("profile");
                  setDropdownOpen(false);
                },
                className: "w-full text-left flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(UserCircleIcon, { className: "h-5 w-5 mr-3" }),
                  "Profile"
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime9.jsxs)(
              "button",
              {
                onClick: onLogout,
                className: "w-full text-left flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(ArrowRightOnRectangleIcon, { className: "h-5 w-5 mr-3" }),
                  "Sign out"
                ]
              }
            )
          ] }) })
        ] })
      ] })
    ] });
  };
  var Header_default = Header;

  // components/dashboard/DashboardPage.tsx
  var import_react55 = __toESM(require_react());

  // components/dashboard/KpiCard.tsx
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var KpiCard = ({ kpi, onClick }) => {
    const isIncrease = kpi.changeType === "increase";
    const changeColor = isIncrease ? "text-green-500" : "text-red-500";
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      "button",
      {
        onClick,
        disabled: !kpi.link,
        className: "bg-white dark:bg-dark-card p-6 rounded-lg shadow-md flex items-start justify-between w-full text-left focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2 transition-all hover:shadow-lg hover:-translate-y-1 disabled:opacity-75 disabled:cursor-not-allowed disabled:transform-none",
        children: /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("p", { className: "text-sm font-medium text-gray-500 dark:text-gray-400", children: kpi.title }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("p", { className: "text-3xl font-bold text-gray-800 dark:text-white mt-1", children: kpi.value }),
          /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("div", { className: "flex items-center mt-2 text-sm", children: [
            /* @__PURE__ */ (0, import_jsx_runtime10.jsxs)("span", { className: `flex items-center font-semibold ${changeColor}`, children: [
              isIncrease ? /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ArrowUpIcon, { className: "h-4 w-4 mr-1" }) : /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(ArrowDownIcon, { className: "h-4 w-4 mr-1" }),
              kpi.change
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime10.jsx)("span", { className: "ml-2 text-gray-500 dark:text-gray-400", children: "vs last month" })
          ] })
        ] })
      }
    );
  };
  var KpiCard_default = KpiCard;

  // node_modules/recharts/es6/container/Surface.js
  var React8 = __toESM(require_react());
  var import_react10 = __toESM(require_react());

  // node_modules/clsx/dist/clsx.mjs
  function r(e) {
    var t, f, n = "";
    if ("string" == typeof e || "number" == typeof e) n += e;
    else if ("object" == typeof e) if (Array.isArray(e)) {
      var o = e.length;
      for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
    } else for (f in e) e[f] && (n && (n += " "), n += f);
    return n;
  }
  function clsx() {
    for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++) (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
    return n;
  }

  // node_modules/recharts/es6/util/ReactUtils.js
  var import_get2 = __toESM(require_get2());
  var import_react9 = __toESM(require_react());
  var import_react_is = __toESM(require_react_is());

  // node_modules/recharts/es6/util/DataUtils.js
  var import_get = __toESM(require_get2());
  var mathSign = (value) => {
    if (value === 0) {
      return 0;
    }
    if (value > 0) {
      return 1;
    }
    return -1;
  };
  var isNan = (value) => {
    return typeof value == "number" && value != +value;
  };
  var isPercent = (value) => typeof value === "string" && value.indexOf("%") === value.length - 1;
  var isNumber = (value) => (typeof value === "number" || value instanceof Number) && !isNan(value);
  var isNumOrStr = (value) => isNumber(value) || typeof value === "string";
  var idCounter = 0;
  var uniqueId = (prefix2) => {
    var id = ++idCounter;
    return "".concat(prefix2 || "").concat(id);
  };
  var getPercentValue = function getPercentValue2(percent, totalValue) {
    var defaultValue = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 0;
    var validate = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;
    if (!isNumber(percent) && typeof percent !== "string") {
      return defaultValue;
    }
    var value;
    if (isPercent(percent)) {
      if (totalValue == null) {
        return defaultValue;
      }
      var index = percent.indexOf("%");
      value = totalValue * parseFloat(percent.slice(0, index)) / 100;
    } else {
      value = +percent;
    }
    if (isNan(value)) {
      value = defaultValue;
    }
    if (validate && totalValue != null && value > totalValue) {
      value = totalValue;
    }
    return value;
  };
  var hasDuplicate = (ary) => {
    if (!Array.isArray(ary)) {
      return false;
    }
    var len = ary.length;
    var cache = {};
    for (var i = 0; i < len; i++) {
      if (!cache[ary[i]]) {
        cache[ary[i]] = true;
      } else {
        return true;
      }
    }
    return false;
  };
  function interpolate(start, end, t) {
    if (isNumber(start) && isNumber(end)) {
      return start + t * (end - start);
    }
    return end;
  }
  function findEntryInArray(ary, specifiedKey, specifiedValue) {
    if (!ary || !ary.length) {
      return void 0;
    }
    return ary.find((entry) => entry && (typeof specifiedKey === "function" ? specifiedKey(entry) : (0, import_get.default)(entry, specifiedKey)) === specifiedValue);
  }
  var isNullish = (value) => {
    return value === null || typeof value === "undefined";
  };
  var upperFirst = (value) => {
    if (isNullish(value)) {
      return value;
    }
    return "".concat(value.charAt(0).toUpperCase()).concat(value.slice(1));
  };

  // node_modules/recharts/es6/util/types.js
  var import_react8 = __toESM(require_react());

  // node_modules/recharts/es6/util/excludeEventProps.js
  var EventKeys = ["dangerouslySetInnerHTML", "onCopy", "onCopyCapture", "onCut", "onCutCapture", "onPaste", "onPasteCapture", "onCompositionEnd", "onCompositionEndCapture", "onCompositionStart", "onCompositionStartCapture", "onCompositionUpdate", "onCompositionUpdateCapture", "onFocus", "onFocusCapture", "onBlur", "onBlurCapture", "onChange", "onChangeCapture", "onBeforeInput", "onBeforeInputCapture", "onInput", "onInputCapture", "onReset", "onResetCapture", "onSubmit", "onSubmitCapture", "onInvalid", "onInvalidCapture", "onLoad", "onLoadCapture", "onError", "onErrorCapture", "onKeyDown", "onKeyDownCapture", "onKeyPress", "onKeyPressCapture", "onKeyUp", "onKeyUpCapture", "onAbort", "onAbortCapture", "onCanPlay", "onCanPlayCapture", "onCanPlayThrough", "onCanPlayThroughCapture", "onDurationChange", "onDurationChangeCapture", "onEmptied", "onEmptiedCapture", "onEncrypted", "onEncryptedCapture", "onEnded", "onEndedCapture", "onLoadedData", "onLoadedDataCapture", "onLoadedMetadata", "onLoadedMetadataCapture", "onLoadStart", "onLoadStartCapture", "onPause", "onPauseCapture", "onPlay", "onPlayCapture", "onPlaying", "onPlayingCapture", "onProgress", "onProgressCapture", "onRateChange", "onRateChangeCapture", "onSeeked", "onSeekedCapture", "onSeeking", "onSeekingCapture", "onStalled", "onStalledCapture", "onSuspend", "onSuspendCapture", "onTimeUpdate", "onTimeUpdateCapture", "onVolumeChange", "onVolumeChangeCapture", "onWaiting", "onWaitingCapture", "onAuxClick", "onAuxClickCapture", "onClick", "onClickCapture", "onContextMenu", "onContextMenuCapture", "onDoubleClick", "onDoubleClickCapture", "onDrag", "onDragCapture", "onDragEnd", "onDragEndCapture", "onDragEnter", "onDragEnterCapture", "onDragExit", "onDragExitCapture", "onDragLeave", "onDragLeaveCapture", "onDragOver", "onDragOverCapture", "onDragStart", "onDragStartCapture", "onDrop", "onDropCapture", "onMouseDown", "onMouseDownCapture", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseMoveCapture", "onMouseOut", "onMouseOutCapture", "onMouseOver", "onMouseOverCapture", "onMouseUp", "onMouseUpCapture", "onSelect", "onSelectCapture", "onTouchCancel", "onTouchCancelCapture", "onTouchEnd", "onTouchEndCapture", "onTouchMove", "onTouchMoveCapture", "onTouchStart", "onTouchStartCapture", "onPointerDown", "onPointerDownCapture", "onPointerMove", "onPointerMoveCapture", "onPointerUp", "onPointerUpCapture", "onPointerCancel", "onPointerCancelCapture", "onPointerEnter", "onPointerEnterCapture", "onPointerLeave", "onPointerLeaveCapture", "onPointerOver", "onPointerOverCapture", "onPointerOut", "onPointerOutCapture", "onGotPointerCapture", "onGotPointerCaptureCapture", "onLostPointerCapture", "onLostPointerCaptureCapture", "onScroll", "onScrollCapture", "onWheel", "onWheelCapture", "onAnimationStart", "onAnimationStartCapture", "onAnimationEnd", "onAnimationEndCapture", "onAnimationIteration", "onAnimationIterationCapture", "onTransitionEnd", "onTransitionEndCapture"];
  function isEventKey(key) {
    if (typeof key !== "string") {
      return false;
    }
    var allowedEventKeys = EventKeys;
    return allowedEventKeys.includes(key);
  }

  // node_modules/recharts/es6/util/types.js
  var SVGContainerPropKeys = ["viewBox", "children"];
  var PolyElementKeys = ["points", "pathLength"];
  var FilteredElementKeyMap = {
    svg: SVGContainerPropKeys,
    polygon: PolyElementKeys,
    polyline: PolyElementKeys
  };
  var adaptEventHandlers = (props, newHandler) => {
    if (!props || typeof props === "function" || typeof props === "boolean") {
      return null;
    }
    var inputProps = props;
    if (/* @__PURE__ */ (0, import_react8.isValidElement)(props)) {
      inputProps = props.props;
    }
    if (typeof inputProps !== "object" && typeof inputProps !== "function") {
      return null;
    }
    var out = {};
    Object.keys(inputProps).forEach((key) => {
      if (isEventKey(key)) {
        out[key] = newHandler || ((e) => inputProps[key](inputProps, e));
      }
    });
    return out;
  };
  var getEventHandlerOfChild = (originalHandler, data, index) => (e) => {
    originalHandler(data, index, e);
    return null;
  };
  var adaptEventsOfChild = (props, data, index) => {
    if (props === null || typeof props !== "object" && typeof props !== "function") {
      return null;
    }
    var out = null;
    Object.keys(props).forEach((key) => {
      var item = props[key];
      if (isEventKey(key) && typeof item === "function") {
        if (!out) out = {};
        out[key] = getEventHandlerOfChild(item, data, index);
      }
    });
    return out;
  };

  // node_modules/recharts/es6/util/svgPropertiesNoEvents.js
  var SVGElementPropKeys = [
    "aria-activedescendant",
    "aria-atomic",
    "aria-autocomplete",
    "aria-busy",
    "aria-checked",
    "aria-colcount",
    "aria-colindex",
    "aria-colspan",
    "aria-controls",
    "aria-current",
    "aria-describedby",
    "aria-details",
    "aria-disabled",
    "aria-errormessage",
    "aria-expanded",
    "aria-flowto",
    "aria-haspopup",
    "aria-hidden",
    "aria-invalid",
    "aria-keyshortcuts",
    "aria-label",
    "aria-labelledby",
    "aria-level",
    "aria-live",
    "aria-modal",
    "aria-multiline",
    "aria-multiselectable",
    "aria-orientation",
    "aria-owns",
    "aria-placeholder",
    "aria-posinset",
    "aria-pressed",
    "aria-readonly",
    "aria-relevant",
    "aria-required",
    "aria-roledescription",
    "aria-rowcount",
    "aria-rowindex",
    "aria-rowspan",
    "aria-selected",
    "aria-setsize",
    "aria-sort",
    "aria-valuemax",
    "aria-valuemin",
    "aria-valuenow",
    "aria-valuetext",
    "className",
    "color",
    "height",
    "id",
    "lang",
    "max",
    "media",
    "method",
    "min",
    "name",
    "style",
    /*
     * removed 'type' SVGElementPropKey because we do not currently use any SVG elements
     * that can use it, and it conflicts with the recharts prop 'type'
     * https://github.com/recharts/recharts/pull/3327
     * https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/type
     */
    // 'type',
    "target",
    "width",
    "role",
    "tabIndex",
    "accentHeight",
    "accumulate",
    "additive",
    "alignmentBaseline",
    "allowReorder",
    "alphabetic",
    "amplitude",
    "arabicForm",
    "ascent",
    "attributeName",
    "attributeType",
    "autoReverse",
    "azimuth",
    "baseFrequency",
    "baselineShift",
    "baseProfile",
    "bbox",
    "begin",
    "bias",
    "by",
    "calcMode",
    "capHeight",
    "clip",
    "clipPath",
    "clipPathUnits",
    "clipRule",
    "colorInterpolation",
    "colorInterpolationFilters",
    "colorProfile",
    "colorRendering",
    "contentScriptType",
    "contentStyleType",
    "cursor",
    "cx",
    "cy",
    "d",
    "decelerate",
    "descent",
    "diffuseConstant",
    "direction",
    "display",
    "divisor",
    "dominantBaseline",
    "dur",
    "dx",
    "dy",
    "edgeMode",
    "elevation",
    "enableBackground",
    "end",
    "exponent",
    "externalResourcesRequired",
    "fill",
    "fillOpacity",
    "fillRule",
    "filter",
    "filterRes",
    "filterUnits",
    "floodColor",
    "floodOpacity",
    "focusable",
    "fontFamily",
    "fontSize",
    "fontSizeAdjust",
    "fontStretch",
    "fontStyle",
    "fontVariant",
    "fontWeight",
    "format",
    "from",
    "fx",
    "fy",
    "g1",
    "g2",
    "glyphName",
    "glyphOrientationHorizontal",
    "glyphOrientationVertical",
    "glyphRef",
    "gradientTransform",
    "gradientUnits",
    "hanging",
    "horizAdvX",
    "horizOriginX",
    "href",
    "ideographic",
    "imageRendering",
    "in2",
    "in",
    "intercept",
    "k1",
    "k2",
    "k3",
    "k4",
    "k",
    "kernelMatrix",
    "kernelUnitLength",
    "kerning",
    "keyPoints",
    "keySplines",
    "keyTimes",
    "lengthAdjust",
    "letterSpacing",
    "lightingColor",
    "limitingConeAngle",
    "local",
    "markerEnd",
    "markerHeight",
    "markerMid",
    "markerStart",
    "markerUnits",
    "markerWidth",
    "mask",
    "maskContentUnits",
    "maskUnits",
    "mathematical",
    "mode",
    "numOctaves",
    "offset",
    "opacity",
    "operator",
    "order",
    "orient",
    "orientation",
    "origin",
    "overflow",
    "overlinePosition",
    "overlineThickness",
    "paintOrder",
    "panose1",
    "pathLength",
    "patternContentUnits",
    "patternTransform",
    "patternUnits",
    "pointerEvents",
    "pointsAtX",
    "pointsAtY",
    "pointsAtZ",
    "preserveAlpha",
    "preserveAspectRatio",
    "primitiveUnits",
    "r",
    "radius",
    "refX",
    "refY",
    "renderingIntent",
    "repeatCount",
    "repeatDur",
    "requiredExtensions",
    "requiredFeatures",
    "restart",
    "result",
    "rotate",
    "rx",
    "ry",
    "seed",
    "shapeRendering",
    "slope",
    "spacing",
    "specularConstant",
    "specularExponent",
    "speed",
    "spreadMethod",
    "startOffset",
    "stdDeviation",
    "stemh",
    "stemv",
    "stitchTiles",
    "stopColor",
    "stopOpacity",
    "strikethroughPosition",
    "strikethroughThickness",
    "string",
    "stroke",
    "strokeDasharray",
    "strokeDashoffset",
    "strokeLinecap",
    "strokeLinejoin",
    "strokeMiterlimit",
    "strokeOpacity",
    "strokeWidth",
    "surfaceScale",
    "systemLanguage",
    "tableValues",
    "targetX",
    "targetY",
    "textAnchor",
    "textDecoration",
    "textLength",
    "textRendering",
    "to",
    "transform",
    "u1",
    "u2",
    "underlinePosition",
    "underlineThickness",
    "unicode",
    "unicodeBidi",
    "unicodeRange",
    "unitsPerEm",
    "vAlphabetic",
    "values",
    "vectorEffect",
    "version",
    "vertAdvY",
    "vertOriginX",
    "vertOriginY",
    "vHanging",
    "vIdeographic",
    "viewTarget",
    "visibility",
    "vMathematical",
    "widths",
    "wordSpacing",
    "writingMode",
    "x1",
    "x2",
    "x",
    "xChannelSelector",
    "xHeight",
    "xlinkActuate",
    "xlinkArcrole",
    "xlinkHref",
    "xlinkRole",
    "xlinkShow",
    "xlinkTitle",
    "xlinkType",
    "xmlBase",
    "xmlLang",
    "xmlns",
    "xmlnsXlink",
    "xmlSpace",
    "y1",
    "y2",
    "y",
    "yChannelSelector",
    "z",
    "zoomAndPan",
    "ref",
    "key",
    "angle"
  ];
  function isSvgElementPropKey(key) {
    if (typeof key !== "string") {
      return false;
    }
    var allowedSvgKeys = SVGElementPropKeys;
    return allowedSvgKeys.includes(key);
  }
  function svgPropertiesNoEvents(obj) {
    var filteredEntries = Object.entries(obj).filter((_ref2) => {
      var [key] = _ref2;
      return isSvgElementPropKey(key);
    });
    return Object.fromEntries(filteredEntries);
  }

  // node_modules/recharts/es6/util/ReactUtils.js
  var getDisplayName = (Comp) => {
    if (typeof Comp === "string") {
      return Comp;
    }
    if (!Comp) {
      return "";
    }
    return Comp.displayName || Comp.name || "Component";
  };
  var lastChildren = null;
  var lastResult = null;
  var toArray = (children) => {
    if (children === lastChildren && Array.isArray(lastResult)) {
      return lastResult;
    }
    var result = [];
    import_react9.Children.forEach(children, (child) => {
      if (isNullish(child)) return;
      if ((0, import_react_is.isFragment)(child)) {
        result = result.concat(toArray(child.props.children));
      } else {
        result.push(child);
      }
    });
    lastResult = result;
    lastChildren = children;
    return result;
  };
  function findAllByType(children, type) {
    var result = [];
    var types = [];
    if (Array.isArray(type)) {
      types = type.map((t) => getDisplayName(t));
    } else {
      types = [getDisplayName(type)];
    }
    toArray(children).forEach((child) => {
      var childType = (0, import_get2.default)(child, "type.displayName") || (0, import_get2.default)(child, "type.name");
      if (types.indexOf(childType) !== -1) {
        result.push(child);
      }
    });
    return result;
  }
  var isValidSpreadableProp = (property, key, includeEvents, svgElementType) => {
    var _ref2;
    if (typeof key === "symbol" || typeof key === "number") {
      return true;
    }
    var matchingElementTypeKeys = (_ref2 = svgElementType && (FilteredElementKeyMap === null || FilteredElementKeyMap === void 0 ? void 0 : FilteredElementKeyMap[svgElementType])) !== null && _ref2 !== void 0 ? _ref2 : [];
    var isDataAttribute = key.startsWith("data-");
    var isSpecificSvgAttribute = typeof property !== "function" && (Boolean(svgElementType) && matchingElementTypeKeys.includes(key) || isSvgElementPropKey(key));
    var isEventAttribute = Boolean(includeEvents) && isEventKey(key);
    return isDataAttribute || isSpecificSvgAttribute || isEventAttribute;
  };
  var filterProps = (props, includeEvents, svgElementType) => {
    if (!props || typeof props === "function" || typeof props === "boolean") {
      return null;
    }
    var inputProps = props;
    if (/* @__PURE__ */ (0, import_react9.isValidElement)(props)) {
      inputProps = props.props;
    }
    if (typeof inputProps !== "object" && typeof inputProps !== "function") {
      return null;
    }
    var out = {};
    Object.keys(inputProps).forEach((key) => {
      var _inputProps;
      if (isValidSpreadableProp((_inputProps = inputProps) === null || _inputProps === void 0 ? void 0 : _inputProps[key], key, includeEvents, svgElementType)) {
        out[key] = inputProps[key];
      }
    });
    return out;
  };

  // node_modules/recharts/es6/container/Surface.js
  var _excluded = ["children", "width", "height", "viewBox", "className", "style", "title", "desc"];
  function _extends() {
    return _extends = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends.apply(null, arguments);
  }
  function _objectWithoutProperties(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  var Surface = /* @__PURE__ */ (0, import_react10.forwardRef)((props, ref) => {
    var {
      children,
      width,
      height,
      viewBox,
      className,
      style,
      title,
      desc
    } = props, others = _objectWithoutProperties(props, _excluded);
    var svgView = viewBox || {
      width,
      height,
      x: 0,
      y: 0
    };
    var layerClass = clsx("recharts-surface", className);
    return /* @__PURE__ */ React8.createElement("svg", _extends({}, filterProps(others, true, "svg"), {
      className: layerClass,
      width,
      height,
      style,
      viewBox: "".concat(svgView.x, " ").concat(svgView.y, " ").concat(svgView.width, " ").concat(svgView.height),
      ref
    }), /* @__PURE__ */ React8.createElement("title", null, title), /* @__PURE__ */ React8.createElement("desc", null, desc), children);
  });

  // node_modules/recharts/es6/container/Layer.js
  var React9 = __toESM(require_react());
  var _excluded2 = ["children", "className"];
  function _extends2() {
    return _extends2 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends2.apply(null, arguments);
  }
  function _objectWithoutProperties2(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose2(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose2(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  var Layer = /* @__PURE__ */ React9.forwardRef((props, ref) => {
    var {
      children,
      className
    } = props, others = _objectWithoutProperties2(props, _excluded2);
    var layerClass = clsx("recharts-layer", className);
    return /* @__PURE__ */ React9.createElement("g", _extends2({
      className: layerClass
    }, filterProps(others, true), {
      ref
    }), children);
  });

  // node_modules/recharts/es6/component/Legend.js
  var React13 = __toESM(require_react());
  var import_react19 = __toESM(require_react());
  var import_react_dom = __toESM(require_react_dom());

  // node_modules/recharts/es6/context/legendPortalContext.js
  var import_react11 = __toESM(require_react());
  var LegendPortalContext = /* @__PURE__ */ (0, import_react11.createContext)(null);
  var useLegendPortal = () => (0, import_react11.useContext)(LegendPortalContext);

  // node_modules/recharts/es6/component/DefaultLegendContent.js
  var React11 = __toESM(require_react());
  var import_react12 = __toESM(require_react());

  // node_modules/recharts/es6/shape/Symbols.js
  var React10 = __toESM(require_react());

  // node_modules/d3-shape/src/constant.js
  function constant_default(x2) {
    return function constant() {
      return x2;
    };
  }

  // node_modules/d3-shape/src/math.js
  var cos = Math.cos;
  var sin = Math.sin;
  var sqrt = Math.sqrt;
  var pi = Math.PI;
  var halfPi = pi / 2;
  var tau = 2 * pi;

  // node_modules/d3-path/src/path.js
  var pi2 = Math.PI;
  var tau2 = 2 * pi2;
  var epsilon = 1e-6;
  var tauEpsilon = tau2 - epsilon;
  function append(strings) {
    this._ += strings[0];
    for (let i = 1, n = strings.length; i < n; ++i) {
      this._ += arguments[i] + strings[i];
    }
  }
  function appendRound(digits) {
    let d = Math.floor(digits);
    if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);
    if (d > 15) return append;
    const k2 = 10 ** d;
    return function(strings) {
      this._ += strings[0];
      for (let i = 1, n = strings.length; i < n; ++i) {
        this._ += Math.round(arguments[i] * k2) / k2 + strings[i];
      }
    };
  }
  var Path = class {
    constructor(digits) {
      this._x0 = this._y0 = // start of current subpath
      this._x1 = this._y1 = null;
      this._ = "";
      this._append = digits == null ? append : appendRound(digits);
    }
    moveTo(x2, y2) {
      this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}`;
    }
    closePath() {
      if (this._x1 !== null) {
        this._x1 = this._x0, this._y1 = this._y0;
        this._append`Z`;
      }
    }
    lineTo(x2, y2) {
      this._append`L${this._x1 = +x2},${this._y1 = +y2}`;
    }
    quadraticCurveTo(x1, y1, x2, y2) {
      this._append`Q${+x1},${+y1},${this._x1 = +x2},${this._y1 = +y2}`;
    }
    bezierCurveTo(x1, y1, x2, y2, x3, y3) {
      this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x3},${this._y1 = +y3}`;
    }
    arcTo(x1, y1, x2, y2, r2) {
      x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r2 = +r2;
      if (r2 < 0) throw new Error(`negative radius: ${r2}`);
      let x0 = this._x1, y0 = this._y1, x21 = x2 - x1, y21 = y2 - y1, x01 = x0 - x1, y01 = y0 - y1, l01_2 = x01 * x01 + y01 * y01;
      if (this._x1 === null) {
        this._append`M${this._x1 = x1},${this._y1 = y1}`;
      } else if (!(l01_2 > epsilon)) ;
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r2) {
        this._append`L${this._x1 = x1},${this._y1 = y1}`;
      } else {
        let x20 = x2 - x0, y20 = y2 - y0, l21_2 = x21 * x21 + y21 * y21, l20_2 = x20 * x20 + y20 * y20, l21 = Math.sqrt(l21_2), l01 = Math.sqrt(l01_2), l = r2 * Math.tan((pi2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2), t01 = l / l01, t21 = l / l21;
        if (Math.abs(t01 - 1) > epsilon) {
          this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;
        }
        this._append`A${r2},${r2},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;
      }
    }
    arc(x2, y2, r2, a0, a1, ccw) {
      x2 = +x2, y2 = +y2, r2 = +r2, ccw = !!ccw;
      if (r2 < 0) throw new Error(`negative radius: ${r2}`);
      let dx = r2 * Math.cos(a0), dy = r2 * Math.sin(a0), x0 = x2 + dx, y0 = y2 + dy, cw = 1 ^ ccw, da = ccw ? a0 - a1 : a1 - a0;
      if (this._x1 === null) {
        this._append`M${x0},${y0}`;
      } else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
        this._append`L${x0},${y0}`;
      }
      if (!r2) return;
      if (da < 0) da = da % tau2 + tau2;
      if (da > tauEpsilon) {
        this._append`A${r2},${r2},0,1,${cw},${x2 - dx},${y2 - dy}A${r2},${r2},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;
      } else if (da > epsilon) {
        this._append`A${r2},${r2},0,${+(da >= pi2)},${cw},${this._x1 = x2 + r2 * Math.cos(a1)},${this._y1 = y2 + r2 * Math.sin(a1)}`;
      }
    }
    rect(x2, y2, w, h) {
      this._append`M${this._x0 = this._x1 = +x2},${this._y0 = this._y1 = +y2}h${w = +w}v${+h}h${-w}Z`;
    }
    toString() {
      return this._;
    }
  };
  function path() {
    return new Path();
  }
  path.prototype = Path.prototype;

  // node_modules/d3-shape/src/path.js
  function withPath(shape) {
    let digits = 3;
    shape.digits = function(_) {
      if (!arguments.length) return digits;
      if (_ == null) {
        digits = null;
      } else {
        const d = Math.floor(_);
        if (!(d >= 0)) throw new RangeError(`invalid digits: ${_}`);
        digits = d;
      }
      return shape;
    };
    return () => new Path(digits);
  }

  // node_modules/d3-shape/src/array.js
  var slice = Array.prototype.slice;
  function array_default(x2) {
    return typeof x2 === "object" && "length" in x2 ? x2 : Array.from(x2);
  }

  // node_modules/d3-shape/src/curve/linear.js
  function Linear(context) {
    this._context = context;
  }
  Linear.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
        // falls through
        default:
          this._context.lineTo(x2, y2);
          break;
      }
    }
  };
  function linear_default(context) {
    return new Linear(context);
  }

  // node_modules/d3-shape/src/point.js
  function x(p) {
    return p[0];
  }
  function y(p) {
    return p[1];
  }

  // node_modules/d3-shape/src/line.js
  function line_default(x2, y2) {
    var defined2 = constant_default(true), context = null, curve = linear_default, output = null, path2 = withPath(line);
    x2 = typeof x2 === "function" ? x2 : x2 === void 0 ? x : constant_default(x2);
    y2 = typeof y2 === "function" ? y2 : y2 === void 0 ? y : constant_default(y2);
    function line(data) {
      var i, n = (data = array_default(data)).length, d, defined0 = false, buffer;
      if (context == null) output = curve(buffer = path2());
      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined2(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) output.lineStart();
          else output.lineEnd();
        }
        if (defined0) output.point(+x2(d, i, data), +y2(d, i, data));
      }
      if (buffer) return output = null, buffer + "" || null;
    }
    line.x = function(_) {
      return arguments.length ? (x2 = typeof _ === "function" ? _ : constant_default(+_), line) : x2;
    };
    line.y = function(_) {
      return arguments.length ? (y2 = typeof _ === "function" ? _ : constant_default(+_), line) : y2;
    };
    line.defined = function(_) {
      return arguments.length ? (defined2 = typeof _ === "function" ? _ : constant_default(!!_), line) : defined2;
    };
    line.curve = function(_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
    };
    line.context = function(_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
    };
    return line;
  }

  // node_modules/d3-shape/src/area.js
  function area_default(x0, y0, y1) {
    var x1 = null, defined2 = constant_default(true), context = null, curve = linear_default, output = null, path2 = withPath(area);
    x0 = typeof x0 === "function" ? x0 : x0 === void 0 ? x : constant_default(+x0);
    y0 = typeof y0 === "function" ? y0 : y0 === void 0 ? constant_default(0) : constant_default(+y0);
    y1 = typeof y1 === "function" ? y1 : y1 === void 0 ? y : constant_default(+y1);
    function area(data) {
      var i, j, k2, n = (data = array_default(data)).length, d, defined0 = false, buffer, x0z = new Array(n), y0z = new Array(n);
      if (context == null) output = curve(buffer = path2());
      for (i = 0; i <= n; ++i) {
        if (!(i < n && defined2(d = data[i], i, data)) === defined0) {
          if (defined0 = !defined0) {
            j = i;
            output.areaStart();
            output.lineStart();
          } else {
            output.lineEnd();
            output.lineStart();
            for (k2 = i - 1; k2 >= j; --k2) {
              output.point(x0z[k2], y0z[k2]);
            }
            output.lineEnd();
            output.areaEnd();
          }
        }
        if (defined0) {
          x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
        }
      }
      if (buffer) return output = null, buffer + "" || null;
    }
    function arealine() {
      return line_default().defined(defined2).curve(curve).context(context);
    }
    area.x = function(_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default(+_), x1 = null, area) : x0;
    };
    area.x0 = function(_) {
      return arguments.length ? (x0 = typeof _ === "function" ? _ : constant_default(+_), area) : x0;
    };
    area.x1 = function(_) {
      return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), area) : x1;
    };
    area.y = function(_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default(+_), y1 = null, area) : y0;
    };
    area.y0 = function(_) {
      return arguments.length ? (y0 = typeof _ === "function" ? _ : constant_default(+_), area) : y0;
    };
    area.y1 = function(_) {
      return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant_default(+_), area) : y1;
    };
    area.lineX0 = area.lineY0 = function() {
      return arealine().x(x0).y(y0);
    };
    area.lineY1 = function() {
      return arealine().x(x0).y(y1);
    };
    area.lineX1 = function() {
      return arealine().x(x1).y(y0);
    };
    area.defined = function(_) {
      return arguments.length ? (defined2 = typeof _ === "function" ? _ : constant_default(!!_), area) : defined2;
    };
    area.curve = function(_) {
      return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
    };
    area.context = function(_) {
      return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
    };
    return area;
  }

  // node_modules/d3-shape/src/curve/bump.js
  var Bump = class {
    constructor(context, x2) {
      this._context = context;
      this._x = x2;
    }
    areaStart() {
      this._line = 0;
    }
    areaEnd() {
      this._line = NaN;
    }
    lineStart() {
      this._point = 0;
    }
    lineEnd() {
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    }
    point(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0: {
          this._point = 1;
          if (this._line) this._context.lineTo(x2, y2);
          else this._context.moveTo(x2, y2);
          break;
        }
        case 1:
          this._point = 2;
        // falls through
        default: {
          if (this._x) this._context.bezierCurveTo(this._x0 = (this._x0 + x2) / 2, this._y0, this._x0, y2, x2, y2);
          else this._context.bezierCurveTo(this._x0, this._y0 = (this._y0 + y2) / 2, x2, this._y0, x2, y2);
          break;
        }
      }
      this._x0 = x2, this._y0 = y2;
    }
  };
  function bumpX(context) {
    return new Bump(context, true);
  }
  function bumpY(context) {
    return new Bump(context, false);
  }

  // node_modules/d3-shape/src/symbol/circle.js
  var circle_default = {
    draw(context, size) {
      const r2 = sqrt(size / pi);
      context.moveTo(r2, 0);
      context.arc(0, 0, r2, 0, tau);
    }
  };

  // node_modules/d3-shape/src/symbol/cross.js
  var cross_default = {
    draw(context, size) {
      const r2 = sqrt(size / 5) / 2;
      context.moveTo(-3 * r2, -r2);
      context.lineTo(-r2, -r2);
      context.lineTo(-r2, -3 * r2);
      context.lineTo(r2, -3 * r2);
      context.lineTo(r2, -r2);
      context.lineTo(3 * r2, -r2);
      context.lineTo(3 * r2, r2);
      context.lineTo(r2, r2);
      context.lineTo(r2, 3 * r2);
      context.lineTo(-r2, 3 * r2);
      context.lineTo(-r2, r2);
      context.lineTo(-3 * r2, r2);
      context.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/diamond.js
  var tan30 = sqrt(1 / 3);
  var tan30_2 = tan30 * 2;
  var diamond_default = {
    draw(context, size) {
      const y2 = sqrt(size / tan30_2);
      const x2 = y2 * tan30;
      context.moveTo(0, -y2);
      context.lineTo(x2, 0);
      context.lineTo(0, y2);
      context.lineTo(-x2, 0);
      context.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/square.js
  var square_default = {
    draw(context, size) {
      const w = sqrt(size);
      const x2 = -w / 2;
      context.rect(x2, x2, w, w);
    }
  };

  // node_modules/d3-shape/src/symbol/star.js
  var ka = 0.8908130915292852;
  var kr = sin(pi / 10) / sin(7 * pi / 10);
  var kx = sin(tau / 10) * kr;
  var ky = -cos(tau / 10) * kr;
  var star_default = {
    draw(context, size) {
      const r2 = sqrt(size * ka);
      const x2 = kx * r2;
      const y2 = ky * r2;
      context.moveTo(0, -r2);
      context.lineTo(x2, y2);
      for (let i = 1; i < 5; ++i) {
        const a2 = tau * i / 5;
        const c2 = cos(a2);
        const s2 = sin(a2);
        context.lineTo(s2 * r2, -c2 * r2);
        context.lineTo(c2 * x2 - s2 * y2, s2 * x2 + c2 * y2);
      }
      context.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/triangle.js
  var sqrt3 = sqrt(3);
  var triangle_default = {
    draw(context, size) {
      const y2 = -sqrt(size / (sqrt3 * 3));
      context.moveTo(0, y2 * 2);
      context.lineTo(-sqrt3 * y2, -y2);
      context.lineTo(sqrt3 * y2, -y2);
      context.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol/wye.js
  var c = -0.5;
  var s = sqrt(3) / 2;
  var k = 1 / sqrt(12);
  var a = (k / 2 + 1) * 3;
  var wye_default = {
    draw(context, size) {
      const r2 = sqrt(size / a);
      const x0 = r2 / 2, y0 = r2 * k;
      const x1 = x0, y1 = r2 * k + r2;
      const x2 = -x1, y2 = y1;
      context.moveTo(x0, y0);
      context.lineTo(x1, y1);
      context.lineTo(x2, y2);
      context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
      context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
      context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
      context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
      context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
      context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
      context.closePath();
    }
  };

  // node_modules/d3-shape/src/symbol.js
  function Symbol2(type, size) {
    let context = null, path2 = withPath(symbol);
    type = typeof type === "function" ? type : constant_default(type || circle_default);
    size = typeof size === "function" ? size : constant_default(size === void 0 ? 64 : +size);
    function symbol() {
      let buffer;
      if (!context) context = buffer = path2();
      type.apply(this, arguments).draw(context, +size.apply(this, arguments));
      if (buffer) return context = null, buffer + "" || null;
    }
    symbol.type = function(_) {
      return arguments.length ? (type = typeof _ === "function" ? _ : constant_default(_), symbol) : type;
    };
    symbol.size = function(_) {
      return arguments.length ? (size = typeof _ === "function" ? _ : constant_default(+_), symbol) : size;
    };
    symbol.context = function(_) {
      return arguments.length ? (context = _ == null ? null : _, symbol) : context;
    };
    return symbol;
  }

  // node_modules/d3-shape/src/noop.js
  function noop_default() {
  }

  // node_modules/d3-shape/src/curve/basis.js
  function point(that, x2, y2) {
    that._context.bezierCurveTo(
      (2 * that._x0 + that._x1) / 3,
      (2 * that._y0 + that._y1) / 3,
      (that._x0 + 2 * that._x1) / 3,
      (that._y0 + 2 * that._y1) / 3,
      (that._x0 + 4 * that._x1 + x2) / 6,
      (that._y0 + 4 * that._y1 + y2) / 6
    );
  }
  function Basis(context) {
    this._context = context;
  }
  Basis.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 3:
          point(this, this._x1, this._y1);
        // falls through
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6);
        // falls through
        default:
          point(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function basis_default(context) {
    return new Basis(context);
  }

  // node_modules/d3-shape/src/curve/basisClosed.js
  function BasisClosed(context) {
    this._context = context;
  }
  BasisClosed.prototype = {
    areaStart: noop_default,
    areaEnd: noop_default,
    lineStart: function() {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x2, this._y2);
          this._context.closePath();
          break;
        }
        case 2: {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
          this._context.closePath();
          break;
        }
        case 3: {
          this.point(this._x2, this._y2);
          this.point(this._x3, this._y3);
          this.point(this._x4, this._y4);
          break;
        }
      }
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._x2 = x2, this._y2 = y2;
          break;
        case 1:
          this._point = 2;
          this._x3 = x2, this._y3 = y2;
          break;
        case 2:
          this._point = 3;
          this._x4 = x2, this._y4 = y2;
          this._context.moveTo((this._x0 + 4 * this._x1 + x2) / 6, (this._y0 + 4 * this._y1 + y2) / 6);
          break;
        default:
          point(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function basisClosed_default(context) {
    return new BasisClosed(context);
  }

  // node_modules/d3-shape/src/curve/basisOpen.js
  function BasisOpen(context) {
    this._context = context;
  }
  BasisOpen.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (this._line || this._line !== 0 && this._point === 3) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          var x0 = (this._x0 + 4 * this._x1 + x2) / 6, y0 = (this._y0 + 4 * this._y1 + y2) / 6;
          this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0);
          break;
        case 3:
          this._point = 4;
        // falls through
        default:
          point(this, x2, y2);
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
    }
  };
  function basisOpen_default(context) {
    return new BasisOpen(context);
  }

  // node_modules/d3-shape/src/curve/linearClosed.js
  function LinearClosed(context) {
    this._context = context;
  }
  LinearClosed.prototype = {
    areaStart: noop_default,
    areaEnd: noop_default,
    lineStart: function() {
      this._point = 0;
    },
    lineEnd: function() {
      if (this._point) this._context.closePath();
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      if (this._point) this._context.lineTo(x2, y2);
      else this._point = 1, this._context.moveTo(x2, y2);
    }
  };
  function linearClosed_default(context) {
    return new LinearClosed(context);
  }

  // node_modules/d3-shape/src/curve/monotone.js
  function sign(x2) {
    return x2 < 0 ? -1 : 1;
  }
  function slope3(that, x2, y2) {
    var h0 = that._x1 - that._x0, h1 = x2 - that._x1, s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0), s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0), p = (s0 * h1 + s1 * h0) / (h0 + h1);
    return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
  }
  function slope2(that, t) {
    var h = that._x1 - that._x0;
    return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
  }
  function point2(that, t02, t12) {
    var x0 = that._x0, y0 = that._y0, x1 = that._x1, y1 = that._y1, dx = (x1 - x0) / 3;
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t02, x1 - dx, y1 - dx * t12, x1, y1);
  }
  function MonotoneX(context) {
    this._context = context;
  }
  MonotoneX.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x1, this._y1);
          break;
        case 3:
          point2(this, this._t0, slope2(this, this._t0));
          break;
      }
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      var t12 = NaN;
      x2 = +x2, y2 = +y2;
      if (x2 === this._x1 && y2 === this._y1) return;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
          break;
        case 2:
          this._point = 3;
          point2(this, slope2(this, t12 = slope3(this, x2, y2)), t12);
          break;
        default:
          point2(this, this._t0, t12 = slope3(this, x2, y2));
          break;
      }
      this._x0 = this._x1, this._x1 = x2;
      this._y0 = this._y1, this._y1 = y2;
      this._t0 = t12;
    }
  };
  function MonotoneY(context) {
    this._context = new ReflectContext(context);
  }
  (MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x2, y2) {
    MonotoneX.prototype.point.call(this, y2, x2);
  };
  function ReflectContext(context) {
    this._context = context;
  }
  ReflectContext.prototype = {
    moveTo: function(x2, y2) {
      this._context.moveTo(y2, x2);
    },
    closePath: function() {
      this._context.closePath();
    },
    lineTo: function(x2, y2) {
      this._context.lineTo(y2, x2);
    },
    bezierCurveTo: function(x1, y1, x2, y2, x3, y3) {
      this._context.bezierCurveTo(y1, x1, y2, x2, y3, x3);
    }
  };
  function monotoneX(context) {
    return new MonotoneX(context);
  }
  function monotoneY(context) {
    return new MonotoneY(context);
  }

  // node_modules/d3-shape/src/curve/natural.js
  function Natural(context) {
    this._context = context;
  }
  Natural.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = [];
      this._y = [];
    },
    lineEnd: function() {
      var x2 = this._x, y2 = this._y, n = x2.length;
      if (n) {
        this._line ? this._context.lineTo(x2[0], y2[0]) : this._context.moveTo(x2[0], y2[0]);
        if (n === 2) {
          this._context.lineTo(x2[1], y2[1]);
        } else {
          var px = controlPoints(x2), py = controlPoints(y2);
          for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x2[i1], y2[i1]);
          }
        }
      }
      if (this._line || this._line !== 0 && n === 1) this._context.closePath();
      this._line = 1 - this._line;
      this._x = this._y = null;
    },
    point: function(x2, y2) {
      this._x.push(+x2);
      this._y.push(+y2);
    }
  };
  function controlPoints(x2) {
    var i, n = x2.length - 1, m, a2 = new Array(n), b = new Array(n), r2 = new Array(n);
    a2[0] = 0, b[0] = 2, r2[0] = x2[0] + 2 * x2[1];
    for (i = 1; i < n - 1; ++i) a2[i] = 1, b[i] = 4, r2[i] = 4 * x2[i] + 2 * x2[i + 1];
    a2[n - 1] = 2, b[n - 1] = 7, r2[n - 1] = 8 * x2[n - 1] + x2[n];
    for (i = 1; i < n; ++i) m = a2[i] / b[i - 1], b[i] -= m, r2[i] -= m * r2[i - 1];
    a2[n - 1] = r2[n - 1] / b[n - 1];
    for (i = n - 2; i >= 0; --i) a2[i] = (r2[i] - a2[i + 1]) / b[i];
    b[n - 1] = (x2[n] + a2[n - 1]) / 2;
    for (i = 0; i < n - 1; ++i) b[i] = 2 * x2[i + 1] - a2[i + 1];
    return [a2, b];
  }
  function natural_default(context) {
    return new Natural(context);
  }

  // node_modules/d3-shape/src/curve/step.js
  function Step(context, t) {
    this._context = context;
    this._t = t;
  }
  Step.prototype = {
    areaStart: function() {
      this._line = 0;
    },
    areaEnd: function() {
      this._line = NaN;
    },
    lineStart: function() {
      this._x = this._y = NaN;
      this._point = 0;
    },
    lineEnd: function() {
      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
      if (this._line || this._line !== 0 && this._point === 1) this._context.closePath();
      if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
    },
    point: function(x2, y2) {
      x2 = +x2, y2 = +y2;
      switch (this._point) {
        case 0:
          this._point = 1;
          this._line ? this._context.lineTo(x2, y2) : this._context.moveTo(x2, y2);
          break;
        case 1:
          this._point = 2;
        // falls through
        default: {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y2);
            this._context.lineTo(x2, y2);
          } else {
            var x1 = this._x * (1 - this._t) + x2 * this._t;
            this._context.lineTo(x1, this._y);
            this._context.lineTo(x1, y2);
          }
          break;
        }
      }
      this._x = x2, this._y = y2;
    }
  };
  function step_default(context) {
    return new Step(context, 0.5);
  }
  function stepBefore(context) {
    return new Step(context, 0);
  }
  function stepAfter(context) {
    return new Step(context, 1);
  }

  // node_modules/d3-shape/src/offset/none.js
  function none_default(series, order) {
    if (!((n = series.length) > 1)) return;
    for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
      s0 = s1, s1 = series[order[i]];
      for (j = 0; j < m; ++j) {
        s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
      }
    }
  }

  // node_modules/d3-shape/src/order/none.js
  function none_default2(series) {
    var n = series.length, o = new Array(n);
    while (--n >= 0) o[n] = n;
    return o;
  }

  // node_modules/d3-shape/src/stack.js
  function stackValue(d, key) {
    return d[key];
  }
  function stackSeries(key) {
    const series = [];
    series.key = key;
    return series;
  }
  function stack_default() {
    var keys = constant_default([]), order = none_default2, offset = none_default, value = stackValue;
    function stack(data) {
      var sz = Array.from(keys.apply(this, arguments), stackSeries), i, n = sz.length, j = -1, oz;
      for (const d of data) {
        for (i = 0, ++j; i < n; ++i) {
          (sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d;
        }
      }
      for (i = 0, oz = array_default(order(sz)); i < n; ++i) {
        sz[oz[i]].index = i;
      }
      offset(sz, oz);
      return sz;
    }
    stack.keys = function(_) {
      return arguments.length ? (keys = typeof _ === "function" ? _ : constant_default(Array.from(_)), stack) : keys;
    };
    stack.value = function(_) {
      return arguments.length ? (value = typeof _ === "function" ? _ : constant_default(+_), stack) : value;
    };
    stack.order = function(_) {
      return arguments.length ? (order = _ == null ? none_default2 : typeof _ === "function" ? _ : constant_default(Array.from(_)), stack) : order;
    };
    stack.offset = function(_) {
      return arguments.length ? (offset = _ == null ? none_default : _, stack) : offset;
    };
    return stack;
  }

  // node_modules/d3-shape/src/offset/expand.js
  function expand_default(series, order) {
    if (!((n = series.length) > 0)) return;
    for (var i, n, j = 0, m = series[0].length, y2; j < m; ++j) {
      for (y2 = i = 0; i < n; ++i) y2 += series[i][j][1] || 0;
      if (y2) for (i = 0; i < n; ++i) series[i][j][1] /= y2;
    }
    none_default(series, order);
  }

  // node_modules/d3-shape/src/offset/silhouette.js
  function silhouette_default(series, order) {
    if (!((n = series.length) > 0)) return;
    for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
      for (var i = 0, y2 = 0; i < n; ++i) y2 += series[i][j][1] || 0;
      s0[j][1] += s0[j][0] = -y2 / 2;
    }
    none_default(series, order);
  }

  // node_modules/d3-shape/src/offset/wiggle.js
  function wiggle_default(series, order) {
    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
    for (var y2 = 0, j = 1, s0, m, n; j < m; ++j) {
      for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
        var si = series[order[i]], sij0 = si[j][1] || 0, sij1 = si[j - 1][1] || 0, s3 = (sij0 - sij1) / 2;
        for (var k2 = 0; k2 < i; ++k2) {
          var sk = series[order[k2]], skj0 = sk[j][1] || 0, skj1 = sk[j - 1][1] || 0;
          s3 += skj0 - skj1;
        }
        s1 += sij0, s2 += s3 * sij0;
      }
      s0[j - 1][1] += s0[j - 1][0] = y2;
      if (s1) y2 -= s2 / s1;
    }
    s0[j - 1][1] += s0[j - 1][0] = y2;
    none_default(series, order);
  }

  // node_modules/recharts/es6/shape/Symbols.js
  var _excluded3 = ["type", "size", "sizeType"];
  function _extends3() {
    return _extends3 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends3.apply(null, arguments);
  }
  function ownKeys(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys(Object(t), true).forEach(function(r3) {
        _defineProperty(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty(e, r2, t) {
    return (r2 = _toPropertyKey(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey(t) {
    var i = _toPrimitive(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function _objectWithoutProperties3(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose3(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose3(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  var symbolFactories = {
    symbolCircle: circle_default,
    symbolCross: cross_default,
    symbolDiamond: diamond_default,
    symbolSquare: square_default,
    symbolStar: star_default,
    symbolTriangle: triangle_default,
    symbolWye: wye_default
  };
  var RADIAN = Math.PI / 180;
  var getSymbolFactory = (type) => {
    var name = "symbol".concat(upperFirst(type));
    return symbolFactories[name] || circle_default;
  };
  var calculateAreaSize = (size, sizeType, type) => {
    if (sizeType === "area") {
      return size;
    }
    switch (type) {
      case "cross":
        return 5 * size * size / 9;
      case "diamond":
        return 0.5 * size * size / Math.sqrt(3);
      case "square":
        return size * size;
      case "star": {
        var angle = 18 * RADIAN;
        return 1.25 * size * size * (Math.tan(angle) - Math.tan(angle * 2) * Math.tan(angle) ** 2);
      }
      case "triangle":
        return Math.sqrt(3) * size * size / 4;
      case "wye":
        return (21 - 10 * Math.sqrt(3)) * size * size / 8;
      default:
        return Math.PI * size * size / 4;
    }
  };
  var registerSymbol = (key, factory) => {
    symbolFactories["symbol".concat(upperFirst(key))] = factory;
  };
  var Symbols = (_ref2) => {
    var {
      type = "circle",
      size = 64,
      sizeType = "area"
    } = _ref2, rest = _objectWithoutProperties3(_ref2, _excluded3);
    var props = _objectSpread(_objectSpread({}, rest), {}, {
      type,
      size,
      sizeType
    });
    var realType = "circle";
    if (typeof type === "string") {
      realType = type;
    }
    var getPath3 = () => {
      var symbolFactory = getSymbolFactory(realType);
      var symbol = Symbol2().type(symbolFactory).size(calculateAreaSize(size, sizeType, realType));
      return symbol();
    };
    var {
      className,
      cx,
      cy
    } = props;
    var filteredProps = filterProps(props, true);
    if (cx === +cx && cy === +cy && size === +size) {
      return /* @__PURE__ */ React10.createElement("path", _extends3({}, filteredProps, {
        className: clsx("recharts-symbols", className),
        transform: "translate(".concat(cx, ", ").concat(cy, ")"),
        d: getPath3()
      }));
    }
    return null;
  };
  Symbols.registerSymbol = registerSymbol;

  // node_modules/recharts/es6/component/DefaultLegendContent.js
  function _extends4() {
    return _extends4 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends4.apply(null, arguments);
  }
  function ownKeys2(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread2(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys2(Object(t), true).forEach(function(r3) {
        _defineProperty2(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys2(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty2(e, r2, t) {
    return (r2 = _toPropertyKey2(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey2(t) {
    var i = _toPrimitive2(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive2(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var SIZE = 32;
  var DefaultLegendContent = class extends import_react12.PureComponent {
    /**
     * Render the path of icon
     * @param data Data of each legend item
     * @param iconType if defined, it will always render this icon. If undefined then it uses icon from data.type
     * @return Path element
     */
    renderIcon(data, iconType) {
      var {
        inactiveColor
      } = this.props;
      var halfSize = SIZE / 2;
      var sixthSize = SIZE / 6;
      var thirdSize = SIZE / 3;
      var color2 = data.inactive ? inactiveColor : data.color;
      var preferredIcon = iconType !== null && iconType !== void 0 ? iconType : data.type;
      if (preferredIcon === "none") {
        return null;
      }
      if (preferredIcon === "plainline") {
        return /* @__PURE__ */ React11.createElement("line", {
          strokeWidth: 4,
          fill: "none",
          stroke: color2,
          strokeDasharray: data.payload.strokeDasharray,
          x1: 0,
          y1: halfSize,
          x2: SIZE,
          y2: halfSize,
          className: "recharts-legend-icon"
        });
      }
      if (preferredIcon === "line") {
        return /* @__PURE__ */ React11.createElement("path", {
          strokeWidth: 4,
          fill: "none",
          stroke: color2,
          d: "M0,".concat(halfSize, "h").concat(thirdSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(2 * thirdSize, ",").concat(halfSize, "\n            H").concat(SIZE, "M").concat(2 * thirdSize, ",").concat(halfSize, "\n            A").concat(sixthSize, ",").concat(sixthSize, ",0,1,1,").concat(thirdSize, ",").concat(halfSize),
          className: "recharts-legend-icon"
        });
      }
      if (preferredIcon === "rect") {
        return /* @__PURE__ */ React11.createElement("path", {
          stroke: "none",
          fill: color2,
          d: "M0,".concat(SIZE / 8, "h").concat(SIZE, "v").concat(SIZE * 3 / 4, "h").concat(-SIZE, "z"),
          className: "recharts-legend-icon"
        });
      }
      if (/* @__PURE__ */ React11.isValidElement(data.legendIcon)) {
        var iconProps = _objectSpread2({}, data);
        delete iconProps.legendIcon;
        return /* @__PURE__ */ React11.cloneElement(data.legendIcon, iconProps);
      }
      return /* @__PURE__ */ React11.createElement(Symbols, {
        fill: color2,
        cx: halfSize,
        cy: halfSize,
        size: SIZE,
        sizeType: "diameter",
        type: preferredIcon
      });
    }
    /**
     * Draw items of legend
     * @return Items
     */
    renderItems() {
      var {
        payload,
        iconSize,
        layout,
        formatter,
        inactiveColor,
        iconType
      } = this.props;
      var viewBox = {
        x: 0,
        y: 0,
        width: SIZE,
        height: SIZE
      };
      var itemStyle = {
        display: layout === "horizontal" ? "inline-block" : "block",
        marginRight: 10
      };
      var svgStyle = {
        display: "inline-block",
        verticalAlign: "middle",
        marginRight: 4
      };
      return payload.map((entry, i) => {
        var finalFormatter = entry.formatter || formatter;
        var className = clsx({
          "recharts-legend-item": true,
          ["legend-item-".concat(i)]: true,
          inactive: entry.inactive
        });
        if (entry.type === "none") {
          return null;
        }
        var color2 = entry.inactive ? inactiveColor : entry.color;
        var finalValue = finalFormatter ? finalFormatter(entry.value, entry, i) : entry.value;
        return /* @__PURE__ */ React11.createElement("li", _extends4({
          className,
          style: itemStyle,
          key: "legend-item-".concat(i)
        }, adaptEventsOfChild(this.props, entry, i)), /* @__PURE__ */ React11.createElement(Surface, {
          width: iconSize,
          height: iconSize,
          viewBox,
          style: svgStyle,
          "aria-label": "".concat(finalValue, " legend icon")
        }, this.renderIcon(entry, iconType)), /* @__PURE__ */ React11.createElement("span", {
          className: "recharts-legend-item-text",
          style: {
            color: color2
          }
        }, finalValue));
      });
    }
    render() {
      var {
        payload,
        layout,
        align
      } = this.props;
      if (!payload || !payload.length) {
        return null;
      }
      var finalStyle = {
        padding: 0,
        margin: 0,
        textAlign: layout === "horizontal" ? align : "left"
      };
      return /* @__PURE__ */ React11.createElement("ul", {
        className: "recharts-default-legend",
        style: finalStyle
      }, this.renderItems());
    }
  };
  _defineProperty2(DefaultLegendContent, "displayName", "Legend");
  _defineProperty2(DefaultLegendContent, "defaultProps", {
    align: "center",
    iconSize: 14,
    inactiveColor: "#ccc",
    layout: "horizontal",
    verticalAlign: "middle"
  });

  // node_modules/recharts/es6/util/payload/getUniqPayload.js
  var import_uniqBy = __toESM(require_uniqBy3());
  function getUniqPayload(payload, option, defaultUniqBy3) {
    if (option === true) {
      return (0, import_uniqBy.default)(payload, defaultUniqBy3);
    }
    if (typeof option === "function") {
      return (0, import_uniqBy.default)(payload, option);
    }
    return payload;
  }

  // node_modules/recharts/es6/state/hooks.js
  var import_with_selector = __toESM(require_with_selector());
  var import_react14 = __toESM(require_react());

  // node_modules/recharts/es6/state/RechartsReduxContext.js
  var import_react13 = __toESM(require_react());
  var RechartsReduxContext = /* @__PURE__ */ (0, import_react13.createContext)(null);

  // node_modules/recharts/es6/state/hooks.js
  var noopDispatch = (a2) => a2;
  var useAppDispatch = () => {
    var context = (0, import_react14.useContext)(RechartsReduxContext);
    if (context) {
      return context.store.dispatch;
    }
    return noopDispatch;
  };
  var noop = () => {
  };
  var addNestedSubNoop = () => noop;
  var refEquality = (a2, b) => a2 === b;
  function useAppSelector(selector) {
    var context = (0, import_react14.useContext)(RechartsReduxContext);
    return (0, import_with_selector.useSyncExternalStoreWithSelector)(context ? context.subscription.addNestedSub : addNestedSubNoop, context ? context.store.getState : noop, context ? context.store.getState : noop, context ? selector : noop, refEquality);
  }

  // node_modules/reselect/dist/reselect.mjs
  function assertIsFunction(func, errorMessage = `expected a function, instead received ${typeof func}`) {
    if (typeof func !== "function") {
      throw new TypeError(errorMessage);
    }
  }
  function assertIsObject(object, errorMessage = `expected an object, instead received ${typeof object}`) {
    if (typeof object !== "object") {
      throw new TypeError(errorMessage);
    }
  }
  function assertIsArrayOfFunctions(array, errorMessage = `expected all items to be functions, instead received the following types: `) {
    if (!array.every((item) => typeof item === "function")) {
      const itemTypes = array.map(
        (item) => typeof item === "function" ? `function ${item.name || "unnamed"}()` : typeof item
      ).join(", ");
      throw new TypeError(`${errorMessage}[${itemTypes}]`);
    }
  }
  var ensureIsArray = (item) => {
    return Array.isArray(item) ? item : [item];
  };
  function getDependencies(createSelectorArgs) {
    const dependencies = Array.isArray(createSelectorArgs[0]) ? createSelectorArgs[0] : createSelectorArgs;
    assertIsArrayOfFunctions(
      dependencies,
      `createSelector expects all input-selectors to be functions, but received the following types: `
    );
    return dependencies;
  }
  function collectInputSelectorResults(dependencies, inputSelectorArgs) {
    const inputSelectorResults = [];
    const { length } = dependencies;
    for (let i = 0; i < length; i++) {
      inputSelectorResults.push(dependencies[i].apply(null, inputSelectorArgs));
    }
    return inputSelectorResults;
  }
  var REDUX_PROXY_LABEL = Symbol();
  var proto = Object.getPrototypeOf({});
  var StrongRef = class {
    constructor(value) {
      this.value = value;
    }
    deref() {
      return this.value;
    }
  };
  var Ref = typeof WeakRef !== "undefined" ? WeakRef : StrongRef;
  var UNTERMINATED = 0;
  var TERMINATED = 1;
  function createCacheNode() {
    return {
      s: UNTERMINATED,
      v: void 0,
      o: null,
      p: null
    };
  }
  function weakMapMemoize(func, options = {}) {
    let fnNode = createCacheNode();
    const { resultEqualityCheck } = options;
    let lastResult2;
    let resultsCount = 0;
    function memoized() {
      let cacheNode = fnNode;
      const { length } = arguments;
      for (let i = 0, l = length; i < l; i++) {
        const arg = arguments[i];
        if (typeof arg === "function" || typeof arg === "object" && arg !== null) {
          let objectCache = cacheNode.o;
          if (objectCache === null) {
            cacheNode.o = objectCache = /* @__PURE__ */ new WeakMap();
          }
          const objectNode = objectCache.get(arg);
          if (objectNode === void 0) {
            cacheNode = createCacheNode();
            objectCache.set(arg, cacheNode);
          } else {
            cacheNode = objectNode;
          }
        } else {
          let primitiveCache = cacheNode.p;
          if (primitiveCache === null) {
            cacheNode.p = primitiveCache = /* @__PURE__ */ new Map();
          }
          const primitiveNode = primitiveCache.get(arg);
          if (primitiveNode === void 0) {
            cacheNode = createCacheNode();
            primitiveCache.set(arg, cacheNode);
          } else {
            cacheNode = primitiveNode;
          }
        }
      }
      const terminatedNode = cacheNode;
      let result;
      if (cacheNode.s === TERMINATED) {
        result = cacheNode.v;
      } else {
        result = func.apply(null, arguments);
        resultsCount++;
        if (resultEqualityCheck) {
          const lastResultValue = lastResult2?.deref?.() ?? lastResult2;
          if (lastResultValue != null && resultEqualityCheck(lastResultValue, result)) {
            result = lastResultValue;
            resultsCount !== 0 && resultsCount--;
          }
          const needsWeakRef = typeof result === "object" && result !== null || typeof result === "function";
          lastResult2 = needsWeakRef ? new Ref(result) : result;
        }
      }
      terminatedNode.s = TERMINATED;
      terminatedNode.v = result;
      return result;
    }
    memoized.clearCache = () => {
      fnNode = createCacheNode();
      memoized.resetResultsCount();
    };
    memoized.resultsCount = () => resultsCount;
    memoized.resetResultsCount = () => {
      resultsCount = 0;
    };
    return memoized;
  }
  function createSelectorCreator(memoizeOrOptions, ...memoizeOptionsFromArgs) {
    const createSelectorCreatorOptions = typeof memoizeOrOptions === "function" ? {
      memoize: memoizeOrOptions,
      memoizeOptions: memoizeOptionsFromArgs
    } : memoizeOrOptions;
    const createSelector2 = (...createSelectorArgs) => {
      let recomputations = 0;
      let dependencyRecomputations = 0;
      let lastResult2;
      let directlyPassedOptions = {};
      let resultFunc = createSelectorArgs.pop();
      if (typeof resultFunc === "object") {
        directlyPassedOptions = resultFunc;
        resultFunc = createSelectorArgs.pop();
      }
      assertIsFunction(
        resultFunc,
        `createSelector expects an output function after the inputs, but received: [${typeof resultFunc}]`
      );
      const combinedOptions = {
        ...createSelectorCreatorOptions,
        ...directlyPassedOptions
      };
      const {
        memoize: memoize2,
        memoizeOptions = [],
        argsMemoize = weakMapMemoize,
        argsMemoizeOptions = [],
        devModeChecks = {}
      } = combinedOptions;
      const finalMemoizeOptions = ensureIsArray(memoizeOptions);
      const finalArgsMemoizeOptions = ensureIsArray(argsMemoizeOptions);
      const dependencies = getDependencies(createSelectorArgs);
      const memoizedResultFunc = memoize2(function recomputationWrapper() {
        recomputations++;
        return resultFunc.apply(
          null,
          arguments
        );
      }, ...finalMemoizeOptions);
      let firstRun = true;
      const selector = argsMemoize(function dependenciesChecker() {
        dependencyRecomputations++;
        const inputSelectorResults = collectInputSelectorResults(
          dependencies,
          arguments
        );
        lastResult2 = memoizedResultFunc.apply(null, inputSelectorResults);
        if (false) {
          const { identityFunctionCheck, inputStabilityCheck } = getDevModeChecksExecutionInfo(firstRun, devModeChecks);
          if (identityFunctionCheck.shouldRun) {
            identityFunctionCheck.run(
              resultFunc,
              inputSelectorResults,
              lastResult2
            );
          }
          if (inputStabilityCheck.shouldRun) {
            const inputSelectorResultsCopy = collectInputSelectorResults(
              dependencies,
              arguments
            );
            inputStabilityCheck.run(
              { inputSelectorResults, inputSelectorResultsCopy },
              { memoize: memoize2, memoizeOptions: finalMemoizeOptions },
              arguments
            );
          }
          if (firstRun)
            firstRun = false;
        }
        return lastResult2;
      }, ...finalArgsMemoizeOptions);
      return Object.assign(selector, {
        resultFunc,
        memoizedResultFunc,
        dependencies,
        dependencyRecomputations: () => dependencyRecomputations,
        resetDependencyRecomputations: () => {
          dependencyRecomputations = 0;
        },
        lastResult: () => lastResult2,
        recomputations: () => recomputations,
        resetRecomputations: () => {
          recomputations = 0;
        },
        memoize: memoize2,
        argsMemoize
      });
    };
    Object.assign(createSelector2, {
      withTypes: () => createSelector2
    });
    return createSelector2;
  }
  var createSelector = /* @__PURE__ */ createSelectorCreator(weakMapMemoize);
  var createStructuredSelector = Object.assign(
    (inputSelectorsObject, selectorCreator = createSelector) => {
      assertIsObject(
        inputSelectorsObject,
        `createStructuredSelector expects first argument to be an object where each property is a selector, instead received a ${typeof inputSelectorsObject}`
      );
      const inputSelectorKeys = Object.keys(inputSelectorsObject);
      const dependencies = inputSelectorKeys.map(
        (key) => inputSelectorsObject[key]
      );
      const structuredSelector = selectorCreator(
        dependencies,
        (...inputSelectorResults) => {
          return inputSelectorResults.reduce((composition, value, index) => {
            composition[inputSelectorKeys[index]] = value;
            return composition;
          }, {});
        }
      );
      return structuredSelector;
    },
    { withTypes: () => createStructuredSelector }
  );

  // node_modules/recharts/es6/state/selectors/legendSelectors.js
  var import_sortBy = __toESM(require_sortBy2());
  var selectLegendSettings = (state) => state.legend.settings;
  var selectLegendSize = (state) => state.legend.size;
  var selectAllLegendPayload2DArray = (state) => state.legend.payload;
  var selectLegendPayload = createSelector([selectAllLegendPayload2DArray, selectLegendSettings], (payloads, _ref2) => {
    var {
      itemSorter
    } = _ref2;
    var flat = payloads.flat(1);
    return itemSorter ? (0, import_sortBy.default)(flat, itemSorter) : flat;
  });

  // node_modules/recharts/es6/context/legendPayloadContext.js
  function useLegendPayload() {
    return useAppSelector(selectLegendPayload);
  }

  // node_modules/recharts/es6/util/useElementOffset.js
  var import_react15 = __toESM(require_react());
  var EPS = 1;
  function useElementOffset() {
    var extraDependencies = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
    var [lastBoundingBox, setLastBoundingBox] = (0, import_react15.useState)({
      height: 0,
      left: 0,
      top: 0,
      width: 0
    });
    var updateBoundingBox = (0, import_react15.useCallback)(
      (node) => {
        if (node != null) {
          var rect = node.getBoundingClientRect();
          var box = {
            height: rect.height,
            left: rect.left,
            top: rect.top,
            width: rect.width
          };
          if (Math.abs(box.height - lastBoundingBox.height) > EPS || Math.abs(box.left - lastBoundingBox.left) > EPS || Math.abs(box.top - lastBoundingBox.top) > EPS || Math.abs(box.width - lastBoundingBox.width) > EPS) {
            setLastBoundingBox({
              height: box.height,
              left: box.left,
              top: box.top,
              width: box.width
            });
          }
        }
      },
      // eslint-disable-next-line react-hooks/exhaustive-deps
      [lastBoundingBox.width, lastBoundingBox.height, lastBoundingBox.top, lastBoundingBox.left, ...extraDependencies]
    );
    return [lastBoundingBox, updateBoundingBox];
  }

  // node_modules/recharts/es6/context/chartLayoutContext.js
  var import_react18 = __toESM(require_react());

  // node_modules/redux/dist/redux.mjs
  function formatProdErrorMessage(code) {
    return `Minified Redux error #${code}; visit https://redux.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
  }
  var $$observable = /* @__PURE__ */ (() => typeof Symbol === "function" && Symbol.observable || "@@observable")();
  var symbol_observable_default = $$observable;
  var randomString = () => Math.random().toString(36).substring(7).split("").join(".");
  var ActionTypes = {
    INIT: `@@redux/INIT${/* @__PURE__ */ randomString()}`,
    REPLACE: `@@redux/REPLACE${/* @__PURE__ */ randomString()}`,
    PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`
  };
  var actionTypes_default = ActionTypes;
  function isPlainObject(obj) {
    if (typeof obj !== "object" || obj === null)
      return false;
    let proto2 = obj;
    while (Object.getPrototypeOf(proto2) !== null) {
      proto2 = Object.getPrototypeOf(proto2);
    }
    return Object.getPrototypeOf(obj) === proto2 || Object.getPrototypeOf(obj) === null;
  }
  function createStore(reducer, preloadedState, enhancer) {
    if (typeof reducer !== "function") {
      throw new Error(true ? formatProdErrorMessage(2) : `Expected the root reducer to be a function. Instead, received: '${kindOf(reducer)}'`);
    }
    if (typeof preloadedState === "function" && typeof enhancer === "function" || typeof enhancer === "function" && typeof arguments[3] === "function") {
      throw new Error(true ? formatProdErrorMessage(0) : "It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.");
    }
    if (typeof preloadedState === "function" && typeof enhancer === "undefined") {
      enhancer = preloadedState;
      preloadedState = void 0;
    }
    if (typeof enhancer !== "undefined") {
      if (typeof enhancer !== "function") {
        throw new Error(true ? formatProdErrorMessage(1) : `Expected the enhancer to be a function. Instead, received: '${kindOf(enhancer)}'`);
      }
      return enhancer(createStore)(reducer, preloadedState);
    }
    let currentReducer = reducer;
    let currentState = preloadedState;
    let currentListeners = /* @__PURE__ */ new Map();
    let nextListeners = currentListeners;
    let listenerIdCounter = 0;
    let isDispatching = false;
    function ensureCanMutateNextListeners() {
      if (nextListeners === currentListeners) {
        nextListeners = /* @__PURE__ */ new Map();
        currentListeners.forEach((listener2, key) => {
          nextListeners.set(key, listener2);
        });
      }
    }
    function getState() {
      if (isDispatching) {
        throw new Error(true ? formatProdErrorMessage(3) : "You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");
      }
      return currentState;
    }
    function subscribe(listener2) {
      if (typeof listener2 !== "function") {
        throw new Error(true ? formatProdErrorMessage(4) : `Expected the listener to be a function. Instead, received: '${kindOf(listener2)}'`);
      }
      if (isDispatching) {
        throw new Error(true ? formatProdErrorMessage(5) : "You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.");
      }
      let isSubscribed = true;
      ensureCanMutateNextListeners();
      const listenerId = listenerIdCounter++;
      nextListeners.set(listenerId, listener2);
      return function unsubscribe() {
        if (!isSubscribed) {
          return;
        }
        if (isDispatching) {
          throw new Error(true ? formatProdErrorMessage(6) : "You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.");
        }
        isSubscribed = false;
        ensureCanMutateNextListeners();
        nextListeners.delete(listenerId);
        currentListeners = null;
      };
    }
    function dispatch(action) {
      if (!isPlainObject(action)) {
        throw new Error(true ? formatProdErrorMessage(7) : `Actions must be plain objects. Instead, the actual type was: '${kindOf(action)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);
      }
      if (typeof action.type === "undefined") {
        throw new Error(true ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
      }
      if (typeof action.type !== "string") {
        throw new Error(true ? formatProdErrorMessage(17) : `Action "type" property must be a string. Instead, the actual type was: '${kindOf(action.type)}'. Value was: '${action.type}' (stringified)`);
      }
      if (isDispatching) {
        throw new Error(true ? formatProdErrorMessage(9) : "Reducers may not dispatch actions.");
      }
      try {
        isDispatching = true;
        currentState = currentReducer(currentState, action);
      } finally {
        isDispatching = false;
      }
      const listeners = currentListeners = nextListeners;
      listeners.forEach((listener2) => {
        listener2();
      });
      return action;
    }
    function replaceReducer(nextReducer) {
      if (typeof nextReducer !== "function") {
        throw new Error(true ? formatProdErrorMessage(10) : `Expected the nextReducer to be a function. Instead, received: '${kindOf(nextReducer)}`);
      }
      currentReducer = nextReducer;
      dispatch({
        type: actionTypes_default.REPLACE
      });
    }
    function observable() {
      const outerSubscribe = subscribe;
      return {
        /**
         * The minimal observable subscription method.
         * @param observer Any object that can be used as an observer.
         * The observer object should have a `next` method.
         * @returns An object with an `unsubscribe` method that can
         * be used to unsubscribe the observable from the store, and prevent further
         * emission of values from the observable.
         */
        subscribe(observer) {
          if (typeof observer !== "object" || observer === null) {
            throw new Error(true ? formatProdErrorMessage(11) : `Expected the observer to be an object. Instead, received: '${kindOf(observer)}'`);
          }
          function observeState() {
            const observerAsObserver = observer;
            if (observerAsObserver.next) {
              observerAsObserver.next(getState());
            }
          }
          observeState();
          const unsubscribe = outerSubscribe(observeState);
          return {
            unsubscribe
          };
        },
        [symbol_observable_default]() {
          return this;
        }
      };
    }
    dispatch({
      type: actionTypes_default.INIT
    });
    const store = {
      dispatch,
      subscribe,
      getState,
      replaceReducer,
      [symbol_observable_default]: observable
    };
    return store;
  }
  function assertReducerShape(reducers) {
    Object.keys(reducers).forEach((key) => {
      const reducer = reducers[key];
      const initialState12 = reducer(void 0, {
        type: actionTypes_default.INIT
      });
      if (typeof initialState12 === "undefined") {
        throw new Error(true ? formatProdErrorMessage(12) : `The slice reducer for key "${key}" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.`);
      }
      if (typeof reducer(void 0, {
        type: actionTypes_default.PROBE_UNKNOWN_ACTION()
      }) === "undefined") {
        throw new Error(true ? formatProdErrorMessage(13) : `The slice reducer for key "${key}" returned undefined when probed with a random type. Don't try to handle '${actionTypes_default.INIT}' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.`);
      }
    });
  }
  function combineReducers(reducers) {
    const reducerKeys = Object.keys(reducers);
    const finalReducers = {};
    for (let i = 0; i < reducerKeys.length; i++) {
      const key = reducerKeys[i];
      if (false) {
        if (typeof reducers[key] === "undefined") {
          warning(`No reducer provided for key "${key}"`);
        }
      }
      if (typeof reducers[key] === "function") {
        finalReducers[key] = reducers[key];
      }
    }
    const finalReducerKeys = Object.keys(finalReducers);
    let unexpectedKeyCache;
    if (false) {
      unexpectedKeyCache = {};
    }
    let shapeAssertionError;
    try {
      assertReducerShape(finalReducers);
    } catch (e) {
      shapeAssertionError = e;
    }
    return function combination(state = {}, action) {
      if (shapeAssertionError) {
        throw shapeAssertionError;
      }
      if (false) {
        const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);
        if (warningMessage) {
          warning(warningMessage);
        }
      }
      let hasChanged = false;
      const nextState = {};
      for (let i = 0; i < finalReducerKeys.length; i++) {
        const key = finalReducerKeys[i];
        const reducer = finalReducers[key];
        const previousStateForKey = state[key];
        const nextStateForKey = reducer(previousStateForKey, action);
        if (typeof nextStateForKey === "undefined") {
          const actionType = action && action.type;
          throw new Error(true ? formatProdErrorMessage(14) : `When called with an action of type ${actionType ? `"${String(actionType)}"` : "(unknown type)"}, the slice reducer for key "${key}" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.`);
        }
        nextState[key] = nextStateForKey;
        hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
      }
      hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
      return hasChanged ? nextState : state;
    };
  }
  function compose(...funcs) {
    if (funcs.length === 0) {
      return (arg) => arg;
    }
    if (funcs.length === 1) {
      return funcs[0];
    }
    return funcs.reduce((a2, b) => (...args) => a2(b(...args)));
  }
  function applyMiddleware(...middlewares) {
    return (createStore2) => (reducer, preloadedState) => {
      const store = createStore2(reducer, preloadedState);
      let dispatch = () => {
        throw new Error(true ? formatProdErrorMessage(15) : "Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.");
      };
      const middlewareAPI = {
        getState: store.getState,
        dispatch: (action, ...args) => dispatch(action, ...args)
      };
      const chain = middlewares.map((middleware) => middleware(middlewareAPI));
      dispatch = compose(...chain)(store.dispatch);
      return {
        ...store,
        dispatch
      };
    };
  }
  function isAction(action) {
    return isPlainObject(action) && "type" in action && typeof action.type === "string";
  }

  // node_modules/immer/dist/immer.mjs
  var NOTHING = Symbol.for("immer-nothing");
  var DRAFTABLE = Symbol.for("immer-draftable");
  var DRAFT_STATE = Symbol.for("immer-state");
  function die(error, ...args) {
    if (false) {
      const e = errors[error];
      const msg = typeof e === "function" ? e.apply(null, args) : e;
      throw new Error(`[Immer] ${msg}`);
    }
    throw new Error(
      `[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`
    );
  }
  var getPrototypeOf = Object.getPrototypeOf;
  function isDraft(value) {
    return !!value && !!value[DRAFT_STATE];
  }
  function isDraftable(value) {
    if (!value)
      return false;
    return isPlainObject2(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor?.[DRAFTABLE] || isMap(value) || isSet(value);
  }
  var objectCtorString = Object.prototype.constructor.toString();
  function isPlainObject2(value) {
    if (!value || typeof value !== "object")
      return false;
    const proto2 = getPrototypeOf(value);
    if (proto2 === null) {
      return true;
    }
    const Ctor = Object.hasOwnProperty.call(proto2, "constructor") && proto2.constructor;
    if (Ctor === Object)
      return true;
    return typeof Ctor == "function" && Function.toString.call(Ctor) === objectCtorString;
  }
  function each(obj, iter) {
    if (getArchtype(obj) === 0) {
      Reflect.ownKeys(obj).forEach((key) => {
        iter(key, obj[key], obj);
      });
    } else {
      obj.forEach((entry, index) => iter(index, entry, obj));
    }
  }
  function getArchtype(thing) {
    const state = thing[DRAFT_STATE];
    return state ? state.type_ : Array.isArray(thing) ? 1 : isMap(thing) ? 2 : isSet(thing) ? 3 : 0;
  }
  function has(thing, prop) {
    return getArchtype(thing) === 2 ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);
  }
  function set(thing, propOrOldValue, value) {
    const t = getArchtype(thing);
    if (t === 2)
      thing.set(propOrOldValue, value);
    else if (t === 3) {
      thing.add(value);
    } else
      thing[propOrOldValue] = value;
  }
  function is(x2, y2) {
    if (x2 === y2) {
      return x2 !== 0 || 1 / x2 === 1 / y2;
    } else {
      return x2 !== x2 && y2 !== y2;
    }
  }
  function isMap(target) {
    return target instanceof Map;
  }
  function isSet(target) {
    return target instanceof Set;
  }
  function latest(state) {
    return state.copy_ || state.base_;
  }
  function shallowCopy(base, strict) {
    if (isMap(base)) {
      return new Map(base);
    }
    if (isSet(base)) {
      return new Set(base);
    }
    if (Array.isArray(base))
      return Array.prototype.slice.call(base);
    const isPlain = isPlainObject2(base);
    if (strict === true || strict === "class_only" && !isPlain) {
      const descriptors = Object.getOwnPropertyDescriptors(base);
      delete descriptors[DRAFT_STATE];
      let keys = Reflect.ownKeys(descriptors);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        const desc = descriptors[key];
        if (desc.writable === false) {
          desc.writable = true;
          desc.configurable = true;
        }
        if (desc.get || desc.set)
          descriptors[key] = {
            configurable: true,
            writable: true,
            // could live with !!desc.set as well here...
            enumerable: desc.enumerable,
            value: base[key]
          };
      }
      return Object.create(getPrototypeOf(base), descriptors);
    } else {
      const proto2 = getPrototypeOf(base);
      if (proto2 !== null && isPlain) {
        return { ...base };
      }
      const obj = Object.create(proto2);
      return Object.assign(obj, base);
    }
  }
  function freeze(obj, deep = false) {
    if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj))
      return obj;
    if (getArchtype(obj) > 1) {
      Object.defineProperties(obj, {
        set: { value: dontMutateFrozenCollections },
        add: { value: dontMutateFrozenCollections },
        clear: { value: dontMutateFrozenCollections },
        delete: { value: dontMutateFrozenCollections }
      });
    }
    Object.freeze(obj);
    if (deep)
      Object.values(obj).forEach((value) => freeze(value, true));
    return obj;
  }
  function dontMutateFrozenCollections() {
    die(2);
  }
  function isFrozen(obj) {
    return Object.isFrozen(obj);
  }
  var plugins = {};
  function getPlugin(pluginKey) {
    const plugin = plugins[pluginKey];
    if (!plugin) {
      die(0, pluginKey);
    }
    return plugin;
  }
  var currentScope;
  function getCurrentScope() {
    return currentScope;
  }
  function createScope(parent_, immer_) {
    return {
      drafts_: [],
      parent_,
      immer_,
      // Whenever the modified draft contains a draft from another scope, we
      // need to prevent auto-freezing so the unowned draft can be finalized.
      canAutoFreeze_: true,
      unfinalizedDrafts_: 0
    };
  }
  function usePatchesInScope(scope, patchListener) {
    if (patchListener) {
      getPlugin("Patches");
      scope.patches_ = [];
      scope.inversePatches_ = [];
      scope.patchListener_ = patchListener;
    }
  }
  function revokeScope(scope) {
    leaveScope(scope);
    scope.drafts_.forEach(revokeDraft);
    scope.drafts_ = null;
  }
  function leaveScope(scope) {
    if (scope === currentScope) {
      currentScope = scope.parent_;
    }
  }
  function enterScope(immer2) {
    return currentScope = createScope(currentScope, immer2);
  }
  function revokeDraft(draft) {
    const state = draft[DRAFT_STATE];
    if (state.type_ === 0 || state.type_ === 1)
      state.revoke_();
    else
      state.revoked_ = true;
  }
  function processResult(result, scope) {
    scope.unfinalizedDrafts_ = scope.drafts_.length;
    const baseDraft = scope.drafts_[0];
    const isReplaced = result !== void 0 && result !== baseDraft;
    if (isReplaced) {
      if (baseDraft[DRAFT_STATE].modified_) {
        revokeScope(scope);
        die(4);
      }
      if (isDraftable(result)) {
        result = finalize(scope, result);
        if (!scope.parent_)
          maybeFreeze(scope, result);
      }
      if (scope.patches_) {
        getPlugin("Patches").generateReplacementPatches_(
          baseDraft[DRAFT_STATE].base_,
          result,
          scope.patches_,
          scope.inversePatches_
        );
      }
    } else {
      result = finalize(scope, baseDraft, []);
    }
    revokeScope(scope);
    if (scope.patches_) {
      scope.patchListener_(scope.patches_, scope.inversePatches_);
    }
    return result !== NOTHING ? result : void 0;
  }
  function finalize(rootScope, value, path2) {
    if (isFrozen(value))
      return value;
    const state = value[DRAFT_STATE];
    if (!state) {
      each(
        value,
        (key, childValue) => finalizeProperty(rootScope, state, value, key, childValue, path2)
      );
      return value;
    }
    if (state.scope_ !== rootScope)
      return value;
    if (!state.modified_) {
      maybeFreeze(rootScope, state.base_, true);
      return state.base_;
    }
    if (!state.finalized_) {
      state.finalized_ = true;
      state.scope_.unfinalizedDrafts_--;
      const result = state.copy_;
      let resultEach = result;
      let isSet2 = false;
      if (state.type_ === 3) {
        resultEach = new Set(result);
        result.clear();
        isSet2 = true;
      }
      each(
        resultEach,
        (key, childValue) => finalizeProperty(rootScope, state, result, key, childValue, path2, isSet2)
      );
      maybeFreeze(rootScope, result, false);
      if (path2 && rootScope.patches_) {
        getPlugin("Patches").generatePatches_(
          state,
          path2,
          rootScope.patches_,
          rootScope.inversePatches_
        );
      }
    }
    return state.copy_;
  }
  function finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {
    if (false)
      die(5);
    if (isDraft(childValue)) {
      const path2 = rootPath && parentState && parentState.type_ !== 3 && // Set objects are atomic since they have no keys.
      !has(parentState.assigned_, prop) ? rootPath.concat(prop) : void 0;
      const res = finalize(rootScope, childValue, path2);
      set(targetObject, prop, res);
      if (isDraft(res)) {
        rootScope.canAutoFreeze_ = false;
      } else
        return;
    } else if (targetIsSet) {
      targetObject.add(childValue);
    }
    if (isDraftable(childValue) && !isFrozen(childValue)) {
      if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {
        return;
      }
      finalize(rootScope, childValue);
      if ((!parentState || !parentState.scope_.parent_) && typeof prop !== "symbol" && (isMap(targetObject) ? targetObject.has(prop) : Object.prototype.propertyIsEnumerable.call(targetObject, prop)))
        maybeFreeze(rootScope, childValue);
    }
  }
  function maybeFreeze(scope, value, deep = false) {
    if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {
      freeze(value, deep);
    }
  }
  function createProxyProxy(base, parent) {
    const isArray = Array.isArray(base);
    const state = {
      type_: isArray ? 1 : 0,
      // Track which produce call this is associated with.
      scope_: parent ? parent.scope_ : getCurrentScope(),
      // True for both shallow and deep changes.
      modified_: false,
      // Used during finalization.
      finalized_: false,
      // Track which properties have been assigned (true) or deleted (false).
      assigned_: {},
      // The parent draft state.
      parent_: parent,
      // The base state.
      base_: base,
      // The base proxy.
      draft_: null,
      // set below
      // The base copy with any updated values.
      copy_: null,
      // Called by the `produce` function.
      revoke_: null,
      isManual_: false
    };
    let target = state;
    let traps = objectTraps;
    if (isArray) {
      target = [state];
      traps = arrayTraps;
    }
    const { revoke, proxy } = Proxy.revocable(target, traps);
    state.draft_ = proxy;
    state.revoke_ = revoke;
    return proxy;
  }
  var objectTraps = {
    get(state, prop) {
      if (prop === DRAFT_STATE)
        return state;
      const source = latest(state);
      if (!has(source, prop)) {
        return readPropFromProto(state, source, prop);
      }
      const value = source[prop];
      if (state.finalized_ || !isDraftable(value)) {
        return value;
      }
      if (value === peek(state.base_, prop)) {
        prepareCopy(state);
        return state.copy_[prop] = createProxy(value, state);
      }
      return value;
    },
    has(state, prop) {
      return prop in latest(state);
    },
    ownKeys(state) {
      return Reflect.ownKeys(latest(state));
    },
    set(state, prop, value) {
      const desc = getDescriptorFromProto(latest(state), prop);
      if (desc?.set) {
        desc.set.call(state.draft_, value);
        return true;
      }
      if (!state.modified_) {
        const current2 = peek(latest(state), prop);
        const currentState = current2?.[DRAFT_STATE];
        if (currentState && currentState.base_ === value) {
          state.copy_[prop] = value;
          state.assigned_[prop] = false;
          return true;
        }
        if (is(value, current2) && (value !== void 0 || has(state.base_, prop)))
          return true;
        prepareCopy(state);
        markChanged(state);
      }
      if (state.copy_[prop] === value && // special case: handle new props with value 'undefined'
      (value !== void 0 || prop in state.copy_) || // special case: NaN
      Number.isNaN(value) && Number.isNaN(state.copy_[prop]))
        return true;
      state.copy_[prop] = value;
      state.assigned_[prop] = true;
      return true;
    },
    deleteProperty(state, prop) {
      if (peek(state.base_, prop) !== void 0 || prop in state.base_) {
        state.assigned_[prop] = false;
        prepareCopy(state);
        markChanged(state);
      } else {
        delete state.assigned_[prop];
      }
      if (state.copy_) {
        delete state.copy_[prop];
      }
      return true;
    },
    // Note: We never coerce `desc.value` into an Immer draft, because we can't make
    // the same guarantee in ES5 mode.
    getOwnPropertyDescriptor(state, prop) {
      const owner = latest(state);
      const desc = Reflect.getOwnPropertyDescriptor(owner, prop);
      if (!desc)
        return desc;
      return {
        writable: true,
        configurable: state.type_ !== 1 || prop !== "length",
        enumerable: desc.enumerable,
        value: owner[prop]
      };
    },
    defineProperty() {
      die(11);
    },
    getPrototypeOf(state) {
      return getPrototypeOf(state.base_);
    },
    setPrototypeOf() {
      die(12);
    }
  };
  var arrayTraps = {};
  each(objectTraps, (key, fn) => {
    arrayTraps[key] = function() {
      arguments[0] = arguments[0][0];
      return fn.apply(this, arguments);
    };
  });
  arrayTraps.deleteProperty = function(state, prop) {
    if (false)
      die(13);
    return arrayTraps.set.call(this, state, prop, void 0);
  };
  arrayTraps.set = function(state, prop, value) {
    if (false)
      die(14);
    return objectTraps.set.call(this, state[0], prop, value, state[0]);
  };
  function peek(draft, prop) {
    const state = draft[DRAFT_STATE];
    const source = state ? latest(state) : draft;
    return source[prop];
  }
  function readPropFromProto(state, source, prop) {
    const desc = getDescriptorFromProto(source, prop);
    return desc ? `value` in desc ? desc.value : (
      // This is a very special case, if the prop is a getter defined by the
      // prototype, we should invoke it with the draft as context!
      desc.get?.call(state.draft_)
    ) : void 0;
  }
  function getDescriptorFromProto(source, prop) {
    if (!(prop in source))
      return void 0;
    let proto2 = getPrototypeOf(source);
    while (proto2) {
      const desc = Object.getOwnPropertyDescriptor(proto2, prop);
      if (desc)
        return desc;
      proto2 = getPrototypeOf(proto2);
    }
    return void 0;
  }
  function markChanged(state) {
    if (!state.modified_) {
      state.modified_ = true;
      if (state.parent_) {
        markChanged(state.parent_);
      }
    }
  }
  function prepareCopy(state) {
    if (!state.copy_) {
      state.copy_ = shallowCopy(
        state.base_,
        state.scope_.immer_.useStrictShallowCopy_
      );
    }
  }
  var Immer2 = class {
    constructor(config) {
      this.autoFreeze_ = true;
      this.useStrictShallowCopy_ = false;
      this.produce = (base, recipe, patchListener) => {
        if (typeof base === "function" && typeof recipe !== "function") {
          const defaultBase = recipe;
          recipe = base;
          const self2 = this;
          return function curriedProduce(base2 = defaultBase, ...args) {
            return self2.produce(base2, (draft) => recipe.call(this, draft, ...args));
          };
        }
        if (typeof recipe !== "function")
          die(6);
        if (patchListener !== void 0 && typeof patchListener !== "function")
          die(7);
        let result;
        if (isDraftable(base)) {
          const scope = enterScope(this);
          const proxy = createProxy(base, void 0);
          let hasError = true;
          try {
            result = recipe(proxy);
            hasError = false;
          } finally {
            if (hasError)
              revokeScope(scope);
            else
              leaveScope(scope);
          }
          usePatchesInScope(scope, patchListener);
          return processResult(result, scope);
        } else if (!base || typeof base !== "object") {
          result = recipe(base);
          if (result === void 0)
            result = base;
          if (result === NOTHING)
            result = void 0;
          if (this.autoFreeze_)
            freeze(result, true);
          if (patchListener) {
            const p = [];
            const ip = [];
            getPlugin("Patches").generateReplacementPatches_(base, result, p, ip);
            patchListener(p, ip);
          }
          return result;
        } else
          die(1, base);
      };
      this.produceWithPatches = (base, recipe) => {
        if (typeof base === "function") {
          return (state, ...args) => this.produceWithPatches(state, (draft) => base(draft, ...args));
        }
        let patches, inversePatches;
        const result = this.produce(base, recipe, (p, ip) => {
          patches = p;
          inversePatches = ip;
        });
        return [result, patches, inversePatches];
      };
      if (typeof config?.autoFreeze === "boolean")
        this.setAutoFreeze(config.autoFreeze);
      if (typeof config?.useStrictShallowCopy === "boolean")
        this.setUseStrictShallowCopy(config.useStrictShallowCopy);
    }
    createDraft(base) {
      if (!isDraftable(base))
        die(8);
      if (isDraft(base))
        base = current(base);
      const scope = enterScope(this);
      const proxy = createProxy(base, void 0);
      proxy[DRAFT_STATE].isManual_ = true;
      leaveScope(scope);
      return proxy;
    }
    finishDraft(draft, patchListener) {
      const state = draft && draft[DRAFT_STATE];
      if (!state || !state.isManual_)
        die(9);
      const { scope_: scope } = state;
      usePatchesInScope(scope, patchListener);
      return processResult(void 0, scope);
    }
    /**
     * Pass true to automatically freeze all copies created by Immer.
     *
     * By default, auto-freezing is enabled.
     */
    setAutoFreeze(value) {
      this.autoFreeze_ = value;
    }
    /**
     * Pass true to enable strict shallow copy.
     *
     * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.
     */
    setUseStrictShallowCopy(value) {
      this.useStrictShallowCopy_ = value;
    }
    applyPatches(base, patches) {
      let i;
      for (i = patches.length - 1; i >= 0; i--) {
        const patch = patches[i];
        if (patch.path.length === 0 && patch.op === "replace") {
          base = patch.value;
          break;
        }
      }
      if (i > -1) {
        patches = patches.slice(i + 1);
      }
      const applyPatchesImpl = getPlugin("Patches").applyPatches_;
      if (isDraft(base)) {
        return applyPatchesImpl(base, patches);
      }
      return this.produce(
        base,
        (draft) => applyPatchesImpl(draft, patches)
      );
    }
  };
  function createProxy(value, parent) {
    const draft = isMap(value) ? getPlugin("MapSet").proxyMap_(value, parent) : isSet(value) ? getPlugin("MapSet").proxySet_(value, parent) : createProxyProxy(value, parent);
    const scope = parent ? parent.scope_ : getCurrentScope();
    scope.drafts_.push(draft);
    return draft;
  }
  function current(value) {
    if (!isDraft(value))
      die(10, value);
    return currentImpl(value);
  }
  function currentImpl(value) {
    if (!isDraftable(value) || isFrozen(value))
      return value;
    const state = value[DRAFT_STATE];
    let copy3;
    if (state) {
      if (!state.modified_)
        return state.base_;
      state.finalized_ = true;
      copy3 = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_);
    } else {
      copy3 = shallowCopy(value, true);
    }
    each(copy3, (key, childValue) => {
      set(copy3, key, currentImpl(childValue));
    });
    if (state) {
      state.finalized_ = false;
    }
    return copy3;
  }
  var immer = new Immer2();
  var produce = immer.produce;
  function castDraft(value) {
    return value;
  }

  // node_modules/redux-thunk/dist/redux-thunk.mjs
  function createThunkMiddleware(extraArgument) {
    const middleware = ({ dispatch, getState }) => (next) => (action) => {
      if (typeof action === "function") {
        return action(dispatch, getState, extraArgument);
      }
      return next(action);
    };
    return middleware;
  }
  var thunk = createThunkMiddleware();
  var withExtraArgument = createThunkMiddleware;

  // node_modules/@reduxjs/toolkit/dist/redux-toolkit.modern.mjs
  var composeWithDevTools = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function() {
    if (arguments.length === 0) return void 0;
    if (typeof arguments[0] === "object") return compose;
    return compose.apply(null, arguments);
  };
  var devToolsEnhancer = typeof window !== "undefined" && window.__REDUX_DEVTOOLS_EXTENSION__ ? window.__REDUX_DEVTOOLS_EXTENSION__ : function() {
    return function(noop32) {
      return noop32;
    };
  };
  var hasMatchFunction = (v) => {
    return v && typeof v.match === "function";
  };
  function createAction(type, prepareAction) {
    function actionCreator(...args) {
      if (prepareAction) {
        let prepared = prepareAction(...args);
        if (!prepared) {
          throw new Error(true ? formatProdErrorMessage2(0) : "prepareAction did not return an object");
        }
        return {
          type,
          payload: prepared.payload,
          ..."meta" in prepared && {
            meta: prepared.meta
          },
          ..."error" in prepared && {
            error: prepared.error
          }
        };
      }
      return {
        type,
        payload: args[0]
      };
    }
    actionCreator.toString = () => `${type}`;
    actionCreator.type = type;
    actionCreator.match = (action) => isAction(action) && action.type === type;
    return actionCreator;
  }
  var Tuple = class _Tuple extends Array {
    constructor(...items) {
      super(...items);
      Object.setPrototypeOf(this, _Tuple.prototype);
    }
    static get [Symbol.species]() {
      return _Tuple;
    }
    concat(...arr) {
      return super.concat.apply(this, arr);
    }
    prepend(...arr) {
      if (arr.length === 1 && Array.isArray(arr[0])) {
        return new _Tuple(...arr[0].concat(this));
      }
      return new _Tuple(...arr.concat(this));
    }
  };
  function freezeDraftable(val) {
    return isDraftable(val) ? produce(val, () => {
    }) : val;
  }
  function getOrInsertComputed(map3, key, compute) {
    if (map3.has(key)) return map3.get(key);
    return map3.set(key, compute(key)).get(key);
  }
  function isBoolean(x2) {
    return typeof x2 === "boolean";
  }
  var buildGetDefaultMiddleware = () => function getDefaultMiddleware(options) {
    const {
      thunk: thunk2 = true,
      immutableCheck = true,
      serializableCheck = true,
      actionCreatorCheck = true
    } = options ?? {};
    let middlewareArray = new Tuple();
    if (thunk2) {
      if (isBoolean(thunk2)) {
        middlewareArray.push(thunk);
      } else {
        middlewareArray.push(withExtraArgument(thunk2.extraArgument));
      }
    }
    if (false) {
      if (immutableCheck) {
        let immutableOptions = {};
        if (!isBoolean(immutableCheck)) {
          immutableOptions = immutableCheck;
        }
        middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));
      }
      if (serializableCheck) {
        let serializableOptions = {};
        if (!isBoolean(serializableCheck)) {
          serializableOptions = serializableCheck;
        }
        middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));
      }
      if (actionCreatorCheck) {
        let actionCreatorOptions = {};
        if (!isBoolean(actionCreatorCheck)) {
          actionCreatorOptions = actionCreatorCheck;
        }
        middlewareArray.unshift(createActionCreatorInvariantMiddleware(actionCreatorOptions));
      }
    }
    return middlewareArray;
  };
  var SHOULD_AUTOBATCH = "RTK_autoBatch";
  var createQueueWithTimer = (timeout) => {
    return (notify) => {
      setTimeout(notify, timeout);
    };
  };
  var autoBatchEnhancer = (options = {
    type: "raf"
  }) => (next) => (...args) => {
    const store = next(...args);
    let notifying = true;
    let shouldNotifyAtEndOfTick = false;
    let notificationQueued = false;
    const listeners = /* @__PURE__ */ new Set();
    const queueCallback = options.type === "tick" ? queueMicrotask : options.type === "raf" ? (
      // requestAnimationFrame won't exist in SSR environments. Fall back to a vague approximation just to keep from erroring.
      typeof window !== "undefined" && window.requestAnimationFrame ? window.requestAnimationFrame : createQueueWithTimer(10)
    ) : options.type === "callback" ? options.queueNotification : createQueueWithTimer(options.timeout);
    const notifyListeners = () => {
      notificationQueued = false;
      if (shouldNotifyAtEndOfTick) {
        shouldNotifyAtEndOfTick = false;
        listeners.forEach((l) => l());
      }
    };
    return Object.assign({}, store, {
      // Override the base `store.subscribe` method to keep original listeners
      // from running if we're delaying notifications
      subscribe(listener2) {
        const wrappedListener = () => notifying && listener2();
        const unsubscribe = store.subscribe(wrappedListener);
        listeners.add(listener2);
        return () => {
          unsubscribe();
          listeners.delete(listener2);
        };
      },
      // Override the base `store.dispatch` method so that we can check actions
      // for the `shouldAutoBatch` flag and determine if batching is active
      dispatch(action) {
        try {
          notifying = !action?.meta?.[SHOULD_AUTOBATCH];
          shouldNotifyAtEndOfTick = !notifying;
          if (shouldNotifyAtEndOfTick) {
            if (!notificationQueued) {
              notificationQueued = true;
              queueCallback(notifyListeners);
            }
          }
          return store.dispatch(action);
        } finally {
          notifying = true;
        }
      }
    });
  };
  var buildGetDefaultEnhancers = (middlewareEnhancer) => function getDefaultEnhancers(options) {
    const {
      autoBatch = true
    } = options ?? {};
    let enhancerArray = new Tuple(middlewareEnhancer);
    if (autoBatch) {
      enhancerArray.push(autoBatchEnhancer(typeof autoBatch === "object" ? autoBatch : void 0));
    }
    return enhancerArray;
  };
  function configureStore(options) {
    const getDefaultMiddleware = buildGetDefaultMiddleware();
    const {
      reducer = void 0,
      middleware,
      devTools = true,
      duplicateMiddlewareCheck = true,
      preloadedState = void 0,
      enhancers = void 0
    } = options || {};
    let rootReducer2;
    if (typeof reducer === "function") {
      rootReducer2 = reducer;
    } else if (isPlainObject(reducer)) {
      rootReducer2 = combineReducers(reducer);
    } else {
      throw new Error(true ? formatProdErrorMessage2(1) : "`reducer` is a required argument, and must be a function or an object of functions that can be passed to combineReducers");
    }
    if (false) {
      throw new Error(true ? formatProdErrorMessage2(2) : "`middleware` field must be a callback");
    }
    let finalMiddleware;
    if (typeof middleware === "function") {
      finalMiddleware = middleware(getDefaultMiddleware);
      if (false) {
        throw new Error(true ? formatProdErrorMessage2(3) : "when using a middleware builder function, an array of middleware must be returned");
      }
    } else {
      finalMiddleware = getDefaultMiddleware();
    }
    if (false) {
      throw new Error(true ? formatProdErrorMessage2(4) : "each middleware provided to configureStore must be a function");
    }
    if (false) {
      let middlewareReferences = /* @__PURE__ */ new Set();
      finalMiddleware.forEach((middleware2) => {
        if (middlewareReferences.has(middleware2)) {
          throw new Error(true ? formatProdErrorMessage2(42) : "Duplicate middleware references found when creating the store. Ensure that each middleware is only included once.");
        }
        middlewareReferences.add(middleware2);
      });
    }
    let finalCompose = compose;
    if (devTools) {
      finalCompose = composeWithDevTools({
        // Enable capture of stack traces for dispatched Redux actions
        trace: false,
        ...typeof devTools === "object" && devTools
      });
    }
    const middlewareEnhancer = applyMiddleware(...finalMiddleware);
    const getDefaultEnhancers = buildGetDefaultEnhancers(middlewareEnhancer);
    if (false) {
      throw new Error(true ? formatProdErrorMessage2(5) : "`enhancers` field must be a callback");
    }
    let storeEnhancers = typeof enhancers === "function" ? enhancers(getDefaultEnhancers) : getDefaultEnhancers();
    if (false) {
      throw new Error(true ? formatProdErrorMessage2(6) : "`enhancers` callback must return an array");
    }
    if (false) {
      throw new Error(true ? formatProdErrorMessage2(7) : "each enhancer provided to configureStore must be a function");
    }
    if (false) {
      console.error("middlewares were provided, but middleware enhancer was not included in final enhancers - make sure to call `getDefaultEnhancers`");
    }
    const composedEnhancer = finalCompose(...storeEnhancers);
    return createStore(rootReducer2, preloadedState, composedEnhancer);
  }
  function executeReducerBuilderCallback(builderCallback) {
    const actionsMap = {};
    const actionMatchers = [];
    let defaultCaseReducer;
    const builder = {
      addCase(typeOrActionCreator, reducer) {
        if (false) {
          if (actionMatchers.length > 0) {
            throw new Error(true ? formatProdErrorMessage2(26) : "`builder.addCase` should only be called before calling `builder.addMatcher`");
          }
          if (defaultCaseReducer) {
            throw new Error(true ? formatProdErrorMessage2(27) : "`builder.addCase` should only be called before calling `builder.addDefaultCase`");
          }
        }
        const type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
        if (!type) {
          throw new Error(true ? formatProdErrorMessage2(28) : "`builder.addCase` cannot be called with an empty action type");
        }
        if (type in actionsMap) {
          throw new Error(true ? formatProdErrorMessage2(29) : `\`builder.addCase\` cannot be called with two reducers for the same action type '${type}'`);
        }
        actionsMap[type] = reducer;
        return builder;
      },
      addAsyncThunk(asyncThunk, reducers) {
        if (false) {
          if (defaultCaseReducer) {
            throw new Error(true ? formatProdErrorMessage2(43) : "`builder.addAsyncThunk` should only be called before calling `builder.addDefaultCase`");
          }
        }
        if (reducers.pending) actionsMap[asyncThunk.pending.type] = reducers.pending;
        if (reducers.rejected) actionsMap[asyncThunk.rejected.type] = reducers.rejected;
        if (reducers.fulfilled) actionsMap[asyncThunk.fulfilled.type] = reducers.fulfilled;
        if (reducers.settled) actionMatchers.push({
          matcher: asyncThunk.settled,
          reducer: reducers.settled
        });
        return builder;
      },
      addMatcher(matcher, reducer) {
        if (false) {
          if (defaultCaseReducer) {
            throw new Error(true ? formatProdErrorMessage2(30) : "`builder.addMatcher` should only be called before calling `builder.addDefaultCase`");
          }
        }
        actionMatchers.push({
          matcher,
          reducer
        });
        return builder;
      },
      addDefaultCase(reducer) {
        if (false) {
          if (defaultCaseReducer) {
            throw new Error(true ? formatProdErrorMessage2(31) : "`builder.addDefaultCase` can only be called once");
          }
        }
        defaultCaseReducer = reducer;
        return builder;
      }
    };
    builderCallback(builder);
    return [actionsMap, actionMatchers, defaultCaseReducer];
  }
  function isStateFunction(x2) {
    return typeof x2 === "function";
  }
  function createReducer(initialState12, mapOrBuilderCallback) {
    if (false) {
      if (typeof mapOrBuilderCallback === "object") {
        throw new Error(true ? formatProdErrorMessage2(8) : "The object notation for `createReducer` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createReducer");
      }
    }
    let [actionsMap, finalActionMatchers, finalDefaultCaseReducer] = executeReducerBuilderCallback(mapOrBuilderCallback);
    let getInitialState;
    if (isStateFunction(initialState12)) {
      getInitialState = () => freezeDraftable(initialState12());
    } else {
      const frozenInitialState = freezeDraftable(initialState12);
      getInitialState = () => frozenInitialState;
    }
    function reducer(state = getInitialState(), action) {
      let caseReducers = [actionsMap[action.type], ...finalActionMatchers.filter(({
        matcher
      }) => matcher(action)).map(({
        reducer: reducer2
      }) => reducer2)];
      if (caseReducers.filter((cr) => !!cr).length === 0) {
        caseReducers = [finalDefaultCaseReducer];
      }
      return caseReducers.reduce((previousState, caseReducer) => {
        if (caseReducer) {
          if (isDraft(previousState)) {
            const draft = previousState;
            const result = caseReducer(draft, action);
            if (result === void 0) {
              return previousState;
            }
            return result;
          } else if (!isDraftable(previousState)) {
            const result = caseReducer(previousState, action);
            if (result === void 0) {
              if (previousState === null) {
                return previousState;
              }
              throw Error("A case reducer on a non-draftable value must not return undefined");
            }
            return result;
          } else {
            return produce(previousState, (draft) => {
              return caseReducer(draft, action);
            });
          }
        }
        return previousState;
      }, state);
    }
    reducer.getInitialState = getInitialState;
    return reducer;
  }
  var matches = (matcher, action) => {
    if (hasMatchFunction(matcher)) {
      return matcher.match(action);
    } else {
      return matcher(action);
    }
  };
  function isAnyOf(...matchers) {
    return (action) => {
      return matchers.some((matcher) => matches(matcher, action));
    };
  }
  var urlAlphabet = "ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW";
  var nanoid = (size = 21) => {
    let id = "";
    let i = size;
    while (i--) {
      id += urlAlphabet[Math.random() * 64 | 0];
    }
    return id;
  };
  var commonProperties = ["name", "message", "stack", "code"];
  var RejectWithValue = class {
    constructor(payload, meta) {
      this.payload = payload;
      this.meta = meta;
    }
    /*
    type-only property to distinguish between RejectWithValue and FulfillWithMeta
    does not exist at runtime
    */
    _type;
  };
  var FulfillWithMeta = class {
    constructor(payload, meta) {
      this.payload = payload;
      this.meta = meta;
    }
    /*
    type-only property to distinguish between RejectWithValue and FulfillWithMeta
    does not exist at runtime
    */
    _type;
  };
  var miniSerializeError = (value) => {
    if (typeof value === "object" && value !== null) {
      const simpleError = {};
      for (const property of commonProperties) {
        if (typeof value[property] === "string") {
          simpleError[property] = value[property];
        }
      }
      return simpleError;
    }
    return {
      message: String(value)
    };
  };
  var externalAbortMessage = "External signal was aborted";
  var createAsyncThunk = /* @__PURE__ */ (() => {
    function createAsyncThunk2(typePrefix, payloadCreator, options) {
      const fulfilled = createAction(typePrefix + "/fulfilled", (payload, requestId, arg, meta) => ({
        payload,
        meta: {
          ...meta || {},
          arg,
          requestId,
          requestStatus: "fulfilled"
        }
      }));
      const pending = createAction(typePrefix + "/pending", (requestId, arg, meta) => ({
        payload: void 0,
        meta: {
          ...meta || {},
          arg,
          requestId,
          requestStatus: "pending"
        }
      }));
      const rejected = createAction(typePrefix + "/rejected", (error, requestId, arg, payload, meta) => ({
        payload,
        error: (options && options.serializeError || miniSerializeError)(error || "Rejected"),
        meta: {
          ...meta || {},
          arg,
          requestId,
          rejectedWithValue: !!payload,
          requestStatus: "rejected",
          aborted: error?.name === "AbortError",
          condition: error?.name === "ConditionError"
        }
      }));
      function actionCreator(arg, {
        signal
      } = {}) {
        return (dispatch, getState, extra) => {
          const requestId = options?.idGenerator ? options.idGenerator(arg) : nanoid();
          const abortController = new AbortController();
          let abortHandler;
          let abortReason;
          function abort(reason) {
            abortReason = reason;
            abortController.abort();
          }
          if (signal) {
            if (signal.aborted) {
              abort(externalAbortMessage);
            } else {
              signal.addEventListener("abort", () => abort(externalAbortMessage), {
                once: true
              });
            }
          }
          const promise = async function() {
            let finalAction;
            try {
              let conditionResult = options?.condition?.(arg, {
                getState,
                extra
              });
              if (isThenable(conditionResult)) {
                conditionResult = await conditionResult;
              }
              if (conditionResult === false || abortController.signal.aborted) {
                throw {
                  name: "ConditionError",
                  message: "Aborted due to condition callback returning false."
                };
              }
              const abortedPromise = new Promise((_, reject) => {
                abortHandler = () => {
                  reject({
                    name: "AbortError",
                    message: abortReason || "Aborted"
                  });
                };
                abortController.signal.addEventListener("abort", abortHandler);
              });
              dispatch(pending(requestId, arg, options?.getPendingMeta?.({
                requestId,
                arg
              }, {
                getState,
                extra
              })));
              finalAction = await Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {
                dispatch,
                getState,
                extra,
                requestId,
                signal: abortController.signal,
                abort,
                rejectWithValue: (value, meta) => {
                  return new RejectWithValue(value, meta);
                },
                fulfillWithValue: (value, meta) => {
                  return new FulfillWithMeta(value, meta);
                }
              })).then((result) => {
                if (result instanceof RejectWithValue) {
                  throw result;
                }
                if (result instanceof FulfillWithMeta) {
                  return fulfilled(result.payload, requestId, arg, result.meta);
                }
                return fulfilled(result, requestId, arg);
              })]);
            } catch (err) {
              finalAction = err instanceof RejectWithValue ? rejected(null, requestId, arg, err.payload, err.meta) : rejected(err, requestId, arg);
            } finally {
              if (abortHandler) {
                abortController.signal.removeEventListener("abort", abortHandler);
              }
            }
            const skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;
            if (!skipDispatch) {
              dispatch(finalAction);
            }
            return finalAction;
          }();
          return Object.assign(promise, {
            abort,
            requestId,
            arg,
            unwrap() {
              return promise.then(unwrapResult);
            }
          });
        };
      }
      return Object.assign(actionCreator, {
        pending,
        rejected,
        fulfilled,
        settled: isAnyOf(rejected, fulfilled),
        typePrefix
      });
    }
    createAsyncThunk2.withTypes = () => createAsyncThunk2;
    return createAsyncThunk2;
  })();
  function unwrapResult(action) {
    if (action.meta && action.meta.rejectedWithValue) {
      throw action.payload;
    }
    if (action.error) {
      throw action.error;
    }
    return action.payload;
  }
  function isThenable(value) {
    return value !== null && typeof value === "object" && typeof value.then === "function";
  }
  var asyncThunkSymbol = /* @__PURE__ */ Symbol.for("rtk-slice-createasyncthunk");
  var asyncThunkCreator = {
    [asyncThunkSymbol]: createAsyncThunk
  };
  function getType(slice2, actionKey) {
    return `${slice2}/${actionKey}`;
  }
  function buildCreateSlice({
    creators
  } = {}) {
    const cAT = creators?.asyncThunk?.[asyncThunkSymbol];
    return function createSlice2(options) {
      const {
        name,
        reducerPath = name
      } = options;
      if (!name) {
        throw new Error(true ? formatProdErrorMessage2(11) : "`name` is a required option for createSlice");
      }
      if (typeof process !== "undefined" && false) {
        if (options.initialState === void 0) {
          console.error("You must provide an `initialState` value that is not `undefined`. You may have misspelled `initialState`");
        }
      }
      const reducers = (typeof options.reducers === "function" ? options.reducers(buildReducerCreators()) : options.reducers) || {};
      const reducerNames = Object.keys(reducers);
      const context = {
        sliceCaseReducersByName: {},
        sliceCaseReducersByType: {},
        actionCreators: {},
        sliceMatchers: []
      };
      const contextMethods = {
        addCase(typeOrActionCreator, reducer2) {
          const type = typeof typeOrActionCreator === "string" ? typeOrActionCreator : typeOrActionCreator.type;
          if (!type) {
            throw new Error(true ? formatProdErrorMessage2(12) : "`context.addCase` cannot be called with an empty action type");
          }
          if (type in context.sliceCaseReducersByType) {
            throw new Error(true ? formatProdErrorMessage2(13) : "`context.addCase` cannot be called with two reducers for the same action type: " + type);
          }
          context.sliceCaseReducersByType[type] = reducer2;
          return contextMethods;
        },
        addMatcher(matcher, reducer2) {
          context.sliceMatchers.push({
            matcher,
            reducer: reducer2
          });
          return contextMethods;
        },
        exposeAction(name2, actionCreator) {
          context.actionCreators[name2] = actionCreator;
          return contextMethods;
        },
        exposeCaseReducer(name2, reducer2) {
          context.sliceCaseReducersByName[name2] = reducer2;
          return contextMethods;
        }
      };
      reducerNames.forEach((reducerName) => {
        const reducerDefinition = reducers[reducerName];
        const reducerDetails = {
          reducerName,
          type: getType(name, reducerName),
          createNotation: typeof options.reducers === "function"
        };
        if (isAsyncThunkSliceReducerDefinition(reducerDefinition)) {
          handleThunkCaseReducerDefinition(reducerDetails, reducerDefinition, contextMethods, cAT);
        } else {
          handleNormalReducerDefinition(reducerDetails, reducerDefinition, contextMethods);
        }
      });
      function buildReducer() {
        if (false) {
          if (typeof options.extraReducers === "object") {
            throw new Error(true ? formatProdErrorMessage2(14) : "The object notation for `createSlice.extraReducers` has been removed. Please use the 'builder callback' notation instead: https://redux-toolkit.js.org/api/createSlice");
          }
        }
        const [extraReducers = {}, actionMatchers = [], defaultCaseReducer = void 0] = typeof options.extraReducers === "function" ? executeReducerBuilderCallback(options.extraReducers) : [options.extraReducers];
        const finalCaseReducers = {
          ...extraReducers,
          ...context.sliceCaseReducersByType
        };
        return createReducer(options.initialState, (builder) => {
          for (let key in finalCaseReducers) {
            builder.addCase(key, finalCaseReducers[key]);
          }
          for (let sM of context.sliceMatchers) {
            builder.addMatcher(sM.matcher, sM.reducer);
          }
          for (let m of actionMatchers) {
            builder.addMatcher(m.matcher, m.reducer);
          }
          if (defaultCaseReducer) {
            builder.addDefaultCase(defaultCaseReducer);
          }
        });
      }
      const selectSelf = (state) => state;
      const injectedSelectorCache = /* @__PURE__ */ new Map();
      const injectedStateCache = /* @__PURE__ */ new WeakMap();
      let _reducer;
      function reducer(state, action) {
        if (!_reducer) _reducer = buildReducer();
        return _reducer(state, action);
      }
      function getInitialState() {
        if (!_reducer) _reducer = buildReducer();
        return _reducer.getInitialState();
      }
      function makeSelectorProps(reducerPath2, injected = false) {
        function selectSlice(state) {
          let sliceState = state[reducerPath2];
          if (typeof sliceState === "undefined") {
            if (injected) {
              sliceState = getOrInsertComputed(injectedStateCache, selectSlice, getInitialState);
            } else if (false) {
              throw new Error(true ? formatProdErrorMessage2(15) : "selectSlice returned undefined for an uninjected slice reducer");
            }
          }
          return sliceState;
        }
        function getSelectors(selectState = selectSelf) {
          const selectorCache = getOrInsertComputed(injectedSelectorCache, injected, () => /* @__PURE__ */ new WeakMap());
          return getOrInsertComputed(selectorCache, selectState, () => {
            const map3 = {};
            for (const [name2, selector] of Object.entries(options.selectors ?? {})) {
              map3[name2] = wrapSelector(selector, selectState, () => getOrInsertComputed(injectedStateCache, selectState, getInitialState), injected);
            }
            return map3;
          });
        }
        return {
          reducerPath: reducerPath2,
          getSelectors,
          get selectors() {
            return getSelectors(selectSlice);
          },
          selectSlice
        };
      }
      const slice2 = {
        name,
        reducer,
        actions: context.actionCreators,
        caseReducers: context.sliceCaseReducersByName,
        getInitialState,
        ...makeSelectorProps(reducerPath),
        injectInto(injectable, {
          reducerPath: pathOpt,
          ...config
        } = {}) {
          const newReducerPath = pathOpt ?? reducerPath;
          injectable.inject({
            reducerPath: newReducerPath,
            reducer
          }, config);
          return {
            ...slice2,
            ...makeSelectorProps(newReducerPath, true)
          };
        }
      };
      return slice2;
    };
  }
  function wrapSelector(selector, selectState, getInitialState, injected) {
    function wrapper(rootState, ...args) {
      let sliceState = selectState(rootState);
      if (typeof sliceState === "undefined") {
        if (injected) {
          sliceState = getInitialState();
        } else if (false) {
          throw new Error(true ? formatProdErrorMessage2(16) : "selectState returned undefined for an uninjected slice reducer");
        }
      }
      return selector(sliceState, ...args);
    }
    wrapper.unwrapped = selector;
    return wrapper;
  }
  var createSlice = /* @__PURE__ */ buildCreateSlice();
  function buildReducerCreators() {
    function asyncThunk(payloadCreator, config) {
      return {
        _reducerDefinitionType: "asyncThunk",
        payloadCreator,
        ...config
      };
    }
    asyncThunk.withTypes = () => asyncThunk;
    return {
      reducer(caseReducer) {
        return Object.assign({
          // hack so the wrapping function has the same name as the original
          // we need to create a wrapper so the `reducerDefinitionType` is not assigned to the original
          [caseReducer.name](...args) {
            return caseReducer(...args);
          }
        }[caseReducer.name], {
          _reducerDefinitionType: "reducer"
          /* reducer */
        });
      },
      preparedReducer(prepare, reducer) {
        return {
          _reducerDefinitionType: "reducerWithPrepare",
          prepare,
          reducer
        };
      },
      asyncThunk
    };
  }
  function handleNormalReducerDefinition({
    type,
    reducerName,
    createNotation
  }, maybeReducerWithPrepare, context) {
    let caseReducer;
    let prepareCallback;
    if ("reducer" in maybeReducerWithPrepare) {
      if (createNotation && !isCaseReducerWithPrepareDefinition(maybeReducerWithPrepare)) {
        throw new Error(true ? formatProdErrorMessage2(17) : "Please use the `create.preparedReducer` notation for prepared action creators with the `create` notation.");
      }
      caseReducer = maybeReducerWithPrepare.reducer;
      prepareCallback = maybeReducerWithPrepare.prepare;
    } else {
      caseReducer = maybeReducerWithPrepare;
    }
    context.addCase(type, caseReducer).exposeCaseReducer(reducerName, caseReducer).exposeAction(reducerName, prepareCallback ? createAction(type, prepareCallback) : createAction(type));
  }
  function isAsyncThunkSliceReducerDefinition(reducerDefinition) {
    return reducerDefinition._reducerDefinitionType === "asyncThunk";
  }
  function isCaseReducerWithPrepareDefinition(reducerDefinition) {
    return reducerDefinition._reducerDefinitionType === "reducerWithPrepare";
  }
  function handleThunkCaseReducerDefinition({
    type,
    reducerName
  }, reducerDefinition, context, cAT) {
    if (!cAT) {
      throw new Error(true ? formatProdErrorMessage2(18) : "Cannot use `create.asyncThunk` in the built-in `createSlice`. Use `buildCreateSlice({ creators: { asyncThunk: asyncThunkCreator } })` to create a customised version of `createSlice`.");
    }
    const {
      payloadCreator,
      fulfilled,
      pending,
      rejected,
      settled,
      options
    } = reducerDefinition;
    const thunk2 = cAT(type, payloadCreator, options);
    context.exposeAction(reducerName, thunk2);
    if (fulfilled) {
      context.addCase(thunk2.fulfilled, fulfilled);
    }
    if (pending) {
      context.addCase(thunk2.pending, pending);
    }
    if (rejected) {
      context.addCase(thunk2.rejected, rejected);
    }
    if (settled) {
      context.addMatcher(thunk2.settled, settled);
    }
    context.exposeCaseReducer(reducerName, {
      fulfilled: fulfilled || noop2,
      pending: pending || noop2,
      rejected: rejected || noop2,
      settled: settled || noop2
    });
  }
  function noop2() {
  }
  var task = "task";
  var listener = "listener";
  var completed = "completed";
  var cancelled = "cancelled";
  var taskCancelled = `task-${cancelled}`;
  var taskCompleted = `task-${completed}`;
  var listenerCancelled = `${listener}-${cancelled}`;
  var listenerCompleted = `${listener}-${completed}`;
  var TaskAbortError = class {
    constructor(code) {
      this.code = code;
      this.message = `${task} ${cancelled} (reason: ${code})`;
    }
    name = "TaskAbortError";
    message;
  };
  var assertFunction = (func, expected) => {
    if (typeof func !== "function") {
      throw new TypeError(true ? formatProdErrorMessage2(32) : `${expected} is not a function`);
    }
  };
  var noop22 = () => {
  };
  var catchRejection = (promise, onError = noop22) => {
    promise.catch(onError);
    return promise;
  };
  var addAbortSignalListener = (abortSignal, callback) => {
    abortSignal.addEventListener("abort", callback, {
      once: true
    });
    return () => abortSignal.removeEventListener("abort", callback);
  };
  var abortControllerWithReason = (abortController, reason) => {
    const signal = abortController.signal;
    if (signal.aborted) {
      return;
    }
    if (!("reason" in signal)) {
      Object.defineProperty(signal, "reason", {
        enumerable: true,
        value: reason,
        configurable: true,
        writable: true
      });
    }
    ;
    abortController.abort(reason);
  };
  var validateActive = (signal) => {
    if (signal.aborted) {
      const {
        reason
      } = signal;
      throw new TaskAbortError(reason);
    }
  };
  function raceWithSignal(signal, promise) {
    let cleanup = noop22;
    return new Promise((resolve, reject) => {
      const notifyRejection = () => reject(new TaskAbortError(signal.reason));
      if (signal.aborted) {
        notifyRejection();
        return;
      }
      cleanup = addAbortSignalListener(signal, notifyRejection);
      promise.finally(() => cleanup()).then(resolve, reject);
    }).finally(() => {
      cleanup = noop22;
    });
  }
  var runTask = async (task2, cleanUp) => {
    try {
      await Promise.resolve();
      const value = await task2();
      return {
        status: "ok",
        value
      };
    } catch (error) {
      return {
        status: error instanceof TaskAbortError ? "cancelled" : "rejected",
        error
      };
    } finally {
      cleanUp?.();
    }
  };
  var createPause = (signal) => {
    return (promise) => {
      return catchRejection(raceWithSignal(signal, promise).then((output) => {
        validateActive(signal);
        return output;
      }));
    };
  };
  var createDelay = (signal) => {
    const pause = createPause(signal);
    return (timeoutMs) => {
      return pause(new Promise((resolve) => setTimeout(resolve, timeoutMs)));
    };
  };
  var {
    assign
  } = Object;
  var INTERNAL_NIL_TOKEN = {};
  var alm = "listenerMiddleware";
  var createFork = (parentAbortSignal, parentBlockingPromises) => {
    const linkControllers = (controller) => addAbortSignalListener(parentAbortSignal, () => abortControllerWithReason(controller, parentAbortSignal.reason));
    return (taskExecutor, opts) => {
      assertFunction(taskExecutor, "taskExecutor");
      const childAbortController = new AbortController();
      linkControllers(childAbortController);
      const result = runTask(async () => {
        validateActive(parentAbortSignal);
        validateActive(childAbortController.signal);
        const result2 = await taskExecutor({
          pause: createPause(childAbortController.signal),
          delay: createDelay(childAbortController.signal),
          signal: childAbortController.signal
        });
        validateActive(childAbortController.signal);
        return result2;
      }, () => abortControllerWithReason(childAbortController, taskCompleted));
      if (opts?.autoJoin) {
        parentBlockingPromises.push(result.catch(noop22));
      }
      return {
        result: createPause(parentAbortSignal)(result),
        cancel() {
          abortControllerWithReason(childAbortController, taskCancelled);
        }
      };
    };
  };
  var createTakePattern = (startListening, signal) => {
    const take = async (predicate, timeout) => {
      validateActive(signal);
      let unsubscribe = () => {
      };
      const tuplePromise = new Promise((resolve, reject) => {
        let stopListening = startListening({
          predicate,
          effect: (action, listenerApi) => {
            listenerApi.unsubscribe();
            resolve([action, listenerApi.getState(), listenerApi.getOriginalState()]);
          }
        });
        unsubscribe = () => {
          stopListening();
          reject();
        };
      });
      const promises = [tuplePromise];
      if (timeout != null) {
        promises.push(new Promise((resolve) => setTimeout(resolve, timeout, null)));
      }
      try {
        const output = await raceWithSignal(signal, Promise.race(promises));
        validateActive(signal);
        return output;
      } finally {
        unsubscribe();
      }
    };
    return (predicate, timeout) => catchRejection(take(predicate, timeout));
  };
  var getListenerEntryPropsFrom = (options) => {
    let {
      type,
      actionCreator,
      matcher,
      predicate,
      effect
    } = options;
    if (type) {
      predicate = createAction(type).match;
    } else if (actionCreator) {
      type = actionCreator.type;
      predicate = actionCreator.match;
    } else if (matcher) {
      predicate = matcher;
    } else if (predicate) {
    } else {
      throw new Error(true ? formatProdErrorMessage2(21) : "Creating or removing a listener requires one of the known fields for matching an action");
    }
    assertFunction(effect, "options.listener");
    return {
      predicate,
      type,
      effect
    };
  };
  var createListenerEntry = /* @__PURE__ */ assign((options) => {
    const {
      type,
      predicate,
      effect
    } = getListenerEntryPropsFrom(options);
    const entry = {
      id: nanoid(),
      effect,
      type,
      predicate,
      pending: /* @__PURE__ */ new Set(),
      unsubscribe: () => {
        throw new Error(true ? formatProdErrorMessage2(22) : "Unsubscribe not initialized");
      }
    };
    return entry;
  }, {
    withTypes: () => createListenerEntry
  });
  var findListenerEntry = (listenerMap, options) => {
    const {
      type,
      effect,
      predicate
    } = getListenerEntryPropsFrom(options);
    return Array.from(listenerMap.values()).find((entry) => {
      const matchPredicateOrType = typeof type === "string" ? entry.type === type : entry.predicate === predicate;
      return matchPredicateOrType && entry.effect === effect;
    });
  };
  var cancelActiveListeners = (entry) => {
    entry.pending.forEach((controller) => {
      abortControllerWithReason(controller, listenerCancelled);
    });
  };
  var createClearListenerMiddleware = (listenerMap) => {
    return () => {
      listenerMap.forEach(cancelActiveListeners);
      listenerMap.clear();
    };
  };
  var safelyNotifyError = (errorHandler, errorToNotify, errorInfo) => {
    try {
      errorHandler(errorToNotify, errorInfo);
    } catch (errorHandlerError) {
      setTimeout(() => {
        throw errorHandlerError;
      }, 0);
    }
  };
  var addListener = /* @__PURE__ */ assign(/* @__PURE__ */ createAction(`${alm}/add`), {
    withTypes: () => addListener
  });
  var clearAllListeners = /* @__PURE__ */ createAction(`${alm}/removeAll`);
  var removeListener = /* @__PURE__ */ assign(/* @__PURE__ */ createAction(`${alm}/remove`), {
    withTypes: () => removeListener
  });
  var defaultErrorHandler = (...args) => {
    console.error(`${alm}/error`, ...args);
  };
  var createListenerMiddleware = (middlewareOptions = {}) => {
    const listenerMap = /* @__PURE__ */ new Map();
    const {
      extra,
      onError = defaultErrorHandler
    } = middlewareOptions;
    assertFunction(onError, "onError");
    const insertEntry = (entry) => {
      entry.unsubscribe = () => listenerMap.delete(entry.id);
      listenerMap.set(entry.id, entry);
      return (cancelOptions) => {
        entry.unsubscribe();
        if (cancelOptions?.cancelActive) {
          cancelActiveListeners(entry);
        }
      };
    };
    const startListening = (options) => {
      const entry = findListenerEntry(listenerMap, options) ?? createListenerEntry(options);
      return insertEntry(entry);
    };
    assign(startListening, {
      withTypes: () => startListening
    });
    const stopListening = (options) => {
      const entry = findListenerEntry(listenerMap, options);
      if (entry) {
        entry.unsubscribe();
        if (options.cancelActive) {
          cancelActiveListeners(entry);
        }
      }
      return !!entry;
    };
    assign(stopListening, {
      withTypes: () => stopListening
    });
    const notifyListener = async (entry, action, api, getOriginalState) => {
      const internalTaskController = new AbortController();
      const take = createTakePattern(startListening, internalTaskController.signal);
      const autoJoinPromises = [];
      try {
        entry.pending.add(internalTaskController);
        await Promise.resolve(entry.effect(
          action,
          // Use assign() rather than ... to avoid extra helper functions added to bundle
          assign({}, api, {
            getOriginalState,
            condition: (predicate, timeout) => take(predicate, timeout).then(Boolean),
            take,
            delay: createDelay(internalTaskController.signal),
            pause: createPause(internalTaskController.signal),
            extra,
            signal: internalTaskController.signal,
            fork: createFork(internalTaskController.signal, autoJoinPromises),
            unsubscribe: entry.unsubscribe,
            subscribe: () => {
              listenerMap.set(entry.id, entry);
            },
            cancelActiveListeners: () => {
              entry.pending.forEach((controller, _, set2) => {
                if (controller !== internalTaskController) {
                  abortControllerWithReason(controller, listenerCancelled);
                  set2.delete(controller);
                }
              });
            },
            cancel: () => {
              abortControllerWithReason(internalTaskController, listenerCancelled);
              entry.pending.delete(internalTaskController);
            },
            throwIfCancelled: () => {
              validateActive(internalTaskController.signal);
            }
          })
        ));
      } catch (listenerError) {
        if (!(listenerError instanceof TaskAbortError)) {
          safelyNotifyError(onError, listenerError, {
            raisedBy: "effect"
          });
        }
      } finally {
        await Promise.all(autoJoinPromises);
        abortControllerWithReason(internalTaskController, listenerCompleted);
        entry.pending.delete(internalTaskController);
      }
    };
    const clearListenerMiddleware = createClearListenerMiddleware(listenerMap);
    const middleware = (api) => (next) => (action) => {
      if (!isAction(action)) {
        return next(action);
      }
      if (addListener.match(action)) {
        return startListening(action.payload);
      }
      if (clearAllListeners.match(action)) {
        clearListenerMiddleware();
        return;
      }
      if (removeListener.match(action)) {
        return stopListening(action.payload);
      }
      let originalState = api.getState();
      const getOriginalState = () => {
        if (originalState === INTERNAL_NIL_TOKEN) {
          throw new Error(true ? formatProdErrorMessage2(23) : `${alm}: getOriginalState can only be called synchronously`);
        }
        return originalState;
      };
      let result;
      try {
        result = next(action);
        if (listenerMap.size > 0) {
          const currentState = api.getState();
          const listenerEntries = Array.from(listenerMap.values());
          for (const entry of listenerEntries) {
            let runListener = false;
            try {
              runListener = entry.predicate(action, currentState, originalState);
            } catch (predicateError) {
              runListener = false;
              safelyNotifyError(onError, predicateError, {
                raisedBy: "predicate"
              });
            }
            if (!runListener) {
              continue;
            }
            notifyListener(entry, action, api, getOriginalState);
          }
        }
      } finally {
        originalState = INTERNAL_NIL_TOKEN;
      }
      return result;
    };
    return {
      middleware,
      startListening,
      stopListening,
      clearListeners: clearListenerMiddleware
    };
  };
  var ORIGINAL_STATE = Symbol.for("rtk-state-proxy-original");
  function formatProdErrorMessage2(code) {
    return `Minified Redux Toolkit error #${code}; visit https://redux-toolkit.js.org/Errors?code=${code} for the full message or use the non-minified dev environment for full errors. `;
  }

  // node_modules/recharts/es6/state/layoutSlice.js
  var initialState = {
    layoutType: "horizontal",
    width: 0,
    height: 0,
    margin: {
      top: 5,
      right: 5,
      bottom: 5,
      left: 5
    },
    scale: 1
  };
  var chartLayoutSlice = createSlice({
    name: "chartLayout",
    initialState,
    reducers: {
      setLayout(state, action) {
        state.layoutType = action.payload;
      },
      setChartSize(state, action) {
        state.width = action.payload.width;
        state.height = action.payload.height;
      },
      setMargin(state, action) {
        var _action$payload$top, _action$payload$right, _action$payload$botto, _action$payload$left;
        state.margin.top = (_action$payload$top = action.payload.top) !== null && _action$payload$top !== void 0 ? _action$payload$top : 0;
        state.margin.right = (_action$payload$right = action.payload.right) !== null && _action$payload$right !== void 0 ? _action$payload$right : 0;
        state.margin.bottom = (_action$payload$botto = action.payload.bottom) !== null && _action$payload$botto !== void 0 ? _action$payload$botto : 0;
        state.margin.left = (_action$payload$left = action.payload.left) !== null && _action$payload$left !== void 0 ? _action$payload$left : 0;
      },
      setScale(state, action) {
        state.scale = action.payload;
      }
    }
  });
  var {
    setMargin,
    setLayout,
    setChartSize,
    setScale
  } = chartLayoutSlice.actions;
  var chartLayoutReducer = chartLayoutSlice.reducer;

  // node_modules/recharts/es6/util/ChartUtils.js
  var import_sortBy2 = __toESM(require_sortBy2());
  var import_get3 = __toESM(require_get2());

  // node_modules/recharts/es6/util/PolarUtils.js
  var import_react16 = __toESM(require_react());
  function ownKeys3(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread3(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys3(Object(t), true).forEach(function(r3) {
        _defineProperty3(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys3(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty3(e, r2, t) {
    return (r2 = _toPropertyKey3(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey3(t) {
    var i = _toPrimitive3(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive3(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var RADIAN2 = Math.PI / 180;
  var radianToDegree = (angleInRadian) => angleInRadian * 180 / Math.PI;
  var polarToCartesian = (cx, cy, radius, angle) => ({
    x: cx + Math.cos(-RADIAN2 * angle) * radius,
    y: cy + Math.sin(-RADIAN2 * angle) * radius
  });
  var getMaxRadius = function getMaxRadius2(width, height) {
    var offset = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      width: 0,
      height: 0,
      brushBottom: 0
    };
    return Math.min(Math.abs(width - (offset.left || 0) - (offset.right || 0)), Math.abs(height - (offset.top || 0) - (offset.bottom || 0))) / 2;
  };
  var distanceBetweenPoints = (point4, anotherPoint) => {
    var {
      x: x1,
      y: y1
    } = point4;
    var {
      x: x2,
      y: y2
    } = anotherPoint;
    return Math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2);
  };
  var getAngleOfPoint = (_ref2, _ref22) => {
    var {
      x: x2,
      y: y2
    } = _ref2;
    var {
      cx,
      cy
    } = _ref22;
    var radius = distanceBetweenPoints({
      x: x2,
      y: y2
    }, {
      x: cx,
      y: cy
    });
    if (radius <= 0) {
      return {
        radius,
        angle: 0
      };
    }
    var cos2 = (x2 - cx) / radius;
    var angleInRadian = Math.acos(cos2);
    if (y2 > cy) {
      angleInRadian = 2 * Math.PI - angleInRadian;
    }
    return {
      radius,
      angle: radianToDegree(angleInRadian),
      angleInRadian
    };
  };
  var formatAngleOfSector = (_ref3) => {
    var {
      startAngle,
      endAngle
    } = _ref3;
    var startCnt = Math.floor(startAngle / 360);
    var endCnt = Math.floor(endAngle / 360);
    var min2 = Math.min(startCnt, endCnt);
    return {
      startAngle: startAngle - min2 * 360,
      endAngle: endAngle - min2 * 360
    };
  };
  var reverseFormatAngleOfSector = (angle, _ref4) => {
    var {
      startAngle,
      endAngle
    } = _ref4;
    var startCnt = Math.floor(startAngle / 360);
    var endCnt = Math.floor(endAngle / 360);
    var min2 = Math.min(startCnt, endCnt);
    return angle + min2 * 360;
  };
  var inRangeOfSector = (_ref5, viewBox) => {
    var {
      x: x2,
      y: y2
    } = _ref5;
    var {
      radius,
      angle
    } = getAngleOfPoint({
      x: x2,
      y: y2
    }, viewBox);
    var {
      innerRadius,
      outerRadius
    } = viewBox;
    if (radius < innerRadius || radius > outerRadius) {
      return null;
    }
    if (radius === 0) {
      return null;
    }
    var {
      startAngle,
      endAngle
    } = formatAngleOfSector(viewBox);
    var formatAngle = angle;
    var inRange2;
    if (startAngle <= endAngle) {
      while (formatAngle > endAngle) {
        formatAngle -= 360;
      }
      while (formatAngle < startAngle) {
        formatAngle += 360;
      }
      inRange2 = formatAngle >= startAngle && formatAngle <= endAngle;
    } else {
      while (formatAngle > startAngle) {
        formatAngle -= 360;
      }
      while (formatAngle < endAngle) {
        formatAngle += 360;
      }
      inRange2 = formatAngle >= endAngle && formatAngle <= startAngle;
    }
    if (inRange2) {
      return _objectSpread3(_objectSpread3({}, viewBox), {}, {
        radius,
        angle: reverseFormatAngleOfSector(formatAngle, viewBox)
      });
    }
    return null;
  };

  // node_modules/recharts/es6/util/getSliced.js
  function getSliced(arr, startIndex, endIndex) {
    if (!Array.isArray(arr)) {
      return arr;
    }
    if (arr && startIndex + endIndex !== 0) {
      return arr.slice(startIndex, endIndex + 1);
    }
    return arr;
  }

  // node_modules/recharts/es6/util/ChartUtils.js
  function ownKeys4(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread4(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys4(Object(t), true).forEach(function(r3) {
        _defineProperty4(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys4(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty4(e, r2, t) {
    return (r2 = _toPropertyKey4(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey4(t) {
    var i = _toPrimitive4(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive4(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function getValueByDataKey(obj, dataKey, defaultValue) {
    if (isNullish(obj) || isNullish(dataKey)) {
      return defaultValue;
    }
    if (isNumOrStr(dataKey)) {
      return (0, import_get3.default)(obj, dataKey, defaultValue);
    }
    if (typeof dataKey === "function") {
      return dataKey(obj);
    }
    return defaultValue;
  }
  var calculateActiveTickIndex = (coordinate, ticks2, unsortedTicks, axisType, range4) => {
    var _ticks$length;
    var index = -1;
    var len = (_ticks$length = ticks2 === null || ticks2 === void 0 ? void 0 : ticks2.length) !== null && _ticks$length !== void 0 ? _ticks$length : 0;
    if (len <= 1 || coordinate == null) {
      return 0;
    }
    if (axisType === "angleAxis" && range4 != null && Math.abs(Math.abs(range4[1] - range4[0]) - 360) <= 1e-6) {
      for (var i = 0; i < len; i++) {
        var before = i > 0 ? unsortedTicks[i - 1].coordinate : unsortedTicks[len - 1].coordinate;
        var cur = unsortedTicks[i].coordinate;
        var after = i >= len - 1 ? unsortedTicks[0].coordinate : unsortedTicks[i + 1].coordinate;
        var sameDirectionCoord = void 0;
        if (mathSign(cur - before) !== mathSign(after - cur)) {
          var diffInterval = [];
          if (mathSign(after - cur) === mathSign(range4[1] - range4[0])) {
            sameDirectionCoord = after;
            var curInRange = cur + range4[1] - range4[0];
            diffInterval[0] = Math.min(curInRange, (curInRange + before) / 2);
            diffInterval[1] = Math.max(curInRange, (curInRange + before) / 2);
          } else {
            sameDirectionCoord = before;
            var afterInRange = after + range4[1] - range4[0];
            diffInterval[0] = Math.min(cur, (afterInRange + cur) / 2);
            diffInterval[1] = Math.max(cur, (afterInRange + cur) / 2);
          }
          var sameInterval = [Math.min(cur, (sameDirectionCoord + cur) / 2), Math.max(cur, (sameDirectionCoord + cur) / 2)];
          if (coordinate > sameInterval[0] && coordinate <= sameInterval[1] || coordinate >= diffInterval[0] && coordinate <= diffInterval[1]) {
            ({
              index
            } = unsortedTicks[i]);
            break;
          }
        } else {
          var minValue = Math.min(before, after);
          var maxValue = Math.max(before, after);
          if (coordinate > (minValue + cur) / 2 && coordinate <= (maxValue + cur) / 2) {
            ({
              index
            } = unsortedTicks[i]);
            break;
          }
        }
      }
    } else if (ticks2) {
      for (var _i = 0; _i < len; _i++) {
        if (_i === 0 && coordinate <= (ticks2[_i].coordinate + ticks2[_i + 1].coordinate) / 2 || _i > 0 && _i < len - 1 && coordinate > (ticks2[_i].coordinate + ticks2[_i - 1].coordinate) / 2 && coordinate <= (ticks2[_i].coordinate + ticks2[_i + 1].coordinate) / 2 || _i === len - 1 && coordinate > (ticks2[_i].coordinate + ticks2[_i - 1].coordinate) / 2) {
          ({
            index
          } = ticks2[_i]);
          break;
        }
      }
    }
    return index;
  };
  var appendOffsetOfLegend = (offset, legendSettings, legendSize) => {
    if (legendSettings && legendSize) {
      var {
        width: boxWidth,
        height: boxHeight
      } = legendSize;
      var {
        align,
        verticalAlign,
        layout
      } = legendSettings;
      if ((layout === "vertical" || layout === "horizontal" && verticalAlign === "middle") && align !== "center" && isNumber(offset[align])) {
        return _objectSpread4(_objectSpread4({}, offset), {}, {
          [align]: offset[align] + (boxWidth || 0)
        });
      }
      if ((layout === "horizontal" || layout === "vertical" && align === "center") && verticalAlign !== "middle" && isNumber(offset[verticalAlign])) {
        return _objectSpread4(_objectSpread4({}, offset), {}, {
          [verticalAlign]: offset[verticalAlign] + (boxHeight || 0)
        });
      }
    }
    return offset;
  };
  var isCategoricalAxis = (layout, axisType) => layout === "horizontal" && axisType === "xAxis" || layout === "vertical" && axisType === "yAxis" || layout === "centric" && axisType === "angleAxis" || layout === "radial" && axisType === "radiusAxis";
  var getCoordinatesOfGrid = (ticks2, minValue, maxValue, syncWithTicks) => {
    if (syncWithTicks) {
      return ticks2.map((entry) => entry.coordinate);
    }
    var hasMin, hasMax;
    var values = ticks2.map((entry) => {
      if (entry.coordinate === minValue) {
        hasMin = true;
      }
      if (entry.coordinate === maxValue) {
        hasMax = true;
      }
      return entry.coordinate;
    });
    if (!hasMin) {
      values.push(minValue);
    }
    if (!hasMax) {
      values.push(maxValue);
    }
    return values;
  };
  var getTicksOfAxis = (axis, isGrid, isAll) => {
    if (!axis) {
      return null;
    }
    var {
      duplicateDomain,
      type,
      range: range4,
      scale,
      realScaleType,
      isCategorical,
      categoricalDomain,
      tickCount,
      ticks: ticks2,
      niceTicks,
      axisType
    } = axis;
    if (!scale) {
      return null;
    }
    var offsetForBand = realScaleType === "scaleBand" && scale.bandwidth ? scale.bandwidth() / 2 : 2;
    var offset = (isGrid || isAll) && type === "category" && scale.bandwidth ? scale.bandwidth() / offsetForBand : 0;
    offset = axisType === "angleAxis" && range4 && range4.length >= 2 ? mathSign(range4[0] - range4[1]) * 2 * offset : offset;
    if (isGrid && (ticks2 || niceTicks)) {
      var result = (ticks2 || niceTicks || []).map((entry, index) => {
        var scaleContent = duplicateDomain ? duplicateDomain.indexOf(entry) : entry;
        return {
          // If the scaleContent is not a number, the coordinate will be NaN.
          // That could be the case for example with a PointScale and a string as domain.
          coordinate: scale(scaleContent) + offset,
          value: entry,
          offset,
          index
        };
      });
      return result.filter((row) => !isNan(row.coordinate));
    }
    if (isCategorical && categoricalDomain) {
      return categoricalDomain.map((entry, index) => ({
        coordinate: scale(entry) + offset,
        value: entry,
        index,
        offset
      }));
    }
    if (scale.ticks && !isAll && tickCount != null) {
      return scale.ticks(tickCount).map((entry, index) => ({
        coordinate: scale(entry) + offset,
        value: entry,
        offset,
        index
      }));
    }
    return scale.domain().map((entry, index) => ({
      coordinate: scale(entry) + offset,
      value: duplicateDomain ? duplicateDomain[entry] : entry,
      index,
      offset
    }));
  };
  var EPS2 = 1e-4;
  var checkDomainOfScale = (scale) => {
    var domain = scale.domain();
    if (!domain || domain.length <= 2) {
      return;
    }
    var len = domain.length;
    var range4 = scale.range();
    var minValue = Math.min(range4[0], range4[1]) - EPS2;
    var maxValue = Math.max(range4[0], range4[1]) + EPS2;
    var first = scale(domain[0]);
    var last2 = scale(domain[len - 1]);
    if (first < minValue || first > maxValue || last2 < minValue || last2 > maxValue) {
      scale.domain([domain[0], domain[len - 1]]);
    }
  };
  var truncateByDomain = (value, domain) => {
    if (!domain || domain.length !== 2 || !isNumber(domain[0]) || !isNumber(domain[1])) {
      return value;
    }
    var minValue = Math.min(domain[0], domain[1]);
    var maxValue = Math.max(domain[0], domain[1]);
    var result = [value[0], value[1]];
    if (!isNumber(value[0]) || value[0] < minValue) {
      result[0] = minValue;
    }
    if (!isNumber(value[1]) || value[1] > maxValue) {
      result[1] = maxValue;
    }
    if (result[0] > maxValue) {
      result[0] = maxValue;
    }
    if (result[1] < minValue) {
      result[1] = minValue;
    }
    return result;
  };
  var offsetSign = (series) => {
    var n = series.length;
    if (n <= 0) {
      return;
    }
    for (var j = 0, m = series[0].length; j < m; ++j) {
      var positive = 0;
      var negative = 0;
      for (var i = 0; i < n; ++i) {
        var value = isNan(series[i][j][1]) ? series[i][j][0] : series[i][j][1];
        if (value >= 0) {
          series[i][j][0] = positive;
          series[i][j][1] = positive + value;
          positive = series[i][j][1];
        } else {
          series[i][j][0] = negative;
          series[i][j][1] = negative + value;
          negative = series[i][j][1];
        }
      }
    }
  };
  var offsetPositive = (series) => {
    var n = series.length;
    if (n <= 0) {
      return;
    }
    for (var j = 0, m = series[0].length; j < m; ++j) {
      var positive = 0;
      for (var i = 0; i < n; ++i) {
        var value = isNan(series[i][j][1]) ? series[i][j][0] : series[i][j][1];
        if (value >= 0) {
          series[i][j][0] = positive;
          series[i][j][1] = positive + value;
          positive = series[i][j][1];
        } else {
          series[i][j][0] = 0;
          series[i][j][1] = 0;
        }
      }
    }
  };
  var STACK_OFFSET_MAP = {
    sign: offsetSign,
    // @ts-expect-error definitelytyped types are incorrect
    expand: expand_default,
    // @ts-expect-error definitelytyped types are incorrect
    none: none_default,
    // @ts-expect-error definitelytyped types are incorrect
    silhouette: silhouette_default,
    // @ts-expect-error definitelytyped types are incorrect
    wiggle: wiggle_default,
    positive: offsetPositive
  };
  var getStackedData = (data, dataKeys, offsetType) => {
    var offsetAccessor = STACK_OFFSET_MAP[offsetType];
    var stack = stack_default().keys(dataKeys).value((d, key) => +getValueByDataKey(d, key, 0)).order(none_default2).offset(offsetAccessor);
    return stack(data);
  };
  function getNormalizedStackId(publicStackId) {
    return publicStackId == null ? void 0 : String(publicStackId);
  }
  var getCateCoordinateOfBar = (_ref2) => {
    var {
      axis,
      ticks: ticks2,
      offset,
      bandSize,
      entry,
      index
    } = _ref2;
    if (axis.type === "category") {
      return ticks2[index] ? ticks2[index].coordinate + offset : null;
    }
    var value = getValueByDataKey(entry, axis.dataKey, axis.scale.domain()[index]);
    return !isNullish(value) ? axis.scale(value) - bandSize / 2 + offset : null;
  };
  var getBaseValueOfBar = (_ref3) => {
    var {
      numericAxis
    } = _ref3;
    var domain = numericAxis.scale.domain();
    if (numericAxis.type === "number") {
      var minValue = Math.min(domain[0], domain[1]);
      var maxValue = Math.max(domain[0], domain[1]);
      if (minValue <= 0 && maxValue >= 0) {
        return 0;
      }
      if (maxValue < 0) {
        return maxValue;
      }
      return minValue;
    }
    return domain[0];
  };
  var getDomainOfSingle = (data) => {
    var flat = data.flat(2).filter(isNumber);
    return [Math.min(...flat), Math.max(...flat)];
  };
  var makeDomainFinite = (domain) => {
    return [domain[0] === Infinity ? 0 : domain[0], domain[1] === -Infinity ? 0 : domain[1]];
  };
  var getDomainOfStackGroups = (stackGroups, startIndex, endIndex) => {
    if (stackGroups == null) {
      return void 0;
    }
    return makeDomainFinite(Object.keys(stackGroups).reduce((result, stackId) => {
      var group = stackGroups[stackId];
      var {
        stackedData
      } = group;
      var domain = stackedData.reduce((res, entry) => {
        var sliced = getSliced(entry, startIndex, endIndex);
        var s2 = getDomainOfSingle(sliced);
        return [Math.min(res[0], s2[0]), Math.max(res[1], s2[1])];
      }, [Infinity, -Infinity]);
      return [Math.min(domain[0], result[0]), Math.max(domain[1], result[1])];
    }, [Infinity, -Infinity]));
  };
  var MIN_VALUE_REG = /^dataMin[\s]*-[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;
  var MAX_VALUE_REG = /^dataMax[\s]*\+[\s]*([0-9]+([.]{1}[0-9]+){0,1})$/;
  var getBandSizeOfAxis = (axis, ticks2, isBar) => {
    if (axis && axis.scale && axis.scale.bandwidth) {
      var bandWidth = axis.scale.bandwidth();
      if (!isBar || bandWidth > 0) {
        return bandWidth;
      }
    }
    if (axis && ticks2 && ticks2.length >= 2) {
      var orderedTicks = (0, import_sortBy2.default)(ticks2, (o) => o.coordinate);
      var bandSize = Infinity;
      for (var i = 1, len = orderedTicks.length; i < len; i++) {
        var cur = orderedTicks[i];
        var prev = orderedTicks[i - 1];
        bandSize = Math.min((cur.coordinate || 0) - (prev.coordinate || 0), bandSize);
      }
      return bandSize === Infinity ? 0 : bandSize;
    }
    return isBar ? void 0 : 0;
  };
  function getTooltipEntry(_ref4) {
    var {
      tooltipEntrySettings,
      dataKey,
      payload,
      value,
      name
    } = _ref4;
    return _objectSpread4(_objectSpread4({}, tooltipEntrySettings), {}, {
      dataKey,
      payload,
      value,
      name
    });
  }
  function getTooltipNameProp(nameFromItem, dataKey) {
    if (nameFromItem) {
      return String(nameFromItem);
    }
    if (typeof dataKey === "string") {
      return dataKey;
    }
    return void 0;
  }
  function inRange(x2, y2, layout, polarViewBox, offset) {
    if (layout === "horizontal" || layout === "vertical") {
      var isInRange = x2 >= offset.left && x2 <= offset.left + offset.width && y2 >= offset.top && y2 <= offset.top + offset.height;
      return isInRange ? {
        x: x2,
        y: y2
      } : null;
    }
    if (polarViewBox) {
      return inRangeOfSector({
        x: x2,
        y: y2
      }, polarViewBox);
    }
    return null;
  }
  var getActiveCoordinate = (layout, tooltipTicks, activeIndex, rangeObj) => {
    var entry = tooltipTicks.find((tick) => tick && tick.index === activeIndex);
    if (entry) {
      if (layout === "horizontal") {
        return {
          x: entry.coordinate,
          y: rangeObj.y
        };
      }
      if (layout === "vertical") {
        return {
          x: rangeObj.x,
          y: entry.coordinate
        };
      }
      if (layout === "centric") {
        var _angle = entry.coordinate;
        var {
          radius: _radius
        } = rangeObj;
        return _objectSpread4(_objectSpread4(_objectSpread4({}, rangeObj), polarToCartesian(rangeObj.cx, rangeObj.cy, _radius, _angle)), {}, {
          angle: _angle,
          radius: _radius
        });
      }
      var radius = entry.coordinate;
      var {
        angle
      } = rangeObj;
      return _objectSpread4(_objectSpread4(_objectSpread4({}, rangeObj), polarToCartesian(rangeObj.cx, rangeObj.cy, radius, angle)), {}, {
        angle,
        radius
      });
    }
    return {
      x: 0,
      y: 0
    };
  };
  var calculateTooltipPos = (rangeObj, layout) => {
    if (layout === "horizontal") {
      return rangeObj.x;
    }
    if (layout === "vertical") {
      return rangeObj.y;
    }
    if (layout === "centric") {
      return rangeObj.angle;
    }
    return rangeObj.radius;
  };

  // node_modules/recharts/es6/state/selectors/containerSelectors.js
  var selectChartWidth = (state) => state.layout.width;
  var selectChartHeight = (state) => state.layout.height;
  var selectContainerScale = (state) => state.layout.scale;
  var selectMargin = (state) => state.layout.margin;

  // node_modules/recharts/es6/state/selectors/selectAllAxes.js
  var selectAllXAxes = createSelector((state) => state.cartesianAxis.xAxis, (xAxisMap) => {
    return Object.values(xAxisMap);
  });
  var selectAllYAxes = createSelector((state) => state.cartesianAxis.yAxis, (yAxisMap) => {
    return Object.values(yAxisMap);
  });

  // node_modules/recharts/es6/util/Constants.js
  var DATA_ITEM_INDEX_ATTRIBUTE_NAME = "data-recharts-item-index";
  var DATA_ITEM_DATAKEY_ATTRIBUTE_NAME = "data-recharts-item-data-key";
  var DEFAULT_Y_AXIS_WIDTH = 60;

  // node_modules/recharts/es6/state/selectors/selectChartOffsetInternal.js
  function ownKeys5(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread5(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys5(Object(t), true).forEach(function(r3) {
        _defineProperty5(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys5(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty5(e, r2, t) {
    return (r2 = _toPropertyKey5(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey5(t) {
    var i = _toPrimitive5(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive5(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var selectBrushHeight = (state) => state.brush.height;
  function selectLeftAxesOffset(state) {
    var yAxes = selectAllYAxes(state);
    return yAxes.reduce((result, entry) => {
      if (entry.orientation === "left" && !entry.mirror && !entry.hide) {
        var width = typeof entry.width === "number" ? entry.width : DEFAULT_Y_AXIS_WIDTH;
        return result + width;
      }
      return result;
    }, 0);
  }
  function selectRightAxesOffset(state) {
    var yAxes = selectAllYAxes(state);
    return yAxes.reduce((result, entry) => {
      if (entry.orientation === "right" && !entry.mirror && !entry.hide) {
        var width = typeof entry.width === "number" ? entry.width : DEFAULT_Y_AXIS_WIDTH;
        return result + width;
      }
      return result;
    }, 0);
  }
  function selectTopAxesOffset(state) {
    var xAxes = selectAllXAxes(state);
    return xAxes.reduce((result, entry) => {
      if (entry.orientation === "top" && !entry.mirror && !entry.hide) {
        return result + entry.height;
      }
      return result;
    }, 0);
  }
  function selectBottomAxesOffset(state) {
    var xAxes = selectAllXAxes(state);
    return xAxes.reduce((result, entry) => {
      if (entry.orientation === "bottom" && !entry.mirror && !entry.hide) {
        return result + entry.height;
      }
      return result;
    }, 0);
  }
  var selectChartOffsetInternal = createSelector([selectChartWidth, selectChartHeight, selectMargin, selectBrushHeight, selectLeftAxesOffset, selectRightAxesOffset, selectTopAxesOffset, selectBottomAxesOffset, selectLegendSettings, selectLegendSize], (chartWidth, chartHeight, margin, brushHeight, leftAxesOffset, rightAxesOffset, topAxesOffset, bottomAxesOffset, legendSettings, legendSize) => {
    var offsetH = {
      left: (margin.left || 0) + leftAxesOffset,
      right: (margin.right || 0) + rightAxesOffset
    };
    var offsetV = {
      top: (margin.top || 0) + topAxesOffset,
      bottom: (margin.bottom || 0) + bottomAxesOffset
    };
    var offset = _objectSpread5(_objectSpread5({}, offsetV), offsetH);
    var brushBottom = offset.bottom;
    offset.bottom += brushHeight;
    offset = appendOffsetOfLegend(offset, legendSettings, legendSize);
    var offsetWidth = chartWidth - offset.left - offset.right;
    var offsetHeight = chartHeight - offset.top - offset.bottom;
    return _objectSpread5(_objectSpread5({
      brushBottom
    }, offset), {}, {
      // never return negative values for height and width
      width: Math.max(offsetWidth, 0),
      height: Math.max(offsetHeight, 0)
    });
  });
  var selectChartViewBox = createSelector(selectChartOffsetInternal, (offset) => ({
    x: offset.left,
    y: offset.top,
    width: offset.width,
    height: offset.height
  }));
  var selectAxisViewBox = createSelector(selectChartWidth, selectChartHeight, (width, height) => ({
    x: 0,
    y: 0,
    width,
    height
  }));

  // node_modules/recharts/es6/context/PanoramaContext.js
  var React12 = __toESM(require_react());
  var import_react17 = __toESM(require_react());
  var PanoramaContext = /* @__PURE__ */ (0, import_react17.createContext)(null);
  var useIsPanorama = () => (0, import_react17.useContext)(PanoramaContext) != null;

  // node_modules/recharts/es6/state/selectors/brushSelectors.js
  var selectBrushSettings = (state) => state.brush;
  var selectBrushDimensions = createSelector([selectBrushSettings, selectChartOffsetInternal, selectMargin], (brushSettings, offset, margin) => ({
    height: brushSettings.height,
    x: isNumber(brushSettings.x) ? brushSettings.x : offset.left,
    y: isNumber(brushSettings.y) ? brushSettings.y : offset.top + offset.height + offset.brushBottom - ((margin === null || margin === void 0 ? void 0 : margin.bottom) || 0),
    width: isNumber(brushSettings.width) ? brushSettings.width : offset.width
  }));

  // node_modules/recharts/es6/context/chartLayoutContext.js
  var useViewBox = () => {
    var _useAppSelector;
    var panorama = useIsPanorama();
    var rootViewBox = useAppSelector(selectChartViewBox);
    var brushDimensions = useAppSelector(selectBrushDimensions);
    var brushPadding = (_useAppSelector = useAppSelector(selectBrushSettings)) === null || _useAppSelector === void 0 ? void 0 : _useAppSelector.padding;
    if (!panorama || !brushDimensions || !brushPadding) {
      return rootViewBox;
    }
    return {
      width: brushDimensions.width - brushPadding.left - brushPadding.right,
      height: brushDimensions.height - brushPadding.top - brushPadding.bottom,
      x: brushPadding.left,
      y: brushPadding.top
    };
  };
  var manyComponentsThrowErrorsIfOffsetIsUndefined = {
    top: 0,
    bottom: 0,
    left: 0,
    right: 0,
    width: 0,
    height: 0,
    brushBottom: 0
  };
  var useOffsetInternal = () => {
    var _useAppSelector2;
    return (_useAppSelector2 = useAppSelector(selectChartOffsetInternal)) !== null && _useAppSelector2 !== void 0 ? _useAppSelector2 : manyComponentsThrowErrorsIfOffsetIsUndefined;
  };
  var useChartWidth = () => {
    return useAppSelector(selectChartWidth);
  };
  var useChartHeight = () => {
    return useAppSelector(selectChartHeight);
  };
  var useMargin = () => {
    return useAppSelector((state) => state.layout.margin);
  };
  var selectChartLayout = (state) => state.layout.layoutType;
  var useChartLayout = () => useAppSelector(selectChartLayout);

  // node_modules/recharts/es6/state/legendSlice.js
  var initialState2 = {
    settings: {
      layout: "horizontal",
      align: "center",
      verticalAlign: "middle",
      itemSorter: "value"
    },
    size: {
      width: 0,
      height: 0
    },
    payload: []
  };
  var legendSlice = createSlice({
    name: "legend",
    initialState: initialState2,
    reducers: {
      setLegendSize(state, action) {
        state.size.width = action.payload.width;
        state.size.height = action.payload.height;
      },
      setLegendSettings(state, action) {
        state.settings.align = action.payload.align;
        state.settings.layout = action.payload.layout;
        state.settings.verticalAlign = action.payload.verticalAlign;
        state.settings.itemSorter = action.payload.itemSorter;
      },
      addLegendPayload(state, action) {
        state.payload.push(castDraft(action.payload));
      },
      removeLegendPayload(state, action) {
        var index = current(state).payload.indexOf(castDraft(action.payload));
        if (index > -1) {
          state.payload.splice(index, 1);
        }
      }
    }
  });
  var {
    setLegendSize,
    setLegendSettings,
    addLegendPayload,
    removeLegendPayload
  } = legendSlice.actions;
  var legendReducer = legendSlice.reducer;

  // node_modules/recharts/es6/component/Legend.js
  var _excluded4 = ["contextPayload"];
  function _extends5() {
    return _extends5 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends5.apply(null, arguments);
  }
  function ownKeys6(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread6(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys6(Object(t), true).forEach(function(r3) {
        _defineProperty6(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys6(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty6(e, r2, t) {
    return (r2 = _toPropertyKey6(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey6(t) {
    var i = _toPrimitive6(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive6(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function _objectWithoutProperties4(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose4(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose4(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  function defaultUniqBy(entry) {
    return entry.value;
  }
  function LegendContent(props) {
    var {
      contextPayload
    } = props, otherProps = _objectWithoutProperties4(props, _excluded4);
    var finalPayload = getUniqPayload(contextPayload, props.payloadUniqBy, defaultUniqBy);
    var contentProps = _objectSpread6(_objectSpread6({}, otherProps), {}, {
      payload: finalPayload
    });
    if (/* @__PURE__ */ React13.isValidElement(props.content)) {
      return /* @__PURE__ */ React13.cloneElement(props.content, contentProps);
    }
    if (typeof props.content === "function") {
      return /* @__PURE__ */ React13.createElement(props.content, contentProps);
    }
    return /* @__PURE__ */ React13.createElement(DefaultLegendContent, contentProps);
  }
  function getDefaultPosition(style, props, margin, chartWidth, chartHeight, box) {
    var {
      layout,
      align,
      verticalAlign
    } = props;
    var hPos, vPos;
    if (!style || (style.left === void 0 || style.left === null) && (style.right === void 0 || style.right === null)) {
      if (align === "center" && layout === "vertical") {
        hPos = {
          left: ((chartWidth || 0) - box.width) / 2
        };
      } else {
        hPos = align === "right" ? {
          right: margin && margin.right || 0
        } : {
          left: margin && margin.left || 0
        };
      }
    }
    if (!style || (style.top === void 0 || style.top === null) && (style.bottom === void 0 || style.bottom === null)) {
      if (verticalAlign === "middle") {
        vPos = {
          top: ((chartHeight || 0) - box.height) / 2
        };
      } else {
        vPos = verticalAlign === "bottom" ? {
          bottom: margin && margin.bottom || 0
        } : {
          top: margin && margin.top || 0
        };
      }
    }
    return _objectSpread6(_objectSpread6({}, hPos), vPos);
  }
  function LegendSettingsDispatcher(props) {
    var dispatch = useAppDispatch();
    (0, import_react19.useEffect)(() => {
      dispatch(setLegendSettings(props));
    }, [dispatch, props]);
    return null;
  }
  function LegendSizeDispatcher(props) {
    var dispatch = useAppDispatch();
    (0, import_react19.useEffect)(() => {
      dispatch(setLegendSize(props));
      return () => {
        dispatch(setLegendSize({
          width: 0,
          height: 0
        }));
      };
    }, [dispatch, props]);
    return null;
  }
  function LegendWrapper(props) {
    var contextPayload = useLegendPayload();
    var legendPortalFromContext = useLegendPortal();
    var margin = useMargin();
    var {
      width: widthFromProps,
      height: heightFromProps,
      wrapperStyle,
      portal: portalFromProps
    } = props;
    var [lastBoundingBox, updateBoundingBox] = useElementOffset([contextPayload]);
    var chartWidth = useChartWidth();
    var chartHeight = useChartHeight();
    if (chartWidth == null || chartHeight == null) {
      return null;
    }
    var maxWidth = chartWidth - (margin.left || 0) - (margin.right || 0);
    var widthOrHeight = Legend.getWidthOrHeight(props.layout, heightFromProps, widthFromProps, maxWidth);
    var outerStyle = portalFromProps ? wrapperStyle : _objectSpread6(_objectSpread6({
      position: "absolute",
      width: (widthOrHeight === null || widthOrHeight === void 0 ? void 0 : widthOrHeight.width) || widthFromProps || "auto",
      height: (widthOrHeight === null || widthOrHeight === void 0 ? void 0 : widthOrHeight.height) || heightFromProps || "auto"
    }, getDefaultPosition(wrapperStyle, props, margin, chartWidth, chartHeight, lastBoundingBox)), wrapperStyle);
    var legendPortal = portalFromProps !== null && portalFromProps !== void 0 ? portalFromProps : legendPortalFromContext;
    if (legendPortal == null) {
      return null;
    }
    var legendElement = /* @__PURE__ */ React13.createElement("div", {
      className: "recharts-legend-wrapper",
      style: outerStyle,
      ref: updateBoundingBox
    }, /* @__PURE__ */ React13.createElement(LegendSettingsDispatcher, {
      layout: props.layout,
      align: props.align,
      verticalAlign: props.verticalAlign,
      itemSorter: props.itemSorter
    }), /* @__PURE__ */ React13.createElement(LegendSizeDispatcher, {
      width: lastBoundingBox.width,
      height: lastBoundingBox.height
    }), /* @__PURE__ */ React13.createElement(LegendContent, _extends5({}, props, widthOrHeight, {
      margin,
      chartWidth,
      chartHeight,
      contextPayload
    })));
    return /* @__PURE__ */ (0, import_react_dom.createPortal)(legendElement, legendPortal);
  }
  var Legend = class extends import_react19.PureComponent {
    static getWidthOrHeight(layout, height, width, maxWidth) {
      if (layout === "vertical" && isNumber(height)) {
        return {
          height
        };
      }
      if (layout === "horizontal") {
        return {
          width: width || maxWidth
        };
      }
      return null;
    }
    render() {
      return /* @__PURE__ */ React13.createElement(LegendWrapper, this.props);
    }
  };
  _defineProperty6(Legend, "displayName", "Legend");
  _defineProperty6(Legend, "defaultProps", {
    align: "center",
    iconSize: 14,
    itemSorter: "value",
    layout: "horizontal",
    verticalAlign: "bottom"
  });

  // node_modules/recharts/es6/component/Tooltip.js
  var React21 = __toESM(require_react());
  var import_react28 = __toESM(require_react());
  var import_react_dom2 = __toESM(require_react_dom());

  // node_modules/recharts/es6/component/DefaultTooltipContent.js
  var React14 = __toESM(require_react());
  var import_sortBy3 = __toESM(require_sortBy2());
  function _extends6() {
    return _extends6 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends6.apply(null, arguments);
  }
  function ownKeys7(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread7(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys7(Object(t), true).forEach(function(r3) {
        _defineProperty7(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys7(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty7(e, r2, t) {
    return (r2 = _toPropertyKey7(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey7(t) {
    var i = _toPrimitive7(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive7(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function defaultFormatter(value) {
    return Array.isArray(value) && isNumOrStr(value[0]) && isNumOrStr(value[1]) ? value.join(" ~ ") : value;
  }
  var DefaultTooltipContent = (props) => {
    var {
      separator = " : ",
      contentStyle = {},
      itemStyle = {},
      labelStyle = {},
      payload,
      formatter,
      itemSorter,
      wrapperClassName,
      labelClassName,
      label,
      labelFormatter,
      accessibilityLayer = false
    } = props;
    var renderContent2 = () => {
      if (payload && payload.length) {
        var listStyle = {
          padding: 0,
          margin: 0
        };
        var items = (itemSorter ? (0, import_sortBy3.default)(payload, itemSorter) : payload).map((entry, i) => {
          if (entry.type === "none") {
            return null;
          }
          var finalFormatter = entry.formatter || formatter || defaultFormatter;
          var {
            value,
            name
          } = entry;
          var finalValue = value;
          var finalName = name;
          if (finalFormatter) {
            var formatted = finalFormatter(value, name, entry, i, payload);
            if (Array.isArray(formatted)) {
              [finalValue, finalName] = formatted;
            } else if (formatted != null) {
              finalValue = formatted;
            } else {
              return null;
            }
          }
          var finalItemStyle = _objectSpread7({
            display: "block",
            paddingTop: 4,
            paddingBottom: 4,
            color: entry.color || "#000"
          }, itemStyle);
          return (
            // eslint-disable-next-line react/no-array-index-key
            /* @__PURE__ */ React14.createElement("li", {
              className: "recharts-tooltip-item",
              key: "tooltip-item-".concat(i),
              style: finalItemStyle
            }, isNumOrStr(finalName) ? /* @__PURE__ */ React14.createElement("span", {
              className: "recharts-tooltip-item-name"
            }, finalName) : null, isNumOrStr(finalName) ? /* @__PURE__ */ React14.createElement("span", {
              className: "recharts-tooltip-item-separator"
            }, separator) : null, /* @__PURE__ */ React14.createElement("span", {
              className: "recharts-tooltip-item-value"
            }, finalValue), /* @__PURE__ */ React14.createElement("span", {
              className: "recharts-tooltip-item-unit"
            }, entry.unit || ""))
          );
        });
        return /* @__PURE__ */ React14.createElement("ul", {
          className: "recharts-tooltip-item-list",
          style: listStyle
        }, items);
      }
      return null;
    };
    var finalStyle = _objectSpread7({
      margin: 0,
      padding: 10,
      backgroundColor: "#fff",
      border: "1px solid #ccc",
      whiteSpace: "nowrap"
    }, contentStyle);
    var finalLabelStyle = _objectSpread7({
      margin: 0
    }, labelStyle);
    var hasLabel = !isNullish(label);
    var finalLabel = hasLabel ? label : "";
    var wrapperCN = clsx("recharts-default-tooltip", wrapperClassName);
    var labelCN = clsx("recharts-tooltip-label", labelClassName);
    if (hasLabel && labelFormatter && payload !== void 0 && payload !== null) {
      finalLabel = labelFormatter(label, payload);
    }
    var accessibilityAttributes = accessibilityLayer ? {
      role: "status",
      "aria-live": "assertive"
    } : {};
    return /* @__PURE__ */ React14.createElement("div", _extends6({
      className: wrapperCN,
      style: finalStyle
    }, accessibilityAttributes), /* @__PURE__ */ React14.createElement("p", {
      className: labelCN,
      style: finalLabelStyle
    }, /* @__PURE__ */ React14.isValidElement(finalLabel) ? finalLabel : "".concat(finalLabel)), renderContent2());
  };

  // node_modules/recharts/es6/component/TooltipBoundingBox.js
  var React15 = __toESM(require_react());
  var import_react20 = __toESM(require_react());

  // node_modules/recharts/es6/util/tooltip/translate.js
  var CSS_CLASS_PREFIX = "recharts-tooltip-wrapper";
  var TOOLTIP_HIDDEN = {
    visibility: "hidden"
  };
  function getTooltipCSSClassName(_ref2) {
    var {
      coordinate,
      translateX,
      translateY
    } = _ref2;
    return clsx(CSS_CLASS_PREFIX, {
      ["".concat(CSS_CLASS_PREFIX, "-right")]: isNumber(translateX) && coordinate && isNumber(coordinate.x) && translateX >= coordinate.x,
      ["".concat(CSS_CLASS_PREFIX, "-left")]: isNumber(translateX) && coordinate && isNumber(coordinate.x) && translateX < coordinate.x,
      ["".concat(CSS_CLASS_PREFIX, "-bottom")]: isNumber(translateY) && coordinate && isNumber(coordinate.y) && translateY >= coordinate.y,
      ["".concat(CSS_CLASS_PREFIX, "-top")]: isNumber(translateY) && coordinate && isNumber(coordinate.y) && translateY < coordinate.y
    });
  }
  function getTooltipTranslateXY(_ref2) {
    var {
      allowEscapeViewBox,
      coordinate,
      key,
      offsetTopLeft,
      position,
      reverseDirection,
      tooltipDimension,
      viewBox,
      viewBoxDimension
    } = _ref2;
    if (position && isNumber(position[key])) {
      return position[key];
    }
    var negative = coordinate[key] - tooltipDimension - (offsetTopLeft > 0 ? offsetTopLeft : 0);
    var positive = coordinate[key] + offsetTopLeft;
    if (allowEscapeViewBox[key]) {
      return reverseDirection[key] ? negative : positive;
    }
    var viewBoxKey = viewBox[key];
    if (viewBoxKey == null) {
      return 0;
    }
    if (reverseDirection[key]) {
      var _tooltipBoundary = negative;
      var _viewBoxBoundary = viewBoxKey;
      if (_tooltipBoundary < _viewBoxBoundary) {
        return Math.max(positive, viewBoxKey);
      }
      return Math.max(negative, viewBoxKey);
    }
    if (viewBoxDimension == null) {
      return 0;
    }
    var tooltipBoundary = positive + tooltipDimension;
    var viewBoxBoundary = viewBoxKey + viewBoxDimension;
    if (tooltipBoundary > viewBoxBoundary) {
      return Math.max(negative, viewBoxKey);
    }
    return Math.max(positive, viewBoxKey);
  }
  function getTransformStyle(_ref3) {
    var {
      translateX,
      translateY,
      useTranslate3d
    } = _ref3;
    return {
      transform: useTranslate3d ? "translate3d(".concat(translateX, "px, ").concat(translateY, "px, 0)") : "translate(".concat(translateX, "px, ").concat(translateY, "px)")
    };
  }
  function getTooltipTranslate(_ref4) {
    var {
      allowEscapeViewBox,
      coordinate,
      offsetTopLeft,
      position,
      reverseDirection,
      tooltipBox,
      useTranslate3d,
      viewBox
    } = _ref4;
    var cssProperties, translateX, translateY;
    if (tooltipBox.height > 0 && tooltipBox.width > 0 && coordinate) {
      translateX = getTooltipTranslateXY({
        allowEscapeViewBox,
        coordinate,
        key: "x",
        offsetTopLeft,
        position,
        reverseDirection,
        tooltipDimension: tooltipBox.width,
        viewBox,
        viewBoxDimension: viewBox.width
      });
      translateY = getTooltipTranslateXY({
        allowEscapeViewBox,
        coordinate,
        key: "y",
        offsetTopLeft,
        position,
        reverseDirection,
        tooltipDimension: tooltipBox.height,
        viewBox,
        viewBoxDimension: viewBox.height
      });
      cssProperties = getTransformStyle({
        translateX,
        translateY,
        useTranslate3d
      });
    } else {
      cssProperties = TOOLTIP_HIDDEN;
    }
    return {
      cssProperties,
      cssClasses: getTooltipCSSClassName({
        translateX,
        translateY,
        coordinate
      })
    };
  }

  // node_modules/recharts/es6/component/TooltipBoundingBox.js
  function ownKeys8(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread8(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys8(Object(t), true).forEach(function(r3) {
        _defineProperty8(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys8(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty8(e, r2, t) {
    return (r2 = _toPropertyKey8(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey8(t) {
    var i = _toPrimitive8(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive8(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var TooltipBoundingBox = class extends import_react20.PureComponent {
    constructor() {
      super(...arguments);
      _defineProperty8(this, "state", {
        dismissed: false,
        dismissedAtCoordinate: {
          x: 0,
          y: 0
        }
      });
      _defineProperty8(this, "handleKeyDown", (event) => {
        if (event.key === "Escape") {
          var _this$props$coordinat, _this$props$coordinat2, _this$props$coordinat3, _this$props$coordinat4;
          this.setState({
            dismissed: true,
            dismissedAtCoordinate: {
              x: (_this$props$coordinat = (_this$props$coordinat2 = this.props.coordinate) === null || _this$props$coordinat2 === void 0 ? void 0 : _this$props$coordinat2.x) !== null && _this$props$coordinat !== void 0 ? _this$props$coordinat : 0,
              y: (_this$props$coordinat3 = (_this$props$coordinat4 = this.props.coordinate) === null || _this$props$coordinat4 === void 0 ? void 0 : _this$props$coordinat4.y) !== null && _this$props$coordinat3 !== void 0 ? _this$props$coordinat3 : 0
            }
          });
        }
      });
    }
    componentDidMount() {
      document.addEventListener("keydown", this.handleKeyDown);
    }
    componentWillUnmount() {
      document.removeEventListener("keydown", this.handleKeyDown);
    }
    componentDidUpdate() {
      var _this$props$coordinat5, _this$props$coordinat6;
      if (!this.state.dismissed) {
        return;
      }
      if (((_this$props$coordinat5 = this.props.coordinate) === null || _this$props$coordinat5 === void 0 ? void 0 : _this$props$coordinat5.x) !== this.state.dismissedAtCoordinate.x || ((_this$props$coordinat6 = this.props.coordinate) === null || _this$props$coordinat6 === void 0 ? void 0 : _this$props$coordinat6.y) !== this.state.dismissedAtCoordinate.y) {
        this.state.dismissed = false;
      }
    }
    render() {
      var {
        active,
        allowEscapeViewBox,
        animationDuration,
        animationEasing,
        children,
        coordinate,
        hasPayload,
        isAnimationActive,
        offset,
        position,
        reverseDirection,
        useTranslate3d,
        viewBox,
        wrapperStyle,
        lastBoundingBox,
        innerRef,
        hasPortalFromProps
      } = this.props;
      var {
        cssClasses,
        cssProperties
      } = getTooltipTranslate({
        allowEscapeViewBox,
        coordinate,
        offsetTopLeft: offset,
        position,
        reverseDirection,
        tooltipBox: {
          height: lastBoundingBox.height,
          width: lastBoundingBox.width
        },
        useTranslate3d,
        viewBox
      });
      var positionStyles = hasPortalFromProps ? {} : _objectSpread8(_objectSpread8({
        transition: isAnimationActive && active ? "transform ".concat(animationDuration, "ms ").concat(animationEasing) : void 0
      }, cssProperties), {}, {
        pointerEvents: "none",
        visibility: !this.state.dismissed && active && hasPayload ? "visible" : "hidden",
        position: "absolute",
        top: 0,
        left: 0
      });
      var outerStyle = _objectSpread8(_objectSpread8({}, positionStyles), {}, {
        visibility: !this.state.dismissed && active && hasPayload ? "visible" : "hidden"
      }, wrapperStyle);
      return (
        // This element allow listening to the `Escape` key. See https://github.com/recharts/recharts/pull/2925
        /* @__PURE__ */ React15.createElement("div", {
          // @ts-expect-error typescript library does not recognize xmlns attribute, but it's required for an HTML chunk inside SVG.
          xmlns: "http://www.w3.org/1999/xhtml",
          tabIndex: -1,
          className: cssClasses,
          style: outerStyle,
          ref: innerRef
        }, children)
      );
    }
  };

  // node_modules/recharts/es6/util/Global.js
  var parseIsSsrByDefault = () => !(typeof window !== "undefined" && window.document && Boolean(window.document.createElement) && window.setTimeout);
  var Global = {
    isSsr: parseIsSsrByDefault()
  };

  // node_modules/recharts/es6/context/accessibilityContext.js
  var useAccessibilityLayer = () => useAppSelector((state) => state.rootProps.accessibilityLayer);

  // node_modules/recharts/es6/component/Cursor.js
  var React20 = __toESM(require_react());
  var import_react25 = __toESM(require_react());

  // node_modules/recharts/es6/shape/Curve.js
  var React16 = __toESM(require_react());

  // node_modules/recharts/es6/util/isWellBehavedNumber.js
  function isWellBehavedNumber(n) {
    return Number.isFinite(n);
  }
  function isPositiveNumber(n) {
    return typeof n === "number" && n > 0 && Number.isFinite(n);
  }

  // node_modules/recharts/es6/shape/Curve.js
  function _extends7() {
    return _extends7 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends7.apply(null, arguments);
  }
  function ownKeys9(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread9(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys9(Object(t), true).forEach(function(r3) {
        _defineProperty9(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys9(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty9(e, r2, t) {
    return (r2 = _toPropertyKey9(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey9(t) {
    var i = _toPrimitive9(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive9(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var CURVE_FACTORIES = {
    curveBasisClosed: basisClosed_default,
    curveBasisOpen: basisOpen_default,
    curveBasis: basis_default,
    curveBumpX: bumpX,
    curveBumpY: bumpY,
    curveLinearClosed: linearClosed_default,
    curveLinear: linear_default,
    curveMonotoneX: monotoneX,
    curveMonotoneY: monotoneY,
    curveNatural: natural_default,
    curveStep: step_default,
    curveStepAfter: stepAfter,
    curveStepBefore: stepBefore
  };
  var defined = (p) => isWellBehavedNumber(p.x) && isWellBehavedNumber(p.y);
  var getX = (p) => p.x;
  var getY = (p) => p.y;
  var getCurveFactory = (type, layout) => {
    if (typeof type === "function") {
      return type;
    }
    var name = "curve".concat(upperFirst(type));
    if ((name === "curveMonotone" || name === "curveBump") && layout) {
      return CURVE_FACTORIES["".concat(name).concat(layout === "vertical" ? "Y" : "X")];
    }
    return CURVE_FACTORIES[name] || linear_default;
  };
  var getPath = (_ref2) => {
    var {
      type = "linear",
      points = [],
      baseLine,
      layout,
      connectNulls = false
    } = _ref2;
    var curveFactory = getCurveFactory(type, layout);
    var formatPoints = connectNulls ? points.filter(defined) : points;
    var lineFunction;
    if (Array.isArray(baseLine)) {
      var formatBaseLine = connectNulls ? baseLine.filter((base) => defined(base)) : baseLine;
      var areaPoints = formatPoints.map((entry, index) => _objectSpread9(_objectSpread9({}, entry), {}, {
        base: formatBaseLine[index]
      }));
      if (layout === "vertical") {
        lineFunction = area_default().y(getY).x1(getX).x0((d) => d.base.x);
      } else {
        lineFunction = area_default().x(getX).y1(getY).y0((d) => d.base.y);
      }
      lineFunction.defined(defined).curve(curveFactory);
      return lineFunction(areaPoints);
    }
    if (layout === "vertical" && isNumber(baseLine)) {
      lineFunction = area_default().y(getY).x1(getX).x0(baseLine);
    } else if (isNumber(baseLine)) {
      lineFunction = area_default().x(getX).y1(getY).y0(baseLine);
    } else {
      lineFunction = line_default().x(getX).y(getY);
    }
    lineFunction.defined(defined).curve(curveFactory);
    return lineFunction(formatPoints);
  };
  var Curve = (props) => {
    var {
      className,
      points,
      path: path2,
      pathRef
    } = props;
    if ((!points || !points.length) && !path2) {
      return null;
    }
    var realPath = points && points.length ? getPath(props) : path2;
    return /* @__PURE__ */ React16.createElement("path", _extends7({}, svgPropertiesNoEvents(props), adaptEventHandlers(props), {
      className: clsx("recharts-curve", className),
      d: realPath === null ? void 0 : realPath,
      ref: pathRef
    }));
  };

  // node_modules/recharts/es6/shape/Cross.js
  var React17 = __toESM(require_react());
  var _excluded5 = ["x", "y", "top", "left", "width", "height", "className"];
  function _extends8() {
    return _extends8 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends8.apply(null, arguments);
  }
  function ownKeys10(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread10(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys10(Object(t), true).forEach(function(r3) {
        _defineProperty10(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys10(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty10(e, r2, t) {
    return (r2 = _toPropertyKey10(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey10(t) {
    var i = _toPrimitive10(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive10(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function _objectWithoutProperties5(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose5(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose5(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  var getPath2 = (x2, y2, width, height, top, left) => {
    return "M".concat(x2, ",").concat(top, "v").concat(height, "M").concat(left, ",").concat(y2, "h").concat(width);
  };
  var Cross = (_ref2) => {
    var {
      x: x2 = 0,
      y: y2 = 0,
      top = 0,
      left = 0,
      width = 0,
      height = 0,
      className
    } = _ref2, rest = _objectWithoutProperties5(_ref2, _excluded5);
    var props = _objectSpread10({
      x: x2,
      y: y2,
      top,
      left,
      width,
      height
    }, rest);
    if (!isNumber(x2) || !isNumber(y2) || !isNumber(width) || !isNumber(height) || !isNumber(top) || !isNumber(left)) {
      return null;
    }
    return /* @__PURE__ */ React17.createElement("path", _extends8({}, filterProps(props, true), {
      className: clsx("recharts-cross", className),
      d: getPath2(x2, y2, width, height, top, left)
    }));
  };

  // node_modules/recharts/es6/util/cursor/getCursorRectangle.js
  function getCursorRectangle(layout, activeCoordinate, offset, tooltipAxisBandSize) {
    var halfSize = tooltipAxisBandSize / 2;
    return {
      stroke: "none",
      fill: "#ccc",
      x: layout === "horizontal" ? activeCoordinate.x - halfSize : offset.left + 0.5,
      y: layout === "horizontal" ? offset.top + 0.5 : activeCoordinate.y - halfSize,
      width: layout === "horizontal" ? tooltipAxisBandSize : offset.width - 1,
      height: layout === "horizontal" ? offset.height - 1 : tooltipAxisBandSize
    };
  }

  // node_modules/recharts/es6/shape/Rectangle.js
  var React18 = __toESM(require_react());
  var import_react24 = __toESM(require_react());

  // node_modules/recharts/es6/util/resolveDefaultProps.js
  function ownKeys11(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread11(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys11(Object(t), true).forEach(function(r3) {
        _defineProperty11(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys11(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty11(e, r2, t) {
    return (r2 = _toPropertyKey11(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey11(t) {
    var i = _toPrimitive11(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive11(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function resolveDefaultProps(realProps, defaultProps6) {
    var resolvedProps = _objectSpread11({}, realProps);
    var dp = defaultProps6;
    var keys = Object.keys(defaultProps6);
    var withDefaults = keys.reduce((acc, key) => {
      if (acc[key] === void 0 && dp[key] !== void 0) {
        acc[key] = dp[key];
      }
      return acc;
    }, resolvedProps);
    return withDefaults;
  }

  // node_modules/recharts/es6/animation/JavascriptAnimate.js
  var import_react22 = __toESM(require_react());

  // node_modules/es-toolkit/dist/function/noop.mjs
  function noop3() {
  }

  // node_modules/recharts/es6/animation/util.js
  function ownKeys12(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread12(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys12(Object(t), true).forEach(function(r3) {
        _defineProperty12(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys12(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty12(e, r2, t) {
    return (r2 = _toPropertyKey12(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey12(t) {
    var i = _toPrimitive12(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive12(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var getDashCase = (name) => name.replace(/([A-Z])/g, (v) => "-".concat(v.toLowerCase()));
  var getTransitionVal = (props, duration, easing) => props.map((prop) => "".concat(getDashCase(prop), " ").concat(duration, "ms ").concat(easing)).join(",");
  var getIntersectionKeys = (preObj, nextObj) => [Object.keys(preObj), Object.keys(nextObj)].reduce((a2, b) => a2.filter((c2) => b.includes(c2)));
  var mapObject = (fn, obj) => Object.keys(obj).reduce((res, key) => _objectSpread12(_objectSpread12({}, res), {}, {
    [key]: fn(key, obj[key])
  }), {});

  // node_modules/recharts/es6/animation/configUpdate.js
  function ownKeys13(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread13(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys13(Object(t), true).forEach(function(r3) {
        _defineProperty13(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys13(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty13(e, r2, t) {
    return (r2 = _toPropertyKey13(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey13(t) {
    var i = _toPrimitive13(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive13(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var alpha = (begin, end, k2) => begin + (end - begin) * k2;
  var needContinue = (_ref2) => {
    var {
      from: from2,
      to: to2
    } = _ref2;
    return from2 !== to2;
  };
  var calStepperVals = (easing, preVals, steps) => {
    var nextStepVals = mapObject((key, val) => {
      if (needContinue(val)) {
        var [newX, newV] = easing(val.from, val.to, val.velocity);
        return _objectSpread13(_objectSpread13({}, val), {}, {
          from: newX,
          velocity: newV
        });
      }
      return val;
    }, preVals);
    if (steps < 1) {
      return mapObject((key, val) => {
        if (needContinue(val)) {
          return _objectSpread13(_objectSpread13({}, val), {}, {
            velocity: alpha(val.velocity, nextStepVals[key].velocity, steps),
            from: alpha(val.from, nextStepVals[key].from, steps)
          });
        }
        return val;
      }, preVals);
    }
    return calStepperVals(easing, nextStepVals, steps - 1);
  };
  function createStepperUpdate(from2, to2, easing, interKeys, render, timeoutController) {
    var preTime;
    var stepperStyle = interKeys.reduce((res, key) => _objectSpread13(_objectSpread13({}, res), {}, {
      [key]: {
        from: from2[key],
        velocity: 0,
        to: to2[key]
      }
    }), {});
    var getCurrStyle = () => mapObject((key, val) => val.from, stepperStyle);
    var shouldStopAnimation = () => !Object.values(stepperStyle).filter(needContinue).length;
    var stopAnimation = null;
    var stepperUpdate = (now) => {
      if (!preTime) {
        preTime = now;
      }
      var deltaTime = now - preTime;
      var steps = deltaTime / easing.dt;
      stepperStyle = calStepperVals(easing, stepperStyle, steps);
      render(_objectSpread13(_objectSpread13(_objectSpread13({}, from2), to2), getCurrStyle()));
      preTime = now;
      if (!shouldStopAnimation()) {
        stopAnimation = timeoutController.setTimeout(stepperUpdate);
      }
    };
    return () => {
      stopAnimation = timeoutController.setTimeout(stepperUpdate);
      return () => {
        stopAnimation();
      };
    };
  }
  function createTimingUpdate(from2, to2, easing, duration, interKeys, render, timeoutController) {
    var stopAnimation = null;
    var timingStyle = interKeys.reduce((res, key) => _objectSpread13(_objectSpread13({}, res), {}, {
      [key]: [from2[key], to2[key]]
    }), {});
    var beginTime;
    var timingUpdate = (now) => {
      if (!beginTime) {
        beginTime = now;
      }
      var t = (now - beginTime) / duration;
      var currStyle = mapObject((key, val) => alpha(...val, easing(t)), timingStyle);
      render(_objectSpread13(_objectSpread13(_objectSpread13({}, from2), to2), currStyle));
      if (t < 1) {
        stopAnimation = timeoutController.setTimeout(timingUpdate);
      } else {
        var finalStyle = mapObject((key, val) => alpha(...val, easing(1)), timingStyle);
        render(_objectSpread13(_objectSpread13(_objectSpread13({}, from2), to2), finalStyle));
      }
    };
    return () => {
      stopAnimation = timeoutController.setTimeout(timingUpdate);
      return () => {
        stopAnimation();
      };
    };
  }
  var configUpdate_default = (from2, to2, easing, duration, render, timeoutController) => {
    var interKeys = getIntersectionKeys(from2, to2);
    return easing.isStepper === true ? createStepperUpdate(from2, to2, easing, interKeys, render, timeoutController) : createTimingUpdate(from2, to2, easing, duration, interKeys, render, timeoutController);
  };

  // node_modules/recharts/es6/animation/easing.js
  var ACCURACY = 1e-4;
  var cubicBezierFactor = (c1, c2) => [0, 3 * c1, 3 * c2 - 6 * c1, 3 * c1 - 3 * c2 + 1];
  var evaluatePolynomial = (params, t) => params.map((param, i) => param * t ** i).reduce((pre, curr) => pre + curr);
  var cubicBezier = (c1, c2) => (t) => {
    var params = cubicBezierFactor(c1, c2);
    return evaluatePolynomial(params, t);
  };
  var derivativeCubicBezier = (c1, c2) => (t) => {
    var params = cubicBezierFactor(c1, c2);
    var newParams = [...params.map((param, i) => param * i).slice(1), 0];
    return evaluatePolynomial(newParams, t);
  };
  var configBezier = function configBezier2() {
    var x1, x2, y1, y2;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    if (args.length === 1) {
      switch (args[0]) {
        case "linear":
          [x1, y1, x2, y2] = [0, 0, 1, 1];
          break;
        case "ease":
          [x1, y1, x2, y2] = [0.25, 0.1, 0.25, 1];
          break;
        case "ease-in":
          [x1, y1, x2, y2] = [0.42, 0, 1, 1];
          break;
        case "ease-out":
          [x1, y1, x2, y2] = [0.42, 0, 0.58, 1];
          break;
        case "ease-in-out":
          [x1, y1, x2, y2] = [0, 0, 0.58, 1];
          break;
        default: {
          var easing = args[0].split("(");
          if (easing[0] === "cubic-bezier" && easing[1].split(")")[0].split(",").length === 4) {
            [x1, y1, x2, y2] = easing[1].split(")")[0].split(",").map((x3) => parseFloat(x3));
          }
        }
      }
    } else if (args.length === 4) {
      [x1, y1, x2, y2] = args;
    }
    var curveX = cubicBezier(x1, x2);
    var curveY = cubicBezier(y1, y2);
    var derCurveX = derivativeCubicBezier(x1, x2);
    var rangeValue = (value) => {
      if (value > 1) {
        return 1;
      }
      if (value < 0) {
        return 0;
      }
      return value;
    };
    var bezier = (_t) => {
      var t = _t > 1 ? 1 : _t;
      var x3 = t;
      for (var i = 0; i < 8; ++i) {
        var evalT = curveX(x3) - t;
        var derVal = derCurveX(x3);
        if (Math.abs(evalT - t) < ACCURACY || derVal < ACCURACY) {
          return curveY(x3);
        }
        x3 = rangeValue(x3 - evalT / derVal);
      }
      return curveY(x3);
    };
    bezier.isStepper = false;
    return bezier;
  };
  var configSpring = function configSpring2() {
    var config = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : {};
    var {
      stiff = 100,
      damping = 8,
      dt = 17
    } = config;
    var stepper = (currX, destX, currV) => {
      var FSpring = -(currX - destX) * stiff;
      var FDamping = currV * damping;
      var newV = currV + (FSpring - FDamping) * dt / 1e3;
      var newX = currV * dt / 1e3 + currX;
      if (Math.abs(newX - destX) < ACCURACY && Math.abs(newV) < ACCURACY) {
        return [destX, 0];
      }
      return [newX, newV];
    };
    stepper.isStepper = true;
    stepper.dt = dt;
    return stepper;
  };
  var configEasing = (easing) => {
    if (typeof easing === "string") {
      switch (easing) {
        case "ease":
        case "ease-in-out":
        case "ease-out":
        case "ease-in":
        case "linear":
          return configBezier(easing);
        case "spring":
          return configSpring();
        default:
          if (easing.split("(")[0] === "cubic-bezier") {
            return configBezier(easing);
          }
      }
    }
    if (typeof easing === "function") {
      return easing;
    }
    return null;
  };

  // node_modules/recharts/es6/animation/useAnimationManager.js
  var import_react21 = __toESM(require_react());

  // node_modules/recharts/es6/animation/AnimationManager.js
  function createAnimateManager(timeoutController) {
    var currStyle;
    var handleChange = () => null;
    var shouldStop = false;
    var cancelTimeout = null;
    var setStyle = (_style) => {
      if (shouldStop) {
        return;
      }
      if (Array.isArray(_style)) {
        if (!_style.length) {
          return;
        }
        var styles = _style;
        var [curr, ...restStyles] = styles;
        if (typeof curr === "number") {
          cancelTimeout = timeoutController.setTimeout(setStyle.bind(null, restStyles), curr);
          return;
        }
        setStyle(curr);
        cancelTimeout = timeoutController.setTimeout(setStyle.bind(null, restStyles));
        return;
      }
      if (typeof _style === "string") {
        currStyle = _style;
        handleChange(currStyle);
      }
      if (typeof _style === "object") {
        currStyle = _style;
        handleChange(currStyle);
      }
      if (typeof _style === "function") {
        _style();
      }
    };
    return {
      stop: () => {
        shouldStop = true;
      },
      start: (style) => {
        shouldStop = false;
        if (cancelTimeout) {
          cancelTimeout();
          cancelTimeout = null;
        }
        setStyle(style);
      },
      subscribe: (_handleChange) => {
        handleChange = _handleChange;
        return () => {
          handleChange = () => null;
        };
      },
      getTimeoutController: () => timeoutController
    };
  }

  // node_modules/recharts/es6/animation/timeoutController.js
  var RequestAnimationFrameTimeoutController = class {
    setTimeout(callback) {
      var delay = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
      var startTime = performance.now();
      var requestId = null;
      var executeCallback = (now) => {
        if (now - startTime >= delay) {
          callback(now);
        } else if (typeof requestAnimationFrame === "function") {
          requestId = requestAnimationFrame(executeCallback);
        }
      };
      requestId = requestAnimationFrame(executeCallback);
      return () => {
        cancelAnimationFrame(requestId);
      };
    }
  };

  // node_modules/recharts/es6/animation/createDefaultAnimationManager.js
  function createDefaultAnimationManager() {
    return createAnimateManager(new RequestAnimationFrameTimeoutController());
  }

  // node_modules/recharts/es6/animation/useAnimationManager.js
  var AnimationManagerContext = /* @__PURE__ */ (0, import_react21.createContext)(createDefaultAnimationManager);
  function useAnimationManager(animationId, animationManagerFromProps) {
    var contextAnimationManager = (0, import_react21.useContext)(AnimationManagerContext);
    return (0, import_react21.useMemo)(() => animationManagerFromProps !== null && animationManagerFromProps !== void 0 ? animationManagerFromProps : contextAnimationManager(animationId), [animationId, animationManagerFromProps, contextAnimationManager]);
  }

  // node_modules/recharts/es6/animation/JavascriptAnimate.js
  var defaultJavascriptAnimateProps = {
    begin: 0,
    duration: 1e3,
    easing: "ease",
    isActive: true,
    canBegin: true,
    onAnimationEnd: () => {
    },
    onAnimationStart: () => {
    }
  };
  var from = {
    t: 0
  };
  var to = {
    t: 1
  };
  function JavascriptAnimate(outsideProps) {
    var props = resolveDefaultProps(outsideProps, defaultJavascriptAnimateProps);
    var {
      isActive,
      canBegin,
      duration,
      easing,
      begin,
      onAnimationEnd,
      onAnimationStart,
      children
    } = props;
    var animationManager = useAnimationManager(props.animationId, props.animationManager);
    var [style, setStyle] = (0, import_react22.useState)(isActive ? from : to);
    var stopJSAnimation = (0, import_react22.useRef)(null);
    (0, import_react22.useEffect)(() => {
      if (!isActive) {
        setStyle(to);
      }
    }, [isActive]);
    (0, import_react22.useEffect)(() => {
      if (!isActive || !canBegin) {
        return noop3;
      }
      var startAnimation = configUpdate_default(from, to, configEasing(easing), duration, setStyle, animationManager.getTimeoutController());
      var onAnimationActive = () => {
        stopJSAnimation.current = startAnimation();
      };
      animationManager.start([onAnimationStart, begin, onAnimationActive, duration, onAnimationEnd]);
      return () => {
        animationManager.stop();
        if (stopJSAnimation.current) {
          stopJSAnimation.current();
        }
        onAnimationEnd();
      };
    }, [isActive, canBegin, duration, easing, begin, onAnimationStart, onAnimationEnd, animationManager]);
    return children(style.t);
  }

  // node_modules/recharts/es6/util/useAnimationId.js
  var import_react23 = __toESM(require_react());
  function useAnimationId(input) {
    var prefix2 = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "animation-";
    var animationId = (0, import_react23.useRef)(uniqueId(prefix2));
    var prevProps = (0, import_react23.useRef)(input);
    if (prevProps.current !== input) {
      animationId.current = uniqueId(prefix2);
      prevProps.current = input;
    }
    return animationId.current;
  }

  // node_modules/recharts/es6/shape/Rectangle.js
  function ownKeys14(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread14(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys14(Object(t), true).forEach(function(r3) {
        _defineProperty14(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys14(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty14(e, r2, t) {
    return (r2 = _toPropertyKey14(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey14(t) {
    var i = _toPrimitive14(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive14(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function _extends9() {
    return _extends9 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends9.apply(null, arguments);
  }
  var getRectanglePath = (x2, y2, width, height, radius) => {
    var maxRadius = Math.min(Math.abs(width) / 2, Math.abs(height) / 2);
    var ySign = height >= 0 ? 1 : -1;
    var xSign = width >= 0 ? 1 : -1;
    var clockWise = height >= 0 && width >= 0 || height < 0 && width < 0 ? 1 : 0;
    var path2;
    if (maxRadius > 0 && radius instanceof Array) {
      var newRadius = [0, 0, 0, 0];
      for (var i = 0, len = 4; i < len; i++) {
        newRadius[i] = radius[i] > maxRadius ? maxRadius : radius[i];
      }
      path2 = "M".concat(x2, ",").concat(y2 + ySign * newRadius[0]);
      if (newRadius[0] > 0) {
        path2 += "A ".concat(newRadius[0], ",").concat(newRadius[0], ",0,0,").concat(clockWise, ",").concat(x2 + xSign * newRadius[0], ",").concat(y2);
      }
      path2 += "L ".concat(x2 + width - xSign * newRadius[1], ",").concat(y2);
      if (newRadius[1] > 0) {
        path2 += "A ".concat(newRadius[1], ",").concat(newRadius[1], ",0,0,").concat(clockWise, ",\n        ").concat(x2 + width, ",").concat(y2 + ySign * newRadius[1]);
      }
      path2 += "L ".concat(x2 + width, ",").concat(y2 + height - ySign * newRadius[2]);
      if (newRadius[2] > 0) {
        path2 += "A ".concat(newRadius[2], ",").concat(newRadius[2], ",0,0,").concat(clockWise, ",\n        ").concat(x2 + width - xSign * newRadius[2], ",").concat(y2 + height);
      }
      path2 += "L ".concat(x2 + xSign * newRadius[3], ",").concat(y2 + height);
      if (newRadius[3] > 0) {
        path2 += "A ".concat(newRadius[3], ",").concat(newRadius[3], ",0,0,").concat(clockWise, ",\n        ").concat(x2, ",").concat(y2 + height - ySign * newRadius[3]);
      }
      path2 += "Z";
    } else if (maxRadius > 0 && radius === +radius && radius > 0) {
      var _newRadius = Math.min(maxRadius, radius);
      path2 = "M ".concat(x2, ",").concat(y2 + ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2 + xSign * _newRadius, ",").concat(y2, "\n            L ").concat(x2 + width - xSign * _newRadius, ",").concat(y2, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2 + width, ",").concat(y2 + ySign * _newRadius, "\n            L ").concat(x2 + width, ",").concat(y2 + height - ySign * _newRadius, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2 + width - xSign * _newRadius, ",").concat(y2 + height, "\n            L ").concat(x2 + xSign * _newRadius, ",").concat(y2 + height, "\n            A ").concat(_newRadius, ",").concat(_newRadius, ",0,0,").concat(clockWise, ",").concat(x2, ",").concat(y2 + height - ySign * _newRadius, " Z");
    } else {
      path2 = "M ".concat(x2, ",").concat(y2, " h ").concat(width, " v ").concat(height, " h ").concat(-width, " Z");
    }
    return path2;
  };
  var defaultProps = {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    // The radius of border
    // The radius of four corners when radius is a number
    // The radius of left-top, right-top, right-bottom, left-bottom when radius is an array
    radius: 0,
    isAnimationActive: false,
    isUpdateAnimationActive: false,
    animationBegin: 0,
    animationDuration: 1500,
    animationEasing: "ease"
  };
  var Rectangle = (rectangleProps) => {
    var props = resolveDefaultProps(rectangleProps, defaultProps);
    var pathRef = (0, import_react24.useRef)(null);
    var [totalLength, setTotalLength] = (0, import_react24.useState)(-1);
    (0, import_react24.useEffect)(() => {
      if (pathRef.current && pathRef.current.getTotalLength) {
        try {
          var pathTotalLength = pathRef.current.getTotalLength();
          if (pathTotalLength) {
            setTotalLength(pathTotalLength);
          }
        } catch (_unused) {
        }
      }
    }, []);
    var {
      x: x2,
      y: y2,
      width,
      height,
      radius,
      className
    } = props;
    var {
      animationEasing,
      animationDuration,
      animationBegin,
      isAnimationActive,
      isUpdateAnimationActive
    } = props;
    var prevWidthRef = (0, import_react24.useRef)(width);
    var prevHeightRef = (0, import_react24.useRef)(height);
    var prevXRef = (0, import_react24.useRef)(x2);
    var prevYRef = (0, import_react24.useRef)(y2);
    var animationIdInput = (0, import_react24.useMemo)(() => ({
      x: x2,
      y: y2,
      width,
      height,
      radius
    }), [x2, y2, width, height, radius]);
    var animationId = useAnimationId(animationIdInput, "rectangle-");
    if (x2 !== +x2 || y2 !== +y2 || width !== +width || height !== +height || width === 0 || height === 0) {
      return null;
    }
    var layerClass = clsx("recharts-rectangle", className);
    if (!isUpdateAnimationActive) {
      return /* @__PURE__ */ React18.createElement("path", _extends9({}, filterProps(props, true), {
        className: layerClass,
        d: getRectanglePath(x2, y2, width, height, radius)
      }));
    }
    var prevWidth = prevWidthRef.current;
    var prevHeight = prevHeightRef.current;
    var prevX = prevXRef.current;
    var prevY = prevYRef.current;
    var from2 = "0px ".concat(totalLength === -1 ? 1 : totalLength, "px");
    var to2 = "".concat(totalLength, "px 0px");
    var transition = getTransitionVal(["strokeDasharray"], animationDuration, typeof animationEasing === "string" ? animationEasing : void 0);
    return /* @__PURE__ */ React18.createElement(JavascriptAnimate, {
      animationId,
      key: animationId,
      canBegin: totalLength > 0,
      duration: animationDuration,
      easing: animationEasing,
      isActive: isUpdateAnimationActive,
      begin: animationBegin
    }, (t) => {
      var currWidth = interpolate(prevWidth, width, t);
      var currHeight = interpolate(prevHeight, height, t);
      var currX = interpolate(prevX, x2, t);
      var currY = interpolate(prevY, y2, t);
      if (pathRef.current) {
        prevWidthRef.current = currWidth;
        prevHeightRef.current = currHeight;
        prevXRef.current = currX;
        prevYRef.current = currY;
      }
      var animationStyle;
      if (!isAnimationActive) {
        animationStyle = {
          strokeDasharray: to2
        };
      } else if (t > 0) {
        animationStyle = {
          transition,
          strokeDasharray: to2
        };
      } else {
        animationStyle = {
          strokeDasharray: from2
        };
      }
      return /* @__PURE__ */ React18.createElement("path", _extends9({}, filterProps(props, true), {
        className: layerClass,
        d: getRectanglePath(currX, currY, currWidth, currHeight, radius),
        ref: pathRef,
        style: _objectSpread14(_objectSpread14({}, animationStyle), props.style)
      }));
    });
  };

  // node_modules/recharts/es6/util/cursor/getRadialCursorPoints.js
  function getRadialCursorPoints(activeCoordinate) {
    var {
      cx,
      cy,
      radius,
      startAngle,
      endAngle
    } = activeCoordinate;
    var startPoint = polarToCartesian(cx, cy, radius, startAngle);
    var endPoint = polarToCartesian(cx, cy, radius, endAngle);
    return {
      points: [startPoint, endPoint],
      cx,
      cy,
      radius,
      startAngle,
      endAngle
    };
  }

  // node_modules/recharts/es6/shape/Sector.js
  var React19 = __toESM(require_react());
  function _extends10() {
    return _extends10 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends10.apply(null, arguments);
  }
  var getDeltaAngle = (startAngle, endAngle) => {
    var sign2 = mathSign(endAngle - startAngle);
    var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 359.999);
    return sign2 * deltaAngle;
  };
  var getTangentCircle = (_ref2) => {
    var {
      cx,
      cy,
      radius,
      angle,
      sign: sign2,
      isExternal,
      cornerRadius,
      cornerIsExternal
    } = _ref2;
    var centerRadius = cornerRadius * (isExternal ? 1 : -1) + radius;
    var theta = Math.asin(cornerRadius / centerRadius) / RADIAN2;
    var centerAngle = cornerIsExternal ? angle : angle + sign2 * theta;
    var center = polarToCartesian(cx, cy, centerRadius, centerAngle);
    var circleTangency = polarToCartesian(cx, cy, radius, centerAngle);
    var lineTangencyAngle = cornerIsExternal ? angle - sign2 * theta : angle;
    var lineTangency = polarToCartesian(cx, cy, centerRadius * Math.cos(theta * RADIAN2), lineTangencyAngle);
    return {
      center,
      circleTangency,
      lineTangency,
      theta
    };
  };
  var getSectorPath = (_ref2) => {
    var {
      cx,
      cy,
      innerRadius,
      outerRadius,
      startAngle,
      endAngle
    } = _ref2;
    var angle = getDeltaAngle(startAngle, endAngle);
    var tempEndAngle = startAngle + angle;
    var outerStartPoint = polarToCartesian(cx, cy, outerRadius, startAngle);
    var outerEndPoint = polarToCartesian(cx, cy, outerRadius, tempEndAngle);
    var path2 = "M ".concat(outerStartPoint.x, ",").concat(outerStartPoint.y, "\n    A ").concat(outerRadius, ",").concat(outerRadius, ",0,\n    ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle > tempEndAngle), ",\n    ").concat(outerEndPoint.x, ",").concat(outerEndPoint.y, "\n  ");
    if (innerRadius > 0) {
      var innerStartPoint = polarToCartesian(cx, cy, innerRadius, startAngle);
      var innerEndPoint = polarToCartesian(cx, cy, innerRadius, tempEndAngle);
      path2 += "L ".concat(innerEndPoint.x, ",").concat(innerEndPoint.y, "\n            A ").concat(innerRadius, ",").concat(innerRadius, ",0,\n            ").concat(+(Math.abs(angle) > 180), ",").concat(+(startAngle <= tempEndAngle), ",\n            ").concat(innerStartPoint.x, ",").concat(innerStartPoint.y, " Z");
    } else {
      path2 += "L ".concat(cx, ",").concat(cy, " Z");
    }
    return path2;
  };
  var getSectorWithCorner = (_ref3) => {
    var {
      cx,
      cy,
      innerRadius,
      outerRadius,
      cornerRadius,
      forceCornerRadius,
      cornerIsExternal,
      startAngle,
      endAngle
    } = _ref3;
    var sign2 = mathSign(endAngle - startAngle);
    var {
      circleTangency: soct,
      lineTangency: solt,
      theta: sot
    } = getTangentCircle({
      cx,
      cy,
      radius: outerRadius,
      angle: startAngle,
      sign: sign2,
      cornerRadius,
      cornerIsExternal
    });
    var {
      circleTangency: eoct,
      lineTangency: eolt,
      theta: eot
    } = getTangentCircle({
      cx,
      cy,
      radius: outerRadius,
      angle: endAngle,
      sign: -sign2,
      cornerRadius,
      cornerIsExternal
    });
    var outerArcAngle = cornerIsExternal ? Math.abs(startAngle - endAngle) : Math.abs(startAngle - endAngle) - sot - eot;
    if (outerArcAngle < 0) {
      if (forceCornerRadius) {
        return "M ".concat(solt.x, ",").concat(solt.y, "\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(cornerRadius * 2, ",0\n        a").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,1,").concat(-cornerRadius * 2, ",0\n      ");
      }
      return getSectorPath({
        cx,
        cy,
        innerRadius,
        outerRadius,
        startAngle,
        endAngle
      });
    }
    var path2 = "M ".concat(solt.x, ",").concat(solt.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(soct.x, ",").concat(soct.y, "\n    A").concat(outerRadius, ",").concat(outerRadius, ",0,").concat(+(outerArcAngle > 180), ",").concat(+(sign2 < 0), ",").concat(eoct.x, ",").concat(eoct.y, "\n    A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(eolt.x, ",").concat(eolt.y, "\n  ");
    if (innerRadius > 0) {
      var {
        circleTangency: sict,
        lineTangency: silt,
        theta: sit
      } = getTangentCircle({
        cx,
        cy,
        radius: innerRadius,
        angle: startAngle,
        sign: sign2,
        isExternal: true,
        cornerRadius,
        cornerIsExternal
      });
      var {
        circleTangency: eict,
        lineTangency: eilt,
        theta: eit
      } = getTangentCircle({
        cx,
        cy,
        radius: innerRadius,
        angle: endAngle,
        sign: -sign2,
        isExternal: true,
        cornerRadius,
        cornerIsExternal
      });
      var innerArcAngle = cornerIsExternal ? Math.abs(startAngle - endAngle) : Math.abs(startAngle - endAngle) - sit - eit;
      if (innerArcAngle < 0 && cornerRadius === 0) {
        return "".concat(path2, "L").concat(cx, ",").concat(cy, "Z");
      }
      path2 += "L".concat(eilt.x, ",").concat(eilt.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(eict.x, ",").concat(eict.y, "\n      A").concat(innerRadius, ",").concat(innerRadius, ",0,").concat(+(innerArcAngle > 180), ",").concat(+(sign2 > 0), ",").concat(sict.x, ",").concat(sict.y, "\n      A").concat(cornerRadius, ",").concat(cornerRadius, ",0,0,").concat(+(sign2 < 0), ",").concat(silt.x, ",").concat(silt.y, "Z");
    } else {
      path2 += "L".concat(cx, ",").concat(cy, "Z");
    }
    return path2;
  };
  var defaultProps2 = {
    cx: 0,
    cy: 0,
    innerRadius: 0,
    outerRadius: 0,
    startAngle: 0,
    endAngle: 0,
    cornerRadius: 0,
    forceCornerRadius: false,
    cornerIsExternal: false
  };
  var Sector = (sectorProps) => {
    var props = resolveDefaultProps(sectorProps, defaultProps2);
    var {
      cx,
      cy,
      innerRadius,
      outerRadius,
      cornerRadius,
      forceCornerRadius,
      cornerIsExternal,
      startAngle,
      endAngle,
      className
    } = props;
    if (outerRadius < innerRadius || startAngle === endAngle) {
      return null;
    }
    var layerClass = clsx("recharts-sector", className);
    var deltaRadius = outerRadius - innerRadius;
    var cr = getPercentValue(cornerRadius, deltaRadius, 0, true);
    var path2;
    if (cr > 0 && Math.abs(startAngle - endAngle) < 360) {
      path2 = getSectorWithCorner({
        cx,
        cy,
        innerRadius,
        outerRadius,
        cornerRadius: Math.min(cr, deltaRadius / 2),
        forceCornerRadius,
        cornerIsExternal,
        startAngle,
        endAngle
      });
    } else {
      path2 = getSectorPath({
        cx,
        cy,
        innerRadius,
        outerRadius,
        startAngle,
        endAngle
      });
    }
    return /* @__PURE__ */ React19.createElement("path", _extends10({}, filterProps(props, true), {
      className: layerClass,
      d: path2
    }));
  };

  // node_modules/recharts/es6/util/cursor/getCursorPoints.js
  function getCursorPoints(layout, activeCoordinate, offset) {
    var x1, y1, x2, y2;
    if (layout === "horizontal") {
      x1 = activeCoordinate.x;
      x2 = x1;
      y1 = offset.top;
      y2 = offset.top + offset.height;
    } else if (layout === "vertical") {
      y1 = activeCoordinate.y;
      y2 = y1;
      x1 = offset.left;
      x2 = offset.left + offset.width;
    } else if (activeCoordinate.cx != null && activeCoordinate.cy != null) {
      if (layout === "centric") {
        var {
          cx,
          cy,
          innerRadius,
          outerRadius,
          angle
        } = activeCoordinate;
        var innerPoint = polarToCartesian(cx, cy, innerRadius, angle);
        var outerPoint = polarToCartesian(cx, cy, outerRadius, angle);
        x1 = innerPoint.x;
        y1 = innerPoint.y;
        x2 = outerPoint.x;
        y2 = outerPoint.y;
      } else {
        return getRadialCursorPoints(activeCoordinate);
      }
    }
    return [{
      x: x1,
      y: y1
    }, {
      x: x2,
      y: y2
    }];
  }

  // node_modules/recharts/es6/state/selectors/axisSelectors.js
  var import_range2 = __toESM(require_range2());

  // node_modules/victory-vendor/es/d3-scale.js
  var d3_scale_exports = {};
  __export(d3_scale_exports, {
    scaleBand: () => band,
    scaleDiverging: () => diverging,
    scaleDivergingLog: () => divergingLog,
    scaleDivergingPow: () => divergingPow,
    scaleDivergingSqrt: () => divergingSqrt,
    scaleDivergingSymlog: () => divergingSymlog,
    scaleIdentity: () => identity2,
    scaleImplicit: () => implicit,
    scaleLinear: () => linear2,
    scaleLog: () => log,
    scaleOrdinal: () => ordinal,
    scalePoint: () => point3,
    scalePow: () => pow,
    scaleQuantile: () => quantile2,
    scaleQuantize: () => quantize,
    scaleRadial: () => radial,
    scaleSequential: () => sequential,
    scaleSequentialLog: () => sequentialLog,
    scaleSequentialPow: () => sequentialPow,
    scaleSequentialQuantile: () => sequentialQuantile,
    scaleSequentialSqrt: () => sequentialSqrt,
    scaleSequentialSymlog: () => sequentialSymlog,
    scaleSqrt: () => sqrt2,
    scaleSymlog: () => symlog,
    scaleThreshold: () => threshold,
    scaleTime: () => time,
    scaleUtc: () => utcTime,
    tickFormat: () => tickFormat
  });

  // node_modules/d3-array/src/ascending.js
  function ascending(a2, b) {
    return a2 == null || b == null ? NaN : a2 < b ? -1 : a2 > b ? 1 : a2 >= b ? 0 : NaN;
  }

  // node_modules/d3-array/src/descending.js
  function descending(a2, b) {
    return a2 == null || b == null ? NaN : b < a2 ? -1 : b > a2 ? 1 : b >= a2 ? 0 : NaN;
  }

  // node_modules/d3-array/src/bisector.js
  function bisector(f) {
    let compare1, compare2, delta;
    if (f.length !== 2) {
      compare1 = ascending;
      compare2 = (d, x2) => ascending(f(d), x2);
      delta = (d, x2) => f(d) - x2;
    } else {
      compare1 = f === ascending || f === descending ? f : zero;
      compare2 = f;
      delta = f;
    }
    function left(a2, x2, lo = 0, hi = a2.length) {
      if (lo < hi) {
        if (compare1(x2, x2) !== 0) return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a2[mid], x2) < 0) lo = mid + 1;
          else hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function right(a2, x2, lo = 0, hi = a2.length) {
      if (lo < hi) {
        if (compare1(x2, x2) !== 0) return hi;
        do {
          const mid = lo + hi >>> 1;
          if (compare2(a2[mid], x2) <= 0) lo = mid + 1;
          else hi = mid;
        } while (lo < hi);
      }
      return lo;
    }
    function center(a2, x2, lo = 0, hi = a2.length) {
      const i = left(a2, x2, lo, hi - 1);
      return i > lo && delta(a2[i - 1], x2) > -delta(a2[i], x2) ? i - 1 : i;
    }
    return { left, center, right };
  }
  function zero() {
    return 0;
  }

  // node_modules/d3-array/src/number.js
  function number(x2) {
    return x2 === null ? NaN : +x2;
  }
  function* numbers(values, valueof) {
    if (valueof === void 0) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          yield value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
          yield value;
        }
      }
    }
  }

  // node_modules/d3-array/src/bisect.js
  var ascendingBisect = bisector(ascending);
  var bisectRight = ascendingBisect.right;
  var bisectLeft = ascendingBisect.left;
  var bisectCenter = bisector(number).center;
  var bisect_default = bisectRight;

  // node_modules/internmap/src/index.js
  var InternMap = class extends Map {
    constructor(entries, key = keyof) {
      super();
      Object.defineProperties(this, { _intern: { value: /* @__PURE__ */ new Map() }, _key: { value: key } });
      if (entries != null) for (const [key2, value] of entries) this.set(key2, value);
    }
    get(key) {
      return super.get(intern_get(this, key));
    }
    has(key) {
      return super.has(intern_get(this, key));
    }
    set(key, value) {
      return super.set(intern_set(this, key), value);
    }
    delete(key) {
      return super.delete(intern_delete(this, key));
    }
  };
  function intern_get({ _intern, _key }, value) {
    const key = _key(value);
    return _intern.has(key) ? _intern.get(key) : value;
  }
  function intern_set({ _intern, _key }, value) {
    const key = _key(value);
    if (_intern.has(key)) return _intern.get(key);
    _intern.set(key, value);
    return value;
  }
  function intern_delete({ _intern, _key }, value) {
    const key = _key(value);
    if (_intern.has(key)) {
      value = _intern.get(key);
      _intern.delete(key);
    }
    return value;
  }
  function keyof(value) {
    return value !== null && typeof value === "object" ? value.valueOf() : value;
  }

  // node_modules/d3-array/src/sort.js
  function compareDefined(compare = ascending) {
    if (compare === ascending) return ascendingDefined;
    if (typeof compare !== "function") throw new TypeError("compare is not a function");
    return (a2, b) => {
      const x2 = compare(a2, b);
      if (x2 || x2 === 0) return x2;
      return (compare(b, b) === 0) - (compare(a2, a2) === 0);
    };
  }
  function ascendingDefined(a2, b) {
    return (a2 == null || !(a2 >= a2)) - (b == null || !(b >= b)) || (a2 < b ? -1 : a2 > b ? 1 : 0);
  }

  // node_modules/d3-array/src/ticks.js
  var e10 = Math.sqrt(50);
  var e5 = Math.sqrt(10);
  var e2 = Math.sqrt(2);
  function tickSpec(start, stop, count) {
    const step = (stop - start) / Math.max(0, count), power = Math.floor(Math.log10(step)), error = step / Math.pow(10, power), factor = error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1;
    let i1, i2, inc;
    if (power < 0) {
      inc = Math.pow(10, -power) / factor;
      i1 = Math.round(start * inc);
      i2 = Math.round(stop * inc);
      if (i1 / inc < start) ++i1;
      if (i2 / inc > stop) --i2;
      inc = -inc;
    } else {
      inc = Math.pow(10, power) * factor;
      i1 = Math.round(start / inc);
      i2 = Math.round(stop / inc);
      if (i1 * inc < start) ++i1;
      if (i2 * inc > stop) --i2;
    }
    if (i2 < i1 && 0.5 <= count && count < 2) return tickSpec(start, stop, count * 2);
    return [i1, i2, inc];
  }
  function ticks(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    if (!(count > 0)) return [];
    if (start === stop) return [start];
    const reverse2 = stop < start, [i1, i2, inc] = reverse2 ? tickSpec(stop, start, count) : tickSpec(start, stop, count);
    if (!(i2 >= i1)) return [];
    const n = i2 - i1 + 1, ticks2 = new Array(n);
    if (reverse2) {
      if (inc < 0) for (let i = 0; i < n; ++i) ticks2[i] = (i2 - i) / -inc;
      else for (let i = 0; i < n; ++i) ticks2[i] = (i2 - i) * inc;
    } else {
      if (inc < 0) for (let i = 0; i < n; ++i) ticks2[i] = (i1 + i) / -inc;
      else for (let i = 0; i < n; ++i) ticks2[i] = (i1 + i) * inc;
    }
    return ticks2;
  }
  function tickIncrement(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    return tickSpec(start, stop, count)[2];
  }
  function tickStep(start, stop, count) {
    stop = +stop, start = +start, count = +count;
    const reverse2 = stop < start, inc = reverse2 ? tickIncrement(stop, start, count) : tickIncrement(start, stop, count);
    return (reverse2 ? -1 : 1) * (inc < 0 ? 1 / -inc : inc);
  }

  // node_modules/d3-array/src/max.js
  function max(values, valueof) {
    let max2;
    if (valueof === void 0) {
      for (const value of values) {
        if (value != null && (max2 < value || max2 === void 0 && value >= value)) {
          max2 = value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (max2 < value || max2 === void 0 && value >= value)) {
          max2 = value;
        }
      }
    }
    return max2;
  }

  // node_modules/d3-array/src/min.js
  function min(values, valueof) {
    let min2;
    if (valueof === void 0) {
      for (const value of values) {
        if (value != null && (min2 > value || min2 === void 0 && value >= value)) {
          min2 = value;
        }
      }
    } else {
      let index = -1;
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (min2 > value || min2 === void 0 && value >= value)) {
          min2 = value;
        }
      }
    }
    return min2;
  }

  // node_modules/d3-array/src/quickselect.js
  function quickselect(array, k2, left = 0, right = Infinity, compare) {
    k2 = Math.floor(k2);
    left = Math.floor(Math.max(0, left));
    right = Math.floor(Math.min(array.length - 1, right));
    if (!(left <= k2 && k2 <= right)) return array;
    compare = compare === void 0 ? ascendingDefined : compareDefined(compare);
    while (right > left) {
      if (right - left > 600) {
        const n = right - left + 1;
        const m = k2 - left + 1;
        const z = Math.log(n);
        const s2 = 0.5 * Math.exp(2 * z / 3);
        const sd = 0.5 * Math.sqrt(z * s2 * (n - s2) / n) * (m - n / 2 < 0 ? -1 : 1);
        const newLeft = Math.max(left, Math.floor(k2 - m * s2 / n + sd));
        const newRight = Math.min(right, Math.floor(k2 + (n - m) * s2 / n + sd));
        quickselect(array, k2, newLeft, newRight, compare);
      }
      const t = array[k2];
      let i = left;
      let j = right;
      swap(array, left, k2);
      if (compare(array[right], t) > 0) swap(array, left, right);
      while (i < j) {
        swap(array, i, j), ++i, --j;
        while (compare(array[i], t) < 0) ++i;
        while (compare(array[j], t) > 0) --j;
      }
      if (compare(array[left], t) === 0) swap(array, left, j);
      else ++j, swap(array, j, right);
      if (j <= k2) left = j + 1;
      if (k2 <= j) right = j - 1;
    }
    return array;
  }
  function swap(array, i, j) {
    const t = array[i];
    array[i] = array[j];
    array[j] = t;
  }

  // node_modules/d3-array/src/quantile.js
  function quantile(values, p, valueof) {
    values = Float64Array.from(numbers(values, valueof));
    if (!(n = values.length) || isNaN(p = +p)) return;
    if (p <= 0 || n < 2) return min(values);
    if (p >= 1) return max(values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = max(quickselect(values, i0).subarray(0, i0 + 1)), value1 = min(values.subarray(i0 + 1));
    return value0 + (value1 - value0) * (i - i0);
  }
  function quantileSorted(values, p, valueof = number) {
    if (!(n = values.length) || isNaN(p = +p)) return;
    if (p <= 0 || n < 2) return +valueof(values[0], 0, values);
    if (p >= 1) return +valueof(values[n - 1], n - 1, values);
    var n, i = (n - 1) * p, i0 = Math.floor(i), value0 = +valueof(values[i0], i0, values), value1 = +valueof(values[i0 + 1], i0 + 1, values);
    return value0 + (value1 - value0) * (i - i0);
  }

  // node_modules/d3-array/src/range.js
  function range(start, stop, step) {
    start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;
    var i = -1, n = Math.max(0, Math.ceil((stop - start) / step)) | 0, range4 = new Array(n);
    while (++i < n) {
      range4[i] = start + i * step;
    }
    return range4;
  }

  // node_modules/d3-scale/src/init.js
  function initRange(domain, range4) {
    switch (arguments.length) {
      case 0:
        break;
      case 1:
        this.range(domain);
        break;
      default:
        this.range(range4).domain(domain);
        break;
    }
    return this;
  }
  function initInterpolator(domain, interpolator) {
    switch (arguments.length) {
      case 0:
        break;
      case 1: {
        if (typeof domain === "function") this.interpolator(domain);
        else this.range(domain);
        break;
      }
      default: {
        this.domain(domain);
        if (typeof interpolator === "function") this.interpolator(interpolator);
        else this.range(interpolator);
        break;
      }
    }
    return this;
  }

  // node_modules/d3-scale/src/ordinal.js
  var implicit = Symbol("implicit");
  function ordinal() {
    var index = new InternMap(), domain = [], range4 = [], unknown = implicit;
    function scale(d) {
      let i = index.get(d);
      if (i === void 0) {
        if (unknown !== implicit) return unknown;
        index.set(d, i = domain.push(d) - 1);
      }
      return range4[i % range4.length];
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain.slice();
      domain = [], index = new InternMap();
      for (const value of _) {
        if (index.has(value)) continue;
        index.set(value, domain.push(value) - 1);
      }
      return scale;
    };
    scale.range = function(_) {
      return arguments.length ? (range4 = Array.from(_), scale) : range4.slice();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return ordinal(domain, range4).unknown(unknown);
    };
    initRange.apply(scale, arguments);
    return scale;
  }

  // node_modules/d3-scale/src/band.js
  function band() {
    var scale = ordinal().unknown(void 0), domain = scale.domain, ordinalRange = scale.range, r0 = 0, r1 = 1, step, bandwidth, round = false, paddingInner = 0, paddingOuter = 0, align = 0.5;
    delete scale.unknown;
    function rescale() {
      var n = domain().length, reverse2 = r1 < r0, start = reverse2 ? r1 : r0, stop = reverse2 ? r0 : r1;
      step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
      if (round) step = Math.floor(step);
      start += (stop - start - step * (n - paddingInner)) * align;
      bandwidth = step * (1 - paddingInner);
      if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
      var values = range(n).map(function(i) {
        return start + step * i;
      });
      return ordinalRange(reverse2 ? values.reverse() : values);
    }
    scale.domain = function(_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.range = function(_) {
      return arguments.length ? ([r0, r1] = _, r0 = +r0, r1 = +r1, rescale()) : [r0, r1];
    };
    scale.rangeRound = function(_) {
      return [r0, r1] = _, r0 = +r0, r1 = +r1, round = true, rescale();
    };
    scale.bandwidth = function() {
      return bandwidth;
    };
    scale.step = function() {
      return step;
    };
    scale.round = function(_) {
      return arguments.length ? (round = !!_, rescale()) : round;
    };
    scale.padding = function(_) {
      return arguments.length ? (paddingInner = Math.min(1, paddingOuter = +_), rescale()) : paddingInner;
    };
    scale.paddingInner = function(_) {
      return arguments.length ? (paddingInner = Math.min(1, _), rescale()) : paddingInner;
    };
    scale.paddingOuter = function(_) {
      return arguments.length ? (paddingOuter = +_, rescale()) : paddingOuter;
    };
    scale.align = function(_) {
      return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
    };
    scale.copy = function() {
      return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align);
    };
    return initRange.apply(rescale(), arguments);
  }
  function pointish(scale) {
    var copy3 = scale.copy;
    scale.padding = scale.paddingOuter;
    delete scale.paddingInner;
    delete scale.paddingOuter;
    scale.copy = function() {
      return pointish(copy3());
    };
    return scale;
  }
  function point3() {
    return pointish(band.apply(null, arguments).paddingInner(1));
  }

  // node_modules/d3-color/src/define.js
  function define_default(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype;
    prototype.constructor = constructor;
  }
  function extend(parent, definition) {
    var prototype = Object.create(parent.prototype);
    for (var key in definition) prototype[key] = definition[key];
    return prototype;
  }

  // node_modules/d3-color/src/color.js
  function Color() {
  }
  var darker = 0.7;
  var brighter = 1 / darker;
  var reI = "\\s*([+-]?\\d+)\\s*";
  var reN = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*";
  var reP = "\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
  var reHex = /^#([0-9a-f]{3,8})$/;
  var reRgbInteger = new RegExp(`^rgb\\(${reI},${reI},${reI}\\)$`);
  var reRgbPercent = new RegExp(`^rgb\\(${reP},${reP},${reP}\\)$`);
  var reRgbaInteger = new RegExp(`^rgba\\(${reI},${reI},${reI},${reN}\\)$`);
  var reRgbaPercent = new RegExp(`^rgba\\(${reP},${reP},${reP},${reN}\\)$`);
  var reHslPercent = new RegExp(`^hsl\\(${reN},${reP},${reP}\\)$`);
  var reHslaPercent = new RegExp(`^hsla\\(${reN},${reP},${reP},${reN}\\)$`);
  var named = {
    aliceblue: 15792383,
    antiquewhite: 16444375,
    aqua: 65535,
    aquamarine: 8388564,
    azure: 15794175,
    beige: 16119260,
    bisque: 16770244,
    black: 0,
    blanchedalmond: 16772045,
    blue: 255,
    blueviolet: 9055202,
    brown: 10824234,
    burlywood: 14596231,
    cadetblue: 6266528,
    chartreuse: 8388352,
    chocolate: 13789470,
    coral: 16744272,
    cornflowerblue: 6591981,
    cornsilk: 16775388,
    crimson: 14423100,
    cyan: 65535,
    darkblue: 139,
    darkcyan: 35723,
    darkgoldenrod: 12092939,
    darkgray: 11119017,
    darkgreen: 25600,
    darkgrey: 11119017,
    darkkhaki: 12433259,
    darkmagenta: 9109643,
    darkolivegreen: 5597999,
    darkorange: 16747520,
    darkorchid: 10040012,
    darkred: 9109504,
    darksalmon: 15308410,
    darkseagreen: 9419919,
    darkslateblue: 4734347,
    darkslategray: 3100495,
    darkslategrey: 3100495,
    darkturquoise: 52945,
    darkviolet: 9699539,
    deeppink: 16716947,
    deepskyblue: 49151,
    dimgray: 6908265,
    dimgrey: 6908265,
    dodgerblue: 2003199,
    firebrick: 11674146,
    floralwhite: 16775920,
    forestgreen: 2263842,
    fuchsia: 16711935,
    gainsboro: 14474460,
    ghostwhite: 16316671,
    gold: 16766720,
    goldenrod: 14329120,
    gray: 8421504,
    green: 32768,
    greenyellow: 11403055,
    grey: 8421504,
    honeydew: 15794160,
    hotpink: 16738740,
    indianred: 13458524,
    indigo: 4915330,
    ivory: 16777200,
    khaki: 15787660,
    lavender: 15132410,
    lavenderblush: 16773365,
    lawngreen: 8190976,
    lemonchiffon: 16775885,
    lightblue: 11393254,
    lightcoral: 15761536,
    lightcyan: 14745599,
    lightgoldenrodyellow: 16448210,
    lightgray: 13882323,
    lightgreen: 9498256,
    lightgrey: 13882323,
    lightpink: 16758465,
    lightsalmon: 16752762,
    lightseagreen: 2142890,
    lightskyblue: 8900346,
    lightslategray: 7833753,
    lightslategrey: 7833753,
    lightsteelblue: 11584734,
    lightyellow: 16777184,
    lime: 65280,
    limegreen: 3329330,
    linen: 16445670,
    magenta: 16711935,
    maroon: 8388608,
    mediumaquamarine: 6737322,
    mediumblue: 205,
    mediumorchid: 12211667,
    mediumpurple: 9662683,
    mediumseagreen: 3978097,
    mediumslateblue: 8087790,
    mediumspringgreen: 64154,
    mediumturquoise: 4772300,
    mediumvioletred: 13047173,
    midnightblue: 1644912,
    mintcream: 16121850,
    mistyrose: 16770273,
    moccasin: 16770229,
    navajowhite: 16768685,
    navy: 128,
    oldlace: 16643558,
    olive: 8421376,
    olivedrab: 7048739,
    orange: 16753920,
    orangered: 16729344,
    orchid: 14315734,
    palegoldenrod: 15657130,
    palegreen: 10025880,
    paleturquoise: 11529966,
    palevioletred: 14381203,
    papayawhip: 16773077,
    peachpuff: 16767673,
    peru: 13468991,
    pink: 16761035,
    plum: 14524637,
    powderblue: 11591910,
    purple: 8388736,
    rebeccapurple: 6697881,
    red: 16711680,
    rosybrown: 12357519,
    royalblue: 4286945,
    saddlebrown: 9127187,
    salmon: 16416882,
    sandybrown: 16032864,
    seagreen: 3050327,
    seashell: 16774638,
    sienna: 10506797,
    silver: 12632256,
    skyblue: 8900331,
    slateblue: 6970061,
    slategray: 7372944,
    slategrey: 7372944,
    snow: 16775930,
    springgreen: 65407,
    steelblue: 4620980,
    tan: 13808780,
    teal: 32896,
    thistle: 14204888,
    tomato: 16737095,
    turquoise: 4251856,
    violet: 15631086,
    wheat: 16113331,
    white: 16777215,
    whitesmoke: 16119285,
    yellow: 16776960,
    yellowgreen: 10145074
  };
  define_default(Color, color, {
    copy(channels) {
      return Object.assign(new this.constructor(), this, channels);
    },
    displayable() {
      return this.rgb().displayable();
    },
    hex: color_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: color_formatHex,
    formatHex8: color_formatHex8,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb
  });
  function color_formatHex() {
    return this.rgb().formatHex();
  }
  function color_formatHex8() {
    return this.rgb().formatHex8();
  }
  function color_formatHsl() {
    return hslConvert(this).formatHsl();
  }
  function color_formatRgb() {
    return this.rgb().formatRgb();
  }
  function color(format2) {
    var m, l;
    format2 = (format2 + "").trim().toLowerCase();
    return (m = reHex.exec(format2)) ? (l = m[1].length, m = parseInt(m[1], 16), l === 6 ? rgbn(m) : l === 3 ? new Rgb(m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, (m & 15) << 4 | m & 15, 1) : l === 8 ? rgba(m >> 24 & 255, m >> 16 & 255, m >> 8 & 255, (m & 255) / 255) : l === 4 ? rgba(m >> 12 & 15 | m >> 8 & 240, m >> 8 & 15 | m >> 4 & 240, m >> 4 & 15 | m & 240, ((m & 15) << 4 | m & 15) / 255) : null) : (m = reRgbInteger.exec(format2)) ? new Rgb(m[1], m[2], m[3], 1) : (m = reRgbPercent.exec(format2)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) : (m = reRgbaInteger.exec(format2)) ? rgba(m[1], m[2], m[3], m[4]) : (m = reRgbaPercent.exec(format2)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) : (m = reHslPercent.exec(format2)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) : (m = reHslaPercent.exec(format2)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) : named.hasOwnProperty(format2) ? rgbn(named[format2]) : format2 === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
  }
  function rgbn(n) {
    return new Rgb(n >> 16 & 255, n >> 8 & 255, n & 255, 1);
  }
  function rgba(r2, g, b, a2) {
    if (a2 <= 0) r2 = g = b = NaN;
    return new Rgb(r2, g, b, a2);
  }
  function rgbConvert(o) {
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Rgb();
    o = o.rgb();
    return new Rgb(o.r, o.g, o.b, o.opacity);
  }
  function rgb(r2, g, b, opacity) {
    return arguments.length === 1 ? rgbConvert(r2) : new Rgb(r2, g, b, opacity == null ? 1 : opacity);
  }
  function Rgb(r2, g, b, opacity) {
    this.r = +r2;
    this.g = +g;
    this.b = +b;
    this.opacity = +opacity;
  }
  define_default(Rgb, rgb, extend(Color, {
    brighter(k2) {
      k2 = k2 == null ? brighter : Math.pow(brighter, k2);
      return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker : Math.pow(darker, k2);
      return new Rgb(this.r * k2, this.g * k2, this.b * k2, this.opacity);
    },
    rgb() {
      return this;
    },
    clamp() {
      return new Rgb(clampi(this.r), clampi(this.g), clampi(this.b), clampa(this.opacity));
    },
    displayable() {
      return -0.5 <= this.r && this.r < 255.5 && (-0.5 <= this.g && this.g < 255.5) && (-0.5 <= this.b && this.b < 255.5) && (0 <= this.opacity && this.opacity <= 1);
    },
    hex: rgb_formatHex,
    // Deprecated! Use color.formatHex.
    formatHex: rgb_formatHex,
    formatHex8: rgb_formatHex8,
    formatRgb: rgb_formatRgb,
    toString: rgb_formatRgb
  }));
  function rgb_formatHex() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}`;
  }
  function rgb_formatHex8() {
    return `#${hex(this.r)}${hex(this.g)}${hex(this.b)}${hex((isNaN(this.opacity) ? 1 : this.opacity) * 255)}`;
  }
  function rgb_formatRgb() {
    const a2 = clampa(this.opacity);
    return `${a2 === 1 ? "rgb(" : "rgba("}${clampi(this.r)}, ${clampi(this.g)}, ${clampi(this.b)}${a2 === 1 ? ")" : `, ${a2})`}`;
  }
  function clampa(opacity) {
    return isNaN(opacity) ? 1 : Math.max(0, Math.min(1, opacity));
  }
  function clampi(value) {
    return Math.max(0, Math.min(255, Math.round(value) || 0));
  }
  function hex(value) {
    value = clampi(value);
    return (value < 16 ? "0" : "") + value.toString(16);
  }
  function hsla(h, s2, l, a2) {
    if (a2 <= 0) h = s2 = l = NaN;
    else if (l <= 0 || l >= 1) h = s2 = NaN;
    else if (s2 <= 0) h = NaN;
    return new Hsl(h, s2, l, a2);
  }
  function hslConvert(o) {
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
    if (!(o instanceof Color)) o = color(o);
    if (!o) return new Hsl();
    if (o instanceof Hsl) return o;
    o = o.rgb();
    var r2 = o.r / 255, g = o.g / 255, b = o.b / 255, min2 = Math.min(r2, g, b), max2 = Math.max(r2, g, b), h = NaN, s2 = max2 - min2, l = (max2 + min2) / 2;
    if (s2) {
      if (r2 === max2) h = (g - b) / s2 + (g < b) * 6;
      else if (g === max2) h = (b - r2) / s2 + 2;
      else h = (r2 - g) / s2 + 4;
      s2 /= l < 0.5 ? max2 + min2 : 2 - max2 - min2;
      h *= 60;
    } else {
      s2 = l > 0 && l < 1 ? 0 : h;
    }
    return new Hsl(h, s2, l, o.opacity);
  }
  function hsl(h, s2, l, opacity) {
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s2, l, opacity == null ? 1 : opacity);
  }
  function Hsl(h, s2, l, opacity) {
    this.h = +h;
    this.s = +s2;
    this.l = +l;
    this.opacity = +opacity;
  }
  define_default(Hsl, hsl, extend(Color, {
    brighter(k2) {
      k2 = k2 == null ? brighter : Math.pow(brighter, k2);
      return new Hsl(this.h, this.s, this.l * k2, this.opacity);
    },
    darker(k2) {
      k2 = k2 == null ? darker : Math.pow(darker, k2);
      return new Hsl(this.h, this.s, this.l * k2, this.opacity);
    },
    rgb() {
      var h = this.h % 360 + (this.h < 0) * 360, s2 = isNaN(h) || isNaN(this.s) ? 0 : this.s, l = this.l, m2 = l + (l < 0.5 ? l : 1 - l) * s2, m1 = 2 * l - m2;
      return new Rgb(
        hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
        hsl2rgb(h, m1, m2),
        hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
        this.opacity
      );
    },
    clamp() {
      return new Hsl(clamph(this.h), clampt(this.s), clampt(this.l), clampa(this.opacity));
    },
    displayable() {
      return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && (0 <= this.l && this.l <= 1) && (0 <= this.opacity && this.opacity <= 1);
    },
    formatHsl() {
      const a2 = clampa(this.opacity);
      return `${a2 === 1 ? "hsl(" : "hsla("}${clamph(this.h)}, ${clampt(this.s) * 100}%, ${clampt(this.l) * 100}%${a2 === 1 ? ")" : `, ${a2})`}`;
    }
  }));
  function clamph(value) {
    value = (value || 0) % 360;
    return value < 0 ? value + 360 : value;
  }
  function clampt(value) {
    return Math.max(0, Math.min(1, value || 0));
  }
  function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
  }

  // node_modules/d3-interpolate/src/basis.js
  function basis(t12, v0, v1, v2, v3) {
    var t2 = t12 * t12, t3 = t2 * t12;
    return ((1 - 3 * t12 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t12 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
  }
  function basis_default2(values) {
    var n = values.length - 1;
    return function(t) {
      var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n), v1 = values[i], v2 = values[i + 1], v0 = i > 0 ? values[i - 1] : 2 * v1 - v2, v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }

  // node_modules/d3-interpolate/src/basisClosed.js
  function basisClosed_default2(values) {
    var n = values.length;
    return function(t) {
      var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n), v0 = values[(i + n - 1) % n], v1 = values[i % n], v2 = values[(i + 1) % n], v3 = values[(i + 2) % n];
      return basis((t - i / n) * n, v0, v1, v2, v3);
    };
  }

  // node_modules/d3-interpolate/src/constant.js
  var constant_default2 = (x2) => () => x2;

  // node_modules/d3-interpolate/src/color.js
  function linear(a2, d) {
    return function(t) {
      return a2 + t * d;
    };
  }
  function exponential(a2, b, y2) {
    return a2 = Math.pow(a2, y2), b = Math.pow(b, y2) - a2, y2 = 1 / y2, function(t) {
      return Math.pow(a2 + t * b, y2);
    };
  }
  function gamma(y2) {
    return (y2 = +y2) === 1 ? nogamma : function(a2, b) {
      return b - a2 ? exponential(a2, b, y2) : constant_default2(isNaN(a2) ? b : a2);
    };
  }
  function nogamma(a2, b) {
    var d = b - a2;
    return d ? linear(a2, d) : constant_default2(isNaN(a2) ? b : a2);
  }

  // node_modules/d3-interpolate/src/rgb.js
  var rgb_default = function rgbGamma(y2) {
    var color2 = gamma(y2);
    function rgb2(start, end) {
      var r2 = color2((start = rgb(start)).r, (end = rgb(end)).r), g = color2(start.g, end.g), b = color2(start.b, end.b), opacity = nogamma(start.opacity, end.opacity);
      return function(t) {
        start.r = r2(t);
        start.g = g(t);
        start.b = b(t);
        start.opacity = opacity(t);
        return start + "";
      };
    }
    rgb2.gamma = rgbGamma;
    return rgb2;
  }(1);
  function rgbSpline(spline) {
    return function(colors) {
      var n = colors.length, r2 = new Array(n), g = new Array(n), b = new Array(n), i, color2;
      for (i = 0; i < n; ++i) {
        color2 = rgb(colors[i]);
        r2[i] = color2.r || 0;
        g[i] = color2.g || 0;
        b[i] = color2.b || 0;
      }
      r2 = spline(r2);
      g = spline(g);
      b = spline(b);
      color2.opacity = 1;
      return function(t) {
        color2.r = r2(t);
        color2.g = g(t);
        color2.b = b(t);
        return color2 + "";
      };
    };
  }
  var rgbBasis = rgbSpline(basis_default2);
  var rgbBasisClosed = rgbSpline(basisClosed_default2);

  // node_modules/d3-interpolate/src/numberArray.js
  function numberArray_default(a2, b) {
    if (!b) b = [];
    var n = a2 ? Math.min(b.length, a2.length) : 0, c2 = b.slice(), i;
    return function(t) {
      for (i = 0; i < n; ++i) c2[i] = a2[i] * (1 - t) + b[i] * t;
      return c2;
    };
  }
  function isNumberArray(x2) {
    return ArrayBuffer.isView(x2) && !(x2 instanceof DataView);
  }

  // node_modules/d3-interpolate/src/array.js
  function genericArray(a2, b) {
    var nb = b ? b.length : 0, na = a2 ? Math.min(nb, a2.length) : 0, x2 = new Array(na), c2 = new Array(nb), i;
    for (i = 0; i < na; ++i) x2[i] = value_default(a2[i], b[i]);
    for (; i < nb; ++i) c2[i] = b[i];
    return function(t) {
      for (i = 0; i < na; ++i) c2[i] = x2[i](t);
      return c2;
    };
  }

  // node_modules/d3-interpolate/src/date.js
  function date_default(a2, b) {
    var d = /* @__PURE__ */ new Date();
    return a2 = +a2, b = +b, function(t) {
      return d.setTime(a2 * (1 - t) + b * t), d;
    };
  }

  // node_modules/d3-interpolate/src/number.js
  function number_default(a2, b) {
    return a2 = +a2, b = +b, function(t) {
      return a2 * (1 - t) + b * t;
    };
  }

  // node_modules/d3-interpolate/src/object.js
  function object_default(a2, b) {
    var i = {}, c2 = {}, k2;
    if (a2 === null || typeof a2 !== "object") a2 = {};
    if (b === null || typeof b !== "object") b = {};
    for (k2 in b) {
      if (k2 in a2) {
        i[k2] = value_default(a2[k2], b[k2]);
      } else {
        c2[k2] = b[k2];
      }
    }
    return function(t) {
      for (k2 in i) c2[k2] = i[k2](t);
      return c2;
    };
  }

  // node_modules/d3-interpolate/src/string.js
  var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
  var reB = new RegExp(reA.source, "g");
  function zero2(b) {
    return function() {
      return b;
    };
  }
  function one(b) {
    return function(t) {
      return b(t) + "";
    };
  }
  function string_default(a2, b) {
    var bi = reA.lastIndex = reB.lastIndex = 0, am, bm, bs, i = -1, s2 = [], q = [];
    a2 = a2 + "", b = b + "";
    while ((am = reA.exec(a2)) && (bm = reB.exec(b))) {
      if ((bs = bm.index) > bi) {
        bs = b.slice(bi, bs);
        if (s2[i]) s2[i] += bs;
        else s2[++i] = bs;
      }
      if ((am = am[0]) === (bm = bm[0])) {
        if (s2[i]) s2[i] += bm;
        else s2[++i] = bm;
      } else {
        s2[++i] = null;
        q.push({ i, x: number_default(am, bm) });
      }
      bi = reB.lastIndex;
    }
    if (bi < b.length) {
      bs = b.slice(bi);
      if (s2[i]) s2[i] += bs;
      else s2[++i] = bs;
    }
    return s2.length < 2 ? q[0] ? one(q[0].x) : zero2(b) : (b = q.length, function(t) {
      for (var i2 = 0, o; i2 < b; ++i2) s2[(o = q[i2]).i] = o.x(t);
      return s2.join("");
    });
  }

  // node_modules/d3-interpolate/src/value.js
  function value_default(a2, b) {
    var t = typeof b, c2;
    return b == null || t === "boolean" ? constant_default2(b) : (t === "number" ? number_default : t === "string" ? (c2 = color(b)) ? (b = c2, rgb_default) : string_default : b instanceof color ? rgb_default : b instanceof Date ? date_default : isNumberArray(b) ? numberArray_default : Array.isArray(b) ? genericArray : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object_default : number_default)(a2, b);
  }

  // node_modules/d3-interpolate/src/round.js
  function round_default(a2, b) {
    return a2 = +a2, b = +b, function(t) {
      return Math.round(a2 * (1 - t) + b * t);
    };
  }

  // node_modules/d3-interpolate/src/piecewise.js
  function piecewise(interpolate2, values) {
    if (values === void 0) values = interpolate2, interpolate2 = value_default;
    var i = 0, n = values.length - 1, v = values[0], I = new Array(n < 0 ? 0 : n);
    while (i < n) I[i] = interpolate2(v, v = values[++i]);
    return function(t) {
      var i2 = Math.max(0, Math.min(n - 1, Math.floor(t *= n)));
      return I[i2](t - i2);
    };
  }

  // node_modules/d3-scale/src/constant.js
  function constants(x2) {
    return function() {
      return x2;
    };
  }

  // node_modules/d3-scale/src/number.js
  function number2(x2) {
    return +x2;
  }

  // node_modules/d3-scale/src/continuous.js
  var unit = [0, 1];
  function identity(x2) {
    return x2;
  }
  function normalize(a2, b) {
    return (b -= a2 = +a2) ? function(x2) {
      return (x2 - a2) / b;
    } : constants(isNaN(b) ? NaN : 0.5);
  }
  function clamper(a2, b) {
    var t;
    if (a2 > b) t = a2, a2 = b, b = t;
    return function(x2) {
      return Math.max(a2, Math.min(b, x2));
    };
  }
  function bimap(domain, range4, interpolate2) {
    var d0 = domain[0], d1 = domain[1], r0 = range4[0], r1 = range4[1];
    if (d1 < d0) d0 = normalize(d1, d0), r0 = interpolate2(r1, r0);
    else d0 = normalize(d0, d1), r0 = interpolate2(r0, r1);
    return function(x2) {
      return r0(d0(x2));
    };
  }
  function polymap(domain, range4, interpolate2) {
    var j = Math.min(domain.length, range4.length) - 1, d = new Array(j), r2 = new Array(j), i = -1;
    if (domain[j] < domain[0]) {
      domain = domain.slice().reverse();
      range4 = range4.slice().reverse();
    }
    while (++i < j) {
      d[i] = normalize(domain[i], domain[i + 1]);
      r2[i] = interpolate2(range4[i], range4[i + 1]);
    }
    return function(x2) {
      var i2 = bisect_default(domain, x2, 1, j) - 1;
      return r2[i2](d[i2](x2));
    };
  }
  function copy(source, target) {
    return target.domain(source.domain()).range(source.range()).interpolate(source.interpolate()).clamp(source.clamp()).unknown(source.unknown());
  }
  function transformer() {
    var domain = unit, range4 = unit, interpolate2 = value_default, transform, untransform, unknown, clamp = identity, piecewise2, output, input;
    function rescale() {
      var n = Math.min(domain.length, range4.length);
      if (clamp !== identity) clamp = clamper(domain[0], domain[n - 1]);
      piecewise2 = n > 2 ? polymap : bimap;
      output = input = null;
      return scale;
    }
    function scale(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : (output || (output = piecewise2(domain.map(transform), range4, interpolate2)))(transform(clamp(x2)));
    }
    scale.invert = function(y2) {
      return clamp(untransform((input || (input = piecewise2(range4, domain.map(transform), number_default)))(y2)));
    };
    scale.domain = function(_) {
      return arguments.length ? (domain = Array.from(_, number2), rescale()) : domain.slice();
    };
    scale.range = function(_) {
      return arguments.length ? (range4 = Array.from(_), rescale()) : range4.slice();
    };
    scale.rangeRound = function(_) {
      return range4 = Array.from(_), interpolate2 = round_default, rescale();
    };
    scale.clamp = function(_) {
      return arguments.length ? (clamp = _ ? true : identity, rescale()) : clamp !== identity;
    };
    scale.interpolate = function(_) {
      return arguments.length ? (interpolate2 = _, rescale()) : interpolate2;
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t, u) {
      transform = t, untransform = u;
      return rescale();
    };
  }
  function continuous() {
    return transformer()(identity, identity);
  }

  // node_modules/d3-format/src/formatDecimal.js
  function formatDecimal_default(x2) {
    return Math.abs(x2 = Math.round(x2)) >= 1e21 ? x2.toLocaleString("en").replace(/,/g, "") : x2.toString(10);
  }
  function formatDecimalParts(x2, p) {
    if ((i = (x2 = p ? x2.toExponential(p - 1) : x2.toExponential()).indexOf("e")) < 0) return null;
    var i, coefficient = x2.slice(0, i);
    return [
      coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
      +x2.slice(i + 1)
    ];
  }

  // node_modules/d3-format/src/exponent.js
  function exponent_default(x2) {
    return x2 = formatDecimalParts(Math.abs(x2)), x2 ? x2[1] : NaN;
  }

  // node_modules/d3-format/src/formatGroup.js
  function formatGroup_default(grouping, thousands) {
    return function(value, width) {
      var i = value.length, t = [], j = 0, g = grouping[0], length = 0;
      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length);
        t.push(value.substring(i -= g, i + g));
        if ((length += g + 1) > width) break;
        g = grouping[j = (j + 1) % grouping.length];
      }
      return t.reverse().join(thousands);
    };
  }

  // node_modules/d3-format/src/formatNumerals.js
  function formatNumerals_default(numerals) {
    return function(value) {
      return value.replace(/[0-9]/g, function(i) {
        return numerals[+i];
      });
    };
  }

  // node_modules/d3-format/src/formatSpecifier.js
  var re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;
  function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
    var match;
    return new FormatSpecifier({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10]
    });
  }
  formatSpecifier.prototype = FormatSpecifier.prototype;
  function FormatSpecifier(specifier) {
    this.fill = specifier.fill === void 0 ? " " : specifier.fill + "";
    this.align = specifier.align === void 0 ? ">" : specifier.align + "";
    this.sign = specifier.sign === void 0 ? "-" : specifier.sign + "";
    this.symbol = specifier.symbol === void 0 ? "" : specifier.symbol + "";
    this.zero = !!specifier.zero;
    this.width = specifier.width === void 0 ? void 0 : +specifier.width;
    this.comma = !!specifier.comma;
    this.precision = specifier.precision === void 0 ? void 0 : +specifier.precision;
    this.trim = !!specifier.trim;
    this.type = specifier.type === void 0 ? "" : specifier.type + "";
  }
  FormatSpecifier.prototype.toString = function() {
    return this.fill + this.align + this.sign + this.symbol + (this.zero ? "0" : "") + (this.width === void 0 ? "" : Math.max(1, this.width | 0)) + (this.comma ? "," : "") + (this.precision === void 0 ? "" : "." + Math.max(0, this.precision | 0)) + (this.trim ? "~" : "") + this.type;
  };

  // node_modules/d3-format/src/formatTrim.js
  function formatTrim_default(s2) {
    out: for (var n = s2.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s2[i]) {
        case ".":
          i0 = i1 = i;
          break;
        case "0":
          if (i0 === 0) i0 = i;
          i1 = i;
          break;
        default:
          if (!+s2[i]) break out;
          if (i0 > 0) i0 = 0;
          break;
      }
    }
    return i0 > 0 ? s2.slice(0, i0) + s2.slice(i1 + 1) : s2;
  }

  // node_modules/d3-format/src/formatPrefixAuto.js
  var prefixExponent;
  function formatPrefixAuto_default(x2, p) {
    var d = formatDecimalParts(x2, p);
    if (!d) return x2 + "";
    var coefficient = d[0], exponent = d[1], i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1, n = coefficient.length;
    return i === n ? coefficient : i > n ? coefficient + new Array(i - n + 1).join("0") : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i) : "0." + new Array(1 - i).join("0") + formatDecimalParts(x2, Math.max(0, p + i - 1))[0];
  }

  // node_modules/d3-format/src/formatRounded.js
  function formatRounded_default(x2, p) {
    var d = formatDecimalParts(x2, p);
    if (!d) return x2 + "";
    var coefficient = d[0], exponent = d[1];
    return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1) : coefficient + new Array(exponent - coefficient.length + 2).join("0");
  }

  // node_modules/d3-format/src/formatTypes.js
  var formatTypes_default = {
    "%": (x2, p) => (x2 * 100).toFixed(p),
    "b": (x2) => Math.round(x2).toString(2),
    "c": (x2) => x2 + "",
    "d": formatDecimal_default,
    "e": (x2, p) => x2.toExponential(p),
    "f": (x2, p) => x2.toFixed(p),
    "g": (x2, p) => x2.toPrecision(p),
    "o": (x2) => Math.round(x2).toString(8),
    "p": (x2, p) => formatRounded_default(x2 * 100, p),
    "r": formatRounded_default,
    "s": formatPrefixAuto_default,
    "X": (x2) => Math.round(x2).toString(16).toUpperCase(),
    "x": (x2) => Math.round(x2).toString(16)
  };

  // node_modules/d3-format/src/identity.js
  function identity_default(x2) {
    return x2;
  }

  // node_modules/d3-format/src/locale.js
  var map = Array.prototype.map;
  var prefixes = ["y", "z", "a", "f", "p", "n", "\xB5", "m", "", "k", "M", "G", "T", "P", "E", "Z", "Y"];
  function locale_default(locale3) {
    var group = locale3.grouping === void 0 || locale3.thousands === void 0 ? identity_default : formatGroup_default(map.call(locale3.grouping, Number), locale3.thousands + ""), currencyPrefix = locale3.currency === void 0 ? "" : locale3.currency[0] + "", currencySuffix = locale3.currency === void 0 ? "" : locale3.currency[1] + "", decimal = locale3.decimal === void 0 ? "." : locale3.decimal + "", numerals = locale3.numerals === void 0 ? identity_default : formatNumerals_default(map.call(locale3.numerals, String)), percent = locale3.percent === void 0 ? "%" : locale3.percent + "", minus = locale3.minus === void 0 ? "\u2212" : locale3.minus + "", nan = locale3.nan === void 0 ? "NaN" : locale3.nan + "";
    function newFormat(specifier) {
      specifier = formatSpecifier(specifier);
      var fill = specifier.fill, align = specifier.align, sign2 = specifier.sign, symbol = specifier.symbol, zero3 = specifier.zero, width = specifier.width, comma = specifier.comma, precision = specifier.precision, trim = specifier.trim, type = specifier.type;
      if (type === "n") comma = true, type = "g";
      else if (!formatTypes_default[type]) precision === void 0 && (precision = 12), trim = true, type = "g";
      if (zero3 || fill === "0" && align === "=") zero3 = true, fill = "0", align = "=";
      var prefix2 = symbol === "$" ? currencyPrefix : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "", suffix = symbol === "$" ? currencySuffix : /[%p]/.test(type) ? percent : "";
      var formatType = formatTypes_default[type], maybeSuffix = /[defgprs%]/.test(type);
      precision = precision === void 0 ? 6 : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision)) : Math.max(0, Math.min(20, precision));
      function format2(value) {
        var valuePrefix = prefix2, valueSuffix = suffix, i, n, c2;
        if (type === "c") {
          valueSuffix = formatType(value) + valueSuffix;
          value = "";
        } else {
          value = +value;
          var valueNegative = value < 0 || 1 / value < 0;
          value = isNaN(value) ? nan : formatType(Math.abs(value), precision);
          if (trim) value = formatTrim_default(value);
          if (valueNegative && +value === 0 && sign2 !== "+") valueNegative = false;
          valuePrefix = (valueNegative ? sign2 === "(" ? sign2 : minus : sign2 === "-" || sign2 === "(" ? "" : sign2) + valuePrefix;
          valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign2 === "(" ? ")" : "");
          if (maybeSuffix) {
            i = -1, n = value.length;
            while (++i < n) {
              if (c2 = value.charCodeAt(i), 48 > c2 || c2 > 57) {
                valueSuffix = (c2 === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
                value = value.slice(0, i);
                break;
              }
            }
          }
        }
        if (comma && !zero3) value = group(value, Infinity);
        var length = valuePrefix.length + value.length + valueSuffix.length, padding = length < width ? new Array(width - length + 1).join(fill) : "";
        if (comma && zero3) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";
        switch (align) {
          case "<":
            value = valuePrefix + value + valueSuffix + padding;
            break;
          case "=":
            value = valuePrefix + padding + value + valueSuffix;
            break;
          case "^":
            value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length);
            break;
          default:
            value = padding + valuePrefix + value + valueSuffix;
            break;
        }
        return numerals(value);
      }
      format2.toString = function() {
        return specifier + "";
      };
      return format2;
    }
    function formatPrefix2(specifier, value) {
      var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)), e = Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3, k2 = Math.pow(10, -e), prefix2 = prefixes[8 + e / 3];
      return function(value2) {
        return f(k2 * value2) + prefix2;
      };
    }
    return {
      format: newFormat,
      formatPrefix: formatPrefix2
    };
  }

  // node_modules/d3-format/src/defaultLocale.js
  var locale;
  var format;
  var formatPrefix;
  defaultLocale({
    thousands: ",",
    grouping: [3],
    currency: ["$", ""]
  });
  function defaultLocale(definition) {
    locale = locale_default(definition);
    format = locale.format;
    formatPrefix = locale.formatPrefix;
    return locale;
  }

  // node_modules/d3-format/src/precisionFixed.js
  function precisionFixed_default(step) {
    return Math.max(0, -exponent_default(Math.abs(step)));
  }

  // node_modules/d3-format/src/precisionPrefix.js
  function precisionPrefix_default(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent_default(value) / 3))) * 3 - exponent_default(Math.abs(step)));
  }

  // node_modules/d3-format/src/precisionRound.js
  function precisionRound_default(step, max2) {
    step = Math.abs(step), max2 = Math.abs(max2) - step;
    return Math.max(0, exponent_default(max2) - exponent_default(step)) + 1;
  }

  // node_modules/d3-scale/src/tickFormat.js
  function tickFormat(start, stop, count, specifier) {
    var step = tickStep(start, stop, count), precision;
    specifier = formatSpecifier(specifier == null ? ",f" : specifier);
    switch (specifier.type) {
      case "s": {
        var value = Math.max(Math.abs(start), Math.abs(stop));
        if (specifier.precision == null && !isNaN(precision = precisionPrefix_default(step, value))) specifier.precision = precision;
        return formatPrefix(specifier, value);
      }
      case "":
      case "e":
      case "g":
      case "p":
      case "r": {
        if (specifier.precision == null && !isNaN(precision = precisionRound_default(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
        break;
      }
      case "f":
      case "%": {
        if (specifier.precision == null && !isNaN(precision = precisionFixed_default(step))) specifier.precision = precision - (specifier.type === "%") * 2;
        break;
      }
    }
    return format(specifier);
  }

  // node_modules/d3-scale/src/linear.js
  function linearish(scale) {
    var domain = scale.domain;
    scale.ticks = function(count) {
      var d = domain();
      return ticks(d[0], d[d.length - 1], count == null ? 10 : count);
    };
    scale.tickFormat = function(count, specifier) {
      var d = domain();
      return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier);
    };
    scale.nice = function(count) {
      if (count == null) count = 10;
      var d = domain();
      var i0 = 0;
      var i1 = d.length - 1;
      var start = d[i0];
      var stop = d[i1];
      var prestep;
      var step;
      var maxIter = 10;
      if (stop < start) {
        step = start, start = stop, stop = step;
        step = i0, i0 = i1, i1 = step;
      }
      while (maxIter-- > 0) {
        step = tickIncrement(start, stop, count);
        if (step === prestep) {
          d[i0] = start;
          d[i1] = stop;
          return domain(d);
        } else if (step > 0) {
          start = Math.floor(start / step) * step;
          stop = Math.ceil(stop / step) * step;
        } else if (step < 0) {
          start = Math.ceil(start * step) / step;
          stop = Math.floor(stop * step) / step;
        } else {
          break;
        }
        prestep = step;
      }
      return scale;
    };
    return scale;
  }
  function linear2() {
    var scale = continuous();
    scale.copy = function() {
      return copy(scale, linear2());
    };
    initRange.apply(scale, arguments);
    return linearish(scale);
  }

  // node_modules/d3-scale/src/identity.js
  function identity2(domain) {
    var unknown;
    function scale(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : x2;
    }
    scale.invert = scale;
    scale.domain = scale.range = function(_) {
      return arguments.length ? (domain = Array.from(_, number2), scale) : domain.slice();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return identity2(domain).unknown(unknown);
    };
    domain = arguments.length ? Array.from(domain, number2) : [0, 1];
    return linearish(scale);
  }

  // node_modules/d3-scale/src/nice.js
  function nice(domain, interval) {
    domain = domain.slice();
    var i0 = 0, i1 = domain.length - 1, x0 = domain[i0], x1 = domain[i1], t;
    if (x1 < x0) {
      t = i0, i0 = i1, i1 = t;
      t = x0, x0 = x1, x1 = t;
    }
    domain[i0] = interval.floor(x0);
    domain[i1] = interval.ceil(x1);
    return domain;
  }

  // node_modules/d3-scale/src/log.js
  function transformLog(x2) {
    return Math.log(x2);
  }
  function transformExp(x2) {
    return Math.exp(x2);
  }
  function transformLogn(x2) {
    return -Math.log(-x2);
  }
  function transformExpn(x2) {
    return -Math.exp(-x2);
  }
  function pow10(x2) {
    return isFinite(x2) ? +("1e" + x2) : x2 < 0 ? 0 : x2;
  }
  function powp(base) {
    return base === 10 ? pow10 : base === Math.E ? Math.exp : (x2) => Math.pow(base, x2);
  }
  function logp(base) {
    return base === Math.E ? Math.log : base === 10 && Math.log10 || base === 2 && Math.log2 || (base = Math.log(base), (x2) => Math.log(x2) / base);
  }
  function reflect(f) {
    return (x2, k2) => -f(-x2, k2);
  }
  function loggish(transform) {
    const scale = transform(transformLog, transformExp);
    const domain = scale.domain;
    let base = 10;
    let logs;
    let pows;
    function rescale() {
      logs = logp(base), pows = powp(base);
      if (domain()[0] < 0) {
        logs = reflect(logs), pows = reflect(pows);
        transform(transformLogn, transformExpn);
      } else {
        transform(transformLog, transformExp);
      }
      return scale;
    }
    scale.base = function(_) {
      return arguments.length ? (base = +_, rescale()) : base;
    };
    scale.domain = function(_) {
      return arguments.length ? (domain(_), rescale()) : domain();
    };
    scale.ticks = (count) => {
      const d = domain();
      let u = d[0];
      let v = d[d.length - 1];
      const r2 = v < u;
      if (r2) [u, v] = [v, u];
      let i = logs(u);
      let j = logs(v);
      let k2;
      let t;
      const n = count == null ? 10 : +count;
      let z = [];
      if (!(base % 1) && j - i < n) {
        i = Math.floor(i), j = Math.ceil(j);
        if (u > 0) for (; i <= j; ++i) {
          for (k2 = 1; k2 < base; ++k2) {
            t = i < 0 ? k2 / pows(-i) : k2 * pows(i);
            if (t < u) continue;
            if (t > v) break;
            z.push(t);
          }
        }
        else for (; i <= j; ++i) {
          for (k2 = base - 1; k2 >= 1; --k2) {
            t = i > 0 ? k2 / pows(-i) : k2 * pows(i);
            if (t < u) continue;
            if (t > v) break;
            z.push(t);
          }
        }
        if (z.length * 2 < n) z = ticks(u, v, n);
      } else {
        z = ticks(i, j, Math.min(j - i, n)).map(pows);
      }
      return r2 ? z.reverse() : z;
    };
    scale.tickFormat = (count, specifier) => {
      if (count == null) count = 10;
      if (specifier == null) specifier = base === 10 ? "s" : ",";
      if (typeof specifier !== "function") {
        if (!(base % 1) && (specifier = formatSpecifier(specifier)).precision == null) specifier.trim = true;
        specifier = format(specifier);
      }
      if (count === Infinity) return specifier;
      const k2 = Math.max(1, base * count / scale.ticks().length);
      return (d) => {
        let i = d / pows(Math.round(logs(d)));
        if (i * base < base - 0.5) i *= base;
        return i <= k2 ? specifier(d) : "";
      };
    };
    scale.nice = () => {
      return domain(nice(domain(), {
        floor: (x2) => pows(Math.floor(logs(x2))),
        ceil: (x2) => pows(Math.ceil(logs(x2)))
      }));
    };
    return scale;
  }
  function log() {
    const scale = loggish(transformer()).domain([1, 10]);
    scale.copy = () => copy(scale, log()).base(scale.base());
    initRange.apply(scale, arguments);
    return scale;
  }

  // node_modules/d3-scale/src/symlog.js
  function transformSymlog(c2) {
    return function(x2) {
      return Math.sign(x2) * Math.log1p(Math.abs(x2 / c2));
    };
  }
  function transformSymexp(c2) {
    return function(x2) {
      return Math.sign(x2) * Math.expm1(Math.abs(x2)) * c2;
    };
  }
  function symlogish(transform) {
    var c2 = 1, scale = transform(transformSymlog(c2), transformSymexp(c2));
    scale.constant = function(_) {
      return arguments.length ? transform(transformSymlog(c2 = +_), transformSymexp(c2)) : c2;
    };
    return linearish(scale);
  }
  function symlog() {
    var scale = symlogish(transformer());
    scale.copy = function() {
      return copy(scale, symlog()).constant(scale.constant());
    };
    return initRange.apply(scale, arguments);
  }

  // node_modules/d3-scale/src/pow.js
  function transformPow(exponent) {
    return function(x2) {
      return x2 < 0 ? -Math.pow(-x2, exponent) : Math.pow(x2, exponent);
    };
  }
  function transformSqrt(x2) {
    return x2 < 0 ? -Math.sqrt(-x2) : Math.sqrt(x2);
  }
  function transformSquare(x2) {
    return x2 < 0 ? -x2 * x2 : x2 * x2;
  }
  function powish(transform) {
    var scale = transform(identity, identity), exponent = 1;
    function rescale() {
      return exponent === 1 ? transform(identity, identity) : exponent === 0.5 ? transform(transformSqrt, transformSquare) : transform(transformPow(exponent), transformPow(1 / exponent));
    }
    scale.exponent = function(_) {
      return arguments.length ? (exponent = +_, rescale()) : exponent;
    };
    return linearish(scale);
  }
  function pow() {
    var scale = powish(transformer());
    scale.copy = function() {
      return copy(scale, pow()).exponent(scale.exponent());
    };
    initRange.apply(scale, arguments);
    return scale;
  }
  function sqrt2() {
    return pow.apply(null, arguments).exponent(0.5);
  }

  // node_modules/d3-scale/src/radial.js
  function square(x2) {
    return Math.sign(x2) * x2 * x2;
  }
  function unsquare(x2) {
    return Math.sign(x2) * Math.sqrt(Math.abs(x2));
  }
  function radial() {
    var squared = continuous(), range4 = [0, 1], round = false, unknown;
    function scale(x2) {
      var y2 = unsquare(squared(x2));
      return isNaN(y2) ? unknown : round ? Math.round(y2) : y2;
    }
    scale.invert = function(y2) {
      return squared.invert(square(y2));
    };
    scale.domain = function(_) {
      return arguments.length ? (squared.domain(_), scale) : squared.domain();
    };
    scale.range = function(_) {
      return arguments.length ? (squared.range((range4 = Array.from(_, number2)).map(square)), scale) : range4.slice();
    };
    scale.rangeRound = function(_) {
      return scale.range(_).round(true);
    };
    scale.round = function(_) {
      return arguments.length ? (round = !!_, scale) : round;
    };
    scale.clamp = function(_) {
      return arguments.length ? (squared.clamp(_), scale) : squared.clamp();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return radial(squared.domain(), range4).round(round).clamp(squared.clamp()).unknown(unknown);
    };
    initRange.apply(scale, arguments);
    return linearish(scale);
  }

  // node_modules/d3-scale/src/quantile.js
  function quantile2() {
    var domain = [], range4 = [], thresholds = [], unknown;
    function rescale() {
      var i = 0, n = Math.max(1, range4.length);
      thresholds = new Array(n - 1);
      while (++i < n) thresholds[i - 1] = quantileSorted(domain, i / n);
      return scale;
    }
    function scale(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : range4[bisect_default(thresholds, x2)];
    }
    scale.invertExtent = function(y2) {
      var i = range4.indexOf(y2);
      return i < 0 ? [NaN, NaN] : [
        i > 0 ? thresholds[i - 1] : domain[0],
        i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
      ];
    };
    scale.domain = function(_) {
      if (!arguments.length) return domain.slice();
      domain = [];
      for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
      domain.sort(ascending);
      return rescale();
    };
    scale.range = function(_) {
      return arguments.length ? (range4 = Array.from(_), rescale()) : range4.slice();
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.quantiles = function() {
      return thresholds.slice();
    };
    scale.copy = function() {
      return quantile2().domain(domain).range(range4).unknown(unknown);
    };
    return initRange.apply(scale, arguments);
  }

  // node_modules/d3-scale/src/quantize.js
  function quantize() {
    var x0 = 0, x1 = 1, n = 1, domain = [0.5], range4 = [0, 1], unknown;
    function scale(x2) {
      return x2 != null && x2 <= x2 ? range4[bisect_default(domain, x2, 0, n)] : unknown;
    }
    function rescale() {
      var i = -1;
      domain = new Array(n);
      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
      return scale;
    }
    scale.domain = function(_) {
      return arguments.length ? ([x0, x1] = _, x0 = +x0, x1 = +x1, rescale()) : [x0, x1];
    };
    scale.range = function(_) {
      return arguments.length ? (n = (range4 = Array.from(_)).length - 1, rescale()) : range4.slice();
    };
    scale.invertExtent = function(y2) {
      var i = range4.indexOf(y2);
      return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]];
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : scale;
    };
    scale.thresholds = function() {
      return domain.slice();
    };
    scale.copy = function() {
      return quantize().domain([x0, x1]).range(range4).unknown(unknown);
    };
    return initRange.apply(linearish(scale), arguments);
  }

  // node_modules/d3-scale/src/threshold.js
  function threshold() {
    var domain = [0.5], range4 = [0, 1], unknown, n = 1;
    function scale(x2) {
      return x2 != null && x2 <= x2 ? range4[bisect_default(domain, x2, 0, n)] : unknown;
    }
    scale.domain = function(_) {
      return arguments.length ? (domain = Array.from(_), n = Math.min(domain.length, range4.length - 1), scale) : domain.slice();
    };
    scale.range = function(_) {
      return arguments.length ? (range4 = Array.from(_), n = Math.min(domain.length, range4.length - 1), scale) : range4.slice();
    };
    scale.invertExtent = function(y2) {
      var i = range4.indexOf(y2);
      return [domain[i - 1], domain[i]];
    };
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    scale.copy = function() {
      return threshold().domain(domain).range(range4).unknown(unknown);
    };
    return initRange.apply(scale, arguments);
  }

  // node_modules/d3-time/src/interval.js
  var t0 = /* @__PURE__ */ new Date();
  var t1 = /* @__PURE__ */ new Date();
  function timeInterval(floori, offseti, count, field) {
    function interval(date2) {
      return floori(date2 = arguments.length === 0 ? /* @__PURE__ */ new Date() : /* @__PURE__ */ new Date(+date2)), date2;
    }
    interval.floor = (date2) => {
      return floori(date2 = /* @__PURE__ */ new Date(+date2)), date2;
    };
    interval.ceil = (date2) => {
      return floori(date2 = new Date(date2 - 1)), offseti(date2, 1), floori(date2), date2;
    };
    interval.round = (date2) => {
      const d0 = interval(date2), d1 = interval.ceil(date2);
      return date2 - d0 < d1 - date2 ? d0 : d1;
    };
    interval.offset = (date2, step) => {
      return offseti(date2 = /* @__PURE__ */ new Date(+date2), step == null ? 1 : Math.floor(step)), date2;
    };
    interval.range = (start, stop, step) => {
      const range4 = [];
      start = interval.ceil(start);
      step = step == null ? 1 : Math.floor(step);
      if (!(start < stop) || !(step > 0)) return range4;
      let previous;
      do
        range4.push(previous = /* @__PURE__ */ new Date(+start)), offseti(start, step), floori(start);
      while (previous < start && start < stop);
      return range4;
    };
    interval.filter = (test) => {
      return timeInterval((date2) => {
        if (date2 >= date2) while (floori(date2), !test(date2)) date2.setTime(date2 - 1);
      }, (date2, step) => {
        if (date2 >= date2) {
          if (step < 0) while (++step <= 0) {
            while (offseti(date2, -1), !test(date2)) {
            }
          }
          else while (--step >= 0) {
            while (offseti(date2, 1), !test(date2)) {
            }
          }
        }
      });
    };
    if (count) {
      interval.count = (start, end) => {
        t0.setTime(+start), t1.setTime(+end);
        floori(t0), floori(t1);
        return Math.floor(count(t0, t1));
      };
      interval.every = (step) => {
        step = Math.floor(step);
        return !isFinite(step) || !(step > 0) ? null : !(step > 1) ? interval : interval.filter(field ? (d) => field(d) % step === 0 : (d) => interval.count(0, d) % step === 0);
      };
    }
    return interval;
  }

  // node_modules/d3-time/src/millisecond.js
  var millisecond = timeInterval(() => {
  }, (date2, step) => {
    date2.setTime(+date2 + step);
  }, (start, end) => {
    return end - start;
  });
  millisecond.every = (k2) => {
    k2 = Math.floor(k2);
    if (!isFinite(k2) || !(k2 > 0)) return null;
    if (!(k2 > 1)) return millisecond;
    return timeInterval((date2) => {
      date2.setTime(Math.floor(date2 / k2) * k2);
    }, (date2, step) => {
      date2.setTime(+date2 + step * k2);
    }, (start, end) => {
      return (end - start) / k2;
    });
  };
  var milliseconds = millisecond.range;

  // node_modules/d3-time/src/duration.js
  var durationSecond = 1e3;
  var durationMinute = durationSecond * 60;
  var durationHour = durationMinute * 60;
  var durationDay = durationHour * 24;
  var durationWeek = durationDay * 7;
  var durationMonth = durationDay * 30;
  var durationYear = durationDay * 365;

  // node_modules/d3-time/src/second.js
  var second = timeInterval((date2) => {
    date2.setTime(date2 - date2.getMilliseconds());
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationSecond);
  }, (start, end) => {
    return (end - start) / durationSecond;
  }, (date2) => {
    return date2.getUTCSeconds();
  });
  var seconds = second.range;

  // node_modules/d3-time/src/minute.js
  var timeMinute = timeInterval((date2) => {
    date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond);
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationMinute);
  }, (start, end) => {
    return (end - start) / durationMinute;
  }, (date2) => {
    return date2.getMinutes();
  });
  var timeMinutes = timeMinute.range;
  var utcMinute = timeInterval((date2) => {
    date2.setUTCSeconds(0, 0);
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationMinute);
  }, (start, end) => {
    return (end - start) / durationMinute;
  }, (date2) => {
    return date2.getUTCMinutes();
  });
  var utcMinutes = utcMinute.range;

  // node_modules/d3-time/src/hour.js
  var timeHour = timeInterval((date2) => {
    date2.setTime(date2 - date2.getMilliseconds() - date2.getSeconds() * durationSecond - date2.getMinutes() * durationMinute);
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationHour);
  }, (start, end) => {
    return (end - start) / durationHour;
  }, (date2) => {
    return date2.getHours();
  });
  var timeHours = timeHour.range;
  var utcHour = timeInterval((date2) => {
    date2.setUTCMinutes(0, 0, 0);
  }, (date2, step) => {
    date2.setTime(+date2 + step * durationHour);
  }, (start, end) => {
    return (end - start) / durationHour;
  }, (date2) => {
    return date2.getUTCHours();
  });
  var utcHours = utcHour.range;

  // node_modules/d3-time/src/day.js
  var timeDay = timeInterval(
    (date2) => date2.setHours(0, 0, 0, 0),
    (date2, step) => date2.setDate(date2.getDate() + step),
    (start, end) => (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
    (date2) => date2.getDate() - 1
  );
  var timeDays = timeDay.range;
  var utcDay = timeInterval((date2) => {
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step);
  }, (start, end) => {
    return (end - start) / durationDay;
  }, (date2) => {
    return date2.getUTCDate() - 1;
  });
  var utcDays = utcDay.range;
  var unixDay = timeInterval((date2) => {
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCDate(date2.getUTCDate() + step);
  }, (start, end) => {
    return (end - start) / durationDay;
  }, (date2) => {
    return Math.floor(date2 / durationDay);
  });
  var unixDays = unixDay.range;

  // node_modules/d3-time/src/week.js
  function timeWeekday(i) {
    return timeInterval((date2) => {
      date2.setDate(date2.getDate() - (date2.getDay() + 7 - i) % 7);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setDate(date2.getDate() + step * 7);
    }, (start, end) => {
      return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
    });
  }
  var timeSunday = timeWeekday(0);
  var timeMonday = timeWeekday(1);
  var timeTuesday = timeWeekday(2);
  var timeWednesday = timeWeekday(3);
  var timeThursday = timeWeekday(4);
  var timeFriday = timeWeekday(5);
  var timeSaturday = timeWeekday(6);
  var timeSundays = timeSunday.range;
  var timeMondays = timeMonday.range;
  var timeTuesdays = timeTuesday.range;
  var timeWednesdays = timeWednesday.range;
  var timeThursdays = timeThursday.range;
  var timeFridays = timeFriday.range;
  var timeSaturdays = timeSaturday.range;
  function utcWeekday(i) {
    return timeInterval((date2) => {
      date2.setUTCDate(date2.getUTCDate() - (date2.getUTCDay() + 7 - i) % 7);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCDate(date2.getUTCDate() + step * 7);
    }, (start, end) => {
      return (end - start) / durationWeek;
    });
  }
  var utcSunday = utcWeekday(0);
  var utcMonday = utcWeekday(1);
  var utcTuesday = utcWeekday(2);
  var utcWednesday = utcWeekday(3);
  var utcThursday = utcWeekday(4);
  var utcFriday = utcWeekday(5);
  var utcSaturday = utcWeekday(6);
  var utcSundays = utcSunday.range;
  var utcMondays = utcMonday.range;
  var utcTuesdays = utcTuesday.range;
  var utcWednesdays = utcWednesday.range;
  var utcThursdays = utcThursday.range;
  var utcFridays = utcFriday.range;
  var utcSaturdays = utcSaturday.range;

  // node_modules/d3-time/src/month.js
  var timeMonth = timeInterval((date2) => {
    date2.setDate(1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setMonth(date2.getMonth() + step);
  }, (start, end) => {
    return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
  }, (date2) => {
    return date2.getMonth();
  });
  var timeMonths = timeMonth.range;
  var utcMonth = timeInterval((date2) => {
    date2.setUTCDate(1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCMonth(date2.getUTCMonth() + step);
  }, (start, end) => {
    return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
  }, (date2) => {
    return date2.getUTCMonth();
  });
  var utcMonths = utcMonth.range;

  // node_modules/d3-time/src/year.js
  var timeYear = timeInterval((date2) => {
    date2.setMonth(0, 1);
    date2.setHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setFullYear(date2.getFullYear() + step);
  }, (start, end) => {
    return end.getFullYear() - start.getFullYear();
  }, (date2) => {
    return date2.getFullYear();
  });
  timeYear.every = (k2) => {
    return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date2) => {
      date2.setFullYear(Math.floor(date2.getFullYear() / k2) * k2);
      date2.setMonth(0, 1);
      date2.setHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setFullYear(date2.getFullYear() + step * k2);
    });
  };
  var timeYears = timeYear.range;
  var utcYear = timeInterval((date2) => {
    date2.setUTCMonth(0, 1);
    date2.setUTCHours(0, 0, 0, 0);
  }, (date2, step) => {
    date2.setUTCFullYear(date2.getUTCFullYear() + step);
  }, (start, end) => {
    return end.getUTCFullYear() - start.getUTCFullYear();
  }, (date2) => {
    return date2.getUTCFullYear();
  });
  utcYear.every = (k2) => {
    return !isFinite(k2 = Math.floor(k2)) || !(k2 > 0) ? null : timeInterval((date2) => {
      date2.setUTCFullYear(Math.floor(date2.getUTCFullYear() / k2) * k2);
      date2.setUTCMonth(0, 1);
      date2.setUTCHours(0, 0, 0, 0);
    }, (date2, step) => {
      date2.setUTCFullYear(date2.getUTCFullYear() + step * k2);
    });
  };
  var utcYears = utcYear.range;

  // node_modules/d3-time/src/ticks.js
  function ticker(year, month, week, day, hour, minute) {
    const tickIntervals = [
      [second, 1, durationSecond],
      [second, 5, 5 * durationSecond],
      [second, 15, 15 * durationSecond],
      [second, 30, 30 * durationSecond],
      [minute, 1, durationMinute],
      [minute, 5, 5 * durationMinute],
      [minute, 15, 15 * durationMinute],
      [minute, 30, 30 * durationMinute],
      [hour, 1, durationHour],
      [hour, 3, 3 * durationHour],
      [hour, 6, 6 * durationHour],
      [hour, 12, 12 * durationHour],
      [day, 1, durationDay],
      [day, 2, 2 * durationDay],
      [week, 1, durationWeek],
      [month, 1, durationMonth],
      [month, 3, 3 * durationMonth],
      [year, 1, durationYear]
    ];
    function ticks2(start, stop, count) {
      const reverse2 = stop < start;
      if (reverse2) [start, stop] = [stop, start];
      const interval = count && typeof count.range === "function" ? count : tickInterval(start, stop, count);
      const ticks3 = interval ? interval.range(start, +stop + 1) : [];
      return reverse2 ? ticks3.reverse() : ticks3;
    }
    function tickInterval(start, stop, count) {
      const target = Math.abs(stop - start) / count;
      const i = bisector(([, , step2]) => step2).right(tickIntervals, target);
      if (i === tickIntervals.length) return year.every(tickStep(start / durationYear, stop / durationYear, count));
      if (i === 0) return millisecond.every(Math.max(tickStep(start, stop, count), 1));
      const [t, step] = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
      return t.every(step);
    }
    return [ticks2, tickInterval];
  }
  var [utcTicks, utcTickInterval] = ticker(utcYear, utcMonth, utcSunday, unixDay, utcHour, utcMinute);
  var [timeTicks, timeTickInterval] = ticker(timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute);

  // node_modules/d3-time-format/src/locale.js
  function localDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date2 = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
      date2.setFullYear(d.y);
      return date2;
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
  }
  function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
      var date2 = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
      date2.setUTCFullYear(d.y);
      return date2;
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
  }
  function newDate(y2, m, d) {
    return { y: y2, m, d, H: 0, M: 0, S: 0, L: 0 };
  }
  function formatLocale(locale3) {
    var locale_dateTime = locale3.dateTime, locale_date = locale3.date, locale_time = locale3.time, locale_periods = locale3.periods, locale_weekdays = locale3.days, locale_shortWeekdays = locale3.shortDays, locale_months = locale3.months, locale_shortMonths = locale3.shortMonths;
    var periodRe = formatRe(locale_periods), periodLookup = formatLookup(locale_periods), weekdayRe = formatRe(locale_weekdays), weekdayLookup = formatLookup(locale_weekdays), shortWeekdayRe = formatRe(locale_shortWeekdays), shortWeekdayLookup = formatLookup(locale_shortWeekdays), monthRe = formatRe(locale_months), monthLookup = formatLookup(locale_months), shortMonthRe = formatRe(locale_shortMonths), shortMonthLookup = formatLookup(locale_shortMonths);
    var formats = {
      "a": formatShortWeekday,
      "A": formatWeekday,
      "b": formatShortMonth,
      "B": formatMonth,
      "c": null,
      "d": formatDayOfMonth,
      "e": formatDayOfMonth,
      "f": formatMicroseconds,
      "g": formatYearISO,
      "G": formatFullYearISO,
      "H": formatHour24,
      "I": formatHour12,
      "j": formatDayOfYear,
      "L": formatMilliseconds,
      "m": formatMonthNumber,
      "M": formatMinutes,
      "p": formatPeriod,
      "q": formatQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatSeconds,
      "u": formatWeekdayNumberMonday,
      "U": formatWeekNumberSunday,
      "V": formatWeekNumberISO,
      "w": formatWeekdayNumberSunday,
      "W": formatWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatYear,
      "Y": formatFullYear,
      "Z": formatZone,
      "%": formatLiteralPercent
    };
    var utcFormats = {
      "a": formatUTCShortWeekday,
      "A": formatUTCWeekday,
      "b": formatUTCShortMonth,
      "B": formatUTCMonth,
      "c": null,
      "d": formatUTCDayOfMonth,
      "e": formatUTCDayOfMonth,
      "f": formatUTCMicroseconds,
      "g": formatUTCYearISO,
      "G": formatUTCFullYearISO,
      "H": formatUTCHour24,
      "I": formatUTCHour12,
      "j": formatUTCDayOfYear,
      "L": formatUTCMilliseconds,
      "m": formatUTCMonthNumber,
      "M": formatUTCMinutes,
      "p": formatUTCPeriod,
      "q": formatUTCQuarter,
      "Q": formatUnixTimestamp,
      "s": formatUnixTimestampSeconds,
      "S": formatUTCSeconds,
      "u": formatUTCWeekdayNumberMonday,
      "U": formatUTCWeekNumberSunday,
      "V": formatUTCWeekNumberISO,
      "w": formatUTCWeekdayNumberSunday,
      "W": formatUTCWeekNumberMonday,
      "x": null,
      "X": null,
      "y": formatUTCYear,
      "Y": formatUTCFullYear,
      "Z": formatUTCZone,
      "%": formatLiteralPercent
    };
    var parses = {
      "a": parseShortWeekday,
      "A": parseWeekday,
      "b": parseShortMonth,
      "B": parseMonth,
      "c": parseLocaleDateTime,
      "d": parseDayOfMonth,
      "e": parseDayOfMonth,
      "f": parseMicroseconds,
      "g": parseYear,
      "G": parseFullYear,
      "H": parseHour24,
      "I": parseHour24,
      "j": parseDayOfYear,
      "L": parseMilliseconds,
      "m": parseMonthNumber,
      "M": parseMinutes,
      "p": parsePeriod,
      "q": parseQuarter,
      "Q": parseUnixTimestamp,
      "s": parseUnixTimestampSeconds,
      "S": parseSeconds,
      "u": parseWeekdayNumberMonday,
      "U": parseWeekNumberSunday,
      "V": parseWeekNumberISO,
      "w": parseWeekdayNumberSunday,
      "W": parseWeekNumberMonday,
      "x": parseLocaleDate,
      "X": parseLocaleTime,
      "y": parseYear,
      "Y": parseFullYear,
      "Z": parseZone,
      "%": parseLiteralPercent
    };
    formats.x = newFormat(locale_date, formats);
    formats.X = newFormat(locale_time, formats);
    formats.c = newFormat(locale_dateTime, formats);
    utcFormats.x = newFormat(locale_date, utcFormats);
    utcFormats.X = newFormat(locale_time, utcFormats);
    utcFormats.c = newFormat(locale_dateTime, utcFormats);
    function newFormat(specifier, formats2) {
      return function(date2) {
        var string = [], i = -1, j = 0, n = specifier.length, c2, pad2, format2;
        if (!(date2 instanceof Date)) date2 = /* @__PURE__ */ new Date(+date2);
        while (++i < n) {
          if (specifier.charCodeAt(i) === 37) {
            string.push(specifier.slice(j, i));
            if ((pad2 = pads[c2 = specifier.charAt(++i)]) != null) c2 = specifier.charAt(++i);
            else pad2 = c2 === "e" ? " " : "0";
            if (format2 = formats2[c2]) c2 = format2(date2, pad2);
            string.push(c2);
            j = i + 1;
          }
        }
        string.push(specifier.slice(j, i));
        return string.join("");
      };
    }
    function newParse(specifier, Z) {
      return function(string) {
        var d = newDate(1900, void 0, 1), i = parseSpecifier(d, specifier, string += "", 0), week, day;
        if (i != string.length) return null;
        if ("Q" in d) return new Date(d.Q);
        if ("s" in d) return new Date(d.s * 1e3 + ("L" in d ? d.L : 0));
        if (Z && !("Z" in d)) d.Z = 0;
        if ("p" in d) d.H = d.H % 12 + d.p * 12;
        if (d.m === void 0) d.m = "q" in d ? d.q : 0;
        if ("V" in d) {
          if (d.V < 1 || d.V > 53) return null;
          if (!("w" in d)) d.w = 1;
          if ("Z" in d) {
            week = utcDate(newDate(d.y, 0, 1)), day = week.getUTCDay();
            week = day > 4 || day === 0 ? utcMonday.ceil(week) : utcMonday(week);
            week = utcDay.offset(week, (d.V - 1) * 7);
            d.y = week.getUTCFullYear();
            d.m = week.getUTCMonth();
            d.d = week.getUTCDate() + (d.w + 6) % 7;
          } else {
            week = localDate(newDate(d.y, 0, 1)), day = week.getDay();
            week = day > 4 || day === 0 ? timeMonday.ceil(week) : timeMonday(week);
            week = timeDay.offset(week, (d.V - 1) * 7);
            d.y = week.getFullYear();
            d.m = week.getMonth();
            d.d = week.getDate() + (d.w + 6) % 7;
          }
        } else if ("W" in d || "U" in d) {
          if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
          day = "Z" in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay();
          d.m = 0;
          d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
        }
        if ("Z" in d) {
          d.H += d.Z / 100 | 0;
          d.M += d.Z % 100;
          return utcDate(d);
        }
        return localDate(d);
      };
    }
    function parseSpecifier(d, specifier, string, j) {
      var i = 0, n = specifier.length, m = string.length, c2, parse;
      while (i < n) {
        if (j >= m) return -1;
        c2 = specifier.charCodeAt(i++);
        if (c2 === 37) {
          c2 = specifier.charAt(i++);
          parse = parses[c2 in pads ? specifier.charAt(i++) : c2];
          if (!parse || (j = parse(d, string, j)) < 0) return -1;
        } else if (c2 != string.charCodeAt(j++)) {
          return -1;
        }
      }
      return j;
    }
    function parsePeriod(d, string, i) {
      var n = periodRe.exec(string.slice(i));
      return n ? (d.p = periodLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortWeekday(d, string, i) {
      var n = shortWeekdayRe.exec(string.slice(i));
      return n ? (d.w = shortWeekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseWeekday(d, string, i) {
      var n = weekdayRe.exec(string.slice(i));
      return n ? (d.w = weekdayLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseShortMonth(d, string, i) {
      var n = shortMonthRe.exec(string.slice(i));
      return n ? (d.m = shortMonthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseMonth(d, string, i) {
      var n = monthRe.exec(string.slice(i));
      return n ? (d.m = monthLookup.get(n[0].toLowerCase()), i + n[0].length) : -1;
    }
    function parseLocaleDateTime(d, string, i) {
      return parseSpecifier(d, locale_dateTime, string, i);
    }
    function parseLocaleDate(d, string, i) {
      return parseSpecifier(d, locale_date, string, i);
    }
    function parseLocaleTime(d, string, i) {
      return parseSpecifier(d, locale_time, string, i);
    }
    function formatShortWeekday(d) {
      return locale_shortWeekdays[d.getDay()];
    }
    function formatWeekday(d) {
      return locale_weekdays[d.getDay()];
    }
    function formatShortMonth(d) {
      return locale_shortMonths[d.getMonth()];
    }
    function formatMonth(d) {
      return locale_months[d.getMonth()];
    }
    function formatPeriod(d) {
      return locale_periods[+(d.getHours() >= 12)];
    }
    function formatQuarter(d) {
      return 1 + ~~(d.getMonth() / 3);
    }
    function formatUTCShortWeekday(d) {
      return locale_shortWeekdays[d.getUTCDay()];
    }
    function formatUTCWeekday(d) {
      return locale_weekdays[d.getUTCDay()];
    }
    function formatUTCShortMonth(d) {
      return locale_shortMonths[d.getUTCMonth()];
    }
    function formatUTCMonth(d) {
      return locale_months[d.getUTCMonth()];
    }
    function formatUTCPeriod(d) {
      return locale_periods[+(d.getUTCHours() >= 12)];
    }
    function formatUTCQuarter(d) {
      return 1 + ~~(d.getUTCMonth() / 3);
    }
    return {
      format: function(specifier) {
        var f = newFormat(specifier += "", formats);
        f.toString = function() {
          return specifier;
        };
        return f;
      },
      parse: function(specifier) {
        var p = newParse(specifier += "", false);
        p.toString = function() {
          return specifier;
        };
        return p;
      },
      utcFormat: function(specifier) {
        var f = newFormat(specifier += "", utcFormats);
        f.toString = function() {
          return specifier;
        };
        return f;
      },
      utcParse: function(specifier) {
        var p = newParse(specifier += "", true);
        p.toString = function() {
          return specifier;
        };
        return p;
      }
    };
  }
  var pads = { "-": "", "_": " ", "0": "0" };
  var numberRe = /^\s*\d+/;
  var percentRe = /^%/;
  var requoteRe = /[\\^$*+?|[\]().{}]/g;
  function pad(value, fill, width) {
    var sign2 = value < 0 ? "-" : "", string = (sign2 ? -value : value) + "", length = string.length;
    return sign2 + (length < width ? new Array(width - length + 1).join(fill) + string : string);
  }
  function requote(s2) {
    return s2.replace(requoteRe, "\\$&");
  }
  function formatRe(names) {
    return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
  }
  function formatLookup(names) {
    return new Map(names.map((name, i) => [name.toLowerCase(), i]));
  }
  function parseWeekdayNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.w = +n[0], i + n[0].length) : -1;
  }
  function parseWeekdayNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.u = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberSunday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.U = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberISO(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.V = +n[0], i + n[0].length) : -1;
  }
  function parseWeekNumberMonday(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.W = +n[0], i + n[0].length) : -1;
  }
  function parseFullYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 4));
    return n ? (d.y = +n[0], i + n[0].length) : -1;
  }
  function parseYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2e3), i + n[0].length) : -1;
  }
  function parseZone(d, string, i) {
    var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
    return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
  }
  function parseQuarter(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 1));
    return n ? (d.q = n[0] * 3 - 3, i + n[0].length) : -1;
  }
  function parseMonthNumber(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
  }
  function parseDayOfMonth(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.d = +n[0], i + n[0].length) : -1;
  }
  function parseDayOfYear(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
  }
  function parseHour24(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.H = +n[0], i + n[0].length) : -1;
  }
  function parseMinutes(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.M = +n[0], i + n[0].length) : -1;
  }
  function parseSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 2));
    return n ? (d.S = +n[0], i + n[0].length) : -1;
  }
  function parseMilliseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 3));
    return n ? (d.L = +n[0], i + n[0].length) : -1;
  }
  function parseMicroseconds(d, string, i) {
    var n = numberRe.exec(string.slice(i, i + 6));
    return n ? (d.L = Math.floor(n[0] / 1e3), i + n[0].length) : -1;
  }
  function parseLiteralPercent(d, string, i) {
    var n = percentRe.exec(string.slice(i, i + 1));
    return n ? i + n[0].length : -1;
  }
  function parseUnixTimestamp(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.Q = +n[0], i + n[0].length) : -1;
  }
  function parseUnixTimestampSeconds(d, string, i) {
    var n = numberRe.exec(string.slice(i));
    return n ? (d.s = +n[0], i + n[0].length) : -1;
  }
  function formatDayOfMonth(d, p) {
    return pad(d.getDate(), p, 2);
  }
  function formatHour24(d, p) {
    return pad(d.getHours(), p, 2);
  }
  function formatHour12(d, p) {
    return pad(d.getHours() % 12 || 12, p, 2);
  }
  function formatDayOfYear(d, p) {
    return pad(1 + timeDay.count(timeYear(d), d), p, 3);
  }
  function formatMilliseconds(d, p) {
    return pad(d.getMilliseconds(), p, 3);
  }
  function formatMicroseconds(d, p) {
    return formatMilliseconds(d, p) + "000";
  }
  function formatMonthNumber(d, p) {
    return pad(d.getMonth() + 1, p, 2);
  }
  function formatMinutes(d, p) {
    return pad(d.getMinutes(), p, 2);
  }
  function formatSeconds(d, p) {
    return pad(d.getSeconds(), p, 2);
  }
  function formatWeekdayNumberMonday(d) {
    var day = d.getDay();
    return day === 0 ? 7 : day;
  }
  function formatWeekNumberSunday(d, p) {
    return pad(timeSunday.count(timeYear(d) - 1, d), p, 2);
  }
  function dISO(d) {
    var day = d.getDay();
    return day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
  }
  function formatWeekNumberISO(d, p) {
    d = dISO(d);
    return pad(timeThursday.count(timeYear(d), d) + (timeYear(d).getDay() === 4), p, 2);
  }
  function formatWeekdayNumberSunday(d) {
    return d.getDay();
  }
  function formatWeekNumberMonday(d, p) {
    return pad(timeMonday.count(timeYear(d) - 1, d), p, 2);
  }
  function formatYear(d, p) {
    return pad(d.getFullYear() % 100, p, 2);
  }
  function formatYearISO(d, p) {
    d = dISO(d);
    return pad(d.getFullYear() % 100, p, 2);
  }
  function formatFullYear(d, p) {
    return pad(d.getFullYear() % 1e4, p, 4);
  }
  function formatFullYearISO(d, p) {
    var day = d.getDay();
    d = day >= 4 || day === 0 ? timeThursday(d) : timeThursday.ceil(d);
    return pad(d.getFullYear() % 1e4, p, 4);
  }
  function formatZone(d) {
    var z = d.getTimezoneOffset();
    return (z > 0 ? "-" : (z *= -1, "+")) + pad(z / 60 | 0, "0", 2) + pad(z % 60, "0", 2);
  }
  function formatUTCDayOfMonth(d, p) {
    return pad(d.getUTCDate(), p, 2);
  }
  function formatUTCHour24(d, p) {
    return pad(d.getUTCHours(), p, 2);
  }
  function formatUTCHour12(d, p) {
    return pad(d.getUTCHours() % 12 || 12, p, 2);
  }
  function formatUTCDayOfYear(d, p) {
    return pad(1 + utcDay.count(utcYear(d), d), p, 3);
  }
  function formatUTCMilliseconds(d, p) {
    return pad(d.getUTCMilliseconds(), p, 3);
  }
  function formatUTCMicroseconds(d, p) {
    return formatUTCMilliseconds(d, p) + "000";
  }
  function formatUTCMonthNumber(d, p) {
    return pad(d.getUTCMonth() + 1, p, 2);
  }
  function formatUTCMinutes(d, p) {
    return pad(d.getUTCMinutes(), p, 2);
  }
  function formatUTCSeconds(d, p) {
    return pad(d.getUTCSeconds(), p, 2);
  }
  function formatUTCWeekdayNumberMonday(d) {
    var dow = d.getUTCDay();
    return dow === 0 ? 7 : dow;
  }
  function formatUTCWeekNumberSunday(d, p) {
    return pad(utcSunday.count(utcYear(d) - 1, d), p, 2);
  }
  function UTCdISO(d) {
    var day = d.getUTCDay();
    return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
  }
  function formatUTCWeekNumberISO(d, p) {
    d = UTCdISO(d);
    return pad(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2);
  }
  function formatUTCWeekdayNumberSunday(d) {
    return d.getUTCDay();
  }
  function formatUTCWeekNumberMonday(d, p) {
    return pad(utcMonday.count(utcYear(d) - 1, d), p, 2);
  }
  function formatUTCYear(d, p) {
    return pad(d.getUTCFullYear() % 100, p, 2);
  }
  function formatUTCYearISO(d, p) {
    d = UTCdISO(d);
    return pad(d.getUTCFullYear() % 100, p, 2);
  }
  function formatUTCFullYear(d, p) {
    return pad(d.getUTCFullYear() % 1e4, p, 4);
  }
  function formatUTCFullYearISO(d, p) {
    var day = d.getUTCDay();
    d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d);
    return pad(d.getUTCFullYear() % 1e4, p, 4);
  }
  function formatUTCZone() {
    return "+0000";
  }
  function formatLiteralPercent() {
    return "%";
  }
  function formatUnixTimestamp(d) {
    return +d;
  }
  function formatUnixTimestampSeconds(d) {
    return Math.floor(+d / 1e3);
  }

  // node_modules/d3-time-format/src/defaultLocale.js
  var locale2;
  var timeFormat;
  var timeParse;
  var utcFormat;
  var utcParse;
  defaultLocale2({
    dateTime: "%x, %X",
    date: "%-m/%-d/%Y",
    time: "%-I:%M:%S %p",
    periods: ["AM", "PM"],
    days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
    shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
    months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
    shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
  });
  function defaultLocale2(definition) {
    locale2 = formatLocale(definition);
    timeFormat = locale2.format;
    timeParse = locale2.parse;
    utcFormat = locale2.utcFormat;
    utcParse = locale2.utcParse;
    return locale2;
  }

  // node_modules/d3-scale/src/time.js
  function date(t) {
    return new Date(t);
  }
  function number3(t) {
    return t instanceof Date ? +t : +/* @__PURE__ */ new Date(+t);
  }
  function calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2) {
    var scale = continuous(), invert = scale.invert, domain = scale.domain;
    var formatMillisecond = format2(".%L"), formatSecond = format2(":%S"), formatMinute = format2("%I:%M"), formatHour = format2("%I %p"), formatDay = format2("%a %d"), formatWeek = format2("%b %d"), formatMonth = format2("%B"), formatYear2 = format2("%Y");
    function tickFormat2(date2) {
      return (second2(date2) < date2 ? formatMillisecond : minute(date2) < date2 ? formatSecond : hour(date2) < date2 ? formatMinute : day(date2) < date2 ? formatHour : month(date2) < date2 ? week(date2) < date2 ? formatDay : formatWeek : year(date2) < date2 ? formatMonth : formatYear2)(date2);
    }
    scale.invert = function(y2) {
      return new Date(invert(y2));
    };
    scale.domain = function(_) {
      return arguments.length ? domain(Array.from(_, number3)) : domain().map(date);
    };
    scale.ticks = function(interval) {
      var d = domain();
      return ticks2(d[0], d[d.length - 1], interval == null ? 10 : interval);
    };
    scale.tickFormat = function(count, specifier) {
      return specifier == null ? tickFormat2 : format2(specifier);
    };
    scale.nice = function(interval) {
      var d = domain();
      if (!interval || typeof interval.range !== "function") interval = tickInterval(d[0], d[d.length - 1], interval == null ? 10 : interval);
      return interval ? domain(nice(d, interval)) : scale;
    };
    scale.copy = function() {
      return copy(scale, calendar(ticks2, tickInterval, year, month, week, day, hour, minute, second2, format2));
    };
    return scale;
  }
  function time() {
    return initRange.apply(calendar(timeTicks, timeTickInterval, timeYear, timeMonth, timeSunday, timeDay, timeHour, timeMinute, second, timeFormat).domain([new Date(2e3, 0, 1), new Date(2e3, 0, 2)]), arguments);
  }

  // node_modules/d3-scale/src/utcTime.js
  function utcTime() {
    return initRange.apply(calendar(utcTicks, utcTickInterval, utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, utcFormat).domain([Date.UTC(2e3, 0, 1), Date.UTC(2e3, 0, 2)]), arguments);
  }

  // node_modules/d3-scale/src/sequential.js
  function transformer2() {
    var x0 = 0, x1 = 1, t02, t12, k10, transform, interpolator = identity, clamp = false, unknown;
    function scale(x2) {
      return x2 == null || isNaN(x2 = +x2) ? unknown : interpolator(k10 === 0 ? 0.5 : (x2 = (transform(x2) - t02) * k10, clamp ? Math.max(0, Math.min(1, x2)) : x2));
    }
    scale.domain = function(_) {
      return arguments.length ? ([x0, x1] = _, t02 = transform(x0 = +x0), t12 = transform(x1 = +x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02), scale) : [x0, x1];
    };
    scale.clamp = function(_) {
      return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function(_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range4(interpolate2) {
      return function(_) {
        var r0, r1;
        return arguments.length ? ([r0, r1] = _, interpolator = interpolate2(r0, r1), scale) : [interpolator(0), interpolator(1)];
      };
    }
    scale.range = range4(value_default);
    scale.rangeRound = range4(round_default);
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
      transform = t, t02 = t(x0), t12 = t(x1), k10 = t02 === t12 ? 0 : 1 / (t12 - t02);
      return scale;
    };
  }
  function copy2(source, target) {
    return target.domain(source.domain()).interpolator(source.interpolator()).clamp(source.clamp()).unknown(source.unknown());
  }
  function sequential() {
    var scale = linearish(transformer2()(identity));
    scale.copy = function() {
      return copy2(scale, sequential());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialLog() {
    var scale = loggish(transformer2()).domain([1, 10]);
    scale.copy = function() {
      return copy2(scale, sequentialLog()).base(scale.base());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialSymlog() {
    var scale = symlogish(transformer2());
    scale.copy = function() {
      return copy2(scale, sequentialSymlog()).constant(scale.constant());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialPow() {
    var scale = powish(transformer2());
    scale.copy = function() {
      return copy2(scale, sequentialPow()).exponent(scale.exponent());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function sequentialSqrt() {
    return sequentialPow.apply(null, arguments).exponent(0.5);
  }

  // node_modules/d3-scale/src/sequentialQuantile.js
  function sequentialQuantile() {
    var domain = [], interpolator = identity;
    function scale(x2) {
      if (x2 != null && !isNaN(x2 = +x2)) return interpolator((bisect_default(domain, x2, 1) - 1) / (domain.length - 1));
    }
    scale.domain = function(_) {
      if (!arguments.length) return domain.slice();
      domain = [];
      for (let d of _) if (d != null && !isNaN(d = +d)) domain.push(d);
      domain.sort(ascending);
      return scale;
    };
    scale.interpolator = function(_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    scale.range = function() {
      return domain.map((d, i) => interpolator(i / (domain.length - 1)));
    };
    scale.quantiles = function(n) {
      return Array.from({ length: n + 1 }, (_, i) => quantile(domain, i / n));
    };
    scale.copy = function() {
      return sequentialQuantile(interpolator).domain(domain);
    };
    return initInterpolator.apply(scale, arguments);
  }

  // node_modules/d3-scale/src/diverging.js
  function transformer3() {
    var x0 = 0, x1 = 0.5, x2 = 1, s2 = 1, t02, t12, t2, k10, k21, interpolator = identity, transform, clamp = false, unknown;
    function scale(x3) {
      return isNaN(x3 = +x3) ? unknown : (x3 = 0.5 + ((x3 = +transform(x3)) - t12) * (s2 * x3 < s2 * t12 ? k10 : k21), interpolator(clamp ? Math.max(0, Math.min(1, x3)) : x3));
    }
    scale.domain = function(_) {
      return arguments.length ? ([x0, x1, x2] = _, t02 = transform(x0 = +x0), t12 = transform(x1 = +x1), t2 = transform(x2 = +x2), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s2 = t12 < t02 ? -1 : 1, scale) : [x0, x1, x2];
    };
    scale.clamp = function(_) {
      return arguments.length ? (clamp = !!_, scale) : clamp;
    };
    scale.interpolator = function(_) {
      return arguments.length ? (interpolator = _, scale) : interpolator;
    };
    function range4(interpolate2) {
      return function(_) {
        var r0, r1, r2;
        return arguments.length ? ([r0, r1, r2] = _, interpolator = piecewise(interpolate2, [r0, r1, r2]), scale) : [interpolator(0), interpolator(0.5), interpolator(1)];
      };
    }
    scale.range = range4(value_default);
    scale.rangeRound = range4(round_default);
    scale.unknown = function(_) {
      return arguments.length ? (unknown = _, scale) : unknown;
    };
    return function(t) {
      transform = t, t02 = t(x0), t12 = t(x1), t2 = t(x2), k10 = t02 === t12 ? 0 : 0.5 / (t12 - t02), k21 = t12 === t2 ? 0 : 0.5 / (t2 - t12), s2 = t12 < t02 ? -1 : 1;
      return scale;
    };
  }
  function diverging() {
    var scale = linearish(transformer3()(identity));
    scale.copy = function() {
      return copy2(scale, diverging());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingLog() {
    var scale = loggish(transformer3()).domain([0.1, 1, 10]);
    scale.copy = function() {
      return copy2(scale, divergingLog()).base(scale.base());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingSymlog() {
    var scale = symlogish(transformer3());
    scale.copy = function() {
      return copy2(scale, divergingSymlog()).constant(scale.constant());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingPow() {
    var scale = powish(transformer3());
    scale.copy = function() {
      return copy2(scale, divergingPow()).exponent(scale.exponent());
    };
    return initInterpolator.apply(scale, arguments);
  }
  function divergingSqrt() {
    return divergingPow.apply(null, arguments).exponent(0.5);
  }

  // node_modules/recharts/es6/state/selectors/dataSelectors.js
  var selectChartDataWithIndexes = (state) => state.chartData;
  var selectChartDataAndAlwaysIgnoreIndexes = createSelector([selectChartDataWithIndexes], (dataState) => {
    var dataEndIndex = dataState.chartData != null ? dataState.chartData.length - 1 : 0;
    return {
      chartData: dataState.chartData,
      computedData: dataState.computedData,
      dataEndIndex,
      dataStartIndex: 0
    };
  });
  var selectChartDataWithIndexesIfNotInPanorama = (state, _unused1, _unused2, isPanorama) => {
    if (isPanorama) {
      return selectChartDataAndAlwaysIgnoreIndexes(state);
    }
    return selectChartDataWithIndexes(state);
  };

  // node_modules/recharts/es6/util/isDomainSpecifiedByUser.js
  function isWellFormedNumberDomain(v) {
    if (Array.isArray(v) && v.length === 2) {
      var [min2, max2] = v;
      if (isWellBehavedNumber(min2) && isWellBehavedNumber(max2)) {
        return true;
      }
    }
    return false;
  }
  function extendDomain(providedDomain, boundaryDomain, allowDataOverflow) {
    if (allowDataOverflow) {
      return providedDomain;
    }
    return [Math.min(providedDomain[0], boundaryDomain[0]), Math.max(providedDomain[1], boundaryDomain[1])];
  }
  function numericalDomainSpecifiedWithoutRequiringData(userDomain, allowDataOverflow) {
    if (!allowDataOverflow) {
      return void 0;
    }
    if (typeof userDomain === "function") {
      return void 0;
    }
    if (Array.isArray(userDomain) && userDomain.length === 2) {
      var [providedMin, providedMax] = userDomain;
      var finalMin, finalMax;
      if (isWellBehavedNumber(providedMin)) {
        finalMin = providedMin;
      } else if (typeof providedMin === "function") {
        return void 0;
      }
      if (isWellBehavedNumber(providedMax)) {
        finalMax = providedMax;
      } else if (typeof providedMax === "function") {
        return void 0;
      }
      var candidate = [finalMin, finalMax];
      if (isWellFormedNumberDomain(candidate)) {
        return candidate;
      }
    }
    return void 0;
  }
  function parseNumericalUserDomain(userDomain, dataDomain, allowDataOverflow) {
    if (!allowDataOverflow && dataDomain == null) {
      return void 0;
    }
    if (typeof userDomain === "function" && dataDomain != null) {
      try {
        var result = userDomain(dataDomain, allowDataOverflow);
        if (isWellFormedNumberDomain(result)) {
          return extendDomain(result, dataDomain, allowDataOverflow);
        }
      } catch (_unused) {
      }
    }
    if (Array.isArray(userDomain) && userDomain.length === 2) {
      var [providedMin, providedMax] = userDomain;
      var finalMin, finalMax;
      if (providedMin === "auto") {
        if (dataDomain != null) {
          finalMin = Math.min(...dataDomain);
        }
      } else if (isNumber(providedMin)) {
        finalMin = providedMin;
      } else if (typeof providedMin === "function") {
        try {
          if (dataDomain != null) {
            finalMin = providedMin(dataDomain === null || dataDomain === void 0 ? void 0 : dataDomain[0]);
          }
        } catch (_unused2) {
        }
      } else if (typeof providedMin === "string" && MIN_VALUE_REG.test(providedMin)) {
        var match = MIN_VALUE_REG.exec(providedMin);
        if (match == null || dataDomain == null) {
          finalMin = void 0;
        } else {
          var value = +match[1];
          finalMin = dataDomain[0] - value;
        }
      } else {
        finalMin = dataDomain === null || dataDomain === void 0 ? void 0 : dataDomain[0];
      }
      if (providedMax === "auto") {
        if (dataDomain != null) {
          finalMax = Math.max(...dataDomain);
        }
      } else if (isNumber(providedMax)) {
        finalMax = providedMax;
      } else if (typeof providedMax === "function") {
        try {
          if (dataDomain != null) {
            finalMax = providedMax(dataDomain === null || dataDomain === void 0 ? void 0 : dataDomain[1]);
          }
        } catch (_unused3) {
        }
      } else if (typeof providedMax === "string" && MAX_VALUE_REG.test(providedMax)) {
        var _match = MAX_VALUE_REG.exec(providedMax);
        if (_match == null || dataDomain == null) {
          finalMax = void 0;
        } else {
          var _value = +_match[1];
          finalMax = dataDomain[1] + _value;
        }
      } else {
        finalMax = dataDomain === null || dataDomain === void 0 ? void 0 : dataDomain[1];
      }
      var candidate = [finalMin, finalMax];
      if (isWellFormedNumberDomain(candidate)) {
        if (dataDomain == null) {
          return candidate;
        }
        return extendDomain(candidate, dataDomain, allowDataOverflow);
      }
    }
    return void 0;
  }

  // node_modules/recharts/es6/util/scale/getNiceTickValues.js
  var import_decimal2 = __toESM(require_decimal());

  // node_modules/recharts/es6/util/scale/util/utils.js
  var identity3 = (i) => i;
  var PLACE_HOLDER = {
    "@@functional/placeholder": true
  };
  var isPlaceHolder = (val) => val === PLACE_HOLDER;
  var curry0 = (fn) => function _curried() {
    if (arguments.length === 0 || arguments.length === 1 && isPlaceHolder(arguments.length <= 0 ? void 0 : arguments[0])) {
      return _curried;
    }
    return fn(...arguments);
  };
  var curryN = (n, fn) => {
    if (n === 1) {
      return fn;
    }
    return curry0(function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      var argsLength = args.filter((arg) => arg !== PLACE_HOLDER).length;
      if (argsLength >= n) {
        return fn(...args);
      }
      return curryN(n - argsLength, curry0(function() {
        for (var _len2 = arguments.length, restArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          restArgs[_key2] = arguments[_key2];
        }
        var newArgs = args.map((arg) => isPlaceHolder(arg) ? restArgs.shift() : arg);
        return fn(...newArgs, ...restArgs);
      }));
    });
  };
  var curry = (fn) => curryN(fn.length, fn);
  var range2 = (begin, end) => {
    var arr = [];
    for (var i = begin; i < end; ++i) {
      arr[i - begin] = i;
    }
    return arr;
  };
  var map2 = curry((fn, arr) => {
    if (Array.isArray(arr)) {
      return arr.map(fn);
    }
    return Object.keys(arr).map((key) => arr[key]).map(fn);
  });
  var compose2 = function compose3() {
    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }
    if (!args.length) {
      return identity3;
    }
    var fns = args.reverse();
    var firstFn = fns[0];
    var tailsFn = fns.slice(1);
    return function() {
      return tailsFn.reduce((res, fn) => fn(res), firstFn(...arguments));
    };
  };
  var reverse = (arr) => {
    if (Array.isArray(arr)) {
      return arr.reverse();
    }
    return arr.split("").reverse().join("");
  };
  var memoize = (fn) => {
    var lastArgs = null;
    var lastResult2 = null;
    return function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      if (lastArgs && args.every((val, i) => {
        var _lastArgs;
        return val === ((_lastArgs = lastArgs) === null || _lastArgs === void 0 ? void 0 : _lastArgs[i]);
      })) {
        return lastResult2;
      }
      lastArgs = args;
      lastResult2 = fn(...args);
      return lastResult2;
    };
  };

  // node_modules/recharts/es6/util/scale/util/arithmetic.js
  var import_decimal = __toESM(require_decimal());
  function getDigitCount(value) {
    var result;
    if (value === 0) {
      result = 1;
    } else {
      result = Math.floor(new import_decimal.default(value).abs().log(10).toNumber()) + 1;
    }
    return result;
  }
  function rangeStep(start, end, step) {
    var num = new import_decimal.default(start);
    var i = 0;
    var result = [];
    while (num.lt(end) && i < 1e5) {
      result.push(num.toNumber());
      num = num.add(step);
      i++;
    }
    return result;
  }
  var interpolateNumber = curry((a2, b, t) => {
    var newA = +a2;
    var newB = +b;
    return newA + t * (newB - newA);
  });
  var uninterpolateNumber = curry((a2, b, x2) => {
    var diff = b - +a2;
    diff = diff || Infinity;
    return (x2 - a2) / diff;
  });
  var uninterpolateTruncation = curry((a2, b, x2) => {
    var diff = b - +a2;
    diff = diff || Infinity;
    return Math.max(0, Math.min(1, (x2 - a2) / diff));
  });

  // node_modules/recharts/es6/util/scale/getNiceTickValues.js
  var getValidInterval = (_ref2) => {
    var [min2, max2] = _ref2;
    var [validMin, validMax] = [min2, max2];
    if (min2 > max2) {
      [validMin, validMax] = [max2, min2];
    }
    return [validMin, validMax];
  };
  var getFormatStep = (roughStep, allowDecimals, correctionFactor) => {
    if (roughStep.lte(0)) {
      return new import_decimal2.default(0);
    }
    var digitCount = getDigitCount(roughStep.toNumber());
    var digitCountValue = new import_decimal2.default(10).pow(digitCount);
    var stepRatio = roughStep.div(digitCountValue);
    var stepRatioScale = digitCount !== 1 ? 0.05 : 0.1;
    var amendStepRatio = new import_decimal2.default(Math.ceil(stepRatio.div(stepRatioScale).toNumber())).add(correctionFactor).mul(stepRatioScale);
    var formatStep = amendStepRatio.mul(digitCountValue);
    return allowDecimals ? new import_decimal2.default(formatStep.toNumber()) : new import_decimal2.default(Math.ceil(formatStep.toNumber()));
  };
  var getTickOfSingleValue = (value, tickCount, allowDecimals) => {
    var step = new import_decimal2.default(1);
    var middle = new import_decimal2.default(value);
    if (!middle.isint() && allowDecimals) {
      var absVal = Math.abs(value);
      if (absVal < 1) {
        step = new import_decimal2.default(10).pow(getDigitCount(value) - 1);
        middle = new import_decimal2.default(Math.floor(middle.div(step).toNumber())).mul(step);
      } else if (absVal > 1) {
        middle = new import_decimal2.default(Math.floor(value));
      }
    } else if (value === 0) {
      middle = new import_decimal2.default(Math.floor((tickCount - 1) / 2));
    } else if (!allowDecimals) {
      middle = new import_decimal2.default(Math.floor(value));
    }
    var middleIndex = Math.floor((tickCount - 1) / 2);
    var fn = compose2(map2((n) => middle.add(new import_decimal2.default(n - middleIndex).mul(step)).toNumber()), range2);
    return fn(0, tickCount);
  };
  var _calculateStep = function calculateStep(min2, max2, tickCount, allowDecimals) {
    var correctionFactor = arguments.length > 4 && arguments[4] !== void 0 ? arguments[4] : 0;
    if (!Number.isFinite((max2 - min2) / (tickCount - 1))) {
      return {
        step: new import_decimal2.default(0),
        tickMin: new import_decimal2.default(0),
        tickMax: new import_decimal2.default(0)
      };
    }
    var step = getFormatStep(new import_decimal2.default(max2).sub(min2).div(tickCount - 1), allowDecimals, correctionFactor);
    var middle;
    if (min2 <= 0 && max2 >= 0) {
      middle = new import_decimal2.default(0);
    } else {
      middle = new import_decimal2.default(min2).add(max2).div(2);
      middle = middle.sub(new import_decimal2.default(middle).mod(step));
    }
    var belowCount = Math.ceil(middle.sub(min2).div(step).toNumber());
    var upCount = Math.ceil(new import_decimal2.default(max2).sub(middle).div(step).toNumber());
    var scaleCount = belowCount + upCount + 1;
    if (scaleCount > tickCount) {
      return _calculateStep(min2, max2, tickCount, allowDecimals, correctionFactor + 1);
    }
    if (scaleCount < tickCount) {
      upCount = max2 > 0 ? upCount + (tickCount - scaleCount) : upCount;
      belowCount = max2 > 0 ? belowCount : belowCount + (tickCount - scaleCount);
    }
    return {
      step,
      tickMin: middle.sub(new import_decimal2.default(belowCount).mul(step)),
      tickMax: middle.add(new import_decimal2.default(upCount).mul(step))
    };
  };
  function getNiceTickValuesFn(_ref2) {
    var [min2, max2] = _ref2;
    var tickCount = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 6;
    var allowDecimals = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    var count = Math.max(tickCount, 2);
    var [cormin, cormax] = getValidInterval([min2, max2]);
    if (cormin === -Infinity || cormax === Infinity) {
      var _values = cormax === Infinity ? [cormin, ...range2(0, tickCount - 1).map(() => Infinity)] : [...range2(0, tickCount - 1).map(() => -Infinity), cormax];
      return min2 > max2 ? reverse(_values) : _values;
    }
    if (cormin === cormax) {
      return getTickOfSingleValue(cormin, tickCount, allowDecimals);
    }
    var {
      step,
      tickMin,
      tickMax
    } = _calculateStep(cormin, cormax, count, allowDecimals, 0);
    var values = rangeStep(tickMin, tickMax.add(new import_decimal2.default(0.1).mul(step)), step);
    return min2 > max2 ? reverse(values) : values;
  }
  function getTickValuesFixedDomainFn(_ref3, tickCount) {
    var [min2, max2] = _ref3;
    var allowDecimals = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : true;
    var [cormin, cormax] = getValidInterval([min2, max2]);
    if (cormin === -Infinity || cormax === Infinity) {
      return [min2, max2];
    }
    if (cormin === cormax) {
      return [cormin];
    }
    var count = Math.max(tickCount, 2);
    var step = getFormatStep(new import_decimal2.default(cormax).sub(cormin).div(count - 1), allowDecimals, 0);
    var values = [...rangeStep(new import_decimal2.default(cormin), new import_decimal2.default(cormax), step), cormax];
    if (allowDecimals === false) {
      values = values.map((value) => Math.round(value));
    }
    return min2 > max2 ? reverse(values) : values;
  }
  var getNiceTickValues = memoize(getNiceTickValuesFn);
  var getTickValuesFixedDomain = memoize(getTickValuesFixedDomainFn);

  // node_modules/recharts/es6/state/selectors/rootPropsSelectors.js
  var selectRootMaxBarSize = (state) => state.rootProps.maxBarSize;
  var selectBarGap = (state) => state.rootProps.barGap;
  var selectBarCategoryGap = (state) => state.rootProps.barCategoryGap;
  var selectRootBarSize = (state) => state.rootProps.barSize;
  var selectStackOffsetType = (state) => state.rootProps.stackOffset;
  var selectChartName = (state) => state.options.chartName;
  var selectSyncId = (state) => state.rootProps.syncId;
  var selectSyncMethod = (state) => state.rootProps.syncMethod;
  var selectEventEmitter = (state) => state.options.eventEmitter;

  // node_modules/recharts/es6/polar/defaultPolarAngleAxisProps.js
  var defaultPolarAngleAxisProps = {
    allowDuplicatedCategory: true,
    // if I set this to false then Tooltip synchronisation stops working in Radar, wtf
    angleAxisId: 0,
    axisLine: true,
    cx: 0,
    cy: 0,
    orientation: "outer",
    reversed: false,
    scale: "auto",
    tick: true,
    tickLine: true,
    tickSize: 8,
    type: "category"
  };

  // node_modules/recharts/es6/polar/defaultPolarRadiusAxisProps.js
  var defaultPolarRadiusAxisProps = {
    allowDataOverflow: false,
    allowDuplicatedCategory: true,
    angle: 0,
    axisLine: true,
    cx: 0,
    cy: 0,
    orientation: "right",
    radiusAxisId: 0,
    scale: "auto",
    stroke: "#ccc",
    tick: true,
    tickCount: 5,
    type: "number"
  };

  // node_modules/recharts/es6/state/selectors/combiners/combineAxisRangeWithReverse.js
  var combineAxisRangeWithReverse = (axisSettings, axisRange) => {
    if (!axisSettings || !axisRange) {
      return void 0;
    }
    if (axisSettings !== null && axisSettings !== void 0 && axisSettings.reversed) {
      return [axisRange[1], axisRange[0]];
    }
    return axisRange;
  };

  // node_modules/recharts/es6/state/selectors/polarAxisSelectors.js
  var implicitAngleAxis = {
    allowDataOverflow: false,
    allowDecimals: false,
    allowDuplicatedCategory: false,
    // defaultPolarAngleAxisProps.allowDuplicatedCategory has it set to true but the actual axis rendering ignores the prop because reasons,
    dataKey: void 0,
    domain: void 0,
    id: defaultPolarAngleAxisProps.angleAxisId,
    includeHidden: false,
    name: void 0,
    reversed: defaultPolarAngleAxisProps.reversed,
    scale: defaultPolarAngleAxisProps.scale,
    tick: defaultPolarAngleAxisProps.tick,
    tickCount: void 0,
    ticks: void 0,
    type: defaultPolarAngleAxisProps.type,
    unit: void 0
  };
  var implicitRadiusAxis = {
    allowDataOverflow: defaultPolarRadiusAxisProps.allowDataOverflow,
    allowDecimals: false,
    allowDuplicatedCategory: defaultPolarRadiusAxisProps.allowDuplicatedCategory,
    dataKey: void 0,
    domain: void 0,
    id: defaultPolarRadiusAxisProps.radiusAxisId,
    includeHidden: false,
    name: void 0,
    reversed: false,
    scale: defaultPolarRadiusAxisProps.scale,
    tick: defaultPolarRadiusAxisProps.tick,
    tickCount: defaultPolarRadiusAxisProps.tickCount,
    ticks: void 0,
    type: defaultPolarRadiusAxisProps.type,
    unit: void 0
  };
  var implicitRadialBarAngleAxis = {
    allowDataOverflow: false,
    allowDecimals: false,
    allowDuplicatedCategory: defaultPolarAngleAxisProps.allowDuplicatedCategory,
    dataKey: void 0,
    domain: void 0,
    id: defaultPolarAngleAxisProps.angleAxisId,
    includeHidden: false,
    name: void 0,
    reversed: false,
    scale: defaultPolarAngleAxisProps.scale,
    tick: defaultPolarAngleAxisProps.tick,
    tickCount: void 0,
    ticks: void 0,
    type: "number",
    unit: void 0
  };
  var implicitRadialBarRadiusAxis = {
    allowDataOverflow: defaultPolarRadiusAxisProps.allowDataOverflow,
    allowDecimals: false,
    allowDuplicatedCategory: defaultPolarRadiusAxisProps.allowDuplicatedCategory,
    dataKey: void 0,
    domain: void 0,
    id: defaultPolarRadiusAxisProps.radiusAxisId,
    includeHidden: false,
    name: void 0,
    reversed: false,
    scale: defaultPolarRadiusAxisProps.scale,
    tick: defaultPolarRadiusAxisProps.tick,
    tickCount: defaultPolarRadiusAxisProps.tickCount,
    ticks: void 0,
    type: "category",
    unit: void 0
  };
  var selectAngleAxis = (state, angleAxisId) => {
    if (state.polarAxis.angleAxis[angleAxisId] != null) {
      return state.polarAxis.angleAxis[angleAxisId];
    }
    if (state.layout.layoutType === "radial") {
      return implicitRadialBarAngleAxis;
    }
    return implicitAngleAxis;
  };
  var selectRadiusAxis = (state, radiusAxisId) => {
    if (state.polarAxis.radiusAxis[radiusAxisId] != null) {
      return state.polarAxis.radiusAxis[radiusAxisId];
    }
    if (state.layout.layoutType === "radial") {
      return implicitRadialBarRadiusAxis;
    }
    return implicitRadiusAxis;
  };
  var selectPolarOptions = (state) => state.polarOptions;
  var selectMaxRadius = createSelector([selectChartWidth, selectChartHeight, selectChartOffsetInternal], getMaxRadius);
  var selectInnerRadius = createSelector([selectPolarOptions, selectMaxRadius], (polarChartOptions, maxRadius) => {
    if (polarChartOptions == null) {
      return void 0;
    }
    return getPercentValue(polarChartOptions.innerRadius, maxRadius, 0);
  });
  var selectOuterRadius = createSelector([selectPolarOptions, selectMaxRadius], (polarChartOptions, maxRadius) => {
    if (polarChartOptions == null) {
      return void 0;
    }
    return getPercentValue(polarChartOptions.outerRadius, maxRadius, maxRadius * 0.8);
  });
  var combineAngleAxisRange = (polarOptions) => {
    if (polarOptions == null) {
      return [0, 0];
    }
    var {
      startAngle,
      endAngle
    } = polarOptions;
    return [startAngle, endAngle];
  };
  var selectAngleAxisRange = createSelector([selectPolarOptions], combineAngleAxisRange);
  var selectAngleAxisRangeWithReversed = createSelector([selectAngleAxis, selectAngleAxisRange], combineAxisRangeWithReverse);
  var selectRadiusAxisRange = createSelector([selectMaxRadius, selectInnerRadius, selectOuterRadius], (maxRadius, innerRadius, outerRadius) => {
    if (maxRadius == null || innerRadius == null || outerRadius == null) {
      return void 0;
    }
    return [innerRadius, outerRadius];
  });
  var selectRadiusAxisRangeWithReversed = createSelector([selectRadiusAxis, selectRadiusAxisRange], combineAxisRangeWithReverse);
  var selectPolarViewBox = createSelector([selectChartLayout, selectPolarOptions, selectInnerRadius, selectOuterRadius, selectChartWidth, selectChartHeight], (layout, polarOptions, innerRadius, outerRadius, width, height) => {
    if (layout !== "centric" && layout !== "radial" || polarOptions == null || innerRadius == null || outerRadius == null) {
      return void 0;
    }
    var {
      cx,
      cy,
      startAngle,
      endAngle
    } = polarOptions;
    return {
      cx: getPercentValue(cx, width, width / 2),
      cy: getPercentValue(cy, height, height / 2),
      innerRadius,
      outerRadius,
      startAngle,
      endAngle,
      clockWise: false
      // this property look useful, why not use it?
    };
  });

  // node_modules/recharts/es6/state/selectors/pickAxisType.js
  var pickAxisType = (_state, axisType) => axisType;

  // node_modules/recharts/es6/state/selectors/pickAxisId.js
  var pickAxisId = (_state, _axisType, axisId) => axisId;

  // node_modules/recharts/es6/util/stacks/getStackSeriesIdentifier.js
  function getStackSeriesIdentifier(graphicalItem) {
    return graphicalItem === null || graphicalItem === void 0 ? void 0 : graphicalItem.id;
  }

  // node_modules/recharts/es6/state/selectors/selectTooltipAxisType.js
  var selectTooltipAxisType = (state) => {
    var layout = selectChartLayout(state);
    if (layout === "horizontal") {
      return "xAxis";
    }
    if (layout === "vertical") {
      return "yAxis";
    }
    if (layout === "centric") {
      return "angleAxis";
    }
    return "radiusAxis";
  };

  // node_modules/recharts/es6/state/selectors/selectTooltipAxisId.js
  var selectTooltipAxisId = (state) => state.tooltip.settings.axisId;

  // node_modules/recharts/es6/state/selectors/selectTooltipAxis.js
  var selectTooltipAxis = (state) => {
    var axisType = selectTooltipAxisType(state);
    var axisId = selectTooltipAxisId(state);
    return selectAxisSettings(state, axisType, axisId);
  };
  var selectTooltipAxisDataKey = createSelector([selectTooltipAxis], (axis) => axis === null || axis === void 0 ? void 0 : axis.dataKey);

  // node_modules/recharts/es6/state/selectors/combiners/combineDisplayedStackedData.js
  function combineDisplayedStackedData(stackedGraphicalItems, _ref2, tooltipAxisSettings) {
    var {
      chartData = []
    } = _ref2;
    var {
      allowDuplicatedCategory,
      dataKey: tooltipDataKey
    } = tooltipAxisSettings;
    var knownItemsByDataKey = /* @__PURE__ */ new Map();
    stackedGraphicalItems.forEach((item) => {
      var _item$data;
      var resolvedData = (_item$data = item.data) !== null && _item$data !== void 0 ? _item$data : chartData;
      if (resolvedData == null || resolvedData.length === 0) {
        return;
      }
      var stackIdentifier = getStackSeriesIdentifier(item);
      resolvedData.forEach((entry, index) => {
        var tooltipValue = tooltipDataKey == null || allowDuplicatedCategory ? index : String(getValueByDataKey(entry, tooltipDataKey, null));
        var numericValue = getValueByDataKey(entry, item.dataKey, 0);
        var curr;
        if (knownItemsByDataKey.has(tooltipValue)) {
          curr = knownItemsByDataKey.get(tooltipValue);
        } else {
          curr = {};
        }
        Object.assign(curr, {
          [stackIdentifier]: numericValue
        });
        knownItemsByDataKey.set(tooltipValue, curr);
      });
    });
    return Array.from(knownItemsByDataKey.values());
  }

  // node_modules/recharts/es6/state/types/StackedGraphicalItem.js
  function isStacked(graphicalItem) {
    return graphicalItem.stackId != null && graphicalItem.dataKey != null;
  }

  // node_modules/recharts/es6/state/selectors/axisSelectors.js
  function ownKeys15(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread15(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys15(Object(t), true).forEach(function(r3) {
        _defineProperty15(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys15(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty15(e, r2, t) {
    return (r2 = _toPropertyKey15(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey15(t) {
    var i = _toPrimitive15(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive15(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var defaultNumericDomain = [0, "auto"];
  var implicitXAxis = {
    allowDataOverflow: false,
    allowDecimals: true,
    allowDuplicatedCategory: true,
    angle: 0,
    dataKey: void 0,
    domain: void 0,
    height: 30,
    hide: true,
    id: 0,
    includeHidden: false,
    interval: "preserveEnd",
    minTickGap: 5,
    mirror: false,
    name: void 0,
    orientation: "bottom",
    padding: {
      left: 0,
      right: 0
    },
    reversed: false,
    scale: "auto",
    tick: true,
    tickCount: 5,
    tickFormatter: void 0,
    ticks: void 0,
    type: "category",
    unit: void 0
  };
  var selectXAxisSettingsNoDefaults = (state, axisId) => {
    return state.cartesianAxis.xAxis[axisId];
  };
  var selectXAxisSettings = (state, axisId) => {
    var axis = selectXAxisSettingsNoDefaults(state, axisId);
    if (axis == null) {
      return implicitXAxis;
    }
    return axis;
  };
  var implicitYAxis = {
    allowDataOverflow: false,
    allowDecimals: true,
    allowDuplicatedCategory: true,
    angle: 0,
    dataKey: void 0,
    domain: defaultNumericDomain,
    hide: true,
    id: 0,
    includeHidden: false,
    interval: "preserveEnd",
    minTickGap: 5,
    mirror: false,
    name: void 0,
    orientation: "left",
    padding: {
      top: 0,
      bottom: 0
    },
    reversed: false,
    scale: "auto",
    tick: true,
    tickCount: 5,
    tickFormatter: void 0,
    ticks: void 0,
    type: "number",
    unit: void 0,
    width: DEFAULT_Y_AXIS_WIDTH
  };
  var selectYAxisSettingsNoDefaults = (state, axisId) => {
    return state.cartesianAxis.yAxis[axisId];
  };
  var selectYAxisSettings = (state, axisId) => {
    var axis = selectYAxisSettingsNoDefaults(state, axisId);
    if (axis == null) {
      return implicitYAxis;
    }
    return axis;
  };
  var implicitZAxis = {
    domain: [0, "auto"],
    includeHidden: false,
    reversed: false,
    allowDataOverflow: false,
    allowDuplicatedCategory: false,
    dataKey: void 0,
    id: 0,
    name: "",
    range: [64, 64],
    scale: "auto",
    type: "number",
    unit: ""
  };
  var selectZAxisSettings = (state, axisId) => {
    var axis = state.cartesianAxis.zAxis[axisId];
    if (axis == null) {
      return implicitZAxis;
    }
    return axis;
  };
  var selectBaseAxis = (state, axisType, axisId) => {
    switch (axisType) {
      case "xAxis": {
        return selectXAxisSettings(state, axisId);
      }
      case "yAxis": {
        return selectYAxisSettings(state, axisId);
      }
      case "zAxis": {
        return selectZAxisSettings(state, axisId);
      }
      case "angleAxis": {
        return selectAngleAxis(state, axisId);
      }
      case "radiusAxis": {
        return selectRadiusAxis(state, axisId);
      }
      default:
        throw new Error("Unexpected axis type: ".concat(axisType));
    }
  };
  var selectCartesianAxisSettings = (state, axisType, axisId) => {
    switch (axisType) {
      case "xAxis": {
        return selectXAxisSettings(state, axisId);
      }
      case "yAxis": {
        return selectYAxisSettings(state, axisId);
      }
      default:
        throw new Error("Unexpected axis type: ".concat(axisType));
    }
  };
  var selectAxisSettings = (state, axisType, axisId) => {
    switch (axisType) {
      case "xAxis": {
        return selectXAxisSettings(state, axisId);
      }
      case "yAxis": {
        return selectYAxisSettings(state, axisId);
      }
      case "angleAxis": {
        return selectAngleAxis(state, axisId);
      }
      case "radiusAxis": {
        return selectRadiusAxis(state, axisId);
      }
      default:
        throw new Error("Unexpected axis type: ".concat(axisType));
    }
  };
  var selectHasBar = (state) => state.graphicalItems.cartesianItems.some((item) => item.type === "bar") || state.graphicalItems.polarItems.some((item) => item.type === "radialBar");
  function itemAxisPredicate(axisType, axisId) {
    return (item) => {
      switch (axisType) {
        case "xAxis":
          return "xAxisId" in item && item.xAxisId === axisId;
        case "yAxis":
          return "yAxisId" in item && item.yAxisId === axisId;
        case "zAxis":
          return "zAxisId" in item && item.zAxisId === axisId;
        case "angleAxis":
          return "angleAxisId" in item && item.angleAxisId === axisId;
        case "radiusAxis":
          return "radiusAxisId" in item && item.radiusAxisId === axisId;
        default:
          return false;
      }
    };
  }
  var selectUnfilteredCartesianItems = (state) => state.graphicalItems.cartesianItems;
  var selectAxisPredicate = createSelector([pickAxisType, pickAxisId], itemAxisPredicate);
  var combineGraphicalItemsSettings = (graphicalItems, axisSettings, axisPredicate) => graphicalItems.filter(axisPredicate).filter((item) => {
    if ((axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.includeHidden) === true) {
      return true;
    }
    return !item.hide;
  });
  var selectCartesianItemsSettings = createSelector([selectUnfilteredCartesianItems, selectBaseAxis, selectAxisPredicate], combineGraphicalItemsSettings);
  var selectStackedCartesianItemsSettings = createSelector([selectCartesianItemsSettings], (cartesianItems) => {
    return cartesianItems.filter((item) => item.type === "area" || item.type === "bar").filter(isStacked);
  });
  var filterGraphicalNotStackedItems = (cartesianItems) => cartesianItems.filter((item) => !("stackId" in item) || item.stackId === void 0);
  var selectCartesianItemsSettingsExceptStacked = createSelector([selectCartesianItemsSettings], filterGraphicalNotStackedItems);
  var combineGraphicalItemsData = (cartesianItems) => cartesianItems.map((item) => item.data).filter(Boolean).flat(1);
  var selectCartesianGraphicalItemsData = createSelector([selectCartesianItemsSettings], combineGraphicalItemsData);
  var combineDisplayedData = (graphicalItemsData, _ref2) => {
    var {
      chartData = [],
      dataStartIndex,
      dataEndIndex
    } = _ref2;
    if (graphicalItemsData.length > 0) {
      return graphicalItemsData;
    }
    return chartData.slice(dataStartIndex, dataEndIndex + 1);
  };
  var selectDisplayedData = createSelector([selectCartesianGraphicalItemsData, selectChartDataWithIndexesIfNotInPanorama], combineDisplayedData);
  var combineAppliedValues = (data, axisSettings, items) => {
    if ((axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.dataKey) != null) {
      return data.map((item) => ({
        value: getValueByDataKey(item, axisSettings.dataKey)
      }));
    }
    if (items.length > 0) {
      return items.map((item) => item.dataKey).flatMap((dataKey) => data.map((entry) => ({
        value: getValueByDataKey(entry, dataKey)
      })));
    }
    return data.map((entry) => ({
      value: entry
    }));
  };
  var selectAllAppliedValues = createSelector([selectDisplayedData, selectBaseAxis, selectCartesianItemsSettings], combineAppliedValues);
  function isErrorBarRelevantForAxisType(axisType, errorBar) {
    switch (axisType) {
      case "xAxis":
        return errorBar.direction === "x";
      case "yAxis":
        return errorBar.direction === "y";
      default:
        return false;
    }
  }
  function onlyAllowNumbers(data) {
    return data.filter((v) => isNumOrStr(v) || v instanceof Date).map(Number).filter((n) => isNan(n) === false);
  }
  function getErrorDomainByDataKey(entry, appliedValue, relevantErrorBars) {
    if (!relevantErrorBars || typeof appliedValue !== "number" || isNan(appliedValue)) {
      return [];
    }
    if (!relevantErrorBars.length) {
      return [];
    }
    return onlyAllowNumbers(relevantErrorBars.flatMap((eb) => {
      var errorValue = getValueByDataKey(entry, eb.dataKey);
      var lowBound, highBound;
      if (Array.isArray(errorValue)) {
        [lowBound, highBound] = errorValue;
      } else {
        lowBound = highBound = errorValue;
      }
      if (!isWellBehavedNumber(lowBound) || !isWellBehavedNumber(highBound)) {
        return void 0;
      }
      return [appliedValue - lowBound, appliedValue + highBound];
    }));
  }
  var selectDisplayedStackedData = createSelector([selectStackedCartesianItemsSettings, selectChartDataWithIndexesIfNotInPanorama, selectTooltipAxis], combineDisplayedStackedData);
  var combineStackGroups = (displayedData, items, stackOffsetType) => {
    var initialItemsGroups = {};
    var itemsGroup = items.reduce((acc, item) => {
      if (item.stackId == null) {
        return acc;
      }
      if (acc[item.stackId] == null) {
        acc[item.stackId] = [];
      }
      acc[item.stackId].push(item);
      return acc;
    }, initialItemsGroups);
    return Object.fromEntries(Object.entries(itemsGroup).map((_ref2) => {
      var [stackId, graphicalItems] = _ref2;
      var dataKeys = graphicalItems.map(getStackSeriesIdentifier);
      return [stackId, {
        // @ts-expect-error getStackedData requires that the input is array of objects, Recharts does not test for that
        stackedData: getStackedData(displayedData, dataKeys, stackOffsetType),
        graphicalItems
      }];
    }));
  };
  var selectStackGroups = createSelector([selectDisplayedStackedData, selectStackedCartesianItemsSettings, selectStackOffsetType], combineStackGroups);
  var combineDomainOfStackGroups = (stackGroups, _ref3, axisType) => {
    var {
      dataStartIndex,
      dataEndIndex
    } = _ref3;
    if (axisType === "zAxis") {
      return void 0;
    }
    var domainOfStackGroups = getDomainOfStackGroups(stackGroups, dataStartIndex, dataEndIndex);
    if (domainOfStackGroups != null && domainOfStackGroups[0] === 0 && domainOfStackGroups[1] === 0) {
      return void 0;
    }
    return domainOfStackGroups;
  };
  var selectDomainOfStackGroups = createSelector([selectStackGroups, selectChartDataWithIndexes, pickAxisType], combineDomainOfStackGroups);
  var combineAppliedNumericalValuesIncludingErrorValues = (data, axisSettings, items, errorBars, axisType) => {
    if (items.length > 0) {
      return data.flatMap((entry) => {
        return items.flatMap((item) => {
          var _errorBars$item$id, _axisSettings$dataKey;
          var relevantErrorBars = (_errorBars$item$id = errorBars[item.id]) === null || _errorBars$item$id === void 0 ? void 0 : _errorBars$item$id.filter((errorBar) => isErrorBarRelevantForAxisType(axisType, errorBar));
          var valueByDataKey = getValueByDataKey(entry, (_axisSettings$dataKey = axisSettings.dataKey) !== null && _axisSettings$dataKey !== void 0 ? _axisSettings$dataKey : item.dataKey);
          return {
            value: valueByDataKey,
            errorDomain: getErrorDomainByDataKey(entry, valueByDataKey, relevantErrorBars)
          };
        });
      }).filter(Boolean);
    }
    if ((axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.dataKey) != null) {
      return data.map((item) => ({
        value: getValueByDataKey(item, axisSettings.dataKey),
        errorDomain: []
      }));
    }
    return data.map((entry) => ({
      value: entry,
      errorDomain: []
    }));
  };
  var selectAllErrorBarSettings = (state) => state.errorBars;
  var combineRelevantErrorBarSettings = (cartesianItemsSettings, allErrorBarSettings, axisType) => {
    return cartesianItemsSettings.flatMap((item) => {
      return allErrorBarSettings[item.id];
    }).filter(Boolean).filter((e) => {
      return isErrorBarRelevantForAxisType(axisType, e);
    });
  };
  var selectErrorBarsSettingsExceptStacked = createSelector([selectCartesianItemsSettingsExceptStacked, selectAllErrorBarSettings, pickAxisType], combineRelevantErrorBarSettings);
  var selectAllAppliedNumericalValuesIncludingErrorValues = createSelector([selectDisplayedData, selectBaseAxis, selectCartesianItemsSettingsExceptStacked, selectAllErrorBarSettings, pickAxisType], combineAppliedNumericalValuesIncludingErrorValues);
  function onlyAllowNumbersAndStringsAndDates(item) {
    var {
      value
    } = item;
    if (isNumOrStr(value) || value instanceof Date) {
      return value;
    }
    return void 0;
  }
  var computeNumericalDomain = (dataWithErrorDomains) => {
    var allDataSquished = dataWithErrorDomains.flatMap((d) => [d.value, d.errorDomain]).flat(1);
    var onlyNumbers = onlyAllowNumbers(allDataSquished);
    if (onlyNumbers.length === 0) {
      return void 0;
    }
    return [Math.min(...onlyNumbers), Math.max(...onlyNumbers)];
  };
  var computeDomainOfTypeCategory = (allDataSquished, axisSettings, isCategorical) => {
    var categoricalDomain = allDataSquished.map(onlyAllowNumbersAndStringsAndDates).filter((v) => v != null);
    if (isCategorical && (axisSettings.dataKey == null || axisSettings.allowDuplicatedCategory && hasDuplicate(categoricalDomain))) {
      return (0, import_range2.default)(0, allDataSquished.length);
    }
    if (axisSettings.allowDuplicatedCategory) {
      return categoricalDomain;
    }
    return Array.from(new Set(categoricalDomain));
  };
  var getDomainDefinition = (axisSettings) => {
    var _axisSettings$domain;
    if (axisSettings == null || !("domain" in axisSettings)) {
      return defaultNumericDomain;
    }
    if (axisSettings.domain != null) {
      return axisSettings.domain;
    }
    if (axisSettings.ticks != null) {
      if (axisSettings.type === "number") {
        var allValues = onlyAllowNumbers(axisSettings.ticks);
        return [Math.min(...allValues), Math.max(...allValues)];
      }
      if (axisSettings.type === "category") {
        return axisSettings.ticks.map(String);
      }
    }
    return (_axisSettings$domain = axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.domain) !== null && _axisSettings$domain !== void 0 ? _axisSettings$domain : defaultNumericDomain;
  };
  var mergeDomains = function mergeDomains2() {
    for (var _len = arguments.length, domains = new Array(_len), _key = 0; _key < _len; _key++) {
      domains[_key] = arguments[_key];
    }
    var allDomains = domains.filter(Boolean);
    if (allDomains.length === 0) {
      return void 0;
    }
    var allValues = allDomains.flat();
    var min2 = Math.min(...allValues);
    var max2 = Math.max(...allValues);
    return [min2, max2];
  };
  var selectReferenceDots = (state) => state.referenceElements.dots;
  var filterReferenceElements = (elements, axisType, axisId) => {
    return elements.filter((el) => el.ifOverflow === "extendDomain").filter((el) => {
      if (axisType === "xAxis") {
        return el.xAxisId === axisId;
      }
      return el.yAxisId === axisId;
    });
  };
  var selectReferenceDotsByAxis = createSelector([selectReferenceDots, pickAxisType, pickAxisId], filterReferenceElements);
  var selectReferenceAreas = (state) => state.referenceElements.areas;
  var selectReferenceAreasByAxis = createSelector([selectReferenceAreas, pickAxisType, pickAxisId], filterReferenceElements);
  var selectReferenceLines = (state) => state.referenceElements.lines;
  var selectReferenceLinesByAxis = createSelector([selectReferenceLines, pickAxisType, pickAxisId], filterReferenceElements);
  var combineDotsDomain = (dots, axisType) => {
    var allCoords = onlyAllowNumbers(dots.map((dot) => axisType === "xAxis" ? dot.x : dot.y));
    if (allCoords.length === 0) {
      return void 0;
    }
    return [Math.min(...allCoords), Math.max(...allCoords)];
  };
  var selectReferenceDotsDomain = createSelector(selectReferenceDotsByAxis, pickAxisType, combineDotsDomain);
  var combineAreasDomain = (areas, axisType) => {
    var allCoords = onlyAllowNumbers(areas.flatMap((area) => [axisType === "xAxis" ? area.x1 : area.y1, axisType === "xAxis" ? area.x2 : area.y2]));
    if (allCoords.length === 0) {
      return void 0;
    }
    return [Math.min(...allCoords), Math.max(...allCoords)];
  };
  var selectReferenceAreasDomain = createSelector([selectReferenceAreasByAxis, pickAxisType], combineAreasDomain);
  var combineLinesDomain = (lines, axisType) => {
    var allCoords = onlyAllowNumbers(lines.map((line) => axisType === "xAxis" ? line.x : line.y));
    if (allCoords.length === 0) {
      return void 0;
    }
    return [Math.min(...allCoords), Math.max(...allCoords)];
  };
  var selectReferenceLinesDomain = createSelector(selectReferenceLinesByAxis, pickAxisType, combineLinesDomain);
  var selectReferenceElementsDomain = createSelector(selectReferenceDotsDomain, selectReferenceLinesDomain, selectReferenceAreasDomain, (dotsDomain, linesDomain, areasDomain) => {
    return mergeDomains(dotsDomain, areasDomain, linesDomain);
  });
  var selectDomainDefinition = createSelector([selectBaseAxis], getDomainDefinition);
  var combineNumericalDomain = (axisSettings, domainDefinition, domainOfStackGroups, allDataWithErrorDomains, referenceElementsDomain, layout, axisType) => {
    var domainFromUserPreference = numericalDomainSpecifiedWithoutRequiringData(domainDefinition, axisSettings.allowDataOverflow);
    if (domainFromUserPreference != null) {
      return domainFromUserPreference;
    }
    var shouldIncludeDomainOfStackGroups = layout === "vertical" && axisType === "xAxis" || layout === "horizontal" && axisType === "yAxis";
    var mergedDomains = shouldIncludeDomainOfStackGroups ? mergeDomains(domainOfStackGroups, referenceElementsDomain, computeNumericalDomain(allDataWithErrorDomains)) : mergeDomains(referenceElementsDomain, computeNumericalDomain(allDataWithErrorDomains));
    return parseNumericalUserDomain(domainDefinition, mergedDomains, axisSettings.allowDataOverflow);
  };
  var selectNumericalDomain = createSelector([selectBaseAxis, selectDomainDefinition, selectDomainOfStackGroups, selectAllAppliedNumericalValuesIncludingErrorValues, selectReferenceElementsDomain, selectChartLayout, pickAxisType], combineNumericalDomain);
  var expandDomain = [0, 1];
  var combineAxisDomain = (axisSettings, layout, displayedData, allAppliedValues, stackOffsetType, axisType, numericalDomain) => {
    if ((axisSettings == null || displayedData == null || displayedData.length === 0) && numericalDomain === void 0) {
      return void 0;
    }
    var {
      dataKey,
      type
    } = axisSettings;
    var isCategorical = isCategoricalAxis(layout, axisType);
    if (isCategorical && dataKey == null) {
      return (0, import_range2.default)(0, displayedData.length);
    }
    if (type === "category") {
      return computeDomainOfTypeCategory(allAppliedValues, axisSettings, isCategorical);
    }
    if (stackOffsetType === "expand") {
      return expandDomain;
    }
    return numericalDomain;
  };
  var selectAxisDomain = createSelector([selectBaseAxis, selectChartLayout, selectDisplayedData, selectAllAppliedValues, selectStackOffsetType, pickAxisType, selectNumericalDomain], combineAxisDomain);
  var combineRealScaleType = (axisConfig, layout, hasBar, chartType, axisType) => {
    if (axisConfig == null) {
      return void 0;
    }
    var {
      scale,
      type
    } = axisConfig;
    if (scale === "auto") {
      if (layout === "radial" && axisType === "radiusAxis") {
        return "band";
      }
      if (layout === "radial" && axisType === "angleAxis") {
        return "linear";
      }
      if (type === "category" && chartType && (chartType.indexOf("LineChart") >= 0 || chartType.indexOf("AreaChart") >= 0 || chartType.indexOf("ComposedChart") >= 0 && !hasBar)) {
        return "point";
      }
      if (type === "category") {
        return "band";
      }
      return "linear";
    }
    if (typeof scale === "string") {
      var name = "scale".concat(upperFirst(scale));
      return name in d3_scale_exports ? name : "point";
    }
    return void 0;
  };
  var selectRealScaleType = createSelector([selectBaseAxis, selectChartLayout, selectHasBar, selectChartName, pickAxisType], combineRealScaleType);
  function getD3ScaleFromType(realScaleType) {
    if (realScaleType == null) {
      return void 0;
    }
    if (realScaleType in d3_scale_exports) {
      return d3_scale_exports[realScaleType]();
    }
    var name = "scale".concat(upperFirst(realScaleType));
    if (name in d3_scale_exports) {
      return d3_scale_exports[name]();
    }
    return void 0;
  }
  function combineScaleFunction(axis, realScaleType, axisDomain, axisRange) {
    if (axisDomain == null || axisRange == null) {
      return void 0;
    }
    if (typeof axis.scale === "function") {
      return axis.scale.copy().domain(axisDomain).range(axisRange);
    }
    var d3ScaleFunction = getD3ScaleFromType(realScaleType);
    if (d3ScaleFunction == null) {
      return void 0;
    }
    var scale = d3ScaleFunction.domain(axisDomain).range(axisRange);
    checkDomainOfScale(scale);
    return scale;
  }
  var combineNiceTicks = (axisDomain, axisSettings, realScaleType) => {
    var domainDefinition = getDomainDefinition(axisSettings);
    if (realScaleType !== "auto" && realScaleType !== "linear") {
      return void 0;
    }
    if (axisSettings != null && axisSettings.tickCount && Array.isArray(domainDefinition) && (domainDefinition[0] === "auto" || domainDefinition[1] === "auto") && isWellFormedNumberDomain(axisDomain)) {
      return getNiceTickValues(axisDomain, axisSettings.tickCount, axisSettings.allowDecimals);
    }
    if (axisSettings != null && axisSettings.tickCount && axisSettings.type === "number" && isWellFormedNumberDomain(axisDomain)) {
      return getTickValuesFixedDomain(axisDomain, axisSettings.tickCount, axisSettings.allowDecimals);
    }
    return void 0;
  };
  var selectNiceTicks = createSelector([selectAxisDomain, selectAxisSettings, selectRealScaleType], combineNiceTicks);
  var combineAxisDomainWithNiceTicks = (axisSettings, domain, niceTicks, axisType) => {
    if (
      /*
       * Angle axis for some reason uses nice ticks when rendering axis tick labels,
       * but doesn't use nice ticks for extending domain like all the other axes do.
       * Not really sure why? Is there a good reason,
       * or is it just because someone added support for nice ticks to the other axes and forgot this one?
       */
      axisType !== "angleAxis" && (axisSettings === null || axisSettings === void 0 ? void 0 : axisSettings.type) === "number" && isWellFormedNumberDomain(domain) && Array.isArray(niceTicks) && niceTicks.length > 0
    ) {
      var minFromDomain = domain[0];
      var minFromTicks = niceTicks[0];
      var maxFromDomain = domain[1];
      var maxFromTicks = niceTicks[niceTicks.length - 1];
      return [Math.min(minFromDomain, minFromTicks), Math.max(maxFromDomain, maxFromTicks)];
    }
    return domain;
  };
  var selectAxisDomainIncludingNiceTicks = createSelector([selectBaseAxis, selectAxisDomain, selectNiceTicks, pickAxisType], combineAxisDomainWithNiceTicks);
  var selectSmallestDistanceBetweenValues = createSelector(selectAllAppliedValues, selectBaseAxis, (allDataSquished, axisSettings) => {
    if (!axisSettings || axisSettings.type !== "number") {
      return void 0;
    }
    var smallestDistanceBetweenValues = Infinity;
    var sortedValues = Array.from(onlyAllowNumbers(allDataSquished.map((d) => d.value))).sort((a2, b) => a2 - b);
    if (sortedValues.length < 2) {
      return Infinity;
    }
    var diff = sortedValues[sortedValues.length - 1] - sortedValues[0];
    if (diff === 0) {
      return Infinity;
    }
    for (var i = 0; i < sortedValues.length - 1; i++) {
      var distance = sortedValues[i + 1] - sortedValues[i];
      smallestDistanceBetweenValues = Math.min(smallestDistanceBetweenValues, distance);
    }
    return smallestDistanceBetweenValues / diff;
  });
  var selectCalculatedPadding = createSelector(selectSmallestDistanceBetweenValues, selectChartLayout, selectBarCategoryGap, selectChartOffsetInternal, (_1, _2, _3, padding) => padding, (smallestDistanceInPercent, layout, barCategoryGap, offset, padding) => {
    if (!isWellBehavedNumber(smallestDistanceInPercent)) {
      return 0;
    }
    var rangeWidth = layout === "vertical" ? offset.height : offset.width;
    if (padding === "gap") {
      return smallestDistanceInPercent * rangeWidth / 2;
    }
    if (padding === "no-gap") {
      var gap = getPercentValue(barCategoryGap, smallestDistanceInPercent * rangeWidth);
      var halfBand = smallestDistanceInPercent * rangeWidth / 2;
      return halfBand - gap - (halfBand - gap) / rangeWidth * gap;
    }
    return 0;
  });
  var selectCalculatedXAxisPadding = (state, axisId) => {
    var xAxisSettings = selectXAxisSettings(state, axisId);
    if (xAxisSettings == null || typeof xAxisSettings.padding !== "string") {
      return 0;
    }
    return selectCalculatedPadding(state, "xAxis", axisId, xAxisSettings.padding);
  };
  var selectCalculatedYAxisPadding = (state, axisId) => {
    var yAxisSettings = selectYAxisSettings(state, axisId);
    if (yAxisSettings == null || typeof yAxisSettings.padding !== "string") {
      return 0;
    }
    return selectCalculatedPadding(state, "yAxis", axisId, yAxisSettings.padding);
  };
  var selectXAxisPadding = createSelector(selectXAxisSettings, selectCalculatedXAxisPadding, (xAxisSettings, calculated) => {
    var _padding$left, _padding$right;
    if (xAxisSettings == null) {
      return {
        left: 0,
        right: 0
      };
    }
    var {
      padding
    } = xAxisSettings;
    if (typeof padding === "string") {
      return {
        left: calculated,
        right: calculated
      };
    }
    return {
      left: ((_padding$left = padding.left) !== null && _padding$left !== void 0 ? _padding$left : 0) + calculated,
      right: ((_padding$right = padding.right) !== null && _padding$right !== void 0 ? _padding$right : 0) + calculated
    };
  });
  var selectYAxisPadding = createSelector(selectYAxisSettings, selectCalculatedYAxisPadding, (yAxisSettings, calculated) => {
    var _padding$top, _padding$bottom;
    if (yAxisSettings == null) {
      return {
        top: 0,
        bottom: 0
      };
    }
    var {
      padding
    } = yAxisSettings;
    if (typeof padding === "string") {
      return {
        top: calculated,
        bottom: calculated
      };
    }
    return {
      top: ((_padding$top = padding.top) !== null && _padding$top !== void 0 ? _padding$top : 0) + calculated,
      bottom: ((_padding$bottom = padding.bottom) !== null && _padding$bottom !== void 0 ? _padding$bottom : 0) + calculated
    };
  });
  var combineXAxisRange = createSelector([selectChartOffsetInternal, selectXAxisPadding, selectBrushDimensions, selectBrushSettings, (_state, _axisId, isPanorama) => isPanorama], (offset, padding, brushDimensions, _ref4, isPanorama) => {
    var {
      padding: brushPadding
    } = _ref4;
    if (isPanorama) {
      return [brushPadding.left, brushDimensions.width - brushPadding.right];
    }
    return [offset.left + padding.left, offset.left + offset.width - padding.right];
  });
  var combineYAxisRange = createSelector([selectChartOffsetInternal, selectChartLayout, selectYAxisPadding, selectBrushDimensions, selectBrushSettings, (_state, _axisId, isPanorama) => isPanorama], (offset, layout, padding, brushDimensions, _ref5, isPanorama) => {
    var {
      padding: brushPadding
    } = _ref5;
    if (isPanorama) {
      return [brushDimensions.height - brushPadding.bottom, brushPadding.top];
    }
    if (layout === "horizontal") {
      return [offset.top + offset.height - padding.bottom, offset.top + padding.top];
    }
    return [offset.top + padding.top, offset.top + offset.height - padding.bottom];
  });
  var selectAxisRange = (state, axisType, axisId, isPanorama) => {
    var _selectZAxisSettings;
    switch (axisType) {
      case "xAxis":
        return combineXAxisRange(state, axisId, isPanorama);
      case "yAxis":
        return combineYAxisRange(state, axisId, isPanorama);
      case "zAxis":
        return (_selectZAxisSettings = selectZAxisSettings(state, axisId)) === null || _selectZAxisSettings === void 0 ? void 0 : _selectZAxisSettings.range;
      case "angleAxis":
        return selectAngleAxisRange(state);
      case "radiusAxis":
        return selectRadiusAxisRange(state, axisId);
      default:
        return void 0;
    }
  };
  var selectAxisRangeWithReverse = createSelector([selectBaseAxis, selectAxisRange], combineAxisRangeWithReverse);
  var selectAxisScale = createSelector([selectBaseAxis, selectRealScaleType, selectAxisDomainIncludingNiceTicks, selectAxisRangeWithReverse], combineScaleFunction);
  var selectErrorBarsSettings = createSelector([selectCartesianItemsSettings, selectAllErrorBarSettings, pickAxisType], combineRelevantErrorBarSettings);
  function compareIds(a2, b) {
    if (a2.id < b.id) {
      return -1;
    }
    if (a2.id > b.id) {
      return 1;
    }
    return 0;
  }
  var pickAxisOrientation = (_state, orientation) => orientation;
  var pickMirror = (_state, _orientation, mirror) => mirror;
  var selectAllXAxesWithOffsetType = createSelector(selectAllXAxes, pickAxisOrientation, pickMirror, (allAxes, orientation, mirror) => allAxes.filter((axis) => axis.orientation === orientation).filter((axis) => axis.mirror === mirror).sort(compareIds));
  var selectAllYAxesWithOffsetType = createSelector(selectAllYAxes, pickAxisOrientation, pickMirror, (allAxes, orientation, mirror) => allAxes.filter((axis) => axis.orientation === orientation).filter((axis) => axis.mirror === mirror).sort(compareIds));
  var getXAxisSize = (offset, axisSettings) => {
    return {
      width: offset.width,
      height: axisSettings.height
    };
  };
  var getYAxisSize = (offset, axisSettings) => {
    var width = typeof axisSettings.width === "number" ? axisSettings.width : DEFAULT_Y_AXIS_WIDTH;
    return {
      width,
      height: offset.height
    };
  };
  var selectXAxisSize = createSelector(selectChartOffsetInternal, selectXAxisSettings, getXAxisSize);
  var combineXAxisPositionStartingPoint = (offset, orientation, chartHeight) => {
    switch (orientation) {
      case "top":
        return offset.top;
      case "bottom":
        return chartHeight - offset.bottom;
      default:
        return 0;
    }
  };
  var combineYAxisPositionStartingPoint = (offset, orientation, chartWidth) => {
    switch (orientation) {
      case "left":
        return offset.left;
      case "right":
        return chartWidth - offset.right;
      default:
        return 0;
    }
  };
  var selectAllXAxesOffsetSteps = createSelector(selectChartHeight, selectChartOffsetInternal, selectAllXAxesWithOffsetType, pickAxisOrientation, pickMirror, (chartHeight, offset, allAxesWithSameOffsetType, orientation, mirror) => {
    var steps = {};
    var position;
    allAxesWithSameOffsetType.forEach((axis) => {
      var axisSize = getXAxisSize(offset, axis);
      if (position == null) {
        position = combineXAxisPositionStartingPoint(offset, orientation, chartHeight);
      }
      var needSpace = orientation === "top" && !mirror || orientation === "bottom" && mirror;
      steps[axis.id] = position - Number(needSpace) * axisSize.height;
      position += (needSpace ? -1 : 1) * axisSize.height;
    });
    return steps;
  });
  var selectAllYAxesOffsetSteps = createSelector(selectChartWidth, selectChartOffsetInternal, selectAllYAxesWithOffsetType, pickAxisOrientation, pickMirror, (chartWidth, offset, allAxesWithSameOffsetType, orientation, mirror) => {
    var steps = {};
    var position;
    allAxesWithSameOffsetType.forEach((axis) => {
      var axisSize = getYAxisSize(offset, axis);
      if (position == null) {
        position = combineYAxisPositionStartingPoint(offset, orientation, chartWidth);
      }
      var needSpace = orientation === "left" && !mirror || orientation === "right" && mirror;
      steps[axis.id] = position - Number(needSpace) * axisSize.width;
      position += (needSpace ? -1 : 1) * axisSize.width;
    });
    return steps;
  });
  var selectXAxisPosition = (state, axisId) => {
    var offset = selectChartOffsetInternal(state);
    var axisSettings = selectXAxisSettings(state, axisId);
    if (axisSettings == null) {
      return void 0;
    }
    var allSteps = selectAllXAxesOffsetSteps(state, axisSettings.orientation, axisSettings.mirror);
    var stepOfThisAxis = allSteps[axisId];
    if (stepOfThisAxis == null) {
      return {
        x: offset.left,
        y: 0
      };
    }
    return {
      x: offset.left,
      y: stepOfThisAxis
    };
  };
  var selectYAxisPosition = (state, axisId) => {
    var offset = selectChartOffsetInternal(state);
    var axisSettings = selectYAxisSettings(state, axisId);
    if (axisSettings == null) {
      return void 0;
    }
    var allSteps = selectAllYAxesOffsetSteps(state, axisSettings.orientation, axisSettings.mirror);
    var stepOfThisAxis = allSteps[axisId];
    if (stepOfThisAxis == null) {
      return {
        x: 0,
        y: offset.top
      };
    }
    return {
      x: stepOfThisAxis,
      y: offset.top
    };
  };
  var selectYAxisSize = createSelector(selectChartOffsetInternal, selectYAxisSettings, (offset, axisSettings) => {
    var width = typeof axisSettings.width === "number" ? axisSettings.width : DEFAULT_Y_AXIS_WIDTH;
    return {
      width,
      height: offset.height
    };
  });
  var selectCartesianAxisSize = (state, axisType, axisId) => {
    switch (axisType) {
      case "xAxis": {
        return selectXAxisSize(state, axisId).width;
      }
      case "yAxis": {
        return selectYAxisSize(state, axisId).height;
      }
      default: {
        return void 0;
      }
    }
  };
  var combineDuplicateDomain = (chartLayout, appliedValues, axis, axisType) => {
    if (axis == null) {
      return void 0;
    }
    var {
      allowDuplicatedCategory,
      type,
      dataKey
    } = axis;
    var isCategorical = isCategoricalAxis(chartLayout, axisType);
    var allData = appliedValues.map((av) => av.value);
    if (dataKey && isCategorical && type === "category" && allowDuplicatedCategory && hasDuplicate(allData)) {
      return allData;
    }
    return void 0;
  };
  var selectDuplicateDomain = createSelector([selectChartLayout, selectAllAppliedValues, selectBaseAxis, pickAxisType], combineDuplicateDomain);
  var combineCategoricalDomain = (layout, appliedValues, axis, axisType) => {
    if (axis == null || axis.dataKey == null) {
      return void 0;
    }
    var {
      type,
      scale
    } = axis;
    var isCategorical = isCategoricalAxis(layout, axisType);
    if (isCategorical && (type === "number" || scale !== "auto")) {
      return appliedValues.map((d) => d.value);
    }
    return void 0;
  };
  var selectCategoricalDomain = createSelector([selectChartLayout, selectAllAppliedValues, selectAxisSettings, pickAxisType], combineCategoricalDomain);
  var selectAxisPropsNeededForCartesianGridTicksGenerator = createSelector([selectChartLayout, selectCartesianAxisSettings, selectRealScaleType, selectAxisScale, selectDuplicateDomain, selectCategoricalDomain, selectAxisRange, selectNiceTicks, pickAxisType], (layout, axis, realScaleType, scale, duplicateDomain, categoricalDomain, axisRange, niceTicks, axisType) => {
    if (axis == null) {
      return null;
    }
    var isCategorical = isCategoricalAxis(layout, axisType);
    return {
      angle: axis.angle,
      interval: axis.interval,
      minTickGap: axis.minTickGap,
      orientation: axis.orientation,
      tick: axis.tick,
      tickCount: axis.tickCount,
      tickFormatter: axis.tickFormatter,
      ticks: axis.ticks,
      type: axis.type,
      unit: axis.unit,
      axisType,
      categoricalDomain,
      duplicateDomain,
      isCategorical,
      niceTicks,
      range: axisRange,
      realScaleType,
      scale
    };
  });
  var combineAxisTicks = (layout, axis, realScaleType, scale, niceTicks, axisRange, duplicateDomain, categoricalDomain, axisType) => {
    if (axis == null || scale == null) {
      return void 0;
    }
    var isCategorical = isCategoricalAxis(layout, axisType);
    var {
      type,
      ticks: ticks2,
      tickCount
    } = axis;
    var offsetForBand = realScaleType === "scaleBand" && typeof scale.bandwidth === "function" ? scale.bandwidth() / 2 : 2;
    var offset = type === "category" && scale.bandwidth ? scale.bandwidth() / offsetForBand : 0;
    offset = axisType === "angleAxis" && axisRange != null && axisRange.length >= 2 ? mathSign(axisRange[0] - axisRange[1]) * 2 * offset : offset;
    var ticksOrNiceTicks = ticks2 || niceTicks;
    if (ticksOrNiceTicks) {
      var result = ticksOrNiceTicks.map((entry, index) => {
        var scaleContent = duplicateDomain ? duplicateDomain.indexOf(entry) : entry;
        return {
          index,
          // If the scaleContent is not a number, the coordinate will be NaN.
          // That could be the case for example with a PointScale and a string as domain.
          coordinate: scale(scaleContent) + offset,
          value: entry,
          offset
        };
      });
      return result.filter((row) => !isNan(row.coordinate));
    }
    if (isCategorical && categoricalDomain) {
      return categoricalDomain.map((entry, index) => ({
        coordinate: scale(entry) + offset,
        value: entry,
        index,
        offset
      }));
    }
    if (scale.ticks) {
      return scale.ticks(tickCount).map((entry) => ({
        coordinate: scale(entry) + offset,
        value: entry,
        offset
      }));
    }
    return scale.domain().map((entry, index) => ({
      coordinate: scale(entry) + offset,
      value: duplicateDomain ? duplicateDomain[entry] : entry,
      index,
      offset
    }));
  };
  var selectTicksOfAxis = createSelector([selectChartLayout, selectAxisSettings, selectRealScaleType, selectAxisScale, selectNiceTicks, selectAxisRange, selectDuplicateDomain, selectCategoricalDomain, pickAxisType], combineAxisTicks);
  var combineGraphicalItemTicks = (layout, axis, scale, axisRange, duplicateDomain, categoricalDomain, axisType) => {
    if (axis == null || scale == null || axisRange == null || axisRange[0] === axisRange[1]) {
      return void 0;
    }
    var isCategorical = isCategoricalAxis(layout, axisType);
    var {
      tickCount
    } = axis;
    var offset = 0;
    offset = axisType === "angleAxis" && (axisRange === null || axisRange === void 0 ? void 0 : axisRange.length) >= 2 ? mathSign(axisRange[0] - axisRange[1]) * 2 * offset : offset;
    if (isCategorical && categoricalDomain) {
      return categoricalDomain.map((entry, index) => ({
        coordinate: scale(entry) + offset,
        value: entry,
        index,
        offset
      }));
    }
    if (scale.ticks) {
      return scale.ticks(tickCount).map((entry) => ({
        coordinate: scale(entry) + offset,
        value: entry,
        offset
      }));
    }
    return scale.domain().map((entry, index) => ({
      coordinate: scale(entry) + offset,
      value: duplicateDomain ? duplicateDomain[entry] : entry,
      index,
      offset
    }));
  };
  var selectTicksOfGraphicalItem = createSelector([selectChartLayout, selectAxisSettings, selectAxisScale, selectAxisRange, selectDuplicateDomain, selectCategoricalDomain, pickAxisType], combineGraphicalItemTicks);
  var selectAxisWithScale = createSelector(selectBaseAxis, selectAxisScale, (axis, scale) => {
    if (axis == null || scale == null) {
      return void 0;
    }
    return _objectSpread15(_objectSpread15({}, axis), {}, {
      scale
    });
  });
  var selectZAxisScale = createSelector([selectBaseAxis, selectRealScaleType, selectAxisDomain, selectAxisRangeWithReverse], combineScaleFunction);
  var selectZAxisWithScale = createSelector((state, _axisType, axisId) => selectZAxisSettings(state, axisId), selectZAxisScale, (axis, scale) => {
    if (axis == null || scale == null) {
      return void 0;
    }
    return _objectSpread15(_objectSpread15({}, axis), {}, {
      scale
    });
  });
  var selectChartDirection = createSelector([selectChartLayout, selectAllXAxes, selectAllYAxes], (layout, allXAxes, allYAxes) => {
    switch (layout) {
      case "horizontal": {
        return allXAxes.some((axis) => axis.reversed) ? "right-to-left" : "left-to-right";
      }
      case "vertical": {
        return allYAxes.some((axis) => axis.reversed) ? "bottom-to-top" : "top-to-bottom";
      }
      // TODO: make this better. For now, right arrow triggers "forward", left arrow "back"
      // however, the tooltip moves an unintuitive direction because of how the indices are rendered
      case "centric":
      case "radial": {
        return "left-to-right";
      }
      default: {
        return void 0;
      }
    }
  });

  // node_modules/recharts/es6/state/selectors/selectTooltipEventType.js
  var selectDefaultTooltipEventType = (state) => state.options.defaultTooltipEventType;
  var selectValidateTooltipEventTypes = (state) => state.options.validateTooltipEventTypes;
  function combineTooltipEventType(shared, defaultTooltipEventType, validateTooltipEventTypes) {
    if (shared == null) {
      return defaultTooltipEventType;
    }
    var eventType = shared ? "axis" : "item";
    if (validateTooltipEventTypes == null) {
      return defaultTooltipEventType;
    }
    return validateTooltipEventTypes.includes(eventType) ? eventType : defaultTooltipEventType;
  }
  function selectTooltipEventType(state, shared) {
    var defaultTooltipEventType = selectDefaultTooltipEventType(state);
    var validateTooltipEventTypes = selectValidateTooltipEventTypes(state);
    return combineTooltipEventType(shared, defaultTooltipEventType, validateTooltipEventTypes);
  }
  function useTooltipEventType(shared) {
    return useAppSelector((state) => selectTooltipEventType(state, shared));
  }

  // node_modules/recharts/es6/state/selectors/combiners/combineActiveLabel.js
  var combineActiveLabel = (tooltipTicks, activeIndex) => {
    var _tooltipTicks$n;
    var n = Number(activeIndex);
    if (isNan(n) || activeIndex == null) {
      return void 0;
    }
    return n >= 0 ? tooltipTicks === null || tooltipTicks === void 0 || (_tooltipTicks$n = tooltipTicks[n]) === null || _tooltipTicks$n === void 0 ? void 0 : _tooltipTicks$n.value : void 0;
  };

  // node_modules/recharts/es6/state/selectors/selectTooltipSettings.js
  var selectTooltipSettings = (state) => state.tooltip.settings;

  // node_modules/recharts/es6/state/tooltipSlice.js
  var noInteraction = {
    active: false,
    index: null,
    dataKey: void 0,
    coordinate: void 0
  };
  var initialState3 = {
    itemInteraction: {
      click: noInteraction,
      hover: noInteraction
    },
    axisInteraction: {
      click: noInteraction,
      hover: noInteraction
    },
    keyboardInteraction: noInteraction,
    syncInteraction: {
      active: false,
      index: null,
      dataKey: void 0,
      label: void 0,
      coordinate: void 0
    },
    tooltipItemPayloads: [],
    settings: {
      shared: void 0,
      trigger: "hover",
      axisId: 0,
      active: false,
      defaultIndex: void 0
    }
  };
  var tooltipSlice = createSlice({
    name: "tooltip",
    initialState: initialState3,
    reducers: {
      addTooltipEntrySettings(state, action) {
        state.tooltipItemPayloads.push(castDraft(action.payload));
      },
      removeTooltipEntrySettings(state, action) {
        var index = current(state).tooltipItemPayloads.indexOf(castDraft(action.payload));
        if (index > -1) {
          state.tooltipItemPayloads.splice(index, 1);
        }
      },
      setTooltipSettingsState(state, action) {
        state.settings = action.payload;
      },
      setActiveMouseOverItemIndex(state, action) {
        state.syncInteraction.active = false;
        state.keyboardInteraction.active = false;
        state.itemInteraction.hover.active = true;
        state.itemInteraction.hover.index = action.payload.activeIndex;
        state.itemInteraction.hover.dataKey = action.payload.activeDataKey;
        state.itemInteraction.hover.coordinate = action.payload.activeCoordinate;
      },
      mouseLeaveChart(state) {
        state.itemInteraction.hover.active = false;
        state.axisInteraction.hover.active = false;
      },
      mouseLeaveItem(state) {
        state.itemInteraction.hover.active = false;
      },
      setActiveClickItemIndex(state, action) {
        state.syncInteraction.active = false;
        state.itemInteraction.click.active = true;
        state.keyboardInteraction.active = false;
        state.itemInteraction.click.index = action.payload.activeIndex;
        state.itemInteraction.click.dataKey = action.payload.activeDataKey;
        state.itemInteraction.click.coordinate = action.payload.activeCoordinate;
      },
      setMouseOverAxisIndex(state, action) {
        state.syncInteraction.active = false;
        state.axisInteraction.hover.active = true;
        state.keyboardInteraction.active = false;
        state.axisInteraction.hover.index = action.payload.activeIndex;
        state.axisInteraction.hover.dataKey = action.payload.activeDataKey;
        state.axisInteraction.hover.coordinate = action.payload.activeCoordinate;
      },
      setMouseClickAxisIndex(state, action) {
        state.syncInteraction.active = false;
        state.keyboardInteraction.active = false;
        state.axisInteraction.click.active = true;
        state.axisInteraction.click.index = action.payload.activeIndex;
        state.axisInteraction.click.dataKey = action.payload.activeDataKey;
        state.axisInteraction.click.coordinate = action.payload.activeCoordinate;
      },
      setSyncInteraction(state, action) {
        state.syncInteraction = action.payload;
      },
      setKeyboardInteraction(state, action) {
        state.keyboardInteraction.active = action.payload.active;
        state.keyboardInteraction.index = action.payload.activeIndex;
        state.keyboardInteraction.coordinate = action.payload.activeCoordinate;
        state.keyboardInteraction.dataKey = action.payload.activeDataKey;
      }
    }
  });
  var {
    addTooltipEntrySettings,
    removeTooltipEntrySettings,
    setTooltipSettingsState,
    setActiveMouseOverItemIndex,
    mouseLeaveItem,
    mouseLeaveChart,
    setActiveClickItemIndex,
    setMouseOverAxisIndex,
    setMouseClickAxisIndex,
    setSyncInteraction,
    setKeyboardInteraction
  } = tooltipSlice.actions;
  var tooltipReducer = tooltipSlice.reducer;

  // node_modules/recharts/es6/state/selectors/combiners/combineTooltipInteractionState.js
  function ownKeys16(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread16(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys16(Object(t), true).forEach(function(r3) {
        _defineProperty16(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys16(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty16(e, r2, t) {
    return (r2 = _toPropertyKey16(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey16(t) {
    var i = _toPrimitive16(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive16(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function chooseAppropriateMouseInteraction(tooltipState, tooltipEventType, trigger) {
    if (tooltipEventType === "axis") {
      if (trigger === "click") {
        return tooltipState.axisInteraction.click;
      }
      return tooltipState.axisInteraction.hover;
    }
    if (trigger === "click") {
      return tooltipState.itemInteraction.click;
    }
    return tooltipState.itemInteraction.hover;
  }
  function hasBeenActivePreviously(tooltipInteractionState) {
    return tooltipInteractionState.index != null;
  }
  var combineTooltipInteractionState = (tooltipState, tooltipEventType, trigger, defaultIndex) => {
    if (tooltipEventType == null) {
      return noInteraction;
    }
    var appropriateMouseInteraction = chooseAppropriateMouseInteraction(tooltipState, tooltipEventType, trigger);
    if (appropriateMouseInteraction == null) {
      return noInteraction;
    }
    if (appropriateMouseInteraction.active) {
      return appropriateMouseInteraction;
    }
    if (tooltipState.keyboardInteraction.active) {
      return tooltipState.keyboardInteraction;
    }
    if (tooltipState.syncInteraction.active && tooltipState.syncInteraction.index != null) {
      return tooltipState.syncInteraction;
    }
    var activeFromProps = tooltipState.settings.active === true;
    if (hasBeenActivePreviously(appropriateMouseInteraction)) {
      if (activeFromProps) {
        return _objectSpread16(_objectSpread16({}, appropriateMouseInteraction), {}, {
          active: true
        });
      }
    } else if (defaultIndex != null) {
      return {
        active: true,
        coordinate: void 0,
        dataKey: void 0,
        index: defaultIndex
      };
    }
    return _objectSpread16(_objectSpread16({}, noInteraction), {}, {
      coordinate: appropriateMouseInteraction.coordinate
    });
  };

  // node_modules/recharts/es6/state/selectors/combiners/combineActiveTooltipIndex.js
  var combineActiveTooltipIndex = (tooltipInteraction, chartData) => {
    var desiredIndex = tooltipInteraction === null || tooltipInteraction === void 0 ? void 0 : tooltipInteraction.index;
    if (desiredIndex == null) {
      return null;
    }
    var indexAsNumber = Number(desiredIndex);
    if (!isWellBehavedNumber(indexAsNumber)) {
      return desiredIndex;
    }
    var lowerLimit = 0;
    var upperLimit = Infinity;
    if (chartData.length > 0) {
      upperLimit = chartData.length - 1;
    }
    return String(Math.max(lowerLimit, Math.min(indexAsNumber, upperLimit)));
  };

  // node_modules/recharts/es6/state/selectors/combiners/combineCoordinateForDefaultIndex.js
  var combineCoordinateForDefaultIndex = (width, height, layout, offset, tooltipTicks, defaultIndex, tooltipConfigurations, tooltipPayloadSearcher) => {
    if (defaultIndex == null || tooltipPayloadSearcher == null) {
      return void 0;
    }
    var firstConfiguration = tooltipConfigurations[0];
    var maybePosition = firstConfiguration == null ? void 0 : tooltipPayloadSearcher(firstConfiguration.positions, defaultIndex);
    if (maybePosition != null) {
      return maybePosition;
    }
    var tick = tooltipTicks === null || tooltipTicks === void 0 ? void 0 : tooltipTicks[Number(defaultIndex)];
    if (!tick) {
      return void 0;
    }
    switch (layout) {
      case "horizontal": {
        return {
          x: tick.coordinate,
          y: (offset.top + height) / 2
        };
      }
      default: {
        return {
          x: (offset.left + width) / 2,
          y: tick.coordinate
        };
      }
    }
  };

  // node_modules/recharts/es6/state/selectors/combiners/combineTooltipPayloadConfigurations.js
  var combineTooltipPayloadConfigurations = (tooltipState, tooltipEventType, trigger, defaultIndex) => {
    if (tooltipEventType === "axis") {
      return tooltipState.tooltipItemPayloads;
    }
    if (tooltipState.tooltipItemPayloads.length === 0) {
      return [];
    }
    var filterByDataKey;
    if (trigger === "hover") {
      filterByDataKey = tooltipState.itemInteraction.hover.dataKey;
    } else {
      filterByDataKey = tooltipState.itemInteraction.click.dataKey;
    }
    if (filterByDataKey == null && defaultIndex != null) {
      return [tooltipState.tooltipItemPayloads[0]];
    }
    return tooltipState.tooltipItemPayloads.filter((tpc) => {
      var _tpc$settings;
      return ((_tpc$settings = tpc.settings) === null || _tpc$settings === void 0 ? void 0 : _tpc$settings.dataKey) === filterByDataKey;
    });
  };

  // node_modules/recharts/es6/state/selectors/selectTooltipPayloadSearcher.js
  var selectTooltipPayloadSearcher = (state) => state.options.tooltipPayloadSearcher;

  // node_modules/recharts/es6/state/selectors/selectTooltipState.js
  var selectTooltipState = (state) => state.tooltip;

  // node_modules/recharts/es6/state/selectors/combiners/combineTooltipPayload.js
  function ownKeys17(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread17(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys17(Object(t), true).forEach(function(r3) {
        _defineProperty17(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys17(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty17(e, r2, t) {
    return (r2 = _toPropertyKey17(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey17(t) {
    var i = _toPrimitive17(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive17(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function selectFinalData(dataDefinedOnItem, dataDefinedOnChart) {
    if (dataDefinedOnItem != null) {
      return dataDefinedOnItem;
    }
    return dataDefinedOnChart;
  }
  var combineTooltipPayload = (tooltipPayloadConfigurations, activeIndex, chartDataState, tooltipAxisDataKey, activeLabel, tooltipPayloadSearcher, tooltipEventType) => {
    if (activeIndex == null || tooltipPayloadSearcher == null) {
      return void 0;
    }
    var {
      chartData,
      computedData,
      dataStartIndex,
      dataEndIndex
    } = chartDataState;
    var init = [];
    return tooltipPayloadConfigurations.reduce((agg, _ref2) => {
      var _settings$dataKey;
      var {
        dataDefinedOnItem,
        settings
      } = _ref2;
      var finalData = selectFinalData(dataDefinedOnItem, chartData);
      var sliced = Array.isArray(finalData) ? getSliced(finalData, dataStartIndex, dataEndIndex) : finalData;
      var finalDataKey = (_settings$dataKey = settings === null || settings === void 0 ? void 0 : settings.dataKey) !== null && _settings$dataKey !== void 0 ? _settings$dataKey : tooltipAxisDataKey;
      var finalNameKey = settings === null || settings === void 0 ? void 0 : settings.nameKey;
      var tooltipPayload;
      if (tooltipAxisDataKey && Array.isArray(sliced) && /*
       * findEntryInArray won't work for Scatter because Scatter provides an array of arrays
       * as tooltip payloads and findEntryInArray is not prepared to handle that.
       * Sad but also ScatterChart only allows 'item' tooltipEventType
       * and also this is only a problem if there are multiple Scatters and each has its own data array
       * so let's fix that some other time.
       */
      !Array.isArray(sliced[0]) && /*
       * If the tooltipEventType is 'axis', we should search for the dataKey in the sliced data
       * because thanks to allowDuplicatedCategory=false, the order of elements in the array
       * no longer matches the order of elements in the original data
       * and so we need to search by the active dataKey + label rather than by index.
       *
       * The same happens if multiple graphical items are present in the chart
       * and each of them has its own data array. Those arrays get concatenated
       * and again the tooltip index no longer matches the original data.
       *
       * On the other hand the tooltipEventType 'item' should always search by index
       * because we get the index from interacting over the individual elements
       * which is always accurate, irrespective of the allowDuplicatedCategory setting.
       */
      tooltipEventType === "axis") {
        tooltipPayload = findEntryInArray(sliced, tooltipAxisDataKey, activeLabel);
      } else {
        tooltipPayload = tooltipPayloadSearcher(sliced, activeIndex, computedData, finalNameKey);
      }
      if (Array.isArray(tooltipPayload)) {
        tooltipPayload.forEach((item) => {
          var newSettings = _objectSpread17(_objectSpread17({}, settings), {}, {
            name: item.name,
            unit: item.unit,
            // color and fill are erased to keep 100% the identical behaviour to recharts 2.x - but there's nothing stopping us from returning them here. It's technically a breaking change.
            color: void 0,
            // color and fill are erased to keep 100% the identical behaviour to recharts 2.x - but there's nothing stopping us from returning them here. It's technically a breaking change.
            fill: void 0
          });
          agg.push(getTooltipEntry({
            tooltipEntrySettings: newSettings,
            dataKey: item.dataKey,
            payload: item.payload,
            // @ts-expect-error getValueByDataKey does not validate the output type
            value: getValueByDataKey(item.payload, item.dataKey),
            name: item.name
          }));
        });
      } else {
        var _getValueByDataKey;
        agg.push(getTooltipEntry({
          tooltipEntrySettings: settings,
          dataKey: finalDataKey,
          payload: tooltipPayload,
          // @ts-expect-error getValueByDataKey does not validate the output type
          value: getValueByDataKey(tooltipPayload, finalDataKey),
          // @ts-expect-error getValueByDataKey does not validate the output type
          name: (_getValueByDataKey = getValueByDataKey(tooltipPayload, finalNameKey)) !== null && _getValueByDataKey !== void 0 ? _getValueByDataKey : settings === null || settings === void 0 ? void 0 : settings.name
        }));
      }
      return agg;
    }, init);
  };

  // node_modules/recharts/es6/state/selectors/tooltipSelectors.js
  var selectTooltipAxisRealScaleType = createSelector([selectTooltipAxis, selectChartLayout, selectHasBar, selectChartName, selectTooltipAxisType], combineRealScaleType);
  var selectAllUnfilteredGraphicalItems = createSelector([(state) => state.graphicalItems.cartesianItems, (state) => state.graphicalItems.polarItems], (cartesianItems, polarItems) => [...cartesianItems, ...polarItems]);
  var selectTooltipAxisPredicate = createSelector([selectTooltipAxisType, selectTooltipAxisId], itemAxisPredicate);
  var selectAllGraphicalItemsSettings = createSelector([selectAllUnfilteredGraphicalItems, selectTooltipAxis, selectTooltipAxisPredicate], combineGraphicalItemsSettings);
  var selectAllStackedGraphicalItemsSettings = createSelector([selectAllGraphicalItemsSettings], (graphicalItems) => graphicalItems.filter(isStacked));
  var selectTooltipGraphicalItemsData = createSelector([selectAllGraphicalItemsSettings], combineGraphicalItemsData);
  var selectTooltipDisplayedData = createSelector([selectTooltipGraphicalItemsData, selectChartDataWithIndexes], combineDisplayedData);
  var selectTooltipStackedData = createSelector([selectAllStackedGraphicalItemsSettings, selectChartDataWithIndexes, selectTooltipAxis], combineDisplayedStackedData);
  var selectAllTooltipAppliedValues = createSelector([selectTooltipDisplayedData, selectTooltipAxis, selectAllGraphicalItemsSettings], combineAppliedValues);
  var selectTooltipAxisDomainDefinition = createSelector([selectTooltipAxis], getDomainDefinition);
  var selectAllStackedGraphicalItems = createSelector([selectAllGraphicalItemsSettings], (graphicalItems) => graphicalItems.filter(isStacked));
  var selectTooltipStackGroups = createSelector([selectTooltipStackedData, selectAllStackedGraphicalItems, selectStackOffsetType], combineStackGroups);
  var selectTooltipDomainOfStackGroups = createSelector([selectTooltipStackGroups, selectChartDataWithIndexes, selectTooltipAxisType], combineDomainOfStackGroups);
  var selectTooltipItemsSettingsExceptStacked = createSelector([selectAllGraphicalItemsSettings], filterGraphicalNotStackedItems);
  var selectTooltipAllAppliedNumericalValuesIncludingErrorValues = createSelector([selectTooltipDisplayedData, selectTooltipAxis, selectTooltipItemsSettingsExceptStacked, selectAllErrorBarSettings, selectTooltipAxisType], combineAppliedNumericalValuesIncludingErrorValues);
  var selectReferenceDotsByTooltipAxis = createSelector([selectReferenceDots, selectTooltipAxisType, selectTooltipAxisId], filterReferenceElements);
  var selectTooltipReferenceDotsDomain = createSelector([selectReferenceDotsByTooltipAxis, selectTooltipAxisType], combineDotsDomain);
  var selectReferenceAreasByTooltipAxis = createSelector([selectReferenceAreas, selectTooltipAxisType, selectTooltipAxisId], filterReferenceElements);
  var selectTooltipReferenceAreasDomain = createSelector([selectReferenceAreasByTooltipAxis, selectTooltipAxisType], combineAreasDomain);
  var selectReferenceLinesByTooltipAxis = createSelector([selectReferenceLines, selectTooltipAxisType, selectTooltipAxisId], filterReferenceElements);
  var selectTooltipReferenceLinesDomain = createSelector([selectReferenceLinesByTooltipAxis, selectTooltipAxisType], combineLinesDomain);
  var selectTooltipReferenceElementsDomain = createSelector([selectTooltipReferenceDotsDomain, selectTooltipReferenceLinesDomain, selectTooltipReferenceAreasDomain], mergeDomains);
  var selectTooltipNumericalDomain = createSelector([selectTooltipAxis, selectTooltipAxisDomainDefinition, selectTooltipDomainOfStackGroups, selectTooltipAllAppliedNumericalValuesIncludingErrorValues, selectTooltipReferenceElementsDomain, selectChartLayout, selectTooltipAxisType], combineNumericalDomain);
  var selectTooltipAxisDomain = createSelector([selectTooltipAxis, selectChartLayout, selectTooltipDisplayedData, selectAllTooltipAppliedValues, selectStackOffsetType, selectTooltipAxisType, selectTooltipNumericalDomain], combineAxisDomain);
  var selectTooltipNiceTicks = createSelector([selectTooltipAxisDomain, selectTooltipAxis, selectTooltipAxisRealScaleType], combineNiceTicks);
  var selectTooltipAxisDomainIncludingNiceTicks = createSelector([selectTooltipAxis, selectTooltipAxisDomain, selectTooltipNiceTicks, selectTooltipAxisType], combineAxisDomainWithNiceTicks);
  var selectTooltipAxisRange = (state) => {
    var axisType = selectTooltipAxisType(state);
    var axisId = selectTooltipAxisId(state);
    var isPanorama = false;
    return selectAxisRange(state, axisType, axisId, isPanorama);
  };
  var selectTooltipAxisRangeWithReverse = createSelector([selectTooltipAxis, selectTooltipAxisRange], combineAxisRangeWithReverse);
  var selectTooltipAxisScale = createSelector([selectTooltipAxis, selectTooltipAxisRealScaleType, selectTooltipAxisDomainIncludingNiceTicks, selectTooltipAxisRangeWithReverse], combineScaleFunction);
  var selectTooltipDuplicateDomain = createSelector([selectChartLayout, selectAllTooltipAppliedValues, selectTooltipAxis, selectTooltipAxisType], combineDuplicateDomain);
  var selectTooltipCategoricalDomain = createSelector([selectChartLayout, selectAllTooltipAppliedValues, selectTooltipAxis, selectTooltipAxisType], combineCategoricalDomain);
  var combineTicksOfTooltipAxis = (layout, axis, realScaleType, scale, range4, duplicateDomain, categoricalDomain, axisType) => {
    if (!axis) {
      return void 0;
    }
    var {
      type
    } = axis;
    var isCategorical = isCategoricalAxis(layout, axisType);
    if (!scale) {
      return void 0;
    }
    var offsetForBand = realScaleType === "scaleBand" && scale.bandwidth ? scale.bandwidth() / 2 : 2;
    var offset = type === "category" && scale.bandwidth ? scale.bandwidth() / offsetForBand : 0;
    offset = axisType === "angleAxis" && range4 != null && (range4 === null || range4 === void 0 ? void 0 : range4.length) >= 2 ? mathSign(range4[0] - range4[1]) * 2 * offset : offset;
    if (isCategorical && categoricalDomain) {
      return categoricalDomain.map((entry, index) => ({
        coordinate: scale(entry) + offset,
        value: entry,
        index,
        offset
      }));
    }
    return scale.domain().map((entry, index) => ({
      coordinate: scale(entry) + offset,
      value: duplicateDomain ? duplicateDomain[entry] : entry,
      index,
      offset
    }));
  };
  var selectTooltipAxisTicks = createSelector([selectChartLayout, selectTooltipAxis, selectTooltipAxisRealScaleType, selectTooltipAxisScale, selectTooltipAxisRange, selectTooltipDuplicateDomain, selectTooltipCategoricalDomain, selectTooltipAxisType], combineTicksOfTooltipAxis);
  var selectTooltipEventType2 = createSelector([selectDefaultTooltipEventType, selectValidateTooltipEventTypes, selectTooltipSettings], (defaultTooltipEventType, validateTooltipEventType, settings) => combineTooltipEventType(settings.shared, defaultTooltipEventType, validateTooltipEventType));
  var selectTooltipTrigger = (state) => state.tooltip.settings.trigger;
  var selectDefaultIndex = (state) => state.tooltip.settings.defaultIndex;
  var selectTooltipInteractionState = createSelector([selectTooltipState, selectTooltipEventType2, selectTooltipTrigger, selectDefaultIndex], combineTooltipInteractionState);
  var selectActiveTooltipIndex = createSelector([selectTooltipInteractionState, selectTooltipDisplayedData], combineActiveTooltipIndex);
  var selectActiveLabel = createSelector([selectTooltipAxisTicks, selectActiveTooltipIndex], combineActiveLabel);
  var selectActiveTooltipDataKey = createSelector([selectTooltipInteractionState], (tooltipInteraction) => {
    if (!tooltipInteraction) {
      return void 0;
    }
    return tooltipInteraction.dataKey;
  });
  var selectTooltipPayloadConfigurations = createSelector([selectTooltipState, selectTooltipEventType2, selectTooltipTrigger, selectDefaultIndex], combineTooltipPayloadConfigurations);
  var selectTooltipCoordinateForDefaultIndex = createSelector([selectChartWidth, selectChartHeight, selectChartLayout, selectChartOffsetInternal, selectTooltipAxisTicks, selectDefaultIndex, selectTooltipPayloadConfigurations, selectTooltipPayloadSearcher], combineCoordinateForDefaultIndex);
  var selectActiveTooltipCoordinate = createSelector([selectTooltipInteractionState, selectTooltipCoordinateForDefaultIndex], (tooltipInteractionState, defaultIndexCoordinate) => {
    if (tooltipInteractionState !== null && tooltipInteractionState !== void 0 && tooltipInteractionState.coordinate) {
      return tooltipInteractionState.coordinate;
    }
    return defaultIndexCoordinate;
  });
  var selectIsTooltipActive = createSelector([selectTooltipInteractionState], (tooltipInteractionState) => tooltipInteractionState.active);
  var selectActiveTooltipPayload = createSelector([selectTooltipPayloadConfigurations, selectActiveTooltipIndex, selectChartDataWithIndexes, selectTooltipAxisDataKey, selectActiveLabel, selectTooltipPayloadSearcher, selectTooltipEventType2], combineTooltipPayload);
  var selectActiveTooltipDataPoints = createSelector([selectActiveTooltipPayload], (payload) => {
    if (payload == null) {
      return void 0;
    }
    var dataPoints = payload.map((p) => p.payload).filter((p) => p != null);
    return Array.from(new Set(dataPoints));
  });

  // node_modules/recharts/es6/context/useTooltipAxis.js
  function ownKeys18(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread18(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys18(Object(t), true).forEach(function(r3) {
        _defineProperty18(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys18(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty18(e, r2, t) {
    return (r2 = _toPropertyKey18(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey18(t) {
    var i = _toPrimitive18(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive18(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var useTooltipAxis = () => useAppSelector(selectTooltipAxis);
  var useTooltipAxisBandSize = () => {
    var tooltipAxis = useTooltipAxis();
    var tooltipTicks = useAppSelector(selectTooltipAxisTicks);
    var tooltipAxisScale = useAppSelector(selectTooltipAxisScale);
    return getBandSizeOfAxis(_objectSpread18(_objectSpread18({}, tooltipAxis), {}, {
      scale: tooltipAxisScale
    }), tooltipTicks);
  };

  // node_modules/recharts/es6/state/selectors/selectors.js
  var import_sortBy4 = __toESM(require_sortBy2());
  var useChartName = () => {
    return useAppSelector(selectChartName);
  };
  var pickTooltipEventType = (_state, tooltipEventType) => tooltipEventType;
  var pickTrigger = (_state, _tooltipEventType, trigger) => trigger;
  var pickDefaultIndex = (_state, _tooltipEventType, _trigger, defaultIndex) => defaultIndex;
  var selectOrderedTooltipTicks = createSelector(selectTooltipAxisTicks, (ticks2) => (0, import_sortBy4.default)(ticks2, (o) => o.coordinate));
  var selectTooltipInteractionState2 = createSelector([selectTooltipState, pickTooltipEventType, pickTrigger, pickDefaultIndex], combineTooltipInteractionState);
  var selectActiveIndex = createSelector([selectTooltipInteractionState2, selectTooltipDisplayedData], combineActiveTooltipIndex);
  var selectTooltipDataKey = (state, tooltipEventType, trigger) => {
    if (tooltipEventType == null) {
      return void 0;
    }
    var tooltipState = selectTooltipState(state);
    if (tooltipEventType === "axis") {
      if (trigger === "hover") {
        return tooltipState.axisInteraction.hover.dataKey;
      }
      return tooltipState.axisInteraction.click.dataKey;
    }
    if (trigger === "hover") {
      return tooltipState.itemInteraction.hover.dataKey;
    }
    return tooltipState.itemInteraction.click.dataKey;
  };
  var selectTooltipPayloadConfigurations2 = createSelector([selectTooltipState, pickTooltipEventType, pickTrigger, pickDefaultIndex], combineTooltipPayloadConfigurations);
  var selectCoordinateForDefaultIndex = createSelector([selectChartWidth, selectChartHeight, selectChartLayout, selectChartOffsetInternal, selectTooltipAxisTicks, pickDefaultIndex, selectTooltipPayloadConfigurations2, selectTooltipPayloadSearcher], combineCoordinateForDefaultIndex);
  var selectActiveCoordinate = createSelector([selectTooltipInteractionState2, selectCoordinateForDefaultIndex], (tooltipInteractionState, defaultIndexCoordinate) => {
    var _tooltipInteractionSt;
    return (_tooltipInteractionSt = tooltipInteractionState.coordinate) !== null && _tooltipInteractionSt !== void 0 ? _tooltipInteractionSt : defaultIndexCoordinate;
  });
  var selectActiveLabel2 = createSelector(selectTooltipAxisTicks, selectActiveIndex, combineActiveLabel);
  var selectTooltipPayload = createSelector([selectTooltipPayloadConfigurations2, selectActiveIndex, selectChartDataWithIndexes, selectTooltipAxisDataKey, selectActiveLabel2, selectTooltipPayloadSearcher, pickTooltipEventType], combineTooltipPayload);
  var selectIsTooltipActive2 = createSelector([selectTooltipInteractionState2], (tooltipInteractionState) => {
    return {
      isActive: tooltipInteractionState.active,
      activeIndex: tooltipInteractionState.index
    };
  });
  var combineActiveProps = (chartEvent, layout, polarViewBox, tooltipAxisType, tooltipAxisRange, tooltipTicks, orderedTooltipTicks, offset) => {
    if (!chartEvent || !layout || !tooltipAxisType || !tooltipAxisRange || !tooltipTicks) {
      return void 0;
    }
    var rangeObj = inRange(chartEvent.chartX, chartEvent.chartY, layout, polarViewBox, offset);
    if (!rangeObj) {
      return void 0;
    }
    var pos = calculateTooltipPos(rangeObj, layout);
    var activeIndex = calculateActiveTickIndex(pos, orderedTooltipTicks, tooltipTicks, tooltipAxisType, tooltipAxisRange);
    var activeCoordinate = getActiveCoordinate(layout, tooltipTicks, activeIndex, rangeObj);
    return {
      activeIndex: String(activeIndex),
      activeCoordinate
    };
  };

  // node_modules/recharts/es6/component/Cursor.js
  function _extends11() {
    return _extends11 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends11.apply(null, arguments);
  }
  function ownKeys19(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread19(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys19(Object(t), true).forEach(function(r3) {
        _defineProperty19(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys19(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty19(e, r2, t) {
    return (r2 = _toPropertyKey19(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey19(t) {
    var i = _toPrimitive19(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive19(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function CursorInternal(props) {
    var {
      coordinate,
      payload,
      index,
      offset,
      tooltipAxisBandSize,
      layout,
      cursor,
      tooltipEventType,
      chartName
    } = props;
    var activeCoordinate = coordinate;
    var activePayload = payload;
    var activeTooltipIndex = index;
    if (!cursor || !activeCoordinate || chartName !== "ScatterChart" && tooltipEventType !== "axis") {
      return null;
    }
    var restProps, cursorComp;
    if (chartName === "ScatterChart") {
      restProps = activeCoordinate;
      cursorComp = Cross;
    } else if (chartName === "BarChart") {
      restProps = getCursorRectangle(layout, activeCoordinate, offset, tooltipAxisBandSize);
      cursorComp = Rectangle;
    } else if (layout === "radial") {
      var {
        cx,
        cy,
        radius,
        startAngle,
        endAngle
      } = getRadialCursorPoints(activeCoordinate);
      restProps = {
        cx,
        cy,
        startAngle,
        endAngle,
        innerRadius: radius,
        outerRadius: radius
      };
      cursorComp = Sector;
    } else {
      restProps = {
        points: getCursorPoints(layout, activeCoordinate, offset)
      };
      cursorComp = Curve;
    }
    var extraClassName = typeof cursor === "object" && "className" in cursor ? cursor.className : void 0;
    var cursorProps = _objectSpread19(_objectSpread19(_objectSpread19(_objectSpread19({
      stroke: "#ccc",
      pointerEvents: "none"
    }, offset), restProps), filterProps(cursor, false)), {}, {
      payload: activePayload,
      payloadIndex: activeTooltipIndex,
      className: clsx("recharts-tooltip-cursor", extraClassName)
    });
    return /* @__PURE__ */ (0, import_react25.isValidElement)(cursor) ? /* @__PURE__ */ (0, import_react25.cloneElement)(cursor, cursorProps) : /* @__PURE__ */ (0, import_react25.createElement)(cursorComp, cursorProps);
  }
  function Cursor(props) {
    var tooltipAxisBandSize = useTooltipAxisBandSize();
    var offset = useOffsetInternal();
    var layout = useChartLayout();
    var chartName = useChartName();
    return /* @__PURE__ */ React20.createElement(CursorInternal, _extends11({}, props, {
      coordinate: props.coordinate,
      index: props.index,
      payload: props.payload,
      offset,
      layout,
      tooltipAxisBandSize,
      chartName
    }));
  }

  // node_modules/recharts/es6/context/tooltipPortalContext.js
  var import_react26 = __toESM(require_react());
  var TooltipPortalContext = /* @__PURE__ */ (0, import_react26.createContext)(null);
  var useTooltipPortal = () => (0, import_react26.useContext)(TooltipPortalContext);

  // node_modules/recharts/es6/synchronisation/useChartSynchronisation.js
  var import_react27 = __toESM(require_react());

  // node_modules/eventemitter3/index.mjs
  var import_index = __toESM(require_eventemitter3(), 1);
  var eventemitter3_default = import_index.default;

  // node_modules/recharts/es6/util/Events.js
  var eventCenter = new eventemitter3_default();
  var TOOLTIP_SYNC_EVENT = "recharts.syncEvent.tooltip";
  var BRUSH_SYNC_EVENT = "recharts.syncEvent.brush";

  // node_modules/recharts/es6/state/optionsSlice.js
  function arrayTooltipSearcher(data, strIndex) {
    if (!strIndex) return void 0;
    var numIndex = Number.parseInt(strIndex, 10);
    if (isNan(numIndex)) {
      return void 0;
    }
    return data === null || data === void 0 ? void 0 : data[numIndex];
  }
  var initialState4 = {
    chartName: "",
    tooltipPayloadSearcher: void 0,
    eventEmitter: void 0,
    defaultTooltipEventType: "axis"
  };
  var optionsSlice = createSlice({
    name: "options",
    initialState: initialState4,
    reducers: {
      createEventEmitter: (state) => {
        if (state.eventEmitter == null) {
          state.eventEmitter = Symbol("rechartsEventEmitter");
        }
      }
    }
  });
  var optionsReducer = optionsSlice.reducer;
  var {
    createEventEmitter
  } = optionsSlice.actions;

  // node_modules/recharts/es6/synchronisation/syncSelectors.js
  function selectSynchronisedTooltipState(state) {
    return state.tooltip.syncInteraction;
  }

  // node_modules/recharts/es6/state/chartDataSlice.js
  var initialChartDataState = {
    chartData: void 0,
    computedData: void 0,
    dataStartIndex: 0,
    dataEndIndex: 0
  };
  var chartDataSlice = createSlice({
    name: "chartData",
    initialState: initialChartDataState,
    reducers: {
      setChartData(state, action) {
        state.chartData = action.payload;
        if (action.payload == null) {
          state.dataStartIndex = 0;
          state.dataEndIndex = 0;
          return;
        }
        if (action.payload.length > 0 && state.dataEndIndex !== action.payload.length - 1) {
          state.dataEndIndex = action.payload.length - 1;
        }
      },
      setComputedData(state, action) {
        state.computedData = action.payload;
      },
      setDataStartEndIndexes(state, action) {
        var {
          startIndex,
          endIndex
        } = action.payload;
        if (startIndex != null) {
          state.dataStartIndex = startIndex;
        }
        if (endIndex != null) {
          state.dataEndIndex = endIndex;
        }
      }
    }
  });
  var {
    setChartData,
    setDataStartEndIndexes,
    setComputedData
  } = chartDataSlice.actions;
  var chartDataReducer = chartDataSlice.reducer;

  // node_modules/recharts/es6/synchronisation/useChartSynchronisation.js
  var _excluded6 = ["x", "y"];
  function ownKeys20(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread20(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys20(Object(t), true).forEach(function(r3) {
        _defineProperty20(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys20(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty20(e, r2, t) {
    return (r2 = _toPropertyKey20(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey20(t) {
    var i = _toPrimitive20(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive20(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function _objectWithoutProperties6(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose6(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose6(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  var noop4 = () => {
  };
  function useTooltipSyncEventsListener() {
    var mySyncId = useAppSelector(selectSyncId);
    var myEventEmitter = useAppSelector(selectEventEmitter);
    var dispatch = useAppDispatch();
    var syncMethod = useAppSelector(selectSyncMethod);
    var tooltipTicks = useAppSelector(selectTooltipAxisTicks);
    var layout = useChartLayout();
    var viewBox = useViewBox();
    var className = useAppSelector((state) => state.rootProps.className);
    (0, import_react27.useEffect)(() => {
      if (mySyncId == null) {
        return noop4;
      }
      var listener2 = (incomingSyncId, action, emitter) => {
        if (myEventEmitter === emitter) {
          return;
        }
        if (mySyncId !== incomingSyncId) {
          return;
        }
        if (syncMethod === "index") {
          var _action$payload;
          if (viewBox && action !== null && action !== void 0 && (_action$payload = action.payload) !== null && _action$payload !== void 0 && _action$payload.coordinate) {
            var _action$payload$coord = action.payload.coordinate, {
              x: _x,
              y: _y
            } = _action$payload$coord, otherCoordinateProps = _objectWithoutProperties6(_action$payload$coord, _excluded6);
            var boundedCoordinate = _objectSpread20(_objectSpread20(_objectSpread20({}, otherCoordinateProps), typeof _x === "number" && {
              x: Math.max(viewBox.x, Math.min(_x, viewBox.x + viewBox.width))
            }), typeof _y === "number" && {
              y: Math.max(viewBox.y, Math.min(_y, viewBox.y + viewBox.height))
            });
            var boundedAction = _objectSpread20(_objectSpread20({}, action), {}, {
              payload: _objectSpread20(_objectSpread20({}, action.payload), {}, {
                coordinate: boundedCoordinate
              })
            });
            dispatch(boundedAction);
          } else {
            dispatch(action);
          }
          return;
        }
        if (tooltipTicks == null) {
          return;
        }
        var activeTick;
        if (typeof syncMethod === "function") {
          var syncMethodParam = {
            activeTooltipIndex: action.payload.index == null ? void 0 : Number(action.payload.index),
            isTooltipActive: action.payload.active,
            activeIndex: action.payload.index == null ? void 0 : Number(action.payload.index),
            activeLabel: action.payload.label,
            activeDataKey: action.payload.dataKey,
            activeCoordinate: action.payload.coordinate
          };
          var activeTooltipIndex = syncMethod(tooltipTicks, syncMethodParam);
          activeTick = tooltipTicks[activeTooltipIndex];
        } else if (syncMethod === "value") {
          activeTick = tooltipTicks.find((tick) => String(tick.value) === action.payload.label);
        }
        var {
          coordinate
        } = action.payload;
        if (activeTick == null || action.payload.active === false || coordinate == null || viewBox == null) {
          dispatch(setSyncInteraction({
            active: false,
            coordinate: void 0,
            dataKey: void 0,
            index: null,
            label: void 0
          }));
          return;
        }
        var {
          x: x2,
          y: y2
        } = coordinate;
        var validateChartX = Math.min(x2, viewBox.x + viewBox.width);
        var validateChartY = Math.min(y2, viewBox.y + viewBox.height);
        var activeCoordinate = {
          x: layout === "horizontal" ? activeTick.coordinate : validateChartX,
          y: layout === "horizontal" ? validateChartY : activeTick.coordinate
        };
        var syncAction = setSyncInteraction({
          active: action.payload.active,
          coordinate: activeCoordinate,
          dataKey: action.payload.dataKey,
          index: String(activeTick.index),
          label: action.payload.label
        });
        dispatch(syncAction);
      };
      eventCenter.on(TOOLTIP_SYNC_EVENT, listener2);
      return () => {
        eventCenter.off(TOOLTIP_SYNC_EVENT, listener2);
      };
    }, [className, dispatch, myEventEmitter, mySyncId, syncMethod, tooltipTicks, layout, viewBox]);
  }
  function useBrushSyncEventsListener() {
    var mySyncId = useAppSelector(selectSyncId);
    var myEventEmitter = useAppSelector(selectEventEmitter);
    var dispatch = useAppDispatch();
    (0, import_react27.useEffect)(() => {
      if (mySyncId == null) {
        return noop4;
      }
      var listener2 = (incomingSyncId, action, emitter) => {
        if (myEventEmitter === emitter) {
          return;
        }
        if (mySyncId === incomingSyncId) {
          dispatch(setDataStartEndIndexes(action));
        }
      };
      eventCenter.on(BRUSH_SYNC_EVENT, listener2);
      return () => {
        eventCenter.off(BRUSH_SYNC_EVENT, listener2);
      };
    }, [dispatch, myEventEmitter, mySyncId]);
  }
  function useSynchronisedEventsFromOtherCharts() {
    var dispatch = useAppDispatch();
    (0, import_react27.useEffect)(() => {
      dispatch(createEventEmitter());
    }, [dispatch]);
    useTooltipSyncEventsListener();
    useBrushSyncEventsListener();
  }
  function useTooltipChartSynchronisation(tooltipEventType, trigger, activeCoordinate, activeLabel, activeIndex, isTooltipActive) {
    var activeDataKey = useAppSelector((state) => selectTooltipDataKey(state, tooltipEventType, trigger));
    var eventEmitterSymbol = useAppSelector(selectEventEmitter);
    var syncId = useAppSelector(selectSyncId);
    var syncMethod = useAppSelector(selectSyncMethod);
    var tooltipState = useAppSelector(selectSynchronisedTooltipState);
    var isReceivingSynchronisation = tooltipState === null || tooltipState === void 0 ? void 0 : tooltipState.active;
    (0, import_react27.useEffect)(() => {
      if (isReceivingSynchronisation) {
        return;
      }
      if (syncId == null) {
        return;
      }
      if (eventEmitterSymbol == null) {
        return;
      }
      var syncAction = setSyncInteraction({
        active: isTooltipActive,
        coordinate: activeCoordinate,
        dataKey: activeDataKey,
        index: activeIndex,
        label: typeof activeLabel === "number" ? String(activeLabel) : activeLabel
      });
      eventCenter.emit(TOOLTIP_SYNC_EVENT, syncId, syncAction, eventEmitterSymbol);
    }, [isReceivingSynchronisation, activeCoordinate, activeDataKey, activeIndex, activeLabel, eventEmitterSymbol, syncId, syncMethod, isTooltipActive]);
  }

  // node_modules/recharts/es6/component/Tooltip.js
  function ownKeys21(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread21(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys21(Object(t), true).forEach(function(r3) {
        _defineProperty21(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys21(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty21(e, r2, t) {
    return (r2 = _toPropertyKey21(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey21(t) {
    var i = _toPrimitive21(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive21(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function defaultUniqBy2(entry) {
    return entry.dataKey;
  }
  function renderContent(content, props) {
    if (/* @__PURE__ */ React21.isValidElement(content)) {
      return /* @__PURE__ */ React21.cloneElement(content, props);
    }
    if (typeof content === "function") {
      return /* @__PURE__ */ React21.createElement(content, props);
    }
    return /* @__PURE__ */ React21.createElement(DefaultTooltipContent, props);
  }
  var emptyPayload = [];
  var defaultTooltipProps = {
    allowEscapeViewBox: {
      x: false,
      y: false
    },
    animationDuration: 400,
    animationEasing: "ease",
    axisId: 0,
    contentStyle: {},
    cursor: true,
    filterNull: true,
    isAnimationActive: !Global.isSsr,
    itemSorter: "name",
    itemStyle: {},
    labelStyle: {},
    offset: 10,
    reverseDirection: {
      x: false,
      y: false
    },
    separator: " : ",
    trigger: "hover",
    useTranslate3d: false,
    wrapperStyle: {}
  };
  function Tooltip(outsideProps) {
    var props = resolveDefaultProps(outsideProps, defaultTooltipProps);
    var {
      active: activeFromProps,
      allowEscapeViewBox,
      animationDuration,
      animationEasing,
      content,
      filterNull,
      isAnimationActive,
      offset,
      payloadUniqBy,
      position,
      reverseDirection,
      useTranslate3d,
      wrapperStyle,
      cursor,
      shared,
      trigger,
      defaultIndex,
      portal: portalFromProps,
      axisId
    } = props;
    var dispatch = useAppDispatch();
    var defaultIndexAsString = typeof defaultIndex === "number" ? String(defaultIndex) : defaultIndex;
    (0, import_react28.useEffect)(() => {
      dispatch(setTooltipSettingsState({
        shared,
        trigger,
        axisId,
        active: activeFromProps,
        defaultIndex: defaultIndexAsString
      }));
    }, [dispatch, shared, trigger, axisId, activeFromProps, defaultIndexAsString]);
    var viewBox = useViewBox();
    var accessibilityLayer = useAccessibilityLayer();
    var tooltipEventType = useTooltipEventType(shared);
    var {
      activeIndex,
      isActive
    } = useAppSelector((state) => selectIsTooltipActive2(state, tooltipEventType, trigger, defaultIndexAsString));
    var payloadFromRedux = useAppSelector((state) => selectTooltipPayload(state, tooltipEventType, trigger, defaultIndexAsString));
    var labelFromRedux = useAppSelector((state) => selectActiveLabel2(state, tooltipEventType, trigger, defaultIndexAsString));
    var coordinate = useAppSelector((state) => selectActiveCoordinate(state, tooltipEventType, trigger, defaultIndexAsString));
    var payload = payloadFromRedux;
    var tooltipPortalFromContext = useTooltipPortal();
    var finalIsActive = activeFromProps !== null && activeFromProps !== void 0 ? activeFromProps : isActive;
    var [lastBoundingBox, updateBoundingBox] = useElementOffset([payload, finalIsActive]);
    var finalLabel = tooltipEventType === "axis" ? labelFromRedux : void 0;
    useTooltipChartSynchronisation(tooltipEventType, trigger, coordinate, finalLabel, activeIndex, finalIsActive);
    var tooltipPortal = portalFromProps !== null && portalFromProps !== void 0 ? portalFromProps : tooltipPortalFromContext;
    if (tooltipPortal == null) {
      return null;
    }
    var finalPayload = payload !== null && payload !== void 0 ? payload : emptyPayload;
    if (!finalIsActive) {
      finalPayload = emptyPayload;
    }
    if (filterNull && finalPayload.length) {
      finalPayload = getUniqPayload(payload.filter((entry) => entry.value != null && (entry.hide !== true || props.includeHidden)), payloadUniqBy, defaultUniqBy2);
    }
    var hasPayload = finalPayload.length > 0;
    var tooltipElement = /* @__PURE__ */ React21.createElement(TooltipBoundingBox, {
      allowEscapeViewBox,
      animationDuration,
      animationEasing,
      isAnimationActive,
      active: finalIsActive,
      coordinate,
      hasPayload,
      offset,
      position,
      reverseDirection,
      useTranslate3d,
      viewBox,
      wrapperStyle,
      lastBoundingBox,
      innerRef: updateBoundingBox,
      hasPortalFromProps: Boolean(portalFromProps)
    }, renderContent(content, _objectSpread21(_objectSpread21({}, props), {}, {
      // @ts-expect-error renderContent method expects the payload to be mutable, TODO make it immutable
      payload: finalPayload,
      label: finalLabel,
      active: finalIsActive,
      coordinate,
      accessibilityLayer
    })));
    return /* @__PURE__ */ React21.createElement(React21.Fragment, null, /* @__PURE__ */ (0, import_react_dom2.createPortal)(tooltipElement, tooltipPortal), finalIsActive && /* @__PURE__ */ React21.createElement(Cursor, {
      cursor,
      tooltipEventType,
      coordinate,
      payload,
      index: activeIndex
    }));
  }

  // node_modules/recharts/es6/component/ResponsiveContainer.js
  var React22 = __toESM(require_react());
  var import_react29 = __toESM(require_react());
  var import_throttle = __toESM(require_throttle2());

  // node_modules/recharts/es6/util/LogUtils.js
  var isDev = false;
  var warn = function warn2(condition, format2) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }
    if (isDev && typeof console !== "undefined" && console.warn) {
      if (format2 === void 0) {
        console.warn("LogUtils requires an error message argument");
      }
      if (!condition) {
        if (format2 === void 0) {
          console.warn("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");
        } else {
          var argIndex = 0;
          console.warn(format2.replace(/%s/g, () => args[argIndex++]));
        }
      }
    }
  };

  // node_modules/recharts/es6/component/ResponsiveContainer.js
  function ownKeys22(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread22(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys22(Object(t), true).forEach(function(r3) {
        _defineProperty22(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys22(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty22(e, r2, t) {
    return (r2 = _toPropertyKey22(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey22(t) {
    var i = _toPrimitive22(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive22(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var ResponsiveContainer = /* @__PURE__ */ (0, import_react29.forwardRef)((_ref2, ref) => {
    var {
      aspect,
      initialDimension = {
        width: -1,
        height: -1
      },
      width = "100%",
      height = "100%",
      /*
       * default min-width to 0 if not specified - 'auto' causes issues with flexbox
       * https://github.com/recharts/recharts/issues/172
       */
      minWidth = 0,
      minHeight,
      maxHeight,
      children,
      debounce = 0,
      id,
      className,
      onResize,
      style = {}
    } = _ref2;
    var containerRef = (0, import_react29.useRef)(null);
    var onResizeRef = (0, import_react29.useRef)();
    onResizeRef.current = onResize;
    (0, import_react29.useImperativeHandle)(ref, () => containerRef.current);
    var [sizes, setSizes] = (0, import_react29.useState)({
      containerWidth: initialDimension.width,
      containerHeight: initialDimension.height
    });
    var setContainerSize = (0, import_react29.useCallback)((newWidth, newHeight) => {
      setSizes((prevState) => {
        var roundedWidth = Math.round(newWidth);
        var roundedHeight = Math.round(newHeight);
        if (prevState.containerWidth === roundedWidth && prevState.containerHeight === roundedHeight) {
          return prevState;
        }
        return {
          containerWidth: roundedWidth,
          containerHeight: roundedHeight
        };
      });
    }, []);
    (0, import_react29.useEffect)(() => {
      var callback = (entries) => {
        var _onResizeRef$current;
        var {
          width: containerWidth2,
          height: containerHeight2
        } = entries[0].contentRect;
        setContainerSize(containerWidth2, containerHeight2);
        (_onResizeRef$current = onResizeRef.current) === null || _onResizeRef$current === void 0 || _onResizeRef$current.call(onResizeRef, containerWidth2, containerHeight2);
      };
      if (debounce > 0) {
        callback = (0, import_throttle.default)(callback, debounce, {
          trailing: true,
          leading: false
        });
      }
      var observer = new ResizeObserver(callback);
      var {
        width: containerWidth,
        height: containerHeight
      } = containerRef.current.getBoundingClientRect();
      setContainerSize(containerWidth, containerHeight);
      observer.observe(containerRef.current);
      return () => {
        observer.disconnect();
      };
    }, [setContainerSize, debounce]);
    var chartContent = (0, import_react29.useMemo)(() => {
      var {
        containerWidth,
        containerHeight
      } = sizes;
      if (containerWidth < 0 || containerHeight < 0) {
        return null;
      }
      warn(isPercent(width) || isPercent(height), "The width(%s) and height(%s) are both fixed numbers,\n       maybe you don't need to use a ResponsiveContainer.", width, height);
      warn(!aspect || aspect > 0, "The aspect(%s) must be greater than zero.", aspect);
      var calculatedWidth = isPercent(width) ? containerWidth : width;
      var calculatedHeight = isPercent(height) ? containerHeight : height;
      if (aspect && aspect > 0) {
        if (calculatedWidth) {
          calculatedHeight = calculatedWidth / aspect;
        } else if (calculatedHeight) {
          calculatedWidth = calculatedHeight * aspect;
        }
        if (maxHeight && calculatedHeight > maxHeight) {
          calculatedHeight = maxHeight;
        }
      }
      warn(calculatedWidth > 0 || calculatedHeight > 0, "The width(%s) and height(%s) of chart should be greater than 0,\n       please check the style of container, or the props width(%s) and height(%s),\n       or add a minWidth(%s) or minHeight(%s) or use aspect(%s) to control the\n       height and width.", calculatedWidth, calculatedHeight, width, height, minWidth, minHeight, aspect);
      return React22.Children.map(children, (child) => {
        return /* @__PURE__ */ (0, import_react29.cloneElement)(child, {
          width: calculatedWidth,
          height: calculatedHeight,
          // calculate the actual size and override it.
          style: _objectSpread22({
            width: calculatedWidth,
            height: calculatedHeight
          }, child.props.style)
        });
      });
    }, [aspect, children, height, maxHeight, minHeight, minWidth, sizes, width]);
    return /* @__PURE__ */ React22.createElement("div", {
      id: id ? "".concat(id) : void 0,
      className: clsx("recharts-responsive-container", className),
      style: _objectSpread22(_objectSpread22({}, style), {}, {
        width,
        height,
        minWidth,
        minHeight,
        maxHeight
      }),
      ref: containerRef
    }, /* @__PURE__ */ React22.createElement("div", {
      style: {
        width: 0,
        height: 0,
        overflow: "visible"
      }
    }, chartContent));
  });

  // node_modules/recharts/es6/component/Cell.js
  var Cell = (_props) => null;
  Cell.displayName = "Cell";

  // node_modules/recharts/es6/component/Text.js
  var React23 = __toESM(require_react());
  var import_react30 = __toESM(require_react());

  // node_modules/recharts/es6/util/LRUCache.js
  function _defineProperty23(e, r2, t) {
    return (r2 = _toPropertyKey23(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey23(t) {
    var i = _toPrimitive23(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive23(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var LRUCache = class {
    constructor(maxSize) {
      _defineProperty23(this, "cache", /* @__PURE__ */ new Map());
      this.maxSize = maxSize;
    }
    get(key) {
      var value = this.cache.get(key);
      if (value !== void 0) {
        this.cache.delete(key);
        this.cache.set(key, value);
      }
      return value;
    }
    set(key, value) {
      if (this.cache.has(key)) {
        this.cache.delete(key);
      } else if (this.cache.size >= this.maxSize) {
        var firstKey = this.cache.keys().next().value;
        this.cache.delete(firstKey);
      }
      this.cache.set(key, value);
    }
    clear() {
      this.cache.clear();
    }
    size() {
      return this.cache.size;
    }
  };

  // node_modules/recharts/es6/util/DOMUtils.js
  function ownKeys23(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread23(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys23(Object(t), true).forEach(function(r3) {
        _defineProperty24(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys23(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty24(e, r2, t) {
    return (r2 = _toPropertyKey24(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey24(t) {
    var i = _toPrimitive24(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive24(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var defaultConfig = {
    cacheSize: 2e3,
    enableCache: true
  };
  var currentConfig = _objectSpread23({}, defaultConfig);
  var stringCache = new LRUCache(currentConfig.cacheSize);
  var SPAN_STYLE = {
    position: "absolute",
    top: "-20000px",
    left: 0,
    padding: 0,
    margin: 0,
    border: "none",
    whiteSpace: "pre"
  };
  var MEASUREMENT_SPAN_ID = "recharts_measurement_span";
  function createCacheKey(text, style) {
    var fontSize = style.fontSize || "";
    var fontFamily = style.fontFamily || "";
    var fontWeight = style.fontWeight || "";
    var fontStyle = style.fontStyle || "";
    var letterSpacing = style.letterSpacing || "";
    var textTransform = style.textTransform || "";
    return "".concat(text, "|").concat(fontSize, "|").concat(fontFamily, "|").concat(fontWeight, "|").concat(fontStyle, "|").concat(letterSpacing, "|").concat(textTransform);
  }
  var measureTextWithDOM = (text, style) => {
    try {
      var measurementSpan = document.getElementById(MEASUREMENT_SPAN_ID);
      if (!measurementSpan) {
        measurementSpan = document.createElement("span");
        measurementSpan.setAttribute("id", MEASUREMENT_SPAN_ID);
        measurementSpan.setAttribute("aria-hidden", "true");
        document.body.appendChild(measurementSpan);
      }
      Object.assign(measurementSpan.style, SPAN_STYLE, style);
      measurementSpan.textContent = "".concat(text);
      var rect = measurementSpan.getBoundingClientRect();
      return {
        width: rect.width,
        height: rect.height
      };
    } catch (_unused) {
      return {
        width: 0,
        height: 0
      };
    }
  };
  var getStringSize = function getStringSize2(text) {
    var style = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    if (text === void 0 || text === null || Global.isSsr) {
      return {
        width: 0,
        height: 0
      };
    }
    if (!currentConfig.enableCache) {
      return measureTextWithDOM(text, style);
    }
    var cacheKey = createCacheKey(text, style);
    var cachedResult = stringCache.get(cacheKey);
    if (cachedResult) {
      return cachedResult;
    }
    var result = measureTextWithDOM(text, style);
    stringCache.set(cacheKey, result);
    return result;
  };

  // node_modules/recharts/es6/util/ReduceCSSCalc.js
  var MULTIPLY_OR_DIVIDE_REGEX = /(-?\d+(?:\.\d+)?[a-zA-Z%]*)([*/])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/;
  var ADD_OR_SUBTRACT_REGEX = /(-?\d+(?:\.\d+)?[a-zA-Z%]*)([+-])(-?\d+(?:\.\d+)?[a-zA-Z%]*)/;
  var CSS_LENGTH_UNIT_REGEX = /^px|cm|vh|vw|em|rem|%|mm|in|pt|pc|ex|ch|vmin|vmax|Q$/;
  var NUM_SPLIT_REGEX = /(-?\d+(?:\.\d+)?)([a-zA-Z%]+)?/;
  var CONVERSION_RATES = {
    cm: 96 / 2.54,
    mm: 96 / 25.4,
    pt: 96 / 72,
    pc: 96 / 6,
    in: 96,
    Q: 96 / (2.54 * 40),
    px: 1
  };
  var FIXED_CSS_LENGTH_UNITS = Object.keys(CONVERSION_RATES);
  var STR_NAN = "NaN";
  function convertToPx(value, unit2) {
    return value * CONVERSION_RATES[unit2];
  }
  var DecimalCSS = class _DecimalCSS {
    static parse(str) {
      var _NUM_SPLIT_REGEX$exec;
      var [, numStr, unit2] = (_NUM_SPLIT_REGEX$exec = NUM_SPLIT_REGEX.exec(str)) !== null && _NUM_SPLIT_REGEX$exec !== void 0 ? _NUM_SPLIT_REGEX$exec : [];
      return new _DecimalCSS(parseFloat(numStr), unit2 !== null && unit2 !== void 0 ? unit2 : "");
    }
    constructor(num, unit2) {
      this.num = num;
      this.unit = unit2;
      this.num = num;
      this.unit = unit2;
      if (isNan(num)) {
        this.unit = "";
      }
      if (unit2 !== "" && !CSS_LENGTH_UNIT_REGEX.test(unit2)) {
        this.num = NaN;
        this.unit = "";
      }
      if (FIXED_CSS_LENGTH_UNITS.includes(unit2)) {
        this.num = convertToPx(num, unit2);
        this.unit = "px";
      }
    }
    add(other) {
      if (this.unit !== other.unit) {
        return new _DecimalCSS(NaN, "");
      }
      return new _DecimalCSS(this.num + other.num, this.unit);
    }
    subtract(other) {
      if (this.unit !== other.unit) {
        return new _DecimalCSS(NaN, "");
      }
      return new _DecimalCSS(this.num - other.num, this.unit);
    }
    multiply(other) {
      if (this.unit !== "" && other.unit !== "" && this.unit !== other.unit) {
        return new _DecimalCSS(NaN, "");
      }
      return new _DecimalCSS(this.num * other.num, this.unit || other.unit);
    }
    divide(other) {
      if (this.unit !== "" && other.unit !== "" && this.unit !== other.unit) {
        return new _DecimalCSS(NaN, "");
      }
      return new _DecimalCSS(this.num / other.num, this.unit || other.unit);
    }
    toString() {
      return "".concat(this.num).concat(this.unit);
    }
    isNaN() {
      return isNan(this.num);
    }
  };
  function calculateArithmetic(expr) {
    if (expr.includes(STR_NAN)) {
      return STR_NAN;
    }
    var newExpr = expr;
    while (newExpr.includes("*") || newExpr.includes("/")) {
      var _MULTIPLY_OR_DIVIDE_R;
      var [, leftOperand, operator, rightOperand] = (_MULTIPLY_OR_DIVIDE_R = MULTIPLY_OR_DIVIDE_REGEX.exec(newExpr)) !== null && _MULTIPLY_OR_DIVIDE_R !== void 0 ? _MULTIPLY_OR_DIVIDE_R : [];
      var lTs = DecimalCSS.parse(leftOperand !== null && leftOperand !== void 0 ? leftOperand : "");
      var rTs = DecimalCSS.parse(rightOperand !== null && rightOperand !== void 0 ? rightOperand : "");
      var result = operator === "*" ? lTs.multiply(rTs) : lTs.divide(rTs);
      if (result.isNaN()) {
        return STR_NAN;
      }
      newExpr = newExpr.replace(MULTIPLY_OR_DIVIDE_REGEX, result.toString());
    }
    while (newExpr.includes("+") || /.-\d+(?:\.\d+)?/.test(newExpr)) {
      var _ADD_OR_SUBTRACT_REGE;
      var [, _leftOperand, _operator, _rightOperand] = (_ADD_OR_SUBTRACT_REGE = ADD_OR_SUBTRACT_REGEX.exec(newExpr)) !== null && _ADD_OR_SUBTRACT_REGE !== void 0 ? _ADD_OR_SUBTRACT_REGE : [];
      var _lTs = DecimalCSS.parse(_leftOperand !== null && _leftOperand !== void 0 ? _leftOperand : "");
      var _rTs = DecimalCSS.parse(_rightOperand !== null && _rightOperand !== void 0 ? _rightOperand : "");
      var _result = _operator === "+" ? _lTs.add(_rTs) : _lTs.subtract(_rTs);
      if (_result.isNaN()) {
        return STR_NAN;
      }
      newExpr = newExpr.replace(ADD_OR_SUBTRACT_REGEX, _result.toString());
    }
    return newExpr;
  }
  var PARENTHESES_REGEX = /\(([^()]*)\)/;
  function calculateParentheses(expr) {
    var newExpr = expr;
    var match;
    while ((match = PARENTHESES_REGEX.exec(newExpr)) != null) {
      var [, parentheticalExpression] = match;
      newExpr = newExpr.replace(PARENTHESES_REGEX, calculateArithmetic(parentheticalExpression));
    }
    return newExpr;
  }
  function evaluateExpression(expression) {
    var newExpr = expression.replace(/\s+/g, "");
    newExpr = calculateParentheses(newExpr);
    newExpr = calculateArithmetic(newExpr);
    return newExpr;
  }
  function safeEvaluateExpression(expression) {
    try {
      return evaluateExpression(expression);
    } catch (_unused) {
      return STR_NAN;
    }
  }
  function reduceCSSCalc(expression) {
    var result = safeEvaluateExpression(expression.slice(5, -1));
    if (result === STR_NAN) {
      return "";
    }
    return result;
  }

  // node_modules/recharts/es6/component/Text.js
  var _excluded7 = ["x", "y", "lineHeight", "capHeight", "scaleToFit", "textAnchor", "verticalAnchor", "fill"];
  var _excluded22 = ["dx", "dy", "angle", "className", "breakAll"];
  function _extends12() {
    return _extends12 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends12.apply(null, arguments);
  }
  function _objectWithoutProperties7(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose7(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose7(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  var BREAKING_SPACES = /[ \f\n\r\t\v\u2028\u2029]+/;
  var calculateWordWidths = (_ref2) => {
    var {
      children,
      breakAll,
      style
    } = _ref2;
    try {
      var words = [];
      if (!isNullish(children)) {
        if (breakAll) {
          words = children.toString().split("");
        } else {
          words = children.toString().split(BREAKING_SPACES);
        }
      }
      var wordsWithComputedWidth = words.map((word) => ({
        word,
        width: getStringSize(word, style).width
      }));
      var spaceWidth = breakAll ? 0 : getStringSize("\xA0", style).width;
      return {
        wordsWithComputedWidth,
        spaceWidth
      };
    } catch (_unused) {
      return null;
    }
  };
  var calculateWordsByLines = (_ref2, initialWordsWithComputedWith, spaceWidth, lineWidth, scaleToFit) => {
    var {
      maxLines,
      children,
      style,
      breakAll
    } = _ref2;
    var shouldLimitLines = isNumber(maxLines);
    var text = children;
    var calculate = function calculate2() {
      var words = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : [];
      return words.reduce((result2, _ref3) => {
        var {
          word,
          width
        } = _ref3;
        var currentLine = result2[result2.length - 1];
        if (currentLine && (lineWidth == null || scaleToFit || currentLine.width + width + spaceWidth < Number(lineWidth))) {
          currentLine.words.push(word);
          currentLine.width += width + spaceWidth;
        } else {
          var newLine = {
            words: [word],
            width
          };
          result2.push(newLine);
        }
        return result2;
      }, []);
    };
    var originalResult = calculate(initialWordsWithComputedWith);
    var findLongestLine = (words) => words.reduce((a2, b) => a2.width > b.width ? a2 : b);
    if (!shouldLimitLines || scaleToFit) {
      return originalResult;
    }
    var overflows = originalResult.length > maxLines || findLongestLine(originalResult).width > Number(lineWidth);
    if (!overflows) {
      return originalResult;
    }
    var suffix = "\u2026";
    var checkOverflow = (index) => {
      var tempText = text.slice(0, index);
      var words = calculateWordWidths({
        breakAll,
        style,
        children: tempText + suffix
      }).wordsWithComputedWidth;
      var result2 = calculate(words);
      var doesOverflow = result2.length > maxLines || findLongestLine(result2).width > Number(lineWidth);
      return [doesOverflow, result2];
    };
    var start = 0;
    var end = text.length - 1;
    var iterations = 0;
    var trimmedResult;
    while (start <= end && iterations <= text.length - 1) {
      var middle = Math.floor((start + end) / 2);
      var prev = middle - 1;
      var [doesPrevOverflow, result] = checkOverflow(prev);
      var [doesMiddleOverflow] = checkOverflow(middle);
      if (!doesPrevOverflow && !doesMiddleOverflow) {
        start = middle + 1;
      }
      if (doesPrevOverflow && doesMiddleOverflow) {
        end = middle - 1;
      }
      if (!doesPrevOverflow && doesMiddleOverflow) {
        trimmedResult = result;
        break;
      }
      iterations++;
    }
    return trimmedResult || originalResult;
  };
  var getWordsWithoutCalculate = (children) => {
    var words = !isNullish(children) ? children.toString().split(BREAKING_SPACES) : [];
    return [{
      words
    }];
  };
  var getWordsByLines = (_ref4) => {
    var {
      width,
      scaleToFit,
      children,
      style,
      breakAll,
      maxLines
    } = _ref4;
    if ((width || scaleToFit) && !Global.isSsr) {
      var wordsWithComputedWidth, spaceWidth;
      var wordWidths = calculateWordWidths({
        breakAll,
        children,
        style
      });
      if (wordWidths) {
        var {
          wordsWithComputedWidth: wcw,
          spaceWidth: sw
        } = wordWidths;
        wordsWithComputedWidth = wcw;
        spaceWidth = sw;
      } else {
        return getWordsWithoutCalculate(children);
      }
      return calculateWordsByLines({
        breakAll,
        children,
        maxLines,
        style
      }, wordsWithComputedWidth, spaceWidth, width, scaleToFit);
    }
    return getWordsWithoutCalculate(children);
  };
  var DEFAULT_FILL = "#808080";
  var Text = /* @__PURE__ */ (0, import_react30.forwardRef)((_ref5, ref) => {
    var {
      x: propsX = 0,
      y: propsY = 0,
      lineHeight = "1em",
      // Magic number from d3
      capHeight = "0.71em",
      scaleToFit = false,
      textAnchor = "start",
      // Maintain compat with existing charts / default SVG behavior
      verticalAnchor = "end",
      fill = DEFAULT_FILL
    } = _ref5, props = _objectWithoutProperties7(_ref5, _excluded7);
    var wordsByLines = (0, import_react30.useMemo)(() => {
      return getWordsByLines({
        breakAll: props.breakAll,
        children: props.children,
        maxLines: props.maxLines,
        scaleToFit,
        style: props.style,
        width: props.width
      });
    }, [props.breakAll, props.children, props.maxLines, scaleToFit, props.style, props.width]);
    var {
      dx,
      dy,
      angle,
      className,
      breakAll
    } = props, textProps = _objectWithoutProperties7(props, _excluded22);
    if (!isNumOrStr(propsX) || !isNumOrStr(propsY) || wordsByLines.length === 0) {
      return null;
    }
    var x2 = propsX + (isNumber(dx) ? dx : 0);
    var y2 = propsY + (isNumber(dy) ? dy : 0);
    var startDy;
    switch (verticalAnchor) {
      case "start":
        startDy = reduceCSSCalc("calc(".concat(capHeight, ")"));
        break;
      case "middle":
        startDy = reduceCSSCalc("calc(".concat((wordsByLines.length - 1) / 2, " * -").concat(lineHeight, " + (").concat(capHeight, " / 2))"));
        break;
      default:
        startDy = reduceCSSCalc("calc(".concat(wordsByLines.length - 1, " * -").concat(lineHeight, ")"));
        break;
    }
    var transforms = [];
    if (scaleToFit) {
      var lineWidth = wordsByLines[0].width;
      var {
        width
      } = props;
      transforms.push("scale(".concat(isNumber(width) ? width / lineWidth : 1, ")"));
    }
    if (angle) {
      transforms.push("rotate(".concat(angle, ", ").concat(x2, ", ").concat(y2, ")"));
    }
    if (transforms.length) {
      textProps.transform = transforms.join(" ");
    }
    return /* @__PURE__ */ React23.createElement("text", _extends12({}, filterProps(textProps, true), {
      ref,
      x: x2,
      y: y2,
      className: clsx("recharts-text", className),
      textAnchor,
      fill: fill.includes("url") ? DEFAULT_FILL : fill
    }), wordsByLines.map((line, index) => {
      var words = line.words.join(breakAll ? "" : " ");
      return (
        // duplicate words will cause duplicate keys
        // eslint-disable-next-line react/no-array-index-key
        /* @__PURE__ */ React23.createElement("tspan", {
          x: x2,
          dy: index === 0 ? startDy : lineHeight,
          key: "".concat(words, "-").concat(index)
        }, words)
      );
    }));
  });
  Text.displayName = "Text";

  // node_modules/recharts/es6/component/Label.js
  var React24 = __toESM(require_react());
  var import_react31 = __toESM(require_react());
  var _excluded8 = ["labelRef"];
  function _objectWithoutProperties8(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose8(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose8(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  function ownKeys24(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread24(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys24(Object(t), true).forEach(function(r3) {
        _defineProperty25(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys24(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty25(e, r2, t) {
    return (r2 = _toPropertyKey25(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey25(t) {
    var i = _toPrimitive25(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive25(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function _extends13() {
    return _extends13 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends13.apply(null, arguments);
  }
  var CartesianLabelContext = /* @__PURE__ */ (0, import_react31.createContext)(null);
  var CartesianLabelContextProvider = (_ref2) => {
    var {
      x: x2,
      y: y2,
      width,
      height,
      children
    } = _ref2;
    var viewBox = (0, import_react31.useMemo)(() => ({
      x: x2,
      y: y2,
      width,
      height
    }), [x2, y2, width, height]);
    return /* @__PURE__ */ React24.createElement(CartesianLabelContext.Provider, {
      value: viewBox
    }, children);
  };
  var useCartesianLabelContext = () => {
    var labelChildContext = (0, import_react31.useContext)(CartesianLabelContext);
    var chartContext = useViewBox();
    return labelChildContext || chartContext;
  };
  var PolarLabelContext = /* @__PURE__ */ (0, import_react31.createContext)(null);
  var usePolarLabelContext = () => {
    var labelChildContext = (0, import_react31.useContext)(PolarLabelContext);
    var chartContext = useAppSelector(selectPolarViewBox);
    return labelChildContext || chartContext;
  };
  var getLabel = (props) => {
    var {
      value,
      formatter
    } = props;
    var label = isNullish(props.children) ? value : props.children;
    if (typeof formatter === "function") {
      return formatter(label);
    }
    return label;
  };
  var isLabelContentAFunction = (content) => {
    return content != null && typeof content === "function";
  };
  var getDeltaAngle2 = (startAngle, endAngle) => {
    var sign2 = mathSign(endAngle - startAngle);
    var deltaAngle = Math.min(Math.abs(endAngle - startAngle), 360);
    return sign2 * deltaAngle;
  };
  var renderRadialLabel = (labelProps, position, label, attrs, viewBox) => {
    var {
      offset,
      className
    } = labelProps;
    var {
      cx,
      cy,
      innerRadius,
      outerRadius,
      startAngle,
      endAngle,
      clockWise
    } = viewBox;
    var radius = (innerRadius + outerRadius) / 2;
    var deltaAngle = getDeltaAngle2(startAngle, endAngle);
    var sign2 = deltaAngle >= 0 ? 1 : -1;
    var labelAngle, direction;
    switch (position) {
      case "insideStart":
        labelAngle = startAngle + sign2 * offset;
        direction = clockWise;
        break;
      case "insideEnd":
        labelAngle = endAngle - sign2 * offset;
        direction = !clockWise;
        break;
      case "end":
        labelAngle = endAngle + sign2 * offset;
        direction = clockWise;
        break;
      default:
        throw new Error("Unsupported position ".concat(position));
    }
    direction = deltaAngle <= 0 ? direction : !direction;
    var startPoint = polarToCartesian(cx, cy, radius, labelAngle);
    var endPoint = polarToCartesian(cx, cy, radius, labelAngle + (direction ? 1 : -1) * 359);
    var path2 = "M".concat(startPoint.x, ",").concat(startPoint.y, "\n    A").concat(radius, ",").concat(radius, ",0,1,").concat(direction ? 0 : 1, ",\n    ").concat(endPoint.x, ",").concat(endPoint.y);
    var id = isNullish(labelProps.id) ? uniqueId("recharts-radial-line-") : labelProps.id;
    return /* @__PURE__ */ React24.createElement("text", _extends13({}, attrs, {
      dominantBaseline: "central",
      className: clsx("recharts-radial-bar-label", className)
    }), /* @__PURE__ */ React24.createElement("defs", null, /* @__PURE__ */ React24.createElement("path", {
      id,
      d: path2
    })), /* @__PURE__ */ React24.createElement("textPath", {
      xlinkHref: "#".concat(id)
    }, label));
  };
  var getAttrsOfPolarLabel = (viewBox, offset, position) => {
    var {
      cx,
      cy,
      innerRadius,
      outerRadius,
      startAngle,
      endAngle
    } = viewBox;
    var midAngle = (startAngle + endAngle) / 2;
    if (position === "outside") {
      var {
        x: _x,
        y: _y
      } = polarToCartesian(cx, cy, outerRadius + offset, midAngle);
      return {
        x: _x,
        y: _y,
        textAnchor: _x >= cx ? "start" : "end",
        verticalAnchor: "middle"
      };
    }
    if (position === "center") {
      return {
        x: cx,
        y: cy,
        textAnchor: "middle",
        verticalAnchor: "middle"
      };
    }
    if (position === "centerTop") {
      return {
        x: cx,
        y: cy,
        textAnchor: "middle",
        verticalAnchor: "start"
      };
    }
    if (position === "centerBottom") {
      return {
        x: cx,
        y: cy,
        textAnchor: "middle",
        verticalAnchor: "end"
      };
    }
    var r2 = (innerRadius + outerRadius) / 2;
    var {
      x: x2,
      y: y2
    } = polarToCartesian(cx, cy, r2, midAngle);
    return {
      x: x2,
      y: y2,
      textAnchor: "middle",
      verticalAnchor: "middle"
    };
  };
  var isPolar = (viewBox) => "cx" in viewBox && isNumber(viewBox.cx);
  var getAttrsOfCartesianLabel = (props, viewBox) => {
    var {
      parentViewBox: parentViewBoxFromProps,
      offset,
      position
    } = props;
    var parentViewBox;
    if (parentViewBoxFromProps != null && !isPolar(parentViewBoxFromProps)) {
      parentViewBox = parentViewBoxFromProps;
    }
    var {
      x: x2,
      y: y2,
      width,
      height
    } = viewBox;
    var verticalSign = height >= 0 ? 1 : -1;
    var verticalOffset = verticalSign * offset;
    var verticalEnd = verticalSign > 0 ? "end" : "start";
    var verticalStart = verticalSign > 0 ? "start" : "end";
    var horizontalSign = width >= 0 ? 1 : -1;
    var horizontalOffset = horizontalSign * offset;
    var horizontalEnd = horizontalSign > 0 ? "end" : "start";
    var horizontalStart = horizontalSign > 0 ? "start" : "end";
    if (position === "top") {
      var attrs = {
        x: x2 + width / 2,
        y: y2 - verticalSign * offset,
        textAnchor: "middle",
        verticalAnchor: verticalEnd
      };
      return _objectSpread24(_objectSpread24({}, attrs), parentViewBox ? {
        height: Math.max(y2 - parentViewBox.y, 0),
        width
      } : {});
    }
    if (position === "bottom") {
      var _attrs = {
        x: x2 + width / 2,
        y: y2 + height + verticalOffset,
        textAnchor: "middle",
        verticalAnchor: verticalStart
      };
      return _objectSpread24(_objectSpread24({}, _attrs), parentViewBox ? {
        height: Math.max(parentViewBox.y + parentViewBox.height - (y2 + height), 0),
        width
      } : {});
    }
    if (position === "left") {
      var _attrs2 = {
        x: x2 - horizontalOffset,
        y: y2 + height / 2,
        textAnchor: horizontalEnd,
        verticalAnchor: "middle"
      };
      return _objectSpread24(_objectSpread24({}, _attrs2), parentViewBox ? {
        width: Math.max(_attrs2.x - parentViewBox.x, 0),
        height
      } : {});
    }
    if (position === "right") {
      var _attrs3 = {
        x: x2 + width + horizontalOffset,
        y: y2 + height / 2,
        textAnchor: horizontalStart,
        verticalAnchor: "middle"
      };
      return _objectSpread24(_objectSpread24({}, _attrs3), parentViewBox ? {
        width: Math.max(parentViewBox.x + parentViewBox.width - _attrs3.x, 0),
        height
      } : {});
    }
    var sizeAttrs = parentViewBox ? {
      width,
      height
    } : {};
    if (position === "insideLeft") {
      return _objectSpread24({
        x: x2 + horizontalOffset,
        y: y2 + height / 2,
        textAnchor: horizontalStart,
        verticalAnchor: "middle"
      }, sizeAttrs);
    }
    if (position === "insideRight") {
      return _objectSpread24({
        x: x2 + width - horizontalOffset,
        y: y2 + height / 2,
        textAnchor: horizontalEnd,
        verticalAnchor: "middle"
      }, sizeAttrs);
    }
    if (position === "insideTop") {
      return _objectSpread24({
        x: x2 + width / 2,
        y: y2 + verticalOffset,
        textAnchor: "middle",
        verticalAnchor: verticalStart
      }, sizeAttrs);
    }
    if (position === "insideBottom") {
      return _objectSpread24({
        x: x2 + width / 2,
        y: y2 + height - verticalOffset,
        textAnchor: "middle",
        verticalAnchor: verticalEnd
      }, sizeAttrs);
    }
    if (position === "insideTopLeft") {
      return _objectSpread24({
        x: x2 + horizontalOffset,
        y: y2 + verticalOffset,
        textAnchor: horizontalStart,
        verticalAnchor: verticalStart
      }, sizeAttrs);
    }
    if (position === "insideTopRight") {
      return _objectSpread24({
        x: x2 + width - horizontalOffset,
        y: y2 + verticalOffset,
        textAnchor: horizontalEnd,
        verticalAnchor: verticalStart
      }, sizeAttrs);
    }
    if (position === "insideBottomLeft") {
      return _objectSpread24({
        x: x2 + horizontalOffset,
        y: y2 + height - verticalOffset,
        textAnchor: horizontalStart,
        verticalAnchor: verticalEnd
      }, sizeAttrs);
    }
    if (position === "insideBottomRight") {
      return _objectSpread24({
        x: x2 + width - horizontalOffset,
        y: y2 + height - verticalOffset,
        textAnchor: horizontalEnd,
        verticalAnchor: verticalEnd
      }, sizeAttrs);
    }
    if (!!position && typeof position === "object" && (isNumber(position.x) || isPercent(position.x)) && (isNumber(position.y) || isPercent(position.y))) {
      return _objectSpread24({
        x: x2 + getPercentValue(position.x, width),
        y: y2 + getPercentValue(position.y, height),
        textAnchor: "end",
        verticalAnchor: "end"
      }, sizeAttrs);
    }
    return _objectSpread24({
      x: x2 + width / 2,
      y: y2 + height / 2,
      textAnchor: "middle",
      verticalAnchor: "middle"
    }, sizeAttrs);
  };
  var defaultLabelProps = {
    offset: 5
  };
  function Label(outerProps) {
    var props = resolveDefaultProps(outerProps, defaultLabelProps);
    var {
      viewBox: viewBoxFromProps,
      position,
      value,
      children,
      content,
      className = "",
      textBreakAll,
      labelRef
    } = props;
    var polarViewBox = usePolarLabelContext();
    var cartesianViewBox = useCartesianLabelContext();
    var resolvedViewBox = position === "center" ? cartesianViewBox : polarViewBox !== null && polarViewBox !== void 0 ? polarViewBox : cartesianViewBox;
    var viewBox = viewBoxFromProps || resolvedViewBox;
    if (!viewBox || isNullish(value) && isNullish(children) && !/* @__PURE__ */ (0, import_react31.isValidElement)(content) && typeof content !== "function") {
      return null;
    }
    var propsWithViewBox = _objectSpread24(_objectSpread24({}, props), {}, {
      viewBox
    });
    if (/* @__PURE__ */ (0, import_react31.isValidElement)(content)) {
      var {
        labelRef: _
      } = propsWithViewBox, propsWithoutLabelRef = _objectWithoutProperties8(propsWithViewBox, _excluded8);
      return /* @__PURE__ */ (0, import_react31.cloneElement)(content, propsWithoutLabelRef);
    }
    var label;
    if (typeof content === "function") {
      label = /* @__PURE__ */ (0, import_react31.createElement)(content, propsWithViewBox);
      if (/* @__PURE__ */ (0, import_react31.isValidElement)(label)) {
        return label;
      }
    } else {
      label = getLabel(props);
    }
    var isPolarLabel = isPolar(viewBox);
    var attrs = filterProps(props, true);
    if (isPolarLabel && (position === "insideStart" || position === "insideEnd" || position === "end")) {
      return renderRadialLabel(props, position, label, attrs, viewBox);
    }
    var positionAttrs = isPolarLabel ? getAttrsOfPolarLabel(viewBox, props.offset, props.position) : getAttrsOfCartesianLabel(props, viewBox);
    return /* @__PURE__ */ React24.createElement(Text, _extends13({
      ref: labelRef,
      className: clsx("recharts-label", className)
    }, attrs, positionAttrs, {
      breakAll: textBreakAll
    }), label);
  }
  Label.displayName = "Label";
  var parseLabel = (label, viewBox, labelRef) => {
    if (!label) {
      return null;
    }
    var commonProps = {
      viewBox,
      labelRef
    };
    if (label === true) {
      return /* @__PURE__ */ React24.createElement(Label, _extends13({
        key: "label-implicit"
      }, commonProps));
    }
    if (isNumOrStr(label)) {
      return /* @__PURE__ */ React24.createElement(Label, _extends13({
        key: "label-implicit",
        value: label
      }, commonProps));
    }
    if (/* @__PURE__ */ (0, import_react31.isValidElement)(label)) {
      if (label.type === Label) {
        return /* @__PURE__ */ (0, import_react31.cloneElement)(label, _objectSpread24({
          key: "label-implicit"
        }, commonProps));
      }
      return /* @__PURE__ */ React24.createElement(Label, _extends13({
        key: "label-implicit",
        content: label
      }, commonProps));
    }
    if (isLabelContentAFunction(label)) {
      return /* @__PURE__ */ React24.createElement(Label, _extends13({
        key: "label-implicit",
        content: label
      }, commonProps));
    }
    if (label && typeof label === "object") {
      return /* @__PURE__ */ React24.createElement(Label, _extends13({}, label, {
        key: "label-implicit"
      }, commonProps));
    }
    return null;
  };
  function CartesianLabelFromLabelProp(_ref3) {
    var {
      label
    } = _ref3;
    var viewBox = useCartesianLabelContext();
    return parseLabel(label, viewBox) || null;
  }

  // node_modules/recharts/es6/component/LabelList.js
  var React25 = __toESM(require_react());
  var import_react32 = __toESM(require_react());
  var import_last = __toESM(require_last3());
  var _excluded9 = ["valueAccessor"];
  var _excluded23 = ["dataKey", "clockWise", "id", "textBreakAll"];
  function _extends14() {
    return _extends14 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends14.apply(null, arguments);
  }
  function _objectWithoutProperties9(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose9(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose9(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  var defaultAccessor = (entry) => Array.isArray(entry.value) ? (0, import_last.default)(entry.value) : entry.value;
  var CartesianLabelListContext = /* @__PURE__ */ (0, import_react32.createContext)(void 0);
  var CartesianLabelListContextProvider = CartesianLabelListContext.Provider;
  var PolarLabelListContext = /* @__PURE__ */ (0, import_react32.createContext)(void 0);
  var PolarLabelListContextProvider = PolarLabelListContext.Provider;
  function useCartesianLabelListContext() {
    return (0, import_react32.useContext)(CartesianLabelListContext);
  }
  function usePolarLabelListContext() {
    return (0, import_react32.useContext)(PolarLabelListContext);
  }
  function LabelList(_ref2) {
    var {
      valueAccessor = defaultAccessor
    } = _ref2, restProps = _objectWithoutProperties9(_ref2, _excluded9);
    var {
      dataKey,
      clockWise,
      id,
      textBreakAll
    } = restProps, others = _objectWithoutProperties9(restProps, _excluded23);
    var cartesianData = useCartesianLabelListContext();
    var polarData = usePolarLabelListContext();
    var data = cartesianData || polarData;
    if (!data || !data.length) {
      return null;
    }
    return /* @__PURE__ */ React25.createElement(Layer, {
      className: "recharts-label-list"
    }, data.map((entry, index) => {
      var _restProps$fill;
      var value = isNullish(dataKey) ? valueAccessor(entry, index) : getValueByDataKey(entry && entry.payload, dataKey);
      var idProps = isNullish(id) ? {} : {
        id: "".concat(id, "-").concat(index)
      };
      return /* @__PURE__ */ React25.createElement(Label, _extends14({}, filterProps(entry, true), others, idProps, {
        /*
         * Prefer to use the explicit fill from LabelList props.
         * Only in an absence of that, fall back to the fill of the entry.
         * The entry fill can be quite difficult to see especially in Bar, Pie, RadialBar in inside positions.
         * On the other hand it's quite convenient in Scatter, Line, or when the position is outside the Bar, Pie filled shapes.
         */
        fill: (_restProps$fill = restProps.fill) !== null && _restProps$fill !== void 0 ? _restProps$fill : entry.fill,
        parentViewBox: entry.parentViewBox,
        value,
        textBreakAll,
        viewBox: entry.viewBox,
        key: "label-".concat(index),
        index
      }));
    }));
  }
  LabelList.displayName = "LabelList";
  function LabelListFromLabelProp(_ref2) {
    var {
      label
    } = _ref2;
    if (!label) {
      return null;
    }
    if (label === true) {
      return /* @__PURE__ */ React25.createElement(LabelList, {
        key: "labelList-implicit"
      });
    }
    if (/* @__PURE__ */ React25.isValidElement(label) || isLabelContentAFunction(label)) {
      return /* @__PURE__ */ React25.createElement(LabelList, {
        key: "labelList-implicit",
        content: label
      });
    }
    if (typeof label === "object") {
      return /* @__PURE__ */ React25.createElement(LabelList, _extends14({
        key: "labelList-implicit"
      }, label, {
        type: String(label.type)
      }));
    }
    return null;
  }

  // node_modules/recharts/es6/state/polarAxisSlice.js
  var initialState5 = {
    radiusAxis: {},
    angleAxis: {}
  };
  var polarAxisSlice = createSlice({
    name: "polarAxis",
    initialState: initialState5,
    reducers: {
      addRadiusAxis(state, action) {
        state.radiusAxis[action.payload.id] = castDraft(action.payload);
      },
      removeRadiusAxis(state, action) {
        delete state.radiusAxis[action.payload.id];
      },
      addAngleAxis(state, action) {
        state.angleAxis[action.payload.id] = castDraft(action.payload);
      },
      removeAngleAxis(state, action) {
        delete state.angleAxis[action.payload.id];
      }
    }
  });
  var {
    addRadiusAxis,
    removeRadiusAxis,
    addAngleAxis,
    removeAngleAxis
  } = polarAxisSlice.actions;
  var polarAxisReducer = polarAxisSlice.reducer;

  // node_modules/recharts/es6/util/ActiveShapeUtils.js
  var React27 = __toESM(require_react());
  var import_react34 = __toESM(require_react());
  var import_isPlainObject = __toESM(require_isPlainObject2());

  // node_modules/recharts/es6/shape/Trapezoid.js
  var React26 = __toESM(require_react());
  var import_react33 = __toESM(require_react());
  function ownKeys25(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread25(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys25(Object(t), true).forEach(function(r3) {
        _defineProperty26(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys25(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty26(e, r2, t) {
    return (r2 = _toPropertyKey26(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey26(t) {
    var i = _toPrimitive26(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive26(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function _extends15() {
    return _extends15 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends15.apply(null, arguments);
  }
  var getTrapezoidPath = (x2, y2, upperWidth, lowerWidth, height) => {
    var widthGap = upperWidth - lowerWidth;
    var path2;
    path2 = "M ".concat(x2, ",").concat(y2);
    path2 += "L ".concat(x2 + upperWidth, ",").concat(y2);
    path2 += "L ".concat(x2 + upperWidth - widthGap / 2, ",").concat(y2 + height);
    path2 += "L ".concat(x2 + upperWidth - widthGap / 2 - lowerWidth, ",").concat(y2 + height);
    path2 += "L ".concat(x2, ",").concat(y2, " Z");
    return path2;
  };
  var defaultProps3 = {
    x: 0,
    y: 0,
    upperWidth: 0,
    lowerWidth: 0,
    height: 0,
    isUpdateAnimationActive: false,
    animationBegin: 0,
    animationDuration: 1500,
    animationEasing: "ease"
  };
  var Trapezoid = (outsideProps) => {
    var trapezoidProps = resolveDefaultProps(outsideProps, defaultProps3);
    var {
      x: x2,
      y: y2,
      upperWidth,
      lowerWidth,
      height,
      className
    } = trapezoidProps;
    var {
      animationEasing,
      animationDuration,
      animationBegin,
      isUpdateAnimationActive
    } = trapezoidProps;
    var pathRef = (0, import_react33.useRef)();
    var [totalLength, setTotalLength] = (0, import_react33.useState)(-1);
    var prevUpperWidthRef = (0, import_react33.useRef)(upperWidth);
    var prevLowerWidthRef = (0, import_react33.useRef)(lowerWidth);
    var prevHeightRef = (0, import_react33.useRef)(height);
    var prevXRef = (0, import_react33.useRef)(x2);
    var prevYRef = (0, import_react33.useRef)(y2);
    var animationId = useAnimationId(outsideProps, "trapezoid-");
    (0, import_react33.useEffect)(() => {
      if (pathRef.current && pathRef.current.getTotalLength) {
        try {
          var pathTotalLength = pathRef.current.getTotalLength();
          if (pathTotalLength) {
            setTotalLength(pathTotalLength);
          }
        } catch (_unused) {
        }
      }
    }, []);
    if (x2 !== +x2 || y2 !== +y2 || upperWidth !== +upperWidth || lowerWidth !== +lowerWidth || height !== +height || upperWidth === 0 && lowerWidth === 0 || height === 0) {
      return null;
    }
    var layerClass = clsx("recharts-trapezoid", className);
    if (!isUpdateAnimationActive) {
      return /* @__PURE__ */ React26.createElement("g", null, /* @__PURE__ */ React26.createElement("path", _extends15({}, filterProps(trapezoidProps, true), {
        className: layerClass,
        d: getTrapezoidPath(x2, y2, upperWidth, lowerWidth, height)
      })));
    }
    var prevUpperWidth = prevUpperWidthRef.current;
    var prevLowerWidth = prevLowerWidthRef.current;
    var prevHeight = prevHeightRef.current;
    var prevX = prevXRef.current;
    var prevY = prevYRef.current;
    var from2 = "0px ".concat(totalLength === -1 ? 1 : totalLength, "px");
    var to2 = "".concat(totalLength, "px 0px");
    var transition = getTransitionVal(["strokeDasharray"], animationDuration, animationEasing);
    return /* @__PURE__ */ React26.createElement(JavascriptAnimate, {
      animationId,
      key: animationId,
      canBegin: totalLength > 0,
      duration: animationDuration,
      easing: animationEasing,
      isActive: isUpdateAnimationActive,
      begin: animationBegin
    }, (t) => {
      var currUpperWidth = interpolate(prevUpperWidth, upperWidth, t);
      var currLowerWidth = interpolate(prevLowerWidth, lowerWidth, t);
      var currHeight = interpolate(prevHeight, height, t);
      var currX = interpolate(prevX, x2, t);
      var currY = interpolate(prevY, y2, t);
      if (pathRef.current) {
        prevUpperWidthRef.current = currUpperWidth;
        prevLowerWidthRef.current = currLowerWidth;
        prevHeightRef.current = currHeight;
        prevXRef.current = currX;
        prevYRef.current = currY;
      }
      var animationStyle = t > 0 ? {
        transition,
        strokeDasharray: to2
      } : {
        strokeDasharray: from2
      };
      return /* @__PURE__ */ React26.createElement("path", _extends15({}, filterProps(trapezoidProps, true), {
        className: layerClass,
        d: getTrapezoidPath(currX, currY, currUpperWidth, currLowerWidth, currHeight),
        ref: pathRef,
        style: _objectSpread25(_objectSpread25({}, animationStyle), trapezoidProps.style)
      }));
    });
  };

  // node_modules/recharts/es6/util/ActiveShapeUtils.js
  var _excluded10 = ["option", "shapeType", "propTransformer", "activeClassName", "isActive"];
  function _objectWithoutProperties10(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose10(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose10(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  function ownKeys26(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread26(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys26(Object(t), true).forEach(function(r3) {
        _defineProperty27(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys26(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty27(e, r2, t) {
    return (r2 = _toPropertyKey27(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey27(t) {
    var i = _toPrimitive27(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive27(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function defaultPropTransformer(option, props) {
    return _objectSpread26(_objectSpread26({}, props), option);
  }
  function isSymbolsProps(shapeType, _elementProps) {
    return shapeType === "symbols";
  }
  function ShapeSelector(_ref2) {
    var {
      shapeType,
      elementProps
    } = _ref2;
    switch (shapeType) {
      case "rectangle":
        return /* @__PURE__ */ React27.createElement(Rectangle, elementProps);
      case "trapezoid":
        return /* @__PURE__ */ React27.createElement(Trapezoid, elementProps);
      case "sector":
        return /* @__PURE__ */ React27.createElement(Sector, elementProps);
      case "symbols":
        if (isSymbolsProps(shapeType, elementProps)) {
          return /* @__PURE__ */ React27.createElement(Symbols, elementProps);
        }
        break;
      default:
        return null;
    }
  }
  function getPropsFromShapeOption(option) {
    if (/* @__PURE__ */ (0, import_react34.isValidElement)(option)) {
      return option.props;
    }
    return option;
  }
  function Shape(_ref2) {
    var {
      option,
      shapeType,
      propTransformer = defaultPropTransformer,
      activeClassName = "recharts-active-shape",
      isActive
    } = _ref2, props = _objectWithoutProperties10(_ref2, _excluded10);
    var shape;
    if (/* @__PURE__ */ (0, import_react34.isValidElement)(option)) {
      shape = /* @__PURE__ */ (0, import_react34.cloneElement)(option, _objectSpread26(_objectSpread26({}, props), getPropsFromShapeOption(option)));
    } else if (typeof option === "function") {
      shape = option(props);
    } else if ((0, import_isPlainObject.default)(option) && typeof option !== "boolean") {
      var nextProps = propTransformer(option, props);
      shape = /* @__PURE__ */ React27.createElement(ShapeSelector, {
        shapeType,
        elementProps: nextProps
      });
    } else {
      var elementProps = props;
      shape = /* @__PURE__ */ React27.createElement(ShapeSelector, {
        shapeType,
        elementProps
      });
    }
    if (isActive) {
      return /* @__PURE__ */ React27.createElement(Layer, {
        className: activeClassName
      }, shape);
    }
    return shape;
  }

  // node_modules/recharts/es6/context/tooltipContext.js
  var useMouseEnterItemDispatch = (onMouseEnterFromProps, dataKey) => {
    var dispatch = useAppDispatch();
    return (data, index) => (event) => {
      onMouseEnterFromProps === null || onMouseEnterFromProps === void 0 || onMouseEnterFromProps(data, index, event);
      dispatch(setActiveMouseOverItemIndex({
        activeIndex: String(index),
        activeDataKey: dataKey,
        activeCoordinate: data.tooltipPosition
      }));
    };
  };
  var useMouseLeaveItemDispatch = (onMouseLeaveFromProps) => {
    var dispatch = useAppDispatch();
    return (data, index) => (event) => {
      onMouseLeaveFromProps === null || onMouseLeaveFromProps === void 0 || onMouseLeaveFromProps(data, index, event);
      dispatch(mouseLeaveItem());
    };
  };
  var useMouseClickItemDispatch = (onMouseClickFromProps, dataKey) => {
    var dispatch = useAppDispatch();
    return (data, index) => (event) => {
      onMouseClickFromProps === null || onMouseClickFromProps === void 0 || onMouseClickFromProps(data, index, event);
      dispatch(setActiveClickItemIndex({
        activeIndex: String(index),
        activeDataKey: dataKey,
        activeCoordinate: data.tooltipPosition
      }));
    };
  };

  // node_modules/recharts/es6/state/SetTooltipEntrySettings.js
  var import_react35 = __toESM(require_react());
  function SetTooltipEntrySettings(_ref2) {
    var {
      fn,
      args
    } = _ref2;
    var dispatch = useAppDispatch();
    var isPanorama = useIsPanorama();
    (0, import_react35.useEffect)(() => {
      if (isPanorama) {
        return void 0;
      }
      var tooltipEntrySettings = fn(args);
      dispatch(addTooltipEntrySettings(tooltipEntrySettings));
      return () => {
        dispatch(removeTooltipEntrySettings(tooltipEntrySettings));
      };
    }, [fn, args, dispatch, isPanorama]);
    return null;
  }

  // node_modules/recharts/es6/state/SetLegendPayload.js
  var import_react36 = __toESM(require_react());
  var noop5 = () => {
  };
  function SetLegendPayload(_ref2) {
    var {
      legendPayload
    } = _ref2;
    var dispatch = useAppDispatch();
    var isPanorama = useIsPanorama();
    (0, import_react36.useEffect)(() => {
      if (isPanorama) {
        return noop5;
      }
      dispatch(addLegendPayload(legendPayload));
      return () => {
        dispatch(removeLegendPayload(legendPayload));
      };
    }, [dispatch, isPanorama, legendPayload]);
    return null;
  }

  // node_modules/recharts/es6/context/RegisterGraphicalItemId.js
  var React29 = __toESM(require_react());
  var import_react37 = __toESM(require_react());

  // node_modules/recharts/es6/util/useId.js
  var React28 = __toESM(require_react());
  var _ref;
  var useIdFallback = () => {
    var [id] = React28.useState(() => uniqueId("uid-"));
    return id;
  };
  var useId = (_ref = React28["useId".toString()]) !== null && _ref !== void 0 ? _ref : useIdFallback;

  // node_modules/recharts/es6/util/useUniqueId.js
  function useUniqueId(prefix2, customId) {
    var generatedId = useId();
    if (customId) {
      return customId;
    }
    return prefix2 ? "".concat(prefix2, "-").concat(generatedId) : generatedId;
  }

  // node_modules/recharts/es6/context/RegisterGraphicalItemId.js
  var GraphicalItemIdContext = /* @__PURE__ */ (0, import_react37.createContext)(void 0);
  var RegisterGraphicalItemId = (_ref2) => {
    var {
      id,
      type,
      children
    } = _ref2;
    var resolvedId = useUniqueId("recharts-".concat(type), id);
    return /* @__PURE__ */ React29.createElement(GraphicalItemIdContext.Provider, {
      value: resolvedId
    }, children(resolvedId));
  };

  // node_modules/recharts/es6/state/SetGraphicalItem.js
  var import_react38 = __toESM(require_react());

  // node_modules/recharts/es6/state/graphicalItemsSlice.js
  var initialState6 = {
    cartesianItems: [],
    polarItems: []
  };
  var graphicalItemsSlice = createSlice({
    name: "graphicalItems",
    initialState: initialState6,
    reducers: {
      addCartesianGraphicalItem(state, action) {
        state.cartesianItems.push(castDraft(action.payload));
      },
      replaceCartesianGraphicalItem(state, action) {
        var {
          prev,
          next
        } = action.payload;
        var index = current(state).cartesianItems.indexOf(castDraft(prev));
        if (index > -1) {
          state.cartesianItems[index] = castDraft(next);
        }
      },
      removeCartesianGraphicalItem(state, action) {
        var index = current(state).cartesianItems.indexOf(castDraft(action.payload));
        if (index > -1) {
          state.cartesianItems.splice(index, 1);
        }
      },
      addPolarGraphicalItem(state, action) {
        state.polarItems.push(castDraft(action.payload));
      },
      removePolarGraphicalItem(state, action) {
        var index = current(state).polarItems.indexOf(castDraft(action.payload));
        if (index > -1) {
          state.polarItems.splice(index, 1);
        }
      }
    }
  });
  var {
    addCartesianGraphicalItem,
    replaceCartesianGraphicalItem,
    removeCartesianGraphicalItem,
    addPolarGraphicalItem,
    removePolarGraphicalItem
  } = graphicalItemsSlice.actions;
  var graphicalItemsReducer = graphicalItemsSlice.reducer;

  // node_modules/recharts/es6/state/SetGraphicalItem.js
  function SetCartesianGraphicalItem(props) {
    var dispatch = useAppDispatch();
    var prevPropsRef = (0, import_react38.useRef)(null);
    (0, import_react38.useEffect)(() => {
      if (prevPropsRef.current === null) {
        dispatch(addCartesianGraphicalItem(props));
      } else if (prevPropsRef.current !== props) {
        dispatch(replaceCartesianGraphicalItem({
          prev: prevPropsRef.current,
          next: props
        }));
      }
      prevPropsRef.current = props;
    }, [dispatch, props]);
    (0, import_react38.useEffect)(() => {
      return () => {
        if (prevPropsRef.current) {
          dispatch(removeCartesianGraphicalItem(prevPropsRef.current));
          prevPropsRef.current = null;
        }
      };
    }, [dispatch]);
    return null;
  }

  // node_modules/recharts/es6/state/cartesianAxisSlice.js
  function ownKeys27(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread27(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys27(Object(t), true).forEach(function(r3) {
        _defineProperty28(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys27(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty28(e, r2, t) {
    return (r2 = _toPropertyKey28(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey28(t) {
    var i = _toPrimitive28(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive28(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var initialState7 = {
    xAxis: {},
    yAxis: {},
    zAxis: {}
  };
  var cartesianAxisSlice = createSlice({
    name: "cartesianAxis",
    initialState: initialState7,
    reducers: {
      addXAxis(state, action) {
        state.xAxis[action.payload.id] = castDraft(action.payload);
      },
      removeXAxis(state, action) {
        delete state.xAxis[action.payload.id];
      },
      addYAxis(state, action) {
        state.yAxis[action.payload.id] = castDraft(action.payload);
      },
      removeYAxis(state, action) {
        delete state.yAxis[action.payload.id];
      },
      addZAxis(state, action) {
        state.zAxis[action.payload.id] = castDraft(action.payload);
      },
      removeZAxis(state, action) {
        delete state.zAxis[action.payload.id];
      },
      updateYAxisWidth(state, action) {
        var {
          id,
          width
        } = action.payload;
        if (state.yAxis[id]) {
          state.yAxis[id] = _objectSpread27(_objectSpread27({}, state.yAxis[id]), {}, {
            width
          });
        }
      }
    }
  });
  var {
    addXAxis,
    removeXAxis,
    addYAxis,
    removeYAxis,
    addZAxis,
    removeZAxis,
    updateYAxisWidth
  } = cartesianAxisSlice.actions;
  var cartesianAxisReducer = cartesianAxisSlice.reducer;

  // node_modules/recharts/es6/state/selectors/selectChartOffset.js
  var selectChartOffset = createSelector([selectChartOffsetInternal], (offsetInternal) => {
    if (!offsetInternal) {
      return void 0;
    }
    return {
      top: offsetInternal.top,
      bottom: offsetInternal.bottom,
      left: offsetInternal.left,
      right: offsetInternal.right
    };
  });

  // node_modules/recharts/es6/state/selectors/selectPlotArea.js
  var selectPlotArea = createSelector([selectChartOffset, selectChartWidth, selectChartHeight], (offset, chartWidth, chartHeight) => {
    if (!offset || chartWidth == null || chartHeight == null) {
      return void 0;
    }
    return {
      x: offset.left,
      y: offset.top,
      width: Math.max(0, chartWidth - offset.left - offset.right),
      height: Math.max(0, chartHeight - offset.top - offset.bottom)
    };
  });

  // node_modules/recharts/es6/hooks.js
  var usePlotArea = () => {
    return useAppSelector(selectPlotArea);
  };

  // node_modules/recharts/es6/cartesian/Bar.js
  var React33 = __toESM(require_react());
  var import_react40 = __toESM(require_react());

  // node_modules/recharts/es6/util/BarUtils.js
  var React30 = __toESM(require_react());

  // node_modules/tiny-invariant/dist/esm/tiny-invariant.js
  var isProduction = true;
  var prefix = "Invariant failed";
  function invariant(condition, message) {
    if (condition) {
      return;
    }
    if (isProduction) {
      throw new Error(prefix);
    }
    var provided = typeof message === "function" ? message() : message;
    var value = provided ? "".concat(prefix, ": ").concat(provided) : prefix;
    throw new Error(value);
  }

  // node_modules/recharts/es6/util/BarUtils.js
  var _excluded11 = ["x", "y"];
  function _extends16() {
    return _extends16 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends16.apply(null, arguments);
  }
  function ownKeys28(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread28(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys28(Object(t), true).forEach(function(r3) {
        _defineProperty29(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys28(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty29(e, r2, t) {
    return (r2 = _toPropertyKey29(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey29(t) {
    var i = _toPrimitive29(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive29(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function _objectWithoutProperties11(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose11(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose11(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  function typeguardBarRectangleProps(_ref2, props) {
    var {
      x: xProp,
      y: yProp
    } = _ref2, option = _objectWithoutProperties11(_ref2, _excluded11);
    var xValue = "".concat(xProp);
    var x2 = parseInt(xValue, 10);
    var yValue = "".concat(yProp);
    var y2 = parseInt(yValue, 10);
    var heightValue = "".concat(props.height || option.height);
    var height = parseInt(heightValue, 10);
    var widthValue = "".concat(props.width || option.width);
    var width = parseInt(widthValue, 10);
    return _objectSpread28(_objectSpread28(_objectSpread28(_objectSpread28(_objectSpread28({}, props), option), x2 ? {
      x: x2
    } : {}), y2 ? {
      y: y2
    } : {}), {}, {
      height,
      width,
      name: props.name,
      radius: props.radius
    });
  }
  function BarRectangle(props) {
    return /* @__PURE__ */ React30.createElement(Shape, _extends16({
      shapeType: "rectangle",
      propTransformer: typeguardBarRectangleProps,
      activeClassName: "recharts-active-bar"
    }, props));
  }
  var minPointSizeCallback = function minPointSizeCallback2(minPointSize) {
    var defaultValue = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    return (value, index) => {
      if (isNumber(minPointSize)) return minPointSize;
      var isValueNumberOrNil = isNumber(value) || isNullish(value);
      if (isValueNumberOrNil) {
        return minPointSize(value, index);
      }
      !isValueNumberOrNil ? false ? invariant(false, "minPointSize callback function received a value with type of ".concat(typeof value, ". Currently only numbers or null/undefined are supported.")) : invariant(false) : void 0;
      return defaultValue;
    };
  };

  // node_modules/recharts/es6/context/ErrorBarContext.js
  var React31 = __toESM(require_react());
  var import_react39 = __toESM(require_react());

  // node_modules/recharts/es6/state/errorBarSlice.js
  var initialState8 = {};
  var errorBarSlice = createSlice({
    name: "errorBars",
    initialState: initialState8,
    reducers: {
      addErrorBar: (state, action) => {
        var {
          itemId,
          errorBar
        } = action.payload;
        if (!state[itemId]) {
          state[itemId] = [];
        }
        state[itemId].push(errorBar);
      },
      replaceErrorBar: (state, action) => {
        var {
          itemId,
          prev,
          next
        } = action.payload;
        if (state[itemId]) {
          state[itemId] = state[itemId].map((e) => e.dataKey === prev.dataKey && e.direction === prev.direction ? next : e);
        }
      },
      removeErrorBar: (state, action) => {
        var {
          itemId,
          errorBar
        } = action.payload;
        if (state[itemId]) {
          state[itemId] = state[itemId].filter((e) => e.dataKey !== errorBar.dataKey || e.direction !== errorBar.direction);
        }
      }
    }
  });
  var {
    addErrorBar,
    replaceErrorBar,
    removeErrorBar
  } = errorBarSlice.actions;
  var errorBarReducer = errorBarSlice.reducer;

  // node_modules/recharts/es6/context/ErrorBarContext.js
  var _excluded12 = ["children"];
  function _objectWithoutProperties12(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose12(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose12(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  var initialContextState = {
    data: [],
    xAxisId: "xAxis-0",
    yAxisId: "yAxis-0",
    dataPointFormatter: () => ({
      x: 0,
      y: 0,
      value: 0
    }),
    errorBarOffset: 0
  };
  var ErrorBarContext = /* @__PURE__ */ (0, import_react39.createContext)(initialContextState);
  function SetErrorBarContext(props) {
    var {
      children
    } = props, rest = _objectWithoutProperties12(props, _excluded12);
    return /* @__PURE__ */ React31.createElement(ErrorBarContext.Provider, {
      value: rest
    }, children);
  }

  // node_modules/recharts/es6/cartesian/GraphicalItemClipPath.js
  var React32 = __toESM(require_react());
  function useNeedsClip(xAxisId, yAxisId) {
    var _xAxis$allowDataOverf, _yAxis$allowDataOverf;
    var xAxis = useAppSelector((state) => selectXAxisSettings(state, xAxisId));
    var yAxis = useAppSelector((state) => selectYAxisSettings(state, yAxisId));
    var needClipX = (_xAxis$allowDataOverf = xAxis === null || xAxis === void 0 ? void 0 : xAxis.allowDataOverflow) !== null && _xAxis$allowDataOverf !== void 0 ? _xAxis$allowDataOverf : implicitXAxis.allowDataOverflow;
    var needClipY = (_yAxis$allowDataOverf = yAxis === null || yAxis === void 0 ? void 0 : yAxis.allowDataOverflow) !== null && _yAxis$allowDataOverf !== void 0 ? _yAxis$allowDataOverf : implicitYAxis.allowDataOverflow;
    var needClip = needClipX || needClipY;
    return {
      needClip,
      needClipX,
      needClipY
    };
  }
  function GraphicalItemClipPath(_ref2) {
    var {
      xAxisId,
      yAxisId,
      clipPathId
    } = _ref2;
    var plotArea = usePlotArea();
    var {
      needClipX,
      needClipY,
      needClip
    } = useNeedsClip(xAxisId, yAxisId);
    if (!needClip) {
      return null;
    }
    var {
      x: x2,
      y: y2,
      width,
      height
    } = plotArea;
    return /* @__PURE__ */ React32.createElement("clipPath", {
      id: "clipPath-".concat(clipPathId)
    }, /* @__PURE__ */ React32.createElement("rect", {
      x: needClipX ? x2 : x2 - width / 2,
      y: needClipY ? y2 : y2 - height / 2,
      width: needClipX ? width : width * 2,
      height: needClipY ? height : height * 2
    }));
  }

  // node_modules/recharts/es6/cartesian/Bar.js
  var _excluded13 = ["onMouseEnter", "onMouseLeave", "onClick"];
  var _excluded24 = ["value", "background", "tooltipPosition"];
  var _excluded32 = ["id"];
  var _excluded42 = ["onMouseEnter", "onClick", "onMouseLeave"];
  function _extends17() {
    return _extends17 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends17.apply(null, arguments);
  }
  function ownKeys29(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread29(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys29(Object(t), true).forEach(function(r3) {
        _defineProperty30(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys29(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty30(e, r2, t) {
    return (r2 = _toPropertyKey30(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey30(t) {
    var i = _toPrimitive30(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive30(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function _objectWithoutProperties13(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose13(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose13(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  var computeLegendPayloadFromBarData = (props) => {
    var {
      dataKey,
      name,
      fill,
      legendType,
      hide
    } = props;
    return [{
      inactive: hide,
      dataKey,
      type: legendType,
      color: fill,
      value: getTooltipNameProp(name, dataKey),
      payload: props
    }];
  };
  function getTooltipEntrySettings(props) {
    var {
      dataKey,
      stroke,
      strokeWidth,
      fill,
      name,
      hide,
      unit: unit2
    } = props;
    return {
      dataDefinedOnItem: void 0,
      positions: void 0,
      settings: {
        stroke,
        strokeWidth,
        fill,
        dataKey,
        nameKey: void 0,
        name: getTooltipNameProp(name, dataKey),
        hide,
        type: props.tooltipType,
        color: props.fill,
        unit: unit2
      }
    };
  }
  function BarBackground(props) {
    var activeIndex = useAppSelector(selectActiveTooltipIndex);
    var {
      data,
      dataKey,
      background: backgroundFromProps,
      allOtherBarProps
    } = props;
    var {
      onMouseEnter: onMouseEnterFromProps,
      onMouseLeave: onMouseLeaveFromProps,
      onClick: onItemClickFromProps
    } = allOtherBarProps, restOfAllOtherProps = _objectWithoutProperties13(allOtherBarProps, _excluded13);
    var onMouseEnterFromContext = useMouseEnterItemDispatch(onMouseEnterFromProps, dataKey);
    var onMouseLeaveFromContext = useMouseLeaveItemDispatch(onMouseLeaveFromProps);
    var onClickFromContext = useMouseClickItemDispatch(onItemClickFromProps, dataKey);
    if (!backgroundFromProps || data == null) {
      return null;
    }
    var backgroundProps = filterProps(backgroundFromProps, false);
    return /* @__PURE__ */ React33.createElement(React33.Fragment, null, data.map((entry, i) => {
      var {
        value,
        background: backgroundFromDataEntry,
        tooltipPosition
      } = entry, rest = _objectWithoutProperties13(entry, _excluded24);
      if (!backgroundFromDataEntry) {
        return null;
      }
      var onMouseEnter = onMouseEnterFromContext(entry, i);
      var onMouseLeave = onMouseLeaveFromContext(entry, i);
      var onClick = onClickFromContext(entry, i);
      var barRectangleProps = _objectSpread29(_objectSpread29(_objectSpread29(_objectSpread29(_objectSpread29({
        option: backgroundFromProps,
        isActive: String(i) === activeIndex
      }, rest), {}, {
        // @ts-expect-error BarRectangle props do not accept `fill` property.
        fill: "#eee"
      }, backgroundFromDataEntry), backgroundProps), adaptEventsOfChild(restOfAllOtherProps, entry, i)), {}, {
        onMouseEnter,
        onMouseLeave,
        onClick,
        dataKey,
        index: i,
        className: "recharts-bar-background-rectangle"
      });
      return /* @__PURE__ */ React33.createElement(BarRectangle, _extends17({
        key: "background-bar-".concat(i)
      }, barRectangleProps));
    }));
  }
  function BarLabelListProvider(_ref2) {
    var {
      showLabels,
      children,
      rects
    } = _ref2;
    var labelListEntries = rects === null || rects === void 0 ? void 0 : rects.map((entry) => {
      var viewBox = {
        x: entry.x,
        y: entry.y,
        width: entry.width,
        height: entry.height
      };
      return _objectSpread29(_objectSpread29({}, viewBox), {}, {
        value: entry.value,
        payload: entry.payload,
        parentViewBox: entry.parentViewBox,
        viewBox,
        fill: entry.fill
      });
    });
    return /* @__PURE__ */ React33.createElement(CartesianLabelListContextProvider, {
      value: showLabels ? labelListEntries : void 0
    }, children);
  }
  function BarRectangleWithActiveState(props) {
    var {
      shape,
      activeBar,
      baseProps,
      entry,
      index,
      dataKey
    } = props;
    var activeIndex = useAppSelector(selectActiveTooltipIndex);
    var activeDataKey = useAppSelector(selectActiveTooltipDataKey);
    var isActive = activeBar && String(index) === activeIndex && (activeDataKey == null || dataKey === activeDataKey);
    var option = isActive ? activeBar : shape;
    return /* @__PURE__ */ React33.createElement(BarRectangle, _extends17({}, baseProps, entry, {
      isActive,
      option,
      index,
      dataKey
    }));
  }
  function BarRectangleNeverActive(props) {
    var {
      shape,
      baseProps,
      entry,
      index,
      dataKey
    } = props;
    return /* @__PURE__ */ React33.createElement(BarRectangle, _extends17({}, baseProps, entry, {
      isActive: false,
      option: shape,
      index,
      dataKey
    }));
  }
  function BarRectangles(_ref2) {
    var {
      data,
      props
    } = _ref2;
    var _svgPropertiesNoEvent = svgPropertiesNoEvents(props), {
      id
    } = _svgPropertiesNoEvent, baseProps = _objectWithoutProperties13(_svgPropertiesNoEvent, _excluded32);
    var {
      shape,
      dataKey,
      activeBar
    } = props;
    var {
      onMouseEnter: onMouseEnterFromProps,
      onClick: onItemClickFromProps,
      onMouseLeave: onMouseLeaveFromProps
    } = props, restOfAllOtherProps = _objectWithoutProperties13(props, _excluded42);
    var onMouseEnterFromContext = useMouseEnterItemDispatch(onMouseEnterFromProps, dataKey);
    var onMouseLeaveFromContext = useMouseLeaveItemDispatch(onMouseLeaveFromProps);
    var onClickFromContext = useMouseClickItemDispatch(onItemClickFromProps, dataKey);
    if (!data) {
      return null;
    }
    return /* @__PURE__ */ React33.createElement(React33.Fragment, null, data.map((entry, i) => {
      return /* @__PURE__ */ React33.createElement(Layer, _extends17({
        className: "recharts-bar-rectangle"
      }, adaptEventsOfChild(restOfAllOtherProps, entry, i), {
        // @ts-expect-error BarRectangleItem type definition says it's missing properties, but I can see them present in debugger!
        onMouseEnter: onMouseEnterFromContext(entry, i),
        onMouseLeave: onMouseLeaveFromContext(entry, i),
        onClick: onClickFromContext(entry, i),
        key: "rectangle-".concat(entry === null || entry === void 0 ? void 0 : entry.x, "-").concat(entry === null || entry === void 0 ? void 0 : entry.y, "-").concat(entry === null || entry === void 0 ? void 0 : entry.value, "-").concat(i)
      }), activeBar ? /* @__PURE__ */ React33.createElement(BarRectangleWithActiveState, {
        shape,
        activeBar,
        baseProps,
        entry,
        index: i,
        dataKey
      }) : (
        /*
         * If the `activeBar` prop is falsy, then let's call the variant without hooks.
         * Using the `selectActiveTooltipIndex` selector is usually fast
         * but in charts with large-ish amount of data even the few nanoseconds add up to a noticeable jank.
         * If the activeBar is false then we don't need to know which index is active - because we won't use it anyway.
         * So let's just skip the hooks altogether. That way, React can skip rendering the component,
         * and can skip the tree reconciliation for its children too.
         * Because we can't call hooks conditionally, we need to have a separate component for that.
         */
        /* @__PURE__ */ React33.createElement(BarRectangleNeverActive, {
          shape,
          baseProps,
          entry,
          index: i,
          dataKey
        })
      ));
    }));
  }
  function RectanglesWithAnimation(_ref3) {
    var {
      props,
      previousRectanglesRef
    } = _ref3;
    var {
      data,
      layout,
      isAnimationActive,
      animationBegin,
      animationDuration,
      animationEasing,
      onAnimationEnd,
      onAnimationStart
    } = props;
    var prevData = previousRectanglesRef.current;
    var animationId = useAnimationId(props, "recharts-bar-");
    var [isAnimating, setIsAnimating] = (0, import_react40.useState)(false);
    var showLabels = !isAnimating;
    var handleAnimationEnd = (0, import_react40.useCallback)(() => {
      if (typeof onAnimationEnd === "function") {
        onAnimationEnd();
      }
      setIsAnimating(false);
    }, [onAnimationEnd]);
    var handleAnimationStart = (0, import_react40.useCallback)(() => {
      if (typeof onAnimationStart === "function") {
        onAnimationStart();
      }
      setIsAnimating(true);
    }, [onAnimationStart]);
    return /* @__PURE__ */ React33.createElement(BarLabelListProvider, {
      showLabels,
      rects: data
    }, /* @__PURE__ */ React33.createElement(JavascriptAnimate, {
      animationId,
      begin: animationBegin,
      duration: animationDuration,
      isActive: isAnimationActive,
      easing: animationEasing,
      onAnimationEnd: handleAnimationEnd,
      onAnimationStart: handleAnimationStart,
      key: animationId
    }, (t) => {
      var stepData = t === 1 ? data : data === null || data === void 0 ? void 0 : data.map((entry, index) => {
        var prev = prevData && prevData[index];
        if (prev) {
          return _objectSpread29(_objectSpread29({}, entry), {}, {
            x: interpolate(prev.x, entry.x, t),
            y: interpolate(prev.y, entry.y, t),
            width: interpolate(prev.width, entry.width, t),
            height: interpolate(prev.height, entry.height, t)
          });
        }
        if (layout === "horizontal") {
          var h = interpolate(0, entry.height, t);
          return _objectSpread29(_objectSpread29({}, entry), {}, {
            y: entry.y + entry.height - h,
            height: h
          });
        }
        var w = interpolate(0, entry.width, t);
        return _objectSpread29(_objectSpread29({}, entry), {}, {
          width: w
        });
      });
      if (t > 0) {
        previousRectanglesRef.current = stepData !== null && stepData !== void 0 ? stepData : null;
      }
      if (stepData == null) {
        return null;
      }
      return /* @__PURE__ */ React33.createElement(Layer, null, /* @__PURE__ */ React33.createElement(BarRectangles, {
        props,
        data: stepData
      }));
    }), /* @__PURE__ */ React33.createElement(LabelListFromLabelProp, {
      label: props.label
    }), props.children);
  }
  function RenderRectangles(props) {
    var previousRectanglesRef = (0, import_react40.useRef)(null);
    return /* @__PURE__ */ React33.createElement(RectanglesWithAnimation, {
      previousRectanglesRef,
      props
    });
  }
  var defaultMinPointSize = 0;
  var errorBarDataPointFormatter = (dataPoint, dataKey) => {
    var value = Array.isArray(dataPoint.value) ? dataPoint.value[1] : dataPoint.value;
    return {
      x: dataPoint.x,
      y: dataPoint.y,
      value,
      // @ts-expect-error getValueByDataKey does not validate the output type
      errorVal: getValueByDataKey(dataPoint, dataKey)
    };
  };
  var BarWithState = class extends import_react40.PureComponent {
    render() {
      var {
        hide,
        data,
        dataKey,
        className,
        xAxisId,
        yAxisId,
        needClip,
        background,
        id
      } = this.props;
      if (hide || data == null) {
        return null;
      }
      var layerClass = clsx("recharts-bar", className);
      var clipPathId = id;
      return /* @__PURE__ */ React33.createElement(Layer, {
        className: layerClass,
        id
      }, needClip && /* @__PURE__ */ React33.createElement("defs", null, /* @__PURE__ */ React33.createElement(GraphicalItemClipPath, {
        clipPathId,
        xAxisId,
        yAxisId
      })), /* @__PURE__ */ React33.createElement(Layer, {
        className: "recharts-bar-rectangles",
        clipPath: needClip ? "url(#clipPath-".concat(clipPathId, ")") : void 0
      }, /* @__PURE__ */ React33.createElement(BarBackground, {
        data,
        dataKey,
        background,
        allOtherBarProps: this.props
      }), /* @__PURE__ */ React33.createElement(RenderRectangles, this.props)));
    }
  };
  var defaultBarProps = {
    activeBar: false,
    animationBegin: 0,
    animationDuration: 400,
    animationEasing: "ease",
    hide: false,
    isAnimationActive: !Global.isSsr,
    legendType: "rect",
    minPointSize: defaultMinPointSize,
    xAxisId: 0,
    yAxisId: 0
  };
  function BarImpl(props) {
    var {
      xAxisId,
      yAxisId,
      hide,
      legendType,
      minPointSize,
      activeBar,
      animationBegin,
      animationDuration,
      animationEasing,
      isAnimationActive
    } = props;
    var {
      needClip
    } = useNeedsClip(xAxisId, yAxisId);
    var layout = useChartLayout();
    var isPanorama = useIsPanorama();
    var cells = findAllByType(props.children, Cell);
    var rects = useAppSelector((state) => selectBarRectangles(state, xAxisId, yAxisId, isPanorama, props.id, cells));
    if (layout !== "vertical" && layout !== "horizontal") {
      return null;
    }
    var errorBarOffset;
    var firstDataPoint = rects === null || rects === void 0 ? void 0 : rects[0];
    if (firstDataPoint == null || firstDataPoint.height == null || firstDataPoint.width == null) {
      errorBarOffset = 0;
    } else {
      errorBarOffset = layout === "vertical" ? firstDataPoint.height / 2 : firstDataPoint.width / 2;
    }
    return /* @__PURE__ */ React33.createElement(SetErrorBarContext, {
      xAxisId,
      yAxisId,
      data: rects,
      dataPointFormatter: errorBarDataPointFormatter,
      errorBarOffset
    }, /* @__PURE__ */ React33.createElement(BarWithState, _extends17({}, props, {
      layout,
      needClip,
      data: rects,
      xAxisId,
      yAxisId,
      hide,
      legendType,
      minPointSize,
      activeBar,
      animationBegin,
      animationDuration,
      animationEasing,
      isAnimationActive
    })));
  }
  function computeBarRectangles(_ref4) {
    var {
      layout,
      barSettings: {
        dataKey,
        minPointSize: minPointSizeProp
      },
      pos,
      bandSize,
      xAxis,
      yAxis,
      xAxisTicks,
      yAxisTicks,
      stackedData,
      displayedData,
      offset,
      cells,
      parentViewBox
    } = _ref4;
    var numericAxis = layout === "horizontal" ? yAxis : xAxis;
    var stackedDomain = stackedData ? numericAxis.scale.domain() : null;
    var baseValue = getBaseValueOfBar({
      numericAxis
    });
    return displayedData.map((entry, index) => {
      var value, x2, y2, width, height, background;
      if (stackedData) {
        value = truncateByDomain(stackedData[index], stackedDomain);
      } else {
        value = getValueByDataKey(entry, dataKey);
        if (!Array.isArray(value)) {
          value = [baseValue, value];
        }
      }
      var minPointSize = minPointSizeCallback(minPointSizeProp, defaultMinPointSize)(value[1], index);
      if (layout === "horizontal") {
        var _ref5;
        var [baseValueScale, currentValueScale] = [yAxis.scale(value[0]), yAxis.scale(value[1])];
        x2 = getCateCoordinateOfBar({
          axis: xAxis,
          ticks: xAxisTicks,
          bandSize,
          offset: pos.offset,
          entry,
          index
        });
        y2 = (_ref5 = currentValueScale !== null && currentValueScale !== void 0 ? currentValueScale : baseValueScale) !== null && _ref5 !== void 0 ? _ref5 : void 0;
        width = pos.size;
        var computedHeight = baseValueScale - currentValueScale;
        height = isNan(computedHeight) ? 0 : computedHeight;
        background = {
          x: x2,
          y: offset.top,
          width,
          height: offset.height
        };
        if (Math.abs(minPointSize) > 0 && Math.abs(height) < Math.abs(minPointSize)) {
          var delta = mathSign(height || minPointSize) * (Math.abs(minPointSize) - Math.abs(height));
          y2 -= delta;
          height += delta;
        }
      } else {
        var [_baseValueScale, _currentValueScale] = [xAxis.scale(value[0]), xAxis.scale(value[1])];
        x2 = _baseValueScale;
        y2 = getCateCoordinateOfBar({
          axis: yAxis,
          ticks: yAxisTicks,
          bandSize,
          offset: pos.offset,
          entry,
          index
        });
        width = _currentValueScale - _baseValueScale;
        height = pos.size;
        background = {
          x: offset.left,
          y: y2,
          width: offset.width,
          height
        };
        if (Math.abs(minPointSize) > 0 && Math.abs(width) < Math.abs(minPointSize)) {
          var _delta = mathSign(width || minPointSize) * (Math.abs(minPointSize) - Math.abs(width));
          width += _delta;
        }
      }
      if (x2 == null || y2 == null || width == null || height == null) {
        return null;
      }
      var barRectangleItem = _objectSpread29(_objectSpread29({}, entry), {}, {
        x: x2,
        y: y2,
        width,
        height,
        value: stackedData ? value : value[1],
        payload: entry,
        background,
        tooltipPosition: {
          x: x2 + width / 2,
          y: y2 + height / 2
        },
        parentViewBox
      }, cells && cells[index] && cells[index].props);
      return barRectangleItem;
    }).filter(Boolean);
  }
  function Bar(outsideProps) {
    var props = resolveDefaultProps(outsideProps, defaultBarProps);
    var isPanorama = useIsPanorama();
    return /* @__PURE__ */ React33.createElement(RegisterGraphicalItemId, {
      id: props.id,
      type: "bar"
    }, (id) => /* @__PURE__ */ React33.createElement(React33.Fragment, null, /* @__PURE__ */ React33.createElement(SetLegendPayload, {
      legendPayload: computeLegendPayloadFromBarData(props)
    }), /* @__PURE__ */ React33.createElement(SetTooltipEntrySettings, {
      fn: getTooltipEntrySettings,
      args: props
    }), /* @__PURE__ */ React33.createElement(SetCartesianGraphicalItem, {
      type: "bar",
      id,
      data: void 0,
      xAxisId: props.xAxisId,
      yAxisId: props.yAxisId,
      zAxisId: 0,
      dataKey: props.dataKey,
      stackId: getNormalizedStackId(props.stackId),
      hide: props.hide,
      barSize: props.barSize,
      minPointSize: props.minPointSize,
      maxBarSize: props.maxBarSize,
      isPanorama
    }), /* @__PURE__ */ React33.createElement(BarImpl, _extends17({}, props, {
      id
    }))));
  }
  Bar.displayName = "Bar";

  // node_modules/recharts/es6/state/selectors/barSelectors.js
  function ownKeys30(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread30(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys30(Object(t), true).forEach(function(r3) {
        _defineProperty31(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys30(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty31(e, r2, t) {
    return (r2 = _toPropertyKey31(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey31(t) {
    var i = _toPrimitive31(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive31(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var pickXAxisId = (_state, xAxisId) => xAxisId;
  var pickYAxisId = (_state, _xAxisId, yAxisId) => yAxisId;
  var pickIsPanorama = (_state, _xAxisId, _yAxisId, isPanorama) => isPanorama;
  var pickBarId = (_state, _xAxisId, _yAxisId, _isPanorama, id) => id;
  var selectSynchronisedBarSettings = createSelector([selectUnfilteredCartesianItems, pickBarId], (graphicalItems, id) => graphicalItems.filter((item) => item.type === "bar").find((item) => item.id === id));
  var selectMaxBarSize = createSelector([selectSynchronisedBarSettings], (barSettings) => barSettings === null || barSettings === void 0 ? void 0 : barSettings.maxBarSize);
  var pickCells = (_state, _xAxisId, _yAxisId, _isPanorama, _id, cells) => cells;
  var getBarSize = (globalSize, totalSize, selfSize) => {
    var barSize = selfSize !== null && selfSize !== void 0 ? selfSize : globalSize;
    if (isNullish(barSize)) {
      return void 0;
    }
    return getPercentValue(barSize, totalSize, 0);
  };
  var selectAllVisibleBars = createSelector([selectChartLayout, selectUnfilteredCartesianItems, pickXAxisId, pickYAxisId, pickIsPanorama], (layout, allItems, xAxisId, yAxisId, isPanorama) => allItems.filter((i) => {
    if (layout === "horizontal") {
      return i.xAxisId === xAxisId;
    }
    return i.yAxisId === yAxisId;
  }).filter((i) => i.isPanorama === isPanorama).filter((i) => i.hide === false).filter((i) => i.type === "bar"));
  var selectBarStackGroups = (state, xAxisId, yAxisId, isPanorama) => {
    var layout = selectChartLayout(state);
    if (layout === "horizontal") {
      return selectStackGroups(state, "yAxis", yAxisId, isPanorama);
    }
    return selectStackGroups(state, "xAxis", xAxisId, isPanorama);
  };
  var selectBarCartesianAxisSize = (state, xAxisId, yAxisId) => {
    var layout = selectChartLayout(state);
    if (layout === "horizontal") {
      return selectCartesianAxisSize(state, "xAxis", xAxisId);
    }
    return selectCartesianAxisSize(state, "yAxis", yAxisId);
  };
  var combineBarSizeList = (allBars, globalSize, totalSize) => {
    var initialValue = {};
    var stackedBars = allBars.filter(isStacked);
    var unstackedBars = allBars.filter((b) => b.stackId == null);
    var groupByStack = stackedBars.reduce((acc, bar) => {
      if (!acc[bar.stackId]) {
        acc[bar.stackId] = [];
      }
      acc[bar.stackId].push(bar);
      return acc;
    }, initialValue);
    var stackedSizeList = Object.entries(groupByStack).map((_ref2) => {
      var [stackId, bars] = _ref2;
      var dataKeys = bars.map((b) => b.dataKey);
      var barSize = getBarSize(globalSize, totalSize, bars[0].barSize);
      return {
        stackId,
        dataKeys,
        barSize
      };
    });
    var unstackedSizeList = unstackedBars.map((b) => {
      var dataKeys = [b.dataKey].filter((dk) => dk != null);
      var barSize = getBarSize(globalSize, totalSize, b.barSize);
      return {
        stackId: void 0,
        dataKeys,
        barSize
      };
    });
    return [...stackedSizeList, ...unstackedSizeList];
  };
  var selectBarSizeList = createSelector([selectAllVisibleBars, selectRootBarSize, selectBarCartesianAxisSize], combineBarSizeList);
  var selectBarBandSize = (state, xAxisId, yAxisId, isPanorama, id) => {
    var _ref2, _getBandSizeOfAxis;
    var barSettings = selectSynchronisedBarSettings(state, xAxisId, yAxisId, isPanorama, id);
    if (barSettings == null) {
      return void 0;
    }
    var layout = selectChartLayout(state);
    var globalMaxBarSize = selectRootMaxBarSize(state);
    var {
      maxBarSize: childMaxBarSize
    } = barSettings;
    var maxBarSize = isNullish(childMaxBarSize) ? globalMaxBarSize : childMaxBarSize;
    var axis, ticks2;
    if (layout === "horizontal") {
      axis = selectAxisWithScale(state, "xAxis", xAxisId, isPanorama);
      ticks2 = selectTicksOfGraphicalItem(state, "xAxis", xAxisId, isPanorama);
    } else {
      axis = selectAxisWithScale(state, "yAxis", yAxisId, isPanorama);
      ticks2 = selectTicksOfGraphicalItem(state, "yAxis", yAxisId, isPanorama);
    }
    return (_ref2 = (_getBandSizeOfAxis = getBandSizeOfAxis(axis, ticks2, true)) !== null && _getBandSizeOfAxis !== void 0 ? _getBandSizeOfAxis : maxBarSize) !== null && _ref2 !== void 0 ? _ref2 : 0;
  };
  var selectAxisBandSize = (state, xAxisId, yAxisId, isPanorama) => {
    var layout = selectChartLayout(state);
    var axis, ticks2;
    if (layout === "horizontal") {
      axis = selectAxisWithScale(state, "xAxis", xAxisId, isPanorama);
      ticks2 = selectTicksOfGraphicalItem(state, "xAxis", xAxisId, isPanorama);
    } else {
      axis = selectAxisWithScale(state, "yAxis", yAxisId, isPanorama);
      ticks2 = selectTicksOfGraphicalItem(state, "yAxis", yAxisId, isPanorama);
    }
    return getBandSizeOfAxis(axis, ticks2);
  };
  function getBarPositions(barGap, barCategoryGap, bandSize, sizeList, maxBarSize) {
    var len = sizeList.length;
    if (len < 1) {
      return void 0;
    }
    var realBarGap = getPercentValue(barGap, bandSize, 0, true);
    var result;
    var initialValue = [];
    if (isWellBehavedNumber(sizeList[0].barSize)) {
      var useFull = false;
      var fullBarSize = bandSize / len;
      var sum = sizeList.reduce((res, entry) => res + (entry.barSize || 0), 0);
      sum += (len - 1) * realBarGap;
      if (sum >= bandSize) {
        sum -= (len - 1) * realBarGap;
        realBarGap = 0;
      }
      if (sum >= bandSize && fullBarSize > 0) {
        useFull = true;
        fullBarSize *= 0.9;
        sum = len * fullBarSize;
      }
      var offset = (bandSize - sum) / 2 >> 0;
      var prev = {
        offset: offset - realBarGap,
        size: 0
      };
      result = sizeList.reduce((res, entry) => {
        var _entry$barSize;
        var newPosition = {
          stackId: entry.stackId,
          dataKeys: entry.dataKeys,
          position: {
            offset: prev.offset + prev.size + realBarGap,
            size: useFull ? fullBarSize : (_entry$barSize = entry.barSize) !== null && _entry$barSize !== void 0 ? _entry$barSize : 0
          }
        };
        var newRes = [...res, newPosition];
        prev = newRes[newRes.length - 1].position;
        return newRes;
      }, initialValue);
    } else {
      var _offset = getPercentValue(barCategoryGap, bandSize, 0, true);
      if (bandSize - 2 * _offset - (len - 1) * realBarGap <= 0) {
        realBarGap = 0;
      }
      var originalSize = (bandSize - 2 * _offset - (len - 1) * realBarGap) / len;
      if (originalSize > 1) {
        originalSize >>= 0;
      }
      var size = isWellBehavedNumber(maxBarSize) ? Math.min(originalSize, maxBarSize) : originalSize;
      result = sizeList.reduce((res, entry, i) => [...res, {
        stackId: entry.stackId,
        dataKeys: entry.dataKeys,
        position: {
          offset: _offset + (originalSize + realBarGap) * i + (originalSize - size) / 2,
          size
        }
      }], initialValue);
    }
    return result;
  }
  var combineAllBarPositions = (sizeList, globalMaxBarSize, barGap, barCategoryGap, barBandSize, bandSize, childMaxBarSize) => {
    var maxBarSize = isNullish(childMaxBarSize) ? globalMaxBarSize : childMaxBarSize;
    var allBarPositions = getBarPositions(barGap, barCategoryGap, barBandSize !== bandSize ? barBandSize : bandSize, sizeList, maxBarSize);
    if (barBandSize !== bandSize && allBarPositions != null) {
      allBarPositions = allBarPositions.map((pos) => _objectSpread30(_objectSpread30({}, pos), {}, {
        position: _objectSpread30(_objectSpread30({}, pos.position), {}, {
          offset: pos.position.offset - barBandSize / 2
        })
      }));
    }
    return allBarPositions;
  };
  var selectAllBarPositions = createSelector([selectBarSizeList, selectRootMaxBarSize, selectBarGap, selectBarCategoryGap, selectBarBandSize, selectAxisBandSize, selectMaxBarSize], combineAllBarPositions);
  var selectXAxisWithScale = (state, xAxisId, _yAxisId, isPanorama) => selectAxisWithScale(state, "xAxis", xAxisId, isPanorama);
  var selectYAxisWithScale = (state, _xAxisId, yAxisId, isPanorama) => selectAxisWithScale(state, "yAxis", yAxisId, isPanorama);
  var selectXAxisTicks = (state, xAxisId, _yAxisId, isPanorama) => selectTicksOfGraphicalItem(state, "xAxis", xAxisId, isPanorama);
  var selectYAxisTicks = (state, _xAxisId, yAxisId, isPanorama) => selectTicksOfGraphicalItem(state, "yAxis", yAxisId, isPanorama);
  var selectBarPosition = createSelector([selectAllBarPositions, selectSynchronisedBarSettings], (allBarPositions, barSettings) => {
    if (allBarPositions == null || barSettings == null) {
      return void 0;
    }
    var position = allBarPositions.find((p) => p.stackId === barSettings.stackId && barSettings.dataKey != null && p.dataKeys.includes(barSettings.dataKey));
    if (position == null) {
      return void 0;
    }
    return position.position;
  });
  var combineStackedData = (stackGroups, barSettings) => {
    var stackSeriesIdentifier = getStackSeriesIdentifier(barSettings);
    if (!stackGroups || stackSeriesIdentifier == null || barSettings == null) {
      return void 0;
    }
    var {
      stackId
    } = barSettings;
    if (stackId == null) {
      return void 0;
    }
    var stackGroup = stackGroups[stackId];
    if (!stackGroup) {
      return void 0;
    }
    var {
      stackedData
    } = stackGroup;
    if (!stackedData) {
      return void 0;
    }
    return stackedData.find((sd) => sd.key === stackSeriesIdentifier);
  };
  var selectStackedDataOfItem = createSelector([selectBarStackGroups, selectSynchronisedBarSettings], combineStackedData);
  var selectBarRectangles = createSelector([selectChartOffsetInternal, selectAxisViewBox, selectXAxisWithScale, selectYAxisWithScale, selectXAxisTicks, selectYAxisTicks, selectBarPosition, selectChartLayout, selectChartDataWithIndexesIfNotInPanorama, selectAxisBandSize, selectStackedDataOfItem, selectSynchronisedBarSettings, pickCells], (offset, axisViewBox, xAxis, yAxis, xAxisTicks, yAxisTicks, pos, layout, _ref3, bandSize, stackedData, barSettings, cells) => {
    var {
      chartData,
      dataStartIndex,
      dataEndIndex
    } = _ref3;
    if (barSettings == null || pos == null || axisViewBox == null || layout !== "horizontal" && layout !== "vertical" || xAxis == null || yAxis == null || xAxisTicks == null || yAxisTicks == null || bandSize == null) {
      return void 0;
    }
    var {
      data
    } = barSettings;
    var displayedData;
    if (data != null && data.length > 0) {
      displayedData = data;
    } else {
      displayedData = chartData === null || chartData === void 0 ? void 0 : chartData.slice(dataStartIndex, dataEndIndex + 1);
    }
    if (displayedData == null) {
      return void 0;
    }
    return computeBarRectangles({
      layout,
      barSettings,
      pos,
      parentViewBox: axisViewBox,
      bandSize,
      xAxis,
      yAxis,
      xAxisTicks,
      yAxisTicks,
      stackedData,
      displayedData,
      offset,
      cells
    });
  });

  // node_modules/recharts/es6/context/chartDataContext.js
  var import_react41 = __toESM(require_react());
  var ChartDataContextProvider = (props) => {
    var {
      chartData
    } = props;
    var dispatch = useAppDispatch();
    var isPanorama = useIsPanorama();
    (0, import_react41.useEffect)(() => {
      if (isPanorama) {
        return () => {
        };
      }
      dispatch(setChartData(chartData));
      return () => {
        dispatch(setChartData(void 0));
      };
    }, [chartData, dispatch, isPanorama]);
    return null;
  };

  // node_modules/recharts/es6/state/brushSlice.js
  var initialState9 = {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    padding: {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0
    }
  };
  var brushSlice = createSlice({
    name: "brush",
    initialState: initialState9,
    reducers: {
      setBrushSettings(_state, action) {
        if (action.payload == null) {
          return initialState9;
        }
        return action.payload;
      }
    }
  });
  var {
    setBrushSettings
  } = brushSlice.actions;
  var brushReducer = brushSlice.reducer;

  // node_modules/recharts/es6/util/CartesianUtils.js
  function _defineProperty32(e, r2, t) {
    return (r2 = _toPropertyKey32(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey32(t) {
    var i = _toPrimitive32(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive32(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var ScaleHelper = class _ScaleHelper {
    static create(obj) {
      return new _ScaleHelper(obj);
    }
    constructor(scale) {
      this.scale = scale;
    }
    get domain() {
      return this.scale.domain;
    }
    get range() {
      return this.scale.range;
    }
    get rangeMin() {
      return this.range()[0];
    }
    get rangeMax() {
      return this.range()[1];
    }
    get bandwidth() {
      return this.scale.bandwidth;
    }
    apply(value) {
      var {
        bandAware,
        position
      } = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
      if (value === void 0) {
        return void 0;
      }
      if (position) {
        switch (position) {
          case "start": {
            return this.scale(value);
          }
          case "middle": {
            var offset = this.bandwidth ? this.bandwidth() / 2 : 0;
            return this.scale(value) + offset;
          }
          case "end": {
            var _offset = this.bandwidth ? this.bandwidth() : 0;
            return this.scale(value) + _offset;
          }
          default: {
            return this.scale(value);
          }
        }
      }
      if (bandAware) {
        var _offset2 = this.bandwidth ? this.bandwidth() / 2 : 0;
        return this.scale(value) + _offset2;
      }
      return this.scale(value);
    }
    isInRange(value) {
      var range4 = this.range();
      var first = range4[0];
      var last2 = range4[range4.length - 1];
      return first <= last2 ? value >= first && value <= last2 : value >= last2 && value <= first;
    }
  };
  _defineProperty32(ScaleHelper, "EPS", 1e-4);
  function normalizeAngle(angle) {
    return (angle % 180 + 180) % 180;
  }
  var getAngledRectangleWidth = function getAngledRectangleWidth2(_ref5) {
    var {
      width,
      height
    } = _ref5;
    var angle = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
    var normalizedAngle = normalizeAngle(angle);
    var angleRadians = normalizedAngle * Math.PI / 180;
    var angleThreshold = Math.atan(height / width);
    var angledWidth = angleRadians > angleThreshold && angleRadians < Math.PI - angleThreshold ? height / Math.sin(angleRadians) : width / Math.cos(angleRadians);
    return Math.abs(angledWidth);
  };

  // node_modules/recharts/es6/state/referenceElementsSlice.js
  var initialState10 = {
    dots: [],
    areas: [],
    lines: []
  };
  var referenceElementsSlice = createSlice({
    name: "referenceElements",
    initialState: initialState10,
    reducers: {
      addDot: (state, action) => {
        state.dots.push(action.payload);
      },
      removeDot: (state, action) => {
        var index = current(state).dots.findIndex((dot) => dot === action.payload);
        if (index !== -1) {
          state.dots.splice(index, 1);
        }
      },
      addArea: (state, action) => {
        state.areas.push(action.payload);
      },
      removeArea: (state, action) => {
        var index = current(state).areas.findIndex((area) => area === action.payload);
        if (index !== -1) {
          state.areas.splice(index, 1);
        }
      },
      addLine: (state, action) => {
        state.lines.push(action.payload);
      },
      removeLine: (state, action) => {
        var index = current(state).lines.findIndex((line) => line === action.payload);
        if (index !== -1) {
          state.lines.splice(index, 1);
        }
      }
    }
  });
  var {
    addDot,
    removeDot,
    addArea,
    removeArea,
    addLine,
    removeLine
  } = referenceElementsSlice.actions;
  var referenceElementsReducer = referenceElementsSlice.reducer;

  // node_modules/recharts/es6/container/ClipPathProvider.js
  var React34 = __toESM(require_react());
  var import_react42 = __toESM(require_react());
  var ClipPathIdContext = /* @__PURE__ */ (0, import_react42.createContext)(void 0);
  var ClipPathProvider = (_ref2) => {
    var {
      children
    } = _ref2;
    var [clipPathId] = (0, import_react42.useState)("".concat(uniqueId("recharts"), "-clip"));
    var plotArea = usePlotArea();
    if (plotArea == null) {
      return null;
    }
    var {
      x: x2,
      y: y2,
      width,
      height
    } = plotArea;
    return /* @__PURE__ */ React34.createElement(ClipPathIdContext.Provider, {
      value: clipPathId
    }, /* @__PURE__ */ React34.createElement("defs", null, /* @__PURE__ */ React34.createElement("clipPath", {
      id: clipPathId
    }, /* @__PURE__ */ React34.createElement("rect", {
      x: x2,
      y: y2,
      height,
      width
    }))), children);
  };

  // node_modules/recharts/es6/cartesian/CartesianAxis.js
  var React35 = __toESM(require_react());
  var import_react43 = __toESM(require_react());
  var import_get4 = __toESM(require_get2());

  // node_modules/recharts/es6/util/ShallowEqual.js
  function shallowEqual(a2, b) {
    for (var key in a2) {
      if ({}.hasOwnProperty.call(a2, key) && (!{}.hasOwnProperty.call(b, key) || a2[key] !== b[key])) {
        return false;
      }
    }
    for (var _key in b) {
      if ({}.hasOwnProperty.call(b, _key) && !{}.hasOwnProperty.call(a2, _key)) {
        return false;
      }
    }
    return true;
  }

  // node_modules/recharts/es6/util/getEveryNthWithCondition.js
  function getEveryNthWithCondition(array, n, isValid) {
    if (n < 1) {
      return [];
    }
    if (n === 1 && isValid === void 0) {
      return array;
    }
    var result = [];
    for (var i = 0; i < array.length; i += n) {
      if (isValid === void 0 || isValid(array[i]) === true) {
        result.push(array[i]);
      } else {
        return void 0;
      }
    }
    return result;
  }

  // node_modules/recharts/es6/util/TickUtils.js
  function getAngledTickWidth(contentSize, unitSize, angle) {
    var size = {
      width: contentSize.width + unitSize.width,
      height: contentSize.height + unitSize.height
    };
    return getAngledRectangleWidth(size, angle);
  }
  function getTickBoundaries(viewBox, sign2, sizeKey) {
    var isWidth = sizeKey === "width";
    var {
      x: x2,
      y: y2,
      width,
      height
    } = viewBox;
    if (sign2 === 1) {
      return {
        start: isWidth ? x2 : y2,
        end: isWidth ? x2 + width : y2 + height
      };
    }
    return {
      start: isWidth ? x2 + width : y2 + height,
      end: isWidth ? x2 : y2
    };
  }
  function isVisible(sign2, tickPosition, getSize, start, end) {
    if (sign2 * tickPosition < sign2 * start || sign2 * tickPosition > sign2 * end) {
      return false;
    }
    var size = getSize();
    return sign2 * (tickPosition - sign2 * size / 2 - start) >= 0 && sign2 * (tickPosition + sign2 * size / 2 - end) <= 0;
  }
  function getNumberIntervalTicks(ticks2, interval) {
    return getEveryNthWithCondition(ticks2, interval + 1);
  }

  // node_modules/recharts/es6/cartesian/getEquidistantTicks.js
  function getEquidistantTicks(sign2, boundaries, getTickSize, ticks2, minTickGap) {
    var result = (ticks2 || []).slice();
    var {
      start: initialStart,
      end
    } = boundaries;
    var index = 0;
    var stepsize = 1;
    var start = initialStart;
    var _loop = function _loop2() {
      var entry = ticks2 === null || ticks2 === void 0 ? void 0 : ticks2[index];
      if (entry === void 0) {
        return {
          v: getEveryNthWithCondition(ticks2, stepsize)
        };
      }
      var i = index;
      var size;
      var getSize = () => {
        if (size === void 0) {
          size = getTickSize(entry, i);
        }
        return size;
      };
      var tickCoord = entry.coordinate;
      var isShow = index === 0 || isVisible(sign2, tickCoord, getSize, start, end);
      if (!isShow) {
        index = 0;
        start = initialStart;
        stepsize += 1;
      }
      if (isShow) {
        start = tickCoord + sign2 * (getSize() / 2 + minTickGap);
        index += stepsize;
      }
    }, _ret;
    while (stepsize <= result.length) {
      _ret = _loop();
      if (_ret) return _ret.v;
    }
    return [];
  }

  // node_modules/recharts/es6/cartesian/getTicks.js
  function ownKeys31(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread31(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys31(Object(t), true).forEach(function(r3) {
        _defineProperty33(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys31(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty33(e, r2, t) {
    return (r2 = _toPropertyKey33(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey33(t) {
    var i = _toPrimitive33(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive33(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function getTicksEnd(sign2, boundaries, getTickSize, ticks2, minTickGap) {
    var result = (ticks2 || []).slice();
    var len = result.length;
    var {
      start
    } = boundaries;
    var {
      end
    } = boundaries;
    var _loop = function _loop2(i2) {
      var entry = result[i2];
      var size;
      var getSize = () => {
        if (size === void 0) {
          size = getTickSize(entry, i2);
        }
        return size;
      };
      if (i2 === len - 1) {
        var gap = sign2 * (entry.coordinate + sign2 * getSize() / 2 - end);
        result[i2] = entry = _objectSpread31(_objectSpread31({}, entry), {}, {
          tickCoord: gap > 0 ? entry.coordinate - gap * sign2 : entry.coordinate
        });
      } else {
        result[i2] = entry = _objectSpread31(_objectSpread31({}, entry), {}, {
          tickCoord: entry.coordinate
        });
      }
      var isShow = isVisible(sign2, entry.tickCoord, getSize, start, end);
      if (isShow) {
        end = entry.tickCoord - sign2 * (getSize() / 2 + minTickGap);
        result[i2] = _objectSpread31(_objectSpread31({}, entry), {}, {
          isShow: true
        });
      }
    };
    for (var i = len - 1; i >= 0; i--) {
      _loop(i);
    }
    return result;
  }
  function getTicksStart(sign2, boundaries, getTickSize, ticks2, minTickGap, preserveEnd) {
    var result = (ticks2 || []).slice();
    var len = result.length;
    var {
      start,
      end
    } = boundaries;
    if (preserveEnd) {
      var tail = ticks2[len - 1];
      var tailSize = getTickSize(tail, len - 1);
      var tailGap = sign2 * (tail.coordinate + sign2 * tailSize / 2 - end);
      result[len - 1] = tail = _objectSpread31(_objectSpread31({}, tail), {}, {
        tickCoord: tailGap > 0 ? tail.coordinate - tailGap * sign2 : tail.coordinate
      });
      var isTailShow = isVisible(sign2, tail.tickCoord, () => tailSize, start, end);
      if (isTailShow) {
        end = tail.tickCoord - sign2 * (tailSize / 2 + minTickGap);
        result[len - 1] = _objectSpread31(_objectSpread31({}, tail), {}, {
          isShow: true
        });
      }
    }
    var count = preserveEnd ? len - 1 : len;
    var _loop2 = function _loop22(i2) {
      var entry = result[i2];
      var size;
      var getSize = () => {
        if (size === void 0) {
          size = getTickSize(entry, i2);
        }
        return size;
      };
      if (i2 === 0) {
        var gap = sign2 * (entry.coordinate - sign2 * getSize() / 2 - start);
        result[i2] = entry = _objectSpread31(_objectSpread31({}, entry), {}, {
          tickCoord: gap < 0 ? entry.coordinate - gap * sign2 : entry.coordinate
        });
      } else {
        result[i2] = entry = _objectSpread31(_objectSpread31({}, entry), {}, {
          tickCoord: entry.coordinate
        });
      }
      var isShow = isVisible(sign2, entry.tickCoord, getSize, start, end);
      if (isShow) {
        start = entry.tickCoord + sign2 * (getSize() / 2 + minTickGap);
        result[i2] = _objectSpread31(_objectSpread31({}, entry), {}, {
          isShow: true
        });
      }
    };
    for (var i = 0; i < count; i++) {
      _loop2(i);
    }
    return result;
  }
  function getTicks(props, fontSize, letterSpacing) {
    var {
      tick,
      ticks: ticks2,
      viewBox,
      minTickGap,
      orientation,
      interval,
      tickFormatter,
      unit: unit2,
      angle
    } = props;
    if (!ticks2 || !ticks2.length || !tick) {
      return [];
    }
    if (isNumber(interval) || Global.isSsr) {
      var _getNumberIntervalTic;
      return (_getNumberIntervalTic = getNumberIntervalTicks(ticks2, isNumber(interval) ? interval : 0)) !== null && _getNumberIntervalTic !== void 0 ? _getNumberIntervalTic : [];
    }
    var candidates = [];
    var sizeKey = orientation === "top" || orientation === "bottom" ? "width" : "height";
    var unitSize = unit2 && sizeKey === "width" ? getStringSize(unit2, {
      fontSize,
      letterSpacing
    }) : {
      width: 0,
      height: 0
    };
    var getTickSize = (content, index) => {
      var value = typeof tickFormatter === "function" ? tickFormatter(content.value, index) : content.value;
      return sizeKey === "width" ? getAngledTickWidth(getStringSize(value, {
        fontSize,
        letterSpacing
      }), unitSize, angle) : getStringSize(value, {
        fontSize,
        letterSpacing
      })[sizeKey];
    };
    var sign2 = ticks2.length >= 2 ? mathSign(ticks2[1].coordinate - ticks2[0].coordinate) : 1;
    var boundaries = getTickBoundaries(viewBox, sign2, sizeKey);
    if (interval === "equidistantPreserveStart") {
      return getEquidistantTicks(sign2, boundaries, getTickSize, ticks2, minTickGap);
    }
    if (interval === "preserveStart" || interval === "preserveStartEnd") {
      candidates = getTicksStart(sign2, boundaries, getTickSize, ticks2, minTickGap, interval === "preserveStartEnd");
    } else {
      candidates = getTicksEnd(sign2, boundaries, getTickSize, ticks2, minTickGap);
    }
    return candidates.filter((entry) => entry.isShow);
  }

  // node_modules/recharts/es6/cartesian/CartesianAxis.js
  var _excluded14 = ["viewBox"];
  var _excluded25 = ["viewBox"];
  function _extends18() {
    return _extends18 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends18.apply(null, arguments);
  }
  function ownKeys32(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread32(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys32(Object(t), true).forEach(function(r3) {
        _defineProperty34(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys32(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _objectWithoutProperties14(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose14(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose14(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  function _defineProperty34(e, r2, t) {
    return (r2 = _toPropertyKey34(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey34(t) {
    var i = _toPrimitive34(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive34(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var CartesianAxis = class _CartesianAxis extends import_react43.Component {
    constructor(props) {
      super(props);
      this.tickRefs = /* @__PURE__ */ React35.createRef();
      this.tickRefs.current = [];
      this.state = {
        fontSize: "",
        letterSpacing: ""
      };
    }
    shouldComponentUpdate(_ref2, nextState) {
      var {
        viewBox
      } = _ref2, restProps = _objectWithoutProperties14(_ref2, _excluded14);
      var _this$props = this.props, {
        viewBox: viewBoxOld
      } = _this$props, restPropsOld = _objectWithoutProperties14(_this$props, _excluded25);
      return !shallowEqual(viewBox, viewBoxOld) || !shallowEqual(restProps, restPropsOld) || !shallowEqual(nextState, this.state);
    }
    /**
     * Calculate the coordinates of endpoints in ticks
     * @param  data The data of a simple tick
     * @return (x1, y1): The coordinate of endpoint close to tick text
     *  (x2, y2): The coordinate of endpoint close to axis
     */
    getTickLineCoord(data) {
      var {
        x: x2,
        y: y2,
        width,
        height,
        orientation,
        tickSize,
        mirror,
        tickMargin
      } = this.props;
      var x1, x22, y1, y22, tx, ty;
      var sign2 = mirror ? -1 : 1;
      var finalTickSize = data.tickSize || tickSize;
      var tickCoord = isNumber(data.tickCoord) ? data.tickCoord : data.coordinate;
      switch (orientation) {
        case "top":
          x1 = x22 = data.coordinate;
          y22 = y2 + +!mirror * height;
          y1 = y22 - sign2 * finalTickSize;
          ty = y1 - sign2 * tickMargin;
          tx = tickCoord;
          break;
        case "left":
          y1 = y22 = data.coordinate;
          x22 = x2 + +!mirror * width;
          x1 = x22 - sign2 * finalTickSize;
          tx = x1 - sign2 * tickMargin;
          ty = tickCoord;
          break;
        case "right":
          y1 = y22 = data.coordinate;
          x22 = x2 + +mirror * width;
          x1 = x22 + sign2 * finalTickSize;
          tx = x1 + sign2 * tickMargin;
          ty = tickCoord;
          break;
        default:
          x1 = x22 = data.coordinate;
          y22 = y2 + +mirror * height;
          y1 = y22 + sign2 * finalTickSize;
          ty = y1 + sign2 * tickMargin;
          tx = tickCoord;
          break;
      }
      return {
        line: {
          x1,
          y1,
          x2: x22,
          y2: y22
        },
        tick: {
          x: tx,
          y: ty
        }
      };
    }
    getTickTextAnchor() {
      var {
        orientation,
        mirror
      } = this.props;
      switch (orientation) {
        case "left":
          return mirror ? "start" : "end";
        case "right":
          return mirror ? "end" : "start";
        default:
          return "middle";
      }
    }
    getTickVerticalAnchor() {
      var {
        orientation,
        mirror
      } = this.props;
      switch (orientation) {
        case "left":
        case "right":
          return "middle";
        case "top":
          return mirror ? "start" : "end";
        default:
          return mirror ? "end" : "start";
      }
    }
    renderAxisLine() {
      var {
        x: x2,
        y: y2,
        width,
        height,
        orientation,
        mirror,
        axisLine
      } = this.props;
      var props = _objectSpread32(_objectSpread32(_objectSpread32({}, filterProps(this.props, false)), filterProps(axisLine, false)), {}, {
        fill: "none"
      });
      if (orientation === "top" || orientation === "bottom") {
        var needHeight = +(orientation === "top" && !mirror || orientation === "bottom" && mirror);
        props = _objectSpread32(_objectSpread32({}, props), {}, {
          x1: x2,
          y1: y2 + needHeight * height,
          x2: x2 + width,
          y2: y2 + needHeight * height
        });
      } else {
        var needWidth = +(orientation === "left" && !mirror || orientation === "right" && mirror);
        props = _objectSpread32(_objectSpread32({}, props), {}, {
          x1: x2 + needWidth * width,
          y1: y2,
          x2: x2 + needWidth * width,
          y2: y2 + height
        });
      }
      return /* @__PURE__ */ React35.createElement("line", _extends18({}, props, {
        className: clsx("recharts-cartesian-axis-line", (0, import_get4.default)(axisLine, "className"))
      }));
    }
    static renderTickItem(option, props, value) {
      var tickItem;
      var combinedClassName = clsx(props.className, "recharts-cartesian-axis-tick-value");
      if (/* @__PURE__ */ React35.isValidElement(option)) {
        tickItem = /* @__PURE__ */ React35.cloneElement(option, _objectSpread32(_objectSpread32({}, props), {}, {
          className: combinedClassName
        }));
      } else if (typeof option === "function") {
        tickItem = option(_objectSpread32(_objectSpread32({}, props), {}, {
          className: combinedClassName
        }));
      } else {
        var className = "recharts-cartesian-axis-tick-value";
        if (typeof option !== "boolean") {
          className = clsx(className, option.className);
        }
        tickItem = /* @__PURE__ */ React35.createElement(Text, _extends18({}, props, {
          className
        }), value);
      }
      return tickItem;
    }
    /**
     * render the ticks
     * @param {string} fontSize Fontsize to consider for tick spacing
     * @param {string} letterSpacing Letter spacing to consider for tick spacing
     * @param {Array} ticks The ticks to actually render (overrides what was passed in props)
     * @return {ReactElement | null} renderedTicks
     */
    renderTicks(fontSize, letterSpacing) {
      var ticks2 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
      var {
        tickLine,
        stroke,
        tick,
        tickFormatter,
        unit: unit2,
        padding,
        tickTextProps
      } = this.props;
      var finalTicks = getTicks(_objectSpread32(_objectSpread32({}, this.props), {}, {
        ticks: ticks2
      }), fontSize, letterSpacing);
      var textAnchor = this.getTickTextAnchor();
      var verticalAnchor = this.getTickVerticalAnchor();
      var axisProps = svgPropertiesNoEvents(this.props);
      var customTickProps = filterProps(tick, false);
      var tickLineProps = _objectSpread32(_objectSpread32({}, axisProps), {}, {
        fill: "none"
      }, filterProps(tickLine, false));
      var items = finalTicks.map((entry, i) => {
        var {
          line: lineCoord,
          tick: tickCoord
        } = this.getTickLineCoord(entry);
        var tickProps = _objectSpread32(_objectSpread32(_objectSpread32(_objectSpread32({
          // @ts-expect-error textAnchor from axisProps is typed as `string` but Text wants type `TextAnchor`
          textAnchor,
          verticalAnchor
        }, axisProps), {}, {
          stroke: "none",
          fill: stroke
        }, customTickProps), tickCoord), {}, {
          index: i,
          payload: entry,
          visibleTicksCount: finalTicks.length,
          tickFormatter,
          padding
        }, tickTextProps);
        return /* @__PURE__ */ React35.createElement(Layer, _extends18({
          className: "recharts-cartesian-axis-tick",
          key: "tick-".concat(entry.value, "-").concat(entry.coordinate, "-").concat(entry.tickCoord)
        }, adaptEventsOfChild(this.props, entry, i)), tickLine && // @ts-expect-error recharts scale is not compatible with SVG scale
        /* @__PURE__ */ React35.createElement("line", _extends18({}, tickLineProps, lineCoord, {
          className: clsx("recharts-cartesian-axis-tick-line", (0, import_get4.default)(tickLine, "className"))
        })), tick && _CartesianAxis.renderTickItem(tick, tickProps, "".concat(typeof tickFormatter === "function" ? tickFormatter(entry.value, i) : entry.value).concat(unit2 || "")));
      });
      return items.length > 0 ? /* @__PURE__ */ React35.createElement("g", {
        className: "recharts-cartesian-axis-ticks"
      }, items) : null;
    }
    render() {
      var {
        axisLine,
        width,
        height,
        className,
        hide
      } = this.props;
      if (hide) {
        return null;
      }
      var {
        ticks: ticks2
      } = this.props;
      if (width != null && width <= 0 || height != null && height <= 0) {
        return null;
      }
      return /* @__PURE__ */ React35.createElement(Layer, {
        className: clsx("recharts-cartesian-axis", className),
        ref: (_ref2) => {
          if (_ref2) {
            var tickNodes = _ref2.getElementsByClassName("recharts-cartesian-axis-tick-value");
            this.tickRefs.current = Array.from(tickNodes);
            var tick = tickNodes[0];
            if (tick) {
              var calculatedFontSize = window.getComputedStyle(tick).fontSize;
              var calculatedLetterSpacing = window.getComputedStyle(tick).letterSpacing;
              if (calculatedFontSize !== this.state.fontSize || calculatedLetterSpacing !== this.state.letterSpacing) {
                this.setState({
                  fontSize: window.getComputedStyle(tick).fontSize,
                  letterSpacing: window.getComputedStyle(tick).letterSpacing
                });
              }
            }
          }
        }
      }, axisLine && this.renderAxisLine(), this.renderTicks(this.state.fontSize, this.state.letterSpacing, ticks2), /* @__PURE__ */ React35.createElement(CartesianLabelContextProvider, {
        x: this.props.x,
        y: this.props.y,
        width: this.props.width,
        height: this.props.height
      }, /* @__PURE__ */ React35.createElement(CartesianLabelFromLabelProp, {
        label: this.props.label
      }), this.props.children));
    }
  };
  _defineProperty34(CartesianAxis, "displayName", "CartesianAxis");
  _defineProperty34(CartesianAxis, "defaultProps", {
    x: 0,
    y: 0,
    width: 0,
    height: 0,
    viewBox: {
      x: 0,
      y: 0,
      width: 0,
      height: 0
    },
    // The orientation of axis
    orientation: "bottom",
    // The ticks
    ticks: [],
    stroke: "#666",
    tickLine: true,
    axisLine: true,
    tick: true,
    mirror: false,
    minTickGap: 5,
    // The width or height of tick
    tickSize: 6,
    tickMargin: 2,
    interval: "preserveEnd"
  });

  // node_modules/recharts/es6/cartesian/CartesianGrid.js
  var React36 = __toESM(require_react());
  var _excluded15 = ["x1", "y1", "x2", "y2", "key"];
  var _excluded26 = ["offset"];
  var _excluded33 = ["xAxisId", "yAxisId"];
  var _excluded43 = ["xAxisId", "yAxisId"];
  function ownKeys33(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread33(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys33(Object(t), true).forEach(function(r3) {
        _defineProperty35(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys33(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty35(e, r2, t) {
    return (r2 = _toPropertyKey35(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey35(t) {
    var i = _toPrimitive35(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive35(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function _extends19() {
    return _extends19 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends19.apply(null, arguments);
  }
  function _objectWithoutProperties15(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose15(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose15(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  var Background = (props) => {
    var {
      fill
    } = props;
    if (!fill || fill === "none") {
      return null;
    }
    var {
      fillOpacity,
      x: x2,
      y: y2,
      width,
      height,
      ry
    } = props;
    return /* @__PURE__ */ React36.createElement("rect", {
      x: x2,
      y: y2,
      ry,
      width,
      height,
      stroke: "none",
      fill,
      fillOpacity,
      className: "recharts-cartesian-grid-bg"
    });
  };
  function renderLineItem(option, props) {
    var lineItem;
    if (/* @__PURE__ */ React36.isValidElement(option)) {
      lineItem = /* @__PURE__ */ React36.cloneElement(option, props);
    } else if (typeof option === "function") {
      lineItem = option(props);
    } else {
      var {
        x1,
        y1,
        x2,
        y2,
        key
      } = props, others = _objectWithoutProperties15(props, _excluded15);
      var _svgPropertiesNoEvent = svgPropertiesNoEvents(others), {
        offset: __
      } = _svgPropertiesNoEvent, restOfFilteredProps = _objectWithoutProperties15(_svgPropertiesNoEvent, _excluded26);
      lineItem = /* @__PURE__ */ React36.createElement("line", _extends19({}, restOfFilteredProps, {
        x1,
        y1,
        x2,
        y2,
        fill: "none",
        key
      }));
    }
    return lineItem;
  }
  function HorizontalGridLines(props) {
    var {
      x: x2,
      width,
      horizontal = true,
      horizontalPoints
    } = props;
    if (!horizontal || !horizontalPoints || !horizontalPoints.length) {
      return null;
    }
    var {
      xAxisId,
      yAxisId
    } = props, otherLineItemProps = _objectWithoutProperties15(props, _excluded33);
    var items = horizontalPoints.map((entry, i) => {
      var lineItemProps = _objectSpread33(_objectSpread33({}, otherLineItemProps), {}, {
        x1: x2,
        y1: entry,
        x2: x2 + width,
        y2: entry,
        key: "line-".concat(i),
        index: i
      });
      return renderLineItem(horizontal, lineItemProps);
    });
    return /* @__PURE__ */ React36.createElement("g", {
      className: "recharts-cartesian-grid-horizontal"
    }, items);
  }
  function VerticalGridLines(props) {
    var {
      y: y2,
      height,
      vertical = true,
      verticalPoints
    } = props;
    if (!vertical || !verticalPoints || !verticalPoints.length) {
      return null;
    }
    var {
      xAxisId,
      yAxisId
    } = props, otherLineItemProps = _objectWithoutProperties15(props, _excluded43);
    var items = verticalPoints.map((entry, i) => {
      var lineItemProps = _objectSpread33(_objectSpread33({}, otherLineItemProps), {}, {
        x1: entry,
        y1: y2,
        x2: entry,
        y2: y2 + height,
        key: "line-".concat(i),
        index: i
      });
      return renderLineItem(vertical, lineItemProps);
    });
    return /* @__PURE__ */ React36.createElement("g", {
      className: "recharts-cartesian-grid-vertical"
    }, items);
  }
  function HorizontalStripes(props) {
    var {
      horizontalFill,
      fillOpacity,
      x: x2,
      y: y2,
      width,
      height,
      horizontalPoints,
      horizontal = true
    } = props;
    if (!horizontal || !horizontalFill || !horizontalFill.length) {
      return null;
    }
    var roundedSortedHorizontalPoints = horizontalPoints.map((e) => Math.round(e + y2 - y2)).sort((a2, b) => a2 - b);
    if (y2 !== roundedSortedHorizontalPoints[0]) {
      roundedSortedHorizontalPoints.unshift(0);
    }
    var items = roundedSortedHorizontalPoints.map((entry, i) => {
      var lastStripe = !roundedSortedHorizontalPoints[i + 1];
      var lineHeight = lastStripe ? y2 + height - entry : roundedSortedHorizontalPoints[i + 1] - entry;
      if (lineHeight <= 0) {
        return null;
      }
      var colorIndex = i % horizontalFill.length;
      return /* @__PURE__ */ React36.createElement("rect", {
        key: "react-".concat(i),
        y: entry,
        x: x2,
        height: lineHeight,
        width,
        stroke: "none",
        fill: horizontalFill[colorIndex],
        fillOpacity,
        className: "recharts-cartesian-grid-bg"
      });
    });
    return /* @__PURE__ */ React36.createElement("g", {
      className: "recharts-cartesian-gridstripes-horizontal"
    }, items);
  }
  function VerticalStripes(props) {
    var {
      vertical = true,
      verticalFill,
      fillOpacity,
      x: x2,
      y: y2,
      width,
      height,
      verticalPoints
    } = props;
    if (!vertical || !verticalFill || !verticalFill.length) {
      return null;
    }
    var roundedSortedVerticalPoints = verticalPoints.map((e) => Math.round(e + x2 - x2)).sort((a2, b) => a2 - b);
    if (x2 !== roundedSortedVerticalPoints[0]) {
      roundedSortedVerticalPoints.unshift(0);
    }
    var items = roundedSortedVerticalPoints.map((entry, i) => {
      var lastStripe = !roundedSortedVerticalPoints[i + 1];
      var lineWidth = lastStripe ? x2 + width - entry : roundedSortedVerticalPoints[i + 1] - entry;
      if (lineWidth <= 0) {
        return null;
      }
      var colorIndex = i % verticalFill.length;
      return /* @__PURE__ */ React36.createElement("rect", {
        key: "react-".concat(i),
        x: entry,
        y: y2,
        width: lineWidth,
        height,
        stroke: "none",
        fill: verticalFill[colorIndex],
        fillOpacity,
        className: "recharts-cartesian-grid-bg"
      });
    });
    return /* @__PURE__ */ React36.createElement("g", {
      className: "recharts-cartesian-gridstripes-vertical"
    }, items);
  }
  var defaultVerticalCoordinatesGenerator = (_ref2, syncWithTicks) => {
    var {
      xAxis,
      width,
      height,
      offset
    } = _ref2;
    return getCoordinatesOfGrid(getTicks(_objectSpread33(_objectSpread33(_objectSpread33({}, CartesianAxis.defaultProps), xAxis), {}, {
      ticks: getTicksOfAxis(xAxis, true),
      viewBox: {
        x: 0,
        y: 0,
        width,
        height
      }
    })), offset.left, offset.left + offset.width, syncWithTicks);
  };
  var defaultHorizontalCoordinatesGenerator = (_ref2, syncWithTicks) => {
    var {
      yAxis,
      width,
      height,
      offset
    } = _ref2;
    return getCoordinatesOfGrid(getTicks(_objectSpread33(_objectSpread33(_objectSpread33({}, CartesianAxis.defaultProps), yAxis), {}, {
      ticks: getTicksOfAxis(yAxis, true),
      viewBox: {
        x: 0,
        y: 0,
        width,
        height
      }
    })), offset.top, offset.top + offset.height, syncWithTicks);
  };
  var defaultProps4 = {
    horizontal: true,
    vertical: true,
    // The ordinates of horizontal grid lines
    horizontalPoints: [],
    // The abscissas of vertical grid lines
    verticalPoints: [],
    stroke: "#ccc",
    fill: "none",
    // The fill of colors of grid lines
    verticalFill: [],
    horizontalFill: [],
    xAxisId: 0,
    yAxisId: 0
  };
  function CartesianGrid(props) {
    var chartWidth = useChartWidth();
    var chartHeight = useChartHeight();
    var offset = useOffsetInternal();
    var propsIncludingDefaults = _objectSpread33(_objectSpread33({}, resolveDefaultProps(props, defaultProps4)), {}, {
      x: isNumber(props.x) ? props.x : offset.left,
      y: isNumber(props.y) ? props.y : offset.top,
      width: isNumber(props.width) ? props.width : offset.width,
      height: isNumber(props.height) ? props.height : offset.height
    });
    var {
      xAxisId,
      yAxisId,
      x: x2,
      y: y2,
      width,
      height,
      syncWithTicks,
      horizontalValues,
      verticalValues
    } = propsIncludingDefaults;
    var isPanorama = useIsPanorama();
    var xAxis = useAppSelector((state) => selectAxisPropsNeededForCartesianGridTicksGenerator(state, "xAxis", xAxisId, isPanorama));
    var yAxis = useAppSelector((state) => selectAxisPropsNeededForCartesianGridTicksGenerator(state, "yAxis", yAxisId, isPanorama));
    if (!isNumber(width) || width <= 0 || !isNumber(height) || height <= 0 || !isNumber(x2) || x2 !== +x2 || !isNumber(y2) || y2 !== +y2) {
      return null;
    }
    var verticalCoordinatesGenerator = propsIncludingDefaults.verticalCoordinatesGenerator || defaultVerticalCoordinatesGenerator;
    var horizontalCoordinatesGenerator = propsIncludingDefaults.horizontalCoordinatesGenerator || defaultHorizontalCoordinatesGenerator;
    var {
      horizontalPoints,
      verticalPoints
    } = propsIncludingDefaults;
    if ((!horizontalPoints || !horizontalPoints.length) && typeof horizontalCoordinatesGenerator === "function") {
      var isHorizontalValues = horizontalValues && horizontalValues.length;
      var generatorResult = horizontalCoordinatesGenerator({
        yAxis: yAxis ? _objectSpread33(_objectSpread33({}, yAxis), {}, {
          ticks: isHorizontalValues ? horizontalValues : yAxis.ticks
        }) : void 0,
        width: chartWidth,
        height: chartHeight,
        offset
      }, isHorizontalValues ? true : syncWithTicks);
      warn(Array.isArray(generatorResult), "horizontalCoordinatesGenerator should return Array but instead it returned [".concat(typeof generatorResult, "]"));
      if (Array.isArray(generatorResult)) {
        horizontalPoints = generatorResult;
      }
    }
    if ((!verticalPoints || !verticalPoints.length) && typeof verticalCoordinatesGenerator === "function") {
      var isVerticalValues = verticalValues && verticalValues.length;
      var _generatorResult = verticalCoordinatesGenerator({
        xAxis: xAxis ? _objectSpread33(_objectSpread33({}, xAxis), {}, {
          ticks: isVerticalValues ? verticalValues : xAxis.ticks
        }) : void 0,
        width: chartWidth,
        height: chartHeight,
        offset
      }, isVerticalValues ? true : syncWithTicks);
      warn(Array.isArray(_generatorResult), "verticalCoordinatesGenerator should return Array but instead it returned [".concat(typeof _generatorResult, "]"));
      if (Array.isArray(_generatorResult)) {
        verticalPoints = _generatorResult;
      }
    }
    return /* @__PURE__ */ React36.createElement("g", {
      className: "recharts-cartesian-grid"
    }, /* @__PURE__ */ React36.createElement(Background, {
      fill: propsIncludingDefaults.fill,
      fillOpacity: propsIncludingDefaults.fillOpacity,
      x: propsIncludingDefaults.x,
      y: propsIncludingDefaults.y,
      width: propsIncludingDefaults.width,
      height: propsIncludingDefaults.height,
      ry: propsIncludingDefaults.ry
    }), /* @__PURE__ */ React36.createElement(HorizontalStripes, _extends19({}, propsIncludingDefaults, {
      horizontalPoints
    })), /* @__PURE__ */ React36.createElement(VerticalStripes, _extends19({}, propsIncludingDefaults, {
      verticalPoints
    })), /* @__PURE__ */ React36.createElement(HorizontalGridLines, _extends19({}, propsIncludingDefaults, {
      offset,
      horizontalPoints,
      xAxis,
      yAxis
    })), /* @__PURE__ */ React36.createElement(VerticalGridLines, _extends19({}, propsIncludingDefaults, {
      offset,
      verticalPoints,
      xAxis,
      yAxis
    })));
  }
  CartesianGrid.displayName = "CartesianGrid";

  // node_modules/recharts/es6/cartesian/XAxis.js
  var React37 = __toESM(require_react());
  var import_react44 = __toESM(require_react());
  var _excluded16 = ["children"];
  var _excluded27 = ["dangerouslySetInnerHTML", "ticks"];
  var _excluded34 = ["id"];
  function _defineProperty36(e, r2, t) {
    return (r2 = _toPropertyKey36(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey36(t) {
    var i = _toPrimitive36(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive36(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function _extends20() {
    return _extends20 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends20.apply(null, arguments);
  }
  function _objectWithoutProperties16(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose16(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose16(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  function SetXAxisSettings(props) {
    var dispatch = useAppDispatch();
    var settings = (0, import_react44.useMemo)(() => {
      var {
        children
      } = props, rest = _objectWithoutProperties16(props, _excluded16);
      return rest;
    }, [props]);
    (0, import_react44.useEffect)(() => {
      dispatch(addXAxis(settings));
      return () => {
        dispatch(removeXAxis(settings));
      };
    }, [settings, dispatch]);
    return props.children;
  }
  var XAxisImpl = (props) => {
    var {
      xAxisId,
      className
    } = props;
    var viewBox = useAppSelector(selectAxisViewBox);
    var isPanorama = useIsPanorama();
    var axisType = "xAxis";
    var scale = useAppSelector((state) => selectAxisScale(state, axisType, xAxisId, isPanorama));
    var cartesianTickItems = useAppSelector((state) => selectTicksOfAxis(state, axisType, xAxisId, isPanorama));
    var axisSize = useAppSelector((state) => selectXAxisSize(state, xAxisId));
    var position = useAppSelector((state) => selectXAxisPosition(state, xAxisId));
    var synchronizedSettings = useAppSelector((state) => selectXAxisSettingsNoDefaults(state, xAxisId));
    if (axisSize == null || position == null || synchronizedSettings == null) {
      return null;
    }
    var {
      dangerouslySetInnerHTML,
      ticks: ticks2
    } = props, allOtherProps = _objectWithoutProperties16(props, _excluded27);
    var {
      id
    } = synchronizedSettings, restSynchronizedSettings = _objectWithoutProperties16(synchronizedSettings, _excluded34);
    return /* @__PURE__ */ React37.createElement(CartesianAxis, _extends20({}, allOtherProps, restSynchronizedSettings, {
      scale,
      x: position.x,
      y: position.y,
      width: axisSize.width,
      height: axisSize.height,
      className: clsx("recharts-".concat(axisType, " ").concat(axisType), className),
      viewBox,
      ticks: cartesianTickItems
    }));
  };
  var XAxisSettingsDispatcher = (props) => {
    var _props$interval, _props$includeHidden, _props$angle, _props$minTickGap, _props$tick;
    return /* @__PURE__ */ React37.createElement(SetXAxisSettings, {
      interval: (_props$interval = props.interval) !== null && _props$interval !== void 0 ? _props$interval : "preserveEnd",
      id: props.xAxisId,
      scale: props.scale,
      type: props.type,
      padding: props.padding,
      allowDataOverflow: props.allowDataOverflow,
      domain: props.domain,
      dataKey: props.dataKey,
      allowDuplicatedCategory: props.allowDuplicatedCategory,
      allowDecimals: props.allowDecimals,
      tickCount: props.tickCount,
      includeHidden: (_props$includeHidden = props.includeHidden) !== null && _props$includeHidden !== void 0 ? _props$includeHidden : false,
      reversed: props.reversed,
      ticks: props.ticks,
      height: props.height,
      orientation: props.orientation,
      mirror: props.mirror,
      hide: props.hide,
      unit: props.unit,
      name: props.name,
      angle: (_props$angle = props.angle) !== null && _props$angle !== void 0 ? _props$angle : 0,
      minTickGap: (_props$minTickGap = props.minTickGap) !== null && _props$minTickGap !== void 0 ? _props$minTickGap : 5,
      tick: (_props$tick = props.tick) !== null && _props$tick !== void 0 ? _props$tick : true,
      tickFormatter: props.tickFormatter
    }, /* @__PURE__ */ React37.createElement(XAxisImpl, props));
  };
  var XAxis = class extends import_react44.Component {
    render() {
      return /* @__PURE__ */ React37.createElement(XAxisSettingsDispatcher, this.props);
    }
  };
  _defineProperty36(XAxis, "displayName", "XAxis");
  _defineProperty36(XAxis, "defaultProps", {
    allowDataOverflow: implicitXAxis.allowDataOverflow,
    allowDecimals: implicitXAxis.allowDecimals,
    allowDuplicatedCategory: implicitXAxis.allowDuplicatedCategory,
    height: implicitXAxis.height,
    hide: false,
    mirror: implicitXAxis.mirror,
    orientation: implicitXAxis.orientation,
    padding: implicitXAxis.padding,
    reversed: implicitXAxis.reversed,
    scale: implicitXAxis.scale,
    tickCount: implicitXAxis.tickCount,
    type: implicitXAxis.type,
    xAxisId: 0
  });

  // node_modules/recharts/es6/cartesian/YAxis.js
  var React38 = __toESM(require_react());
  var import_react45 = __toESM(require_react());

  // node_modules/recharts/es6/util/YAxisUtils.js
  var getCalculatedYAxisWidth = (_ref2) => {
    var {
      ticks: ticks2,
      label,
      labelGapWithTick = 5,
      // Default gap between label and tick
      tickSize = 0,
      tickMargin = 0
    } = _ref2;
    var maxTickWidth = 0;
    if (ticks2) {
      ticks2.forEach((tickNode) => {
        if (tickNode) {
          var bbox = tickNode.getBoundingClientRect();
          if (bbox.width > maxTickWidth) {
            maxTickWidth = bbox.width;
          }
        }
      });
      var labelWidth = label ? label.getBoundingClientRect().width : 0;
      var tickWidth = tickSize + tickMargin;
      var updatedYAxisWidth = maxTickWidth + tickWidth + labelWidth + (label ? labelGapWithTick : 0);
      return Math.round(updatedYAxisWidth);
    }
    return 0;
  };

  // node_modules/recharts/es6/cartesian/YAxis.js
  var _excluded17 = ["dangerouslySetInnerHTML", "ticks"];
  var _excluded28 = ["id"];
  function _defineProperty37(e, r2, t) {
    return (r2 = _toPropertyKey37(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey37(t) {
    var i = _toPrimitive37(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive37(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  function _extends21() {
    return _extends21 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends21.apply(null, arguments);
  }
  function _objectWithoutProperties17(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose17(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose17(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  function SetYAxisSettings(settings) {
    var dispatch = useAppDispatch();
    (0, import_react45.useEffect)(() => {
      dispatch(addYAxis(settings));
      return () => {
        dispatch(removeYAxis(settings));
      };
    }, [settings, dispatch]);
    return null;
  }
  var YAxisImpl = (props) => {
    var _cartesianAxisRef$cur;
    var {
      yAxisId,
      className,
      width,
      label
    } = props;
    var cartesianAxisRef = (0, import_react45.useRef)(null);
    var labelRef = (0, import_react45.useRef)(null);
    var viewBox = useAppSelector(selectAxisViewBox);
    var isPanorama = useIsPanorama();
    var dispatch = useAppDispatch();
    var axisType = "yAxis";
    var scale = useAppSelector((state) => selectAxisScale(state, axisType, yAxisId, isPanorama));
    var axisSize = useAppSelector((state) => selectYAxisSize(state, yAxisId));
    var position = useAppSelector((state) => selectYAxisPosition(state, yAxisId));
    var cartesianTickItems = useAppSelector((state) => selectTicksOfAxis(state, axisType, yAxisId, isPanorama));
    var synchronizedSettings = useAppSelector((state) => selectYAxisSettingsNoDefaults(state, yAxisId));
    (0, import_react45.useLayoutEffect)(() => {
      var _axisComponent$tickRe;
      if (width !== "auto" || !axisSize || isLabelContentAFunction(label) || /* @__PURE__ */ (0, import_react45.isValidElement)(label) || synchronizedSettings == null) {
        return;
      }
      var axisComponent = cartesianAxisRef.current;
      var tickNodes = axisComponent === null || axisComponent === void 0 || (_axisComponent$tickRe = axisComponent.tickRefs) === null || _axisComponent$tickRe === void 0 ? void 0 : _axisComponent$tickRe.current;
      var {
        tickSize,
        tickMargin
      } = axisComponent.props;
      var updatedYAxisWidth = getCalculatedYAxisWidth({
        ticks: tickNodes,
        label: labelRef.current,
        labelGapWithTick: 5,
        tickSize,
        tickMargin
      });
      if (Math.round(axisSize.width) !== Math.round(updatedYAxisWidth)) {
        dispatch(updateYAxisWidth({
          id: yAxisId,
          width: updatedYAxisWidth
        }));
      }
    }, [
      cartesianAxisRef,
      cartesianAxisRef === null || cartesianAxisRef === void 0 || (_cartesianAxisRef$cur = cartesianAxisRef.current) === null || _cartesianAxisRef$cur === void 0 || (_cartesianAxisRef$cur = _cartesianAxisRef$cur.tickRefs) === null || _cartesianAxisRef$cur === void 0 ? void 0 : _cartesianAxisRef$cur.current,
      // required to do re-calculation when using brush
      axisSize === null || axisSize === void 0 ? void 0 : axisSize.width,
      axisSize,
      dispatch,
      label,
      yAxisId,
      width
    ]);
    if (axisSize == null || position == null || synchronizedSettings == null) {
      return null;
    }
    var {
      dangerouslySetInnerHTML,
      ticks: ticks2
    } = props, allOtherProps = _objectWithoutProperties17(props, _excluded17);
    var {
      id
    } = synchronizedSettings, restSynchronizedSettings = _objectWithoutProperties17(synchronizedSettings, _excluded28);
    return /* @__PURE__ */ React38.createElement(CartesianAxis, _extends21({}, allOtherProps, restSynchronizedSettings, {
      ref: cartesianAxisRef,
      labelRef,
      scale,
      x: position.x,
      y: position.y,
      tickTextProps: width === "auto" ? {
        width: void 0
      } : {
        width
      },
      width: axisSize.width,
      height: axisSize.height,
      className: clsx("recharts-".concat(axisType, " ").concat(axisType), className),
      viewBox,
      ticks: cartesianTickItems
    }));
  };
  var YAxisSettingsDispatcher = (props) => {
    var _props$interval, _props$includeHidden, _props$angle, _props$minTickGap, _props$tick;
    return /* @__PURE__ */ React38.createElement(React38.Fragment, null, /* @__PURE__ */ React38.createElement(SetYAxisSettings, {
      interval: (_props$interval = props.interval) !== null && _props$interval !== void 0 ? _props$interval : "preserveEnd",
      id: props.yAxisId,
      scale: props.scale,
      type: props.type,
      domain: props.domain,
      allowDataOverflow: props.allowDataOverflow,
      dataKey: props.dataKey,
      allowDuplicatedCategory: props.allowDuplicatedCategory,
      allowDecimals: props.allowDecimals,
      tickCount: props.tickCount,
      padding: props.padding,
      includeHidden: (_props$includeHidden = props.includeHidden) !== null && _props$includeHidden !== void 0 ? _props$includeHidden : false,
      reversed: props.reversed,
      ticks: props.ticks,
      width: props.width,
      orientation: props.orientation,
      mirror: props.mirror,
      hide: props.hide,
      unit: props.unit,
      name: props.name,
      angle: (_props$angle = props.angle) !== null && _props$angle !== void 0 ? _props$angle : 0,
      minTickGap: (_props$minTickGap = props.minTickGap) !== null && _props$minTickGap !== void 0 ? _props$minTickGap : 5,
      tick: (_props$tick = props.tick) !== null && _props$tick !== void 0 ? _props$tick : true,
      tickFormatter: props.tickFormatter
    }), /* @__PURE__ */ React38.createElement(YAxisImpl, props));
  };
  var YAxisDefaultProps = {
    allowDataOverflow: implicitYAxis.allowDataOverflow,
    allowDecimals: implicitYAxis.allowDecimals,
    allowDuplicatedCategory: implicitYAxis.allowDuplicatedCategory,
    hide: false,
    mirror: implicitYAxis.mirror,
    orientation: implicitYAxis.orientation,
    padding: implicitYAxis.padding,
    reversed: implicitYAxis.reversed,
    scale: implicitYAxis.scale,
    tickCount: implicitYAxis.tickCount,
    type: implicitYAxis.type,
    width: implicitYAxis.width,
    yAxisId: 0
  };
  var YAxis = class extends import_react45.Component {
    render() {
      return /* @__PURE__ */ React38.createElement(YAxisSettingsDispatcher, this.props);
    }
  };
  _defineProperty37(YAxis, "displayName", "YAxis");
  _defineProperty37(YAxis, "defaultProps", YAxisDefaultProps);

  // node_modules/recharts/es6/chart/CartesianChart.js
  var React44 = __toESM(require_react());
  var import_react53 = __toESM(require_react());

  // node_modules/recharts/es6/state/RechartsStoreProvider.js
  var React40 = __toESM(require_react());
  var import_react46 = __toESM(require_react());

  // node_modules/react-redux/dist/react-redux.mjs
  var React39 = __toESM(require_react(), 1);
  var import_with_selector2 = __toESM(require_with_selector2(), 1);
  var REACT_FORWARD_REF_TYPE = /* @__PURE__ */ Symbol.for("react.forward_ref");
  var REACT_MEMO_TYPE = /* @__PURE__ */ Symbol.for("react.memo");
  var ForwardRef = REACT_FORWARD_REF_TYPE;
  var Memo = REACT_MEMO_TYPE;
  function defaultNoopBatch(callback) {
    callback();
  }
  function createListenerCollection() {
    let first = null;
    let last2 = null;
    return {
      clear() {
        first = null;
        last2 = null;
      },
      notify() {
        defaultNoopBatch(() => {
          let listener2 = first;
          while (listener2) {
            listener2.callback();
            listener2 = listener2.next;
          }
        });
      },
      get() {
        const listeners = [];
        let listener2 = first;
        while (listener2) {
          listeners.push(listener2);
          listener2 = listener2.next;
        }
        return listeners;
      },
      subscribe(callback) {
        let isSubscribed = true;
        const listener2 = last2 = {
          callback,
          next: null,
          prev: last2
        };
        if (listener2.prev) {
          listener2.prev.next = listener2;
        } else {
          first = listener2;
        }
        return function unsubscribe() {
          if (!isSubscribed || first === null) return;
          isSubscribed = false;
          if (listener2.next) {
            listener2.next.prev = listener2.prev;
          } else {
            last2 = listener2.prev;
          }
          if (listener2.prev) {
            listener2.prev.next = listener2.next;
          } else {
            first = listener2.next;
          }
        };
      }
    };
  }
  var nullListeners = {
    notify() {
    },
    get: () => []
  };
  function createSubscription(store, parentSub) {
    let unsubscribe;
    let listeners = nullListeners;
    let subscriptionsAmount = 0;
    let selfSubscribed = false;
    function addNestedSub(listener2) {
      trySubscribe();
      const cleanupListener = listeners.subscribe(listener2);
      let removed = false;
      return () => {
        if (!removed) {
          removed = true;
          cleanupListener();
          tryUnsubscribe();
        }
      };
    }
    function notifyNestedSubs() {
      listeners.notify();
    }
    function handleChangeWrapper() {
      if (subscription.onStateChange) {
        subscription.onStateChange();
      }
    }
    function isSubscribed() {
      return selfSubscribed;
    }
    function trySubscribe() {
      subscriptionsAmount++;
      if (!unsubscribe) {
        unsubscribe = parentSub ? parentSub.addNestedSub(handleChangeWrapper) : store.subscribe(handleChangeWrapper);
        listeners = createListenerCollection();
      }
    }
    function tryUnsubscribe() {
      subscriptionsAmount--;
      if (unsubscribe && subscriptionsAmount === 0) {
        unsubscribe();
        unsubscribe = void 0;
        listeners.clear();
        listeners = nullListeners;
      }
    }
    function trySubscribeSelf() {
      if (!selfSubscribed) {
        selfSubscribed = true;
        trySubscribe();
      }
    }
    function tryUnsubscribeSelf() {
      if (selfSubscribed) {
        selfSubscribed = false;
        tryUnsubscribe();
      }
    }
    const subscription = {
      addNestedSub,
      notifyNestedSubs,
      handleChangeWrapper,
      isSubscribed,
      trySubscribe: trySubscribeSelf,
      tryUnsubscribe: tryUnsubscribeSelf,
      getListeners: () => listeners
    };
    return subscription;
  }
  var canUseDOM = () => !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
  var isDOM = /* @__PURE__ */ canUseDOM();
  var isRunningInReactNative = () => typeof navigator !== "undefined" && navigator.product === "ReactNative";
  var isReactNative = /* @__PURE__ */ isRunningInReactNative();
  var getUseIsomorphicLayoutEffect = () => isDOM || isReactNative ? React39.useLayoutEffect : React39.useEffect;
  var useIsomorphicLayoutEffect = /* @__PURE__ */ getUseIsomorphicLayoutEffect();
  var FORWARD_REF_STATICS = {
    $$typeof: true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  };
  var MEMO_STATICS = {
    $$typeof: true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  };
  var TYPE_STATICS = {
    [ForwardRef]: FORWARD_REF_STATICS,
    [Memo]: MEMO_STATICS
  };
  var objectPrototype = Object.prototype;
  var ContextKey = /* @__PURE__ */ Symbol.for(`react-redux-context`);
  var gT = typeof globalThis !== "undefined" ? globalThis : (
    /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */
    {}
  );
  function getContext() {
    if (!React39.createContext) return {};
    const contextMap = gT[ContextKey] ??= /* @__PURE__ */ new Map();
    let realContext = contextMap.get(React39.createContext);
    if (!realContext) {
      realContext = React39.createContext(
        null
      );
      if (false) {
        realContext.displayName = "ReactRedux";
      }
      contextMap.set(React39.createContext, realContext);
    }
    return realContext;
  }
  var ReactReduxContext = /* @__PURE__ */ getContext();
  function Provider(providerProps) {
    const { children, context, serverState, store } = providerProps;
    const contextValue = React39.useMemo(() => {
      const subscription = createSubscription(store);
      const baseContextValue = {
        store,
        subscription,
        getServerState: serverState ? () => serverState : void 0
      };
      if (true) {
        return baseContextValue;
      } else {
        const { identityFunctionCheck = "once", stabilityCheck = "once" } = providerProps;
        return /* @__PURE__ */ Object.assign(baseContextValue, {
          stabilityCheck,
          identityFunctionCheck
        });
      }
    }, [store, serverState]);
    const previousState = React39.useMemo(() => store.getState(), [store]);
    useIsomorphicLayoutEffect(() => {
      const { subscription } = contextValue;
      subscription.onStateChange = subscription.notifyNestedSubs;
      subscription.trySubscribe();
      if (previousState !== store.getState()) {
        subscription.notifyNestedSubs();
      }
      return () => {
        subscription.tryUnsubscribe();
        subscription.onStateChange = void 0;
      };
    }, [contextValue, previousState]);
    const Context = context || ReactReduxContext;
    return /* @__PURE__ */ React39.createElement(Context.Provider, { value: contextValue }, children);
  }
  var Provider_default = Provider;

  // node_modules/recharts/es6/state/selectors/selectActivePropsFromChartPointer.js
  var pickChartPointer = (_state, chartPointer) => chartPointer;
  var selectActivePropsFromChartPointer = createSelector([pickChartPointer, selectChartLayout, selectPolarViewBox, selectTooltipAxisType, selectTooltipAxisRangeWithReverse, selectTooltipAxisTicks, selectOrderedTooltipTicks, selectChartOffsetInternal], combineActiveProps);

  // node_modules/recharts/es6/util/getChartPointer.js
  var getChartPointer = (event) => {
    var rect = event.currentTarget.getBoundingClientRect();
    var scaleX = rect.width / event.currentTarget.offsetWidth;
    var scaleY = rect.height / event.currentTarget.offsetHeight;
    return {
      /*
       * Here it's important to use:
       * - event.clientX and event.clientY to get the mouse position relative to the viewport, including scroll.
       * - pageX and pageY are not used because they are relative to the whole document, and ignore scroll.
       * - rect.left and rect.top are used to get the position of the chart relative to the viewport.
       * - offsetX and offsetY are not used because they are relative to the offset parent
       *  which may or may not be the same as the clientX and clientY, depending on the position of the chart in the DOM
       *  and surrounding element styles. CSS position: relative, absolute, fixed, will change the offset parent.
       * - scaleX and scaleY are necessary for when the chart element is scaled using CSS `transform: scale(N)`.
       */
      chartX: Math.round((event.clientX - rect.left) / scaleX),
      chartY: Math.round((event.clientY - rect.top) / scaleY)
    };
  };

  // node_modules/recharts/es6/state/mouseEventsMiddleware.js
  var mouseClickAction = createAction("mouseClick");
  var mouseClickMiddleware = createListenerMiddleware();
  mouseClickMiddleware.startListening({
    actionCreator: mouseClickAction,
    effect: (action, listenerApi) => {
      var mousePointer = action.payload;
      var activeProps = selectActivePropsFromChartPointer(listenerApi.getState(), getChartPointer(mousePointer));
      if ((activeProps === null || activeProps === void 0 ? void 0 : activeProps.activeIndex) != null) {
        listenerApi.dispatch(setMouseClickAxisIndex({
          activeIndex: activeProps.activeIndex,
          activeDataKey: void 0,
          activeCoordinate: activeProps.activeCoordinate
        }));
      }
    }
  });
  var mouseMoveAction = createAction("mouseMove");
  var mouseMoveMiddleware = createListenerMiddleware();
  mouseMoveMiddleware.startListening({
    actionCreator: mouseMoveAction,
    effect: (action, listenerApi) => {
      var mousePointer = action.payload;
      var state = listenerApi.getState();
      var tooltipEventType = selectTooltipEventType(state, state.tooltip.settings.shared);
      var activeProps = selectActivePropsFromChartPointer(state, getChartPointer(mousePointer));
      if (tooltipEventType === "axis") {
        if ((activeProps === null || activeProps === void 0 ? void 0 : activeProps.activeIndex) != null) {
          listenerApi.dispatch(setMouseOverAxisIndex({
            activeIndex: activeProps.activeIndex,
            activeDataKey: void 0,
            activeCoordinate: activeProps.activeCoordinate
          }));
        } else {
          listenerApi.dispatch(mouseLeaveChart());
        }
      }
    }
  });

  // node_modules/recharts/es6/state/reduxDevtoolsJsonStringifyReplacer.js
  function reduxDevtoolsJsonStringifyReplacer(_key, value) {
    if (value instanceof HTMLElement) {
      return "HTMLElement <".concat(value.tagName, ' class="').concat(value.className, '">');
    }
    if (value === window) {
      return "global.window";
    }
    return value;
  }

  // node_modules/recharts/es6/state/rootPropsSlice.js
  var initialState11 = {
    accessibilityLayer: true,
    barCategoryGap: "10%",
    barGap: 4,
    barSize: void 0,
    className: void 0,
    maxBarSize: void 0,
    stackOffset: "none",
    syncId: void 0,
    syncMethod: "index"
  };
  var rootPropsSlice = createSlice({
    name: "rootProps",
    initialState: initialState11,
    reducers: {
      updateOptions: (state, action) => {
        var _action$payload$barGa;
        state.accessibilityLayer = action.payload.accessibilityLayer;
        state.barCategoryGap = action.payload.barCategoryGap;
        state.barGap = (_action$payload$barGa = action.payload.barGap) !== null && _action$payload$barGa !== void 0 ? _action$payload$barGa : initialState11.barGap;
        state.barSize = action.payload.barSize;
        state.maxBarSize = action.payload.maxBarSize;
        state.stackOffset = action.payload.stackOffset;
        state.syncId = action.payload.syncId;
        state.syncMethod = action.payload.syncMethod;
        state.className = action.payload.className;
      }
    }
  });
  var rootPropsReducer = rootPropsSlice.reducer;
  var {
    updateOptions
  } = rootPropsSlice.actions;

  // node_modules/recharts/es6/state/polarOptionsSlice.js
  var polarOptionsSlice = createSlice({
    name: "polarOptions",
    initialState: null,
    reducers: {
      updatePolarOptions: (_state, action) => {
        return action.payload;
      }
    }
  });
  var {
    updatePolarOptions
  } = polarOptionsSlice.actions;
  var polarOptionsReducer = polarOptionsSlice.reducer;

  // node_modules/recharts/es6/state/keyboardEventsMiddleware.js
  var keyDownAction = createAction("keyDown");
  var focusAction = createAction("focus");
  var keyboardEventsMiddleware = createListenerMiddleware();
  keyboardEventsMiddleware.startListening({
    actionCreator: keyDownAction,
    effect: (action, listenerApi) => {
      var state = listenerApi.getState();
      var accessibilityLayerIsActive = state.rootProps.accessibilityLayer !== false;
      if (!accessibilityLayerIsActive) {
        return;
      }
      var {
        keyboardInteraction
      } = state.tooltip;
      var key = action.payload;
      if (key !== "ArrowRight" && key !== "ArrowLeft" && key !== "Enter") {
        return;
      }
      var currentIndex = Number(combineActiveTooltipIndex(keyboardInteraction, selectTooltipDisplayedData(state)));
      var tooltipTicks = selectTooltipAxisTicks(state);
      if (key === "Enter") {
        var _coordinate = selectCoordinateForDefaultIndex(state, "axis", "hover", String(keyboardInteraction.index));
        listenerApi.dispatch(setKeyboardInteraction({
          active: !keyboardInteraction.active,
          activeIndex: keyboardInteraction.index,
          activeDataKey: keyboardInteraction.dataKey,
          activeCoordinate: _coordinate
        }));
        return;
      }
      var direction = selectChartDirection(state);
      var directionMultiplier = direction === "left-to-right" ? 1 : -1;
      var movement = key === "ArrowRight" ? 1 : -1;
      var nextIndex = currentIndex + movement * directionMultiplier;
      if (tooltipTicks == null || nextIndex >= tooltipTicks.length || nextIndex < 0) {
        return;
      }
      var coordinate = selectCoordinateForDefaultIndex(state, "axis", "hover", String(nextIndex));
      listenerApi.dispatch(setKeyboardInteraction({
        active: true,
        activeIndex: nextIndex.toString(),
        activeDataKey: void 0,
        activeCoordinate: coordinate
      }));
    }
  });
  keyboardEventsMiddleware.startListening({
    actionCreator: focusAction,
    effect: (_action, listenerApi) => {
      var state = listenerApi.getState();
      var accessibilityLayerIsActive = state.rootProps.accessibilityLayer !== false;
      if (!accessibilityLayerIsActive) {
        return;
      }
      var {
        keyboardInteraction
      } = state.tooltip;
      if (keyboardInteraction.active) {
        return;
      }
      if (keyboardInteraction.index == null) {
        var nextIndex = "0";
        var coordinate = selectCoordinateForDefaultIndex(state, "axis", "hover", String(nextIndex));
        listenerApi.dispatch(setKeyboardInteraction({
          activeDataKey: void 0,
          active: true,
          activeIndex: nextIndex,
          activeCoordinate: coordinate
        }));
      }
    }
  });

  // node_modules/recharts/es6/state/externalEventsMiddleware.js
  var externalEventAction = createAction("externalEvent");
  var externalEventsMiddleware = createListenerMiddleware();
  externalEventsMiddleware.startListening({
    actionCreator: externalEventAction,
    effect: (action, listenerApi) => {
      if (action.payload.handler == null) {
        return;
      }
      var state = listenerApi.getState();
      var nextState = {
        activeCoordinate: selectActiveTooltipCoordinate(state),
        activeDataKey: selectActiveTooltipDataKey(state),
        activeIndex: selectActiveTooltipIndex(state),
        activeLabel: selectActiveLabel(state),
        activeTooltipIndex: selectActiveTooltipIndex(state),
        isTooltipActive: selectIsTooltipActive(state)
      };
      action.payload.handler(nextState, action.payload.reactEvent);
    }
  });

  // node_modules/recharts/es6/state/selectors/touchSelectors.js
  var selectAllTooltipPayloadConfiguration = createSelector([selectTooltipState], (tooltipState) => tooltipState.tooltipItemPayloads);
  var selectTooltipCoordinate = createSelector([selectAllTooltipPayloadConfiguration, selectTooltipPayloadSearcher, (_state, tooltipIndex, _dataKey) => tooltipIndex, (_state, _tooltipIndex, dataKey) => dataKey], (allTooltipConfigurations, tooltipPayloadSearcher, tooltipIndex, dataKey) => {
    var mostRelevantTooltipConfiguration = allTooltipConfigurations.find((tooltipConfiguration) => {
      return tooltipConfiguration.settings.dataKey === dataKey;
    });
    if (mostRelevantTooltipConfiguration == null) {
      return void 0;
    }
    var {
      positions
    } = mostRelevantTooltipConfiguration;
    if (positions == null) {
      return void 0;
    }
    var maybePosition = tooltipPayloadSearcher(positions, tooltipIndex);
    return maybePosition;
  });

  // node_modules/recharts/es6/state/touchEventsMiddleware.js
  var touchEventAction = createAction("touchMove");
  var touchEventMiddleware = createListenerMiddleware();
  touchEventMiddleware.startListening({
    actionCreator: touchEventAction,
    effect: (action, listenerApi) => {
      var touchEvent = action.payload;
      var state = listenerApi.getState();
      var tooltipEventType = selectTooltipEventType(state, state.tooltip.settings.shared);
      if (tooltipEventType === "axis") {
        var activeProps = selectActivePropsFromChartPointer(state, getChartPointer({
          clientX: touchEvent.touches[0].clientX,
          clientY: touchEvent.touches[0].clientY,
          currentTarget: touchEvent.currentTarget
        }));
        if ((activeProps === null || activeProps === void 0 ? void 0 : activeProps.activeIndex) != null) {
          listenerApi.dispatch(setMouseOverAxisIndex({
            activeIndex: activeProps.activeIndex,
            activeDataKey: void 0,
            activeCoordinate: activeProps.activeCoordinate
          }));
        }
      } else if (tooltipEventType === "item") {
        var _target$getAttribute;
        var touch = touchEvent.touches[0];
        var target = document.elementFromPoint(touch.clientX, touch.clientY);
        if (!target || !target.getAttribute) {
          return;
        }
        var itemIndex = target.getAttribute(DATA_ITEM_INDEX_ATTRIBUTE_NAME);
        var dataKey = (_target$getAttribute = target.getAttribute(DATA_ITEM_DATAKEY_ATTRIBUTE_NAME)) !== null && _target$getAttribute !== void 0 ? _target$getAttribute : void 0;
        var coordinate = selectTooltipCoordinate(listenerApi.getState(), itemIndex, dataKey);
        listenerApi.dispatch(setActiveMouseOverItemIndex({
          activeDataKey: dataKey,
          activeIndex: itemIndex,
          activeCoordinate: coordinate
        }));
      }
    }
  });

  // node_modules/recharts/es6/state/store.js
  var rootReducer = combineReducers({
    brush: brushReducer,
    cartesianAxis: cartesianAxisReducer,
    chartData: chartDataReducer,
    errorBars: errorBarReducer,
    graphicalItems: graphicalItemsReducer,
    layout: chartLayoutReducer,
    legend: legendReducer,
    options: optionsReducer,
    polarAxis: polarAxisReducer,
    polarOptions: polarOptionsReducer,
    referenceElements: referenceElementsReducer,
    rootProps: rootPropsReducer,
    tooltip: tooltipReducer
  });
  var createRechartsStore = function createRechartsStore2(preloadedState) {
    var chartName = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : "Chart";
    return configureStore({
      reducer: rootReducer,
      // redux-toolkit v1 types are unhappy with the preloadedState type. Remove the `as any` when bumping to v2
      preloadedState,
      // @ts-expect-error redux-toolkit v1 types are unhappy with the middleware array. Remove this comment when bumping to v2
      middleware: (getDefaultMiddleware) => getDefaultMiddleware({
        serializableCheck: false
      }).concat([mouseClickMiddleware.middleware, mouseMoveMiddleware.middleware, keyboardEventsMiddleware.middleware, externalEventsMiddleware.middleware, touchEventMiddleware.middleware]),
      devTools: !!window.RECHARTS_DEV_TOOLS_ENABLED && {
        serialize: {
          replacer: reduxDevtoolsJsonStringifyReplacer
        },
        name: "recharts-".concat(chartName)
      }
    });
  };

  // node_modules/recharts/es6/state/RechartsStoreProvider.js
  function RechartsStoreProvider(_ref2) {
    var {
      preloadedState,
      children,
      reduxStoreName
    } = _ref2;
    var isPanorama = useIsPanorama();
    var storeRef = (0, import_react46.useRef)(null);
    if (isPanorama) {
      return children;
    }
    if (storeRef.current == null) {
      storeRef.current = createRechartsStore(preloadedState, reduxStoreName);
    }
    var nonNullContext = RechartsReduxContext;
    return /* @__PURE__ */ React40.createElement(Provider_default, {
      context: nonNullContext,
      store: storeRef.current
    }, children);
  }

  // node_modules/recharts/es6/state/ReportMainChartProps.js
  var import_react47 = __toESM(require_react());
  function ReportMainChartProps(_ref2) {
    var {
      layout,
      width,
      height,
      margin
    } = _ref2;
    var dispatch = useAppDispatch();
    var isPanorama = useIsPanorama();
    (0, import_react47.useEffect)(() => {
      if (!isPanorama) {
        dispatch(setLayout(layout));
        dispatch(setChartSize({
          width,
          height
        }));
        dispatch(setMargin(margin));
      }
    }, [dispatch, isPanorama, layout, width, height, margin]);
    return null;
  }

  // node_modules/recharts/es6/state/ReportChartProps.js
  var import_react48 = __toESM(require_react());
  function ReportChartProps(props) {
    var dispatch = useAppDispatch();
    (0, import_react48.useEffect)(() => {
      dispatch(updateOptions(props));
    }, [dispatch, props]);
    return null;
  }

  // node_modules/recharts/es6/chart/CategoricalChart.js
  var React43 = __toESM(require_react());
  var import_react52 = __toESM(require_react());

  // node_modules/recharts/es6/container/RootSurface.js
  var React41 = __toESM(require_react());
  var import_react49 = __toESM(require_react());
  var _excluded18 = ["children"];
  function _objectWithoutProperties18(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose18(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose18(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  function _extends22() {
    return _extends22 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends22.apply(null, arguments);
  }
  var FULL_WIDTH_AND_HEIGHT = {
    width: "100%",
    height: "100%"
  };
  var MainChartSurface = /* @__PURE__ */ (0, import_react49.forwardRef)((props, ref) => {
    var width = useChartWidth();
    var height = useChartHeight();
    var hasAccessibilityLayer = useAccessibilityLayer();
    if (!isPositiveNumber(width) || !isPositiveNumber(height)) {
      return null;
    }
    var {
      children,
      otherAttributes,
      title,
      desc
    } = props;
    var tabIndex, role;
    if (typeof otherAttributes.tabIndex === "number") {
      tabIndex = otherAttributes.tabIndex;
    } else {
      tabIndex = hasAccessibilityLayer ? 0 : void 0;
    }
    if (typeof otherAttributes.role === "string") {
      role = otherAttributes.role;
    } else {
      role = hasAccessibilityLayer ? "application" : void 0;
    }
    return /* @__PURE__ */ React41.createElement(Surface, _extends22({}, otherAttributes, {
      title,
      desc,
      role,
      tabIndex,
      width,
      height,
      style: FULL_WIDTH_AND_HEIGHT,
      ref
    }), children);
  });
  var BrushPanoramaSurface = (_ref2) => {
    var {
      children
    } = _ref2;
    var brushDimensions = useAppSelector(selectBrushDimensions);
    if (!brushDimensions) {
      return null;
    }
    var {
      width,
      height,
      y: y2,
      x: x2
    } = brushDimensions;
    return /* @__PURE__ */ React41.createElement(Surface, {
      width,
      height,
      x: x2,
      y: y2
    }, children);
  };
  var RootSurface = /* @__PURE__ */ (0, import_react49.forwardRef)((_ref2, ref) => {
    var {
      children
    } = _ref2, rest = _objectWithoutProperties18(_ref2, _excluded18);
    var isPanorama = useIsPanorama();
    if (isPanorama) {
      return /* @__PURE__ */ React41.createElement(BrushPanoramaSurface, null, children);
    }
    return /* @__PURE__ */ React41.createElement(MainChartSurface, _extends22({
      ref
    }, rest), children);
  });

  // node_modules/recharts/es6/chart/RechartsWrapper.js
  var React42 = __toESM(require_react());
  var import_react51 = __toESM(require_react());

  // node_modules/recharts/es6/util/useReportScale.js
  var import_react50 = __toESM(require_react());
  function useReportScale() {
    var dispatch = useAppDispatch();
    var [ref, setRef] = (0, import_react50.useState)(null);
    var scale = useAppSelector(selectContainerScale);
    (0, import_react50.useEffect)(() => {
      if (ref == null) {
        return;
      }
      var rect = ref.getBoundingClientRect();
      var newScale = rect.width / ref.offsetWidth;
      if (isWellBehavedNumber(newScale) && newScale !== scale) {
        dispatch(setScale(newScale));
      }
    }, [ref, dispatch, scale]);
    return setRef;
  }

  // node_modules/recharts/es6/chart/RechartsWrapper.js
  function ownKeys34(e, r2) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
      var o = Object.getOwnPropertySymbols(e);
      r2 && (o = o.filter(function(r3) {
        return Object.getOwnPropertyDescriptor(e, r3).enumerable;
      })), t.push.apply(t, o);
    }
    return t;
  }
  function _objectSpread34(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t = null != arguments[r2] ? arguments[r2] : {};
      r2 % 2 ? ownKeys34(Object(t), true).forEach(function(r3) {
        _defineProperty38(e, r3, t[r3]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys34(Object(t)).forEach(function(r3) {
        Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
      });
    }
    return e;
  }
  function _defineProperty38(e, r2, t) {
    return (r2 = _toPropertyKey38(r2)) in e ? Object.defineProperty(e, r2, { value: t, enumerable: true, configurable: true, writable: true }) : e[r2] = t, e;
  }
  function _toPropertyKey38(t) {
    var i = _toPrimitive38(t, "string");
    return "symbol" == typeof i ? i : i + "";
  }
  function _toPrimitive38(t, r2) {
    if ("object" != typeof t || !t) return t;
    var e = t[Symbol.toPrimitive];
    if (void 0 !== e) {
      var i = e.call(t, r2 || "default");
      if ("object" != typeof i) return i;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return ("string" === r2 ? String : Number)(t);
  }
  var RechartsWrapper = /* @__PURE__ */ (0, import_react51.forwardRef)((_ref2, ref) => {
    var {
      children,
      className,
      height,
      onClick,
      onContextMenu,
      onDoubleClick,
      onMouseDown,
      onMouseEnter,
      onMouseLeave,
      onMouseMove,
      onMouseUp,
      onTouchEnd,
      onTouchMove,
      onTouchStart,
      style,
      width
    } = _ref2;
    var dispatch = useAppDispatch();
    var [tooltipPortal, setTooltipPortal] = (0, import_react51.useState)(null);
    var [legendPortal, setLegendPortal] = (0, import_react51.useState)(null);
    useSynchronisedEventsFromOtherCharts();
    var setScaleRef = useReportScale();
    var innerRef = (0, import_react51.useCallback)((node) => {
      setScaleRef(node);
      if (typeof ref === "function") {
        ref(node);
      }
      setTooltipPortal(node);
      setLegendPortal(node);
    }, [setScaleRef, ref, setTooltipPortal, setLegendPortal]);
    var myOnClick = (0, import_react51.useCallback)((e) => {
      dispatch(mouseClickAction(e));
      dispatch(externalEventAction({
        handler: onClick,
        reactEvent: e
      }));
    }, [dispatch, onClick]);
    var myOnMouseEnter = (0, import_react51.useCallback)((e) => {
      dispatch(mouseMoveAction(e));
      dispatch(externalEventAction({
        handler: onMouseEnter,
        reactEvent: e
      }));
    }, [dispatch, onMouseEnter]);
    var myOnMouseLeave = (0, import_react51.useCallback)((e) => {
      dispatch(mouseLeaveChart());
      dispatch(externalEventAction({
        handler: onMouseLeave,
        reactEvent: e
      }));
    }, [dispatch, onMouseLeave]);
    var myOnMouseMove = (0, import_react51.useCallback)((e) => {
      dispatch(mouseMoveAction(e));
      dispatch(externalEventAction({
        handler: onMouseMove,
        reactEvent: e
      }));
    }, [dispatch, onMouseMove]);
    var onFocus = (0, import_react51.useCallback)(() => {
      dispatch(focusAction());
    }, [dispatch]);
    var onKeyDown = (0, import_react51.useCallback)((e) => {
      dispatch(keyDownAction(e.key));
    }, [dispatch]);
    var myOnContextMenu = (0, import_react51.useCallback)((e) => {
      dispatch(externalEventAction({
        handler: onContextMenu,
        reactEvent: e
      }));
    }, [dispatch, onContextMenu]);
    var myOnDoubleClick = (0, import_react51.useCallback)((e) => {
      dispatch(externalEventAction({
        handler: onDoubleClick,
        reactEvent: e
      }));
    }, [dispatch, onDoubleClick]);
    var myOnMouseDown = (0, import_react51.useCallback)((e) => {
      dispatch(externalEventAction({
        handler: onMouseDown,
        reactEvent: e
      }));
    }, [dispatch, onMouseDown]);
    var myOnMouseUp = (0, import_react51.useCallback)((e) => {
      dispatch(externalEventAction({
        handler: onMouseUp,
        reactEvent: e
      }));
    }, [dispatch, onMouseUp]);
    var myOnTouchStart = (0, import_react51.useCallback)((e) => {
      dispatch(externalEventAction({
        handler: onTouchStart,
        reactEvent: e
      }));
    }, [dispatch, onTouchStart]);
    var myOnTouchMove = (0, import_react51.useCallback)((e) => {
      dispatch(touchEventAction(e));
      dispatch(externalEventAction({
        handler: onTouchMove,
        reactEvent: e
      }));
    }, [dispatch, onTouchMove]);
    var myOnTouchEnd = (0, import_react51.useCallback)((e) => {
      dispatch(externalEventAction({
        handler: onTouchEnd,
        reactEvent: e
      }));
    }, [dispatch, onTouchEnd]);
    return /* @__PURE__ */ React42.createElement(TooltipPortalContext.Provider, {
      value: tooltipPortal
    }, /* @__PURE__ */ React42.createElement(LegendPortalContext.Provider, {
      value: legendPortal
    }, /* @__PURE__ */ React42.createElement("div", {
      className: clsx("recharts-wrapper", className),
      style: _objectSpread34({
        position: "relative",
        cursor: "default",
        width,
        height
      }, style),
      onClick: myOnClick,
      onContextMenu: myOnContextMenu,
      onDoubleClick: myOnDoubleClick,
      onFocus,
      onKeyDown,
      onMouseDown: myOnMouseDown,
      onMouseEnter: myOnMouseEnter,
      onMouseLeave: myOnMouseLeave,
      onMouseMove: myOnMouseMove,
      onMouseUp: myOnMouseUp,
      onTouchEnd: myOnTouchEnd,
      onTouchMove: myOnTouchMove,
      onTouchStart: myOnTouchStart,
      ref: innerRef
    }, children)));
  });

  // node_modules/recharts/es6/chart/CategoricalChart.js
  var _excluded19 = ["children", "className", "width", "height", "style", "compact", "title", "desc"];
  function _objectWithoutProperties19(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose19(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose19(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  var CategoricalChart = /* @__PURE__ */ (0, import_react52.forwardRef)((props, ref) => {
    var {
      children,
      className,
      width,
      height,
      style,
      compact,
      title,
      desc
    } = props, others = _objectWithoutProperties19(props, _excluded19);
    var attrs = svgPropertiesNoEvents(others);
    if (compact) {
      return /* @__PURE__ */ React43.createElement(RootSurface, {
        otherAttributes: attrs,
        title,
        desc
      }, children);
    }
    return /* @__PURE__ */ React43.createElement(RechartsWrapper, {
      className,
      style,
      width,
      height,
      onClick: props.onClick,
      onMouseLeave: props.onMouseLeave,
      onMouseEnter: props.onMouseEnter,
      onMouseMove: props.onMouseMove,
      onMouseDown: props.onMouseDown,
      onMouseUp: props.onMouseUp,
      onContextMenu: props.onContextMenu,
      onDoubleClick: props.onDoubleClick,
      onTouchStart: props.onTouchStart,
      onTouchMove: props.onTouchMove,
      onTouchEnd: props.onTouchEnd
    }, /* @__PURE__ */ React43.createElement(RootSurface, {
      otherAttributes: attrs,
      title,
      desc,
      ref
    }, /* @__PURE__ */ React43.createElement(ClipPathProvider, null, children)));
  });

  // node_modules/recharts/es6/chart/CartesianChart.js
  var _excluded20 = ["width", "height"];
  function _extends23() {
    return _extends23 = Object.assign ? Object.assign.bind() : function(n) {
      for (var e = 1; e < arguments.length; e++) {
        var t = arguments[e];
        for (var r2 in t) ({}).hasOwnProperty.call(t, r2) && (n[r2] = t[r2]);
      }
      return n;
    }, _extends23.apply(null, arguments);
  }
  function _objectWithoutProperties20(e, t) {
    if (null == e) return {};
    var o, r2, i = _objectWithoutPropertiesLoose20(e, t);
    if (Object.getOwnPropertySymbols) {
      var n = Object.getOwnPropertySymbols(e);
      for (r2 = 0; r2 < n.length; r2++) o = n[r2], -1 === t.indexOf(o) && {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]);
    }
    return i;
  }
  function _objectWithoutPropertiesLoose20(r2, e) {
    if (null == r2) return {};
    var t = {};
    for (var n in r2) if ({}.hasOwnProperty.call(r2, n)) {
      if (-1 !== e.indexOf(n)) continue;
      t[n] = r2[n];
    }
    return t;
  }
  var defaultMargin = {
    top: 5,
    right: 5,
    bottom: 5,
    left: 5
  };
  var defaultProps5 = {
    accessibilityLayer: true,
    layout: "horizontal",
    stackOffset: "none",
    barCategoryGap: "10%",
    barGap: 4,
    margin: defaultMargin,
    reverseStackOrder: false,
    syncMethod: "index"
  };
  var CartesianChart = /* @__PURE__ */ (0, import_react53.forwardRef)(function CartesianChart2(props, ref) {
    var _categoricalChartProp;
    var rootChartProps = resolveDefaultProps(props.categoricalChartProps, defaultProps5);
    var {
      width,
      height
    } = rootChartProps, otherCategoricalProps = _objectWithoutProperties20(rootChartProps, _excluded20);
    if (!isPositiveNumber(width) || !isPositiveNumber(height)) {
      return null;
    }
    var {
      chartName,
      defaultTooltipEventType,
      validateTooltipEventTypes,
      tooltipPayloadSearcher,
      categoricalChartProps
    } = props;
    var options = {
      chartName,
      defaultTooltipEventType,
      validateTooltipEventTypes,
      tooltipPayloadSearcher,
      eventEmitter: void 0
    };
    return /* @__PURE__ */ React44.createElement(RechartsStoreProvider, {
      preloadedState: {
        options
      },
      reduxStoreName: (_categoricalChartProp = categoricalChartProps.id) !== null && _categoricalChartProp !== void 0 ? _categoricalChartProp : chartName
    }, /* @__PURE__ */ React44.createElement(ChartDataContextProvider, {
      chartData: categoricalChartProps.data
    }), /* @__PURE__ */ React44.createElement(ReportMainChartProps, {
      width,
      height,
      layout: rootChartProps.layout,
      margin: rootChartProps.margin
    }), /* @__PURE__ */ React44.createElement(ReportChartProps, {
      accessibilityLayer: rootChartProps.accessibilityLayer,
      barCategoryGap: rootChartProps.barCategoryGap,
      maxBarSize: rootChartProps.maxBarSize,
      stackOffset: rootChartProps.stackOffset,
      barGap: rootChartProps.barGap,
      barSize: rootChartProps.barSize,
      syncId: rootChartProps.syncId,
      syncMethod: rootChartProps.syncMethod,
      className: rootChartProps.className
    }), /* @__PURE__ */ React44.createElement(CategoricalChart, _extends23({}, otherCategoricalProps, {
      width,
      height,
      ref
    })));
  });

  // node_modules/recharts/es6/chart/BarChart.js
  var React45 = __toESM(require_react());
  var import_react54 = __toESM(require_react());
  var allowedTooltipTypes = ["axis", "item"];
  var BarChart = /* @__PURE__ */ (0, import_react54.forwardRef)((props, ref) => {
    return /* @__PURE__ */ React45.createElement(CartesianChart, {
      chartName: "BarChart",
      defaultTooltipEventType: "axis",
      validateTooltipEventTypes: allowedTooltipTypes,
      tooltipPayloadSearcher: arrayTooltipSearcher,
      categoricalChartProps: props,
      ref
    });
  });

  // components/dashboard/FinancialChart.tsx
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var FinancialChart = ({ data }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)("div", { style: { width: "100%", height: 300 }, children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(ResponsiveContainer, { children: /* @__PURE__ */ (0, import_jsx_runtime11.jsxs)(
      BarChart,
      {
        data,
        margin: {
          top: 5,
          right: 20,
          left: -10,
          bottom: 5
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(CartesianGrid, { strokeDasharray: "3 3", stroke: "rgba(128, 128, 128, 0.2)" }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(XAxis, { dataKey: "name", tick: { fill: "#9ca3af" } }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(YAxis, { tick: { fill: "#9ca3af" } }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
            Tooltip,
            {
              contentStyle: {
                backgroundColor: "#1e293b",
                borderColor: "#334155",
                color: "#e2e8f0"
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Legend, {}),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Bar, { dataKey: "income", fill: "#10b981", name: "Income", radius: [4, 4, 0, 0] }),
          /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(Bar, { dataKey: "expenses", fill: "#ef4444", name: "Expenses", radius: [4, 4, 0, 0] })
        ]
      }
    ) }) });
  };
  var FinancialChart_default = FinancialChart;

  // components/dashboard/ActivityFeed.tsx
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var ActivityFeed = ({ items }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "flow-root", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("ul", { role: "list", className: "-mb-8", children: items.map((item, itemIdx) => /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "relative pb-8", children: [
      itemIdx !== items.length - 1 ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("span", { className: "absolute top-4 left-4 -ml-px h-full w-0.5 bg-gray-200 dark:bg-gray-700", "aria-hidden": "true" }) : null,
      /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "relative flex space-x-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("span", { className: "h-8 w-8 rounded-full flex items-center justify-center ring-4 ring-white dark:ring-dark-card", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("img", { className: "h-full w-full rounded-full object-cover", src: item.user.avatarUrl, alt: item.user.name }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("div", { className: "flex min-w-0 flex-1 justify-between space-x-4 pt-1.5", children: [
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("span", { className: "font-medium text-gray-900 dark:text-white", children: item.user.name }),
            " ",
            item.action,
            " ",
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("span", { className: "font-medium text-gray-900 dark:text-white", children: item.target })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "whitespace-nowrap text-right text-sm text-gray-500 dark:text-gray-400", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("time", { children: item.timestamp }) })
        ] })
      ] })
    ] }) }, item.id)) }) });
  };
  var ActivityFeed_default = ActivityFeed;

  // data/mockData.ts
  var mockThreads = [
    {
      id: "thread-1",
      title: "Project Alpha Planning",
      participants: [{ name: "Mohammed Semeem", avatarUrl: "https://picsum.photos/seed/semeem/40/40" }, { name: "Suhair Mahmoud", avatarUrl: "https://picsum.photos/seed/suhair/40/40" }],
      messages: [
        { id: 1, user: { name: "Mohammed Semeem", avatarUrl: "https://picsum.photos/seed/semeem/40/40" }, text: "We need to finalize the budget by EOD.", timestamp: "10:30 AM" },
        { id: 2, user: { name: "Suhair Mahmoud", avatarUrl: "https://picsum.photos/seed/suhair/40/40" }, text: "I have the latest figures, will send them over in 10 minutes.", timestamp: "10:32 AM" },
        { id: 3, user: { name: "Suhair Mahmoud", avatarUrl: "https://picsum.photos/seed/suhair/40/40" }, text: "Here are the updated budget figures for Project Alpha. I've accounted for the increased material costs we discussed last week. The new total comes to AED 1.2M, which is slightly above our initial projection but manageable. I also included a contingency of 5%. Please review and let me know if you have any questions. I need your approval to proceed with the vendor negotiations. This is a very long message to test the summarization feature, hopefully it works as expected and provides a concise overview of this text.", timestamp: "10:45 AM" }
      ],
      lastMessage: "Here are the updated budget figures...",
      timestamp: "10:45 AM",
      unreadCount: 1
    },
    {
      id: "thread-2",
      title: "Q3 Marketing Campaign",
      participants: [{ name: "Shiraj", avatarUrl: "https://picsum.photos/seed/shiraj/40/40" }, { name: "Mohammed Semeem", avatarUrl: "https://picsum.photos/seed/semeem/40/40" }],
      messages: [{ id: 1, user: { name: "Shiraj", avatarUrl: "https://picsum.photos/seed/shiraj/40/40" }, text: "The creatives for the new campaign are ready for review.", timestamp: "Yesterday" }],
      lastMessage: "The creatives for the new campaign...",
      timestamp: "Yesterday",
      unreadCount: 0
    }
  ];

  // components/dashboard/DashboardPage.tsx
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var DashboardPage = ({ onNavigate, announcements }) => {
    const [collections, setCollections] = (0, import_react55.useState)([]);
    const [instructions, setInstructions] = (0, import_react55.useState)([]);
    const [serviceJobs, setServiceJobs] = (0, import_react55.useState)([]);
    (0, import_react55.useEffect)(() => {
      fetch("/api/finance/collections").then((res) => res.json()).then(setCollections);
      fetch("/api/finance/instructions").then((res) => res.json()).then(setInstructions);
      fetch("/api/service-jobs").then((res) => res.json()).then(setServiceJobs);
    }, []);
    const totalCollections = collections.reduce((sum, c2) => sum + c2.amount, 0);
    const pendingApprovals = instructions.filter((i) => i.status === "Pending");
    const pendingApprovalsCount = pendingApprovals.length;
    const pendingApprovalsValue = pendingApprovals.reduce((sum, i) => sum + i.amount, 0);
    const activeJobsCount = serviceJobs.filter((j) => j.status === "In Progress" || j.status === "Assigned").length;
    const unreadMessagesCount = mockThreads.reduce((sum, t) => sum + t.unreadCount, 0);
    const kpiData = [
      {
        title: "Total Collections",
        value: `AED ${totalCollections.toLocaleString("en-US", { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`,
        change: "+4.5%",
        changeType: "increase",
        link: "finance"
      },
      {
        title: "Pending Approvals",
        value: `${pendingApprovalsCount} (AED ${pendingApprovalsValue.toLocaleString()})`,
        change: "+2.1%",
        changeType: "increase",
        link: "finance"
      },
      {
        title: "Active Service Jobs",
        value: String(activeJobsCount),
        change: "-1.8%",
        changeType: "decrease",
        link: "service-jobs"
      },
      {
        title: "Unread Messages",
        value: String(unreadMessagesCount),
        change: "+1",
        changeType: "increase",
        link: "messages"
      }
    ];
    const financialData = [
      { name: "Jan", income: 4e3, expenses: 2400 },
      { name: "Feb", income: 3e3, expenses: 1398 },
      { name: "Mar", income: 5e3, expenses: 3800 },
      { name: "Apr", income: 4780, expenses: 3908 },
      { name: "May", income: 5890, expenses: 4800 },
      { name: "Jun", income: 4390, expenses: 3800 },
      { name: "Jul", income: 5490, expenses: 4300 }
    ];
    const activityData = [
      { id: 1, user: { name: "Suhair Mahmoud", avatarUrl: "https://picsum.photos/seed/suhair/40/40" }, action: "approved payment to", target: "Bosch Security Systems", timestamp: "2m ago" },
      { id: 2, user: { name: "Shiraj", avatarUrl: "https://picsum.photos/seed/shiraj/40/40" }, action: "logged a collection of AED 50,000 from", target: "Al Naboodah Construction", timestamp: "15m ago" },
      { id: 3, user: { name: "Benhur", avatarUrl: "https://picsum.photos/seed/benhur/40/40" }, action: "resolved service job #SJ-9817 for", target: "City Walk Building 7 BMS", timestamp: "1h ago" },
      { id: 4, user: { name: "Mohammed Semeem", avatarUrl: "https://picsum.photos/seed/semeem/40/40" }, action: "created a new job: Install CCTV cameras for", target: "City Walk Building 7 BMS", timestamp: "3h ago" },
      { id: 5, user: { name: "Suhair Mahmoud", avatarUrl: "https://picsum.photos/seed/suhair/40/40" }, action: "rejected payment to", target: "Hikvision Middle East", timestamp: "5h ago" },
      { id: 6, user: { name: "NOUMAN", avatarUrl: "https://picsum.photos/seed/nouman/40/40" }, action: 'updated status to "Completed" for job #SJ-9812 on', target: "Al Quoz Labour Camp Internet", timestamp: "8h ago" }
    ];
    return /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mb-6", children: "Dashboard" }),
      /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6", children: kpiData.map((kpi, index) => /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(KpiCard_default, { kpi, onClick: () => kpi.link && onNavigate(kpi.link) }, index)) }),
      /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "grid grid-cols-1 lg:grid-cols-3 gap-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "lg:col-span-2 bg-white dark:bg-dark-card p-6 rounded-lg shadow-md", children: [
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("h2", { className: "text-xl font-semibold mb-4 text-gray-800 dark:text-white", children: "Financial Overview" }),
          /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(FinancialChart_default, { data: financialData })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "space-y-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "bg-white dark:bg-dark-card p-6 rounded-lg shadow-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("h2", { className: "text-xl font-semibold mb-4 text-gray-800 dark:text-white", children: "Recent Activity" }),
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(ActivityFeed_default, { items: activityData })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "bg-white dark:bg-dark-card p-6 rounded-lg shadow-md", children: [
            /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "flex justify-between items-center mb-4", children: [
              /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("h2", { className: "text-xl font-semibold text-gray-800 dark:text-white", children: "Announcements" }),
              /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("button", { onClick: () => onNavigate("announcements"), className: "text-sm font-medium text-primary hover:text-primary/80", children: "View all" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "space-y-4", children: announcements.slice(0, 3).map((item) => /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { className: "flex items-start space-x-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("div", { className: "flex-shrink-0 h-8 w-8 rounded-full bg-primary/10 flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(MegaphoneIcon, { className: "h-5 w-5 text-primary" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime13.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("p", { className: "text-sm font-semibold text-gray-900 dark:text-white", children: item.title }),
                /* @__PURE__ */ (0, import_jsx_runtime13.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400 mt-1 line-clamp-2", children: item.content })
              ] })
            ] }, item.id)) })
          ] })
        ] })
      ] })
    ] });
  };
  var DashboardPage_default = DashboardPage;

  // components/users/UserManagementPage.tsx
  var import_react58 = __toESM(require_react());

  // components/users/AddUserModal.tsx
  var import_react56 = __toESM(require_react());
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var AddUserModal = ({ isOpen, onClose, onAddUser, roles }) => {
    const [name, setName] = (0, import_react56.useState)("");
    const [email, setEmail] = (0, import_react56.useState)("");
    const [roleId, setRoleId] = (0, import_react56.useState)("");
    const [status, setStatus] = (0, import_react56.useState)("Active");
    const [roleDescription, setRoleDescription] = (0, import_react56.useState)("");
    const [errors, setErrors] = (0, import_react56.useState)({});
    const validate = () => {
      const newErrors = {};
      if (!name.trim()) newErrors.name = "Full name is required.";
      if (!email) {
        newErrors.email = "Email address is required.";
      } else if (!/\S+@\S+\.\S+/.test(email)) {
        newErrors.email = "Email address is invalid.";
      }
      if (!roleId) newErrors.roleId = "A role is required.";
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    (0, import_react56.useEffect)(() => {
      if (isOpen) {
        const initialDefaultRole = roles.find((r2) => r2.id === "Technician")?.id || roles[0]?.id || "";
        setName("");
        setEmail("");
        setRoleId(initialDefaultRole);
        setStatus("Active");
        setErrors({});
        const initialRoleData = roles.find((r2) => r2.id === initialDefaultRole);
        setRoleDescription(initialRoleData?.description || "");
      }
    }, [isOpen, roles]);
    const handleRoleChange = (e) => {
      const selectedRoleId = e.target.value;
      setRoleId(selectedRoleId);
      const selectedRoleObject = roles.find((r2) => r2.id === selectedRoleId);
      setRoleDescription(selectedRoleObject?.description || "");
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onAddUser({
          name,
          email,
          roleId,
          status
        });
      }
    };
    const isFormValid = name.trim() && email && roleId && !errors.name && !errors.email;
    if (!isOpen) {
      return null;
    }
    const noRolesAvailable = roles.length === 0;
    return /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("div", { className: "sm:flex sm:items-start", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mt-3 text-center sm:mt-0 sm:text-left w-full", children: [
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: "Add New User" }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "mt-6 space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("label", { htmlFor: "name", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Full Name" }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
                "input",
                {
                  type: "text",
                  id: "name",
                  value: name,
                  onChange: (e) => setName(e.target.value),
                  required: true,
                  className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.name ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary`
                }
              ),
              errors.name && /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("label", { htmlFor: "email", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Email Address" }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
                "input",
                {
                  type: "email",
                  id: "email",
                  value: email,
                  onChange: (e) => setEmail(e.target.value),
                  required: true,
                  className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.email ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary`
                }
              ),
              errors.email && /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.email })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("label", { htmlFor: "role", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Role" }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
                "select",
                {
                  id: "role",
                  value: roleId,
                  onChange: handleRoleChange,
                  disabled: noRolesAvailable,
                  className: "mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md disabled:bg-gray-100 dark:disabled:bg-gray-800",
                  children: noRolesAvailable ? /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("option", { children: "No roles available" }) : roles.map((r2) => /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("option", { value: r2.id, children: r2.name }, r2.id))
                }
              ),
              roleDescription && /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("p", { className: "mt-2 text-sm text-gray-500 dark:text-gray-400", children: roleDescription }),
              errors.roleId && /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.roleId })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Status" }),
              /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("fieldset", { className: "mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "space-y-2 sm:flex sm:items-center sm:space-y-0 sm:space-x-10", children: [
                /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("input", { id: "status-active", name: "status", type: "radio", checked: status === "Active", onChange: () => setStatus("Active"), className: "focus:ring-primary h-4 w-4 text-primary border-gray-300" }),
                  /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("label", { htmlFor: "status-active", className: "ml-3 block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Active" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("input", { id: "status-disabled", name: "status", type: "radio", checked: status === "Disabled", onChange: () => setStatus("Disabled"), className: "focus:ring-primary h-4 w-4 text-primary border-gray-300" }),
                  /* @__PURE__ */ (0, import_jsx_runtime14.jsx)("label", { htmlFor: "status-disabled", className: "ml-3 block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Disabled" })
                ] })
              ] }) })
            ] })
          ] })
        ] }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime14.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
            "button",
            {
              type: "submit",
              disabled: !isFormValid || noRolesAvailable,
              className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed",
              children: "Add User"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(
            "button",
            {
              type: "button",
              onClick: onClose,
              className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm",
              children: "Cancel"
            }
          )
        ] })
      ] }) })
    ] });
  };
  var AddUserModal_default = AddUserModal;

  // components/users/EditUserModal.tsx
  var import_react57 = __toESM(require_react());
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var EditUserModal = ({ isOpen, onClose, user, onUpdateUser, roles }) => {
    const [name, setName] = (0, import_react57.useState)("");
    const [email, setEmail] = (0, import_react57.useState)("");
    const [roleId, setRoleId] = (0, import_react57.useState)("");
    const [status, setStatus] = (0, import_react57.useState)("Active");
    const [roleDescription, setRoleDescription] = (0, import_react57.useState)("");
    const [errors, setErrors] = (0, import_react57.useState)({});
    const userRoleExists = roles.some((r2) => r2.id === user.roleId);
    const validate = () => {
      const newErrors = {};
      if (!name.trim()) newErrors.name = "Full name is required.";
      if (!email) {
        newErrors.email = "Email address is required.";
      } else if (!/\S+@\S+\.\S+/.test(email)) {
        newErrors.email = "Email address is invalid.";
      }
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    (0, import_react57.useEffect)(() => {
      if (user) {
        setName(user.name);
        setEmail(user.email);
        setRoleId(user.roleId);
        setStatus(user.status);
        setErrors({});
        const currentRole = roles.find((r2) => r2.id === user.roleId);
        setRoleDescription(currentRole?.description || "This role no longer exists. Please select a new one.");
      }
    }, [user, isOpen, roles]);
    const handleRoleChange = (e) => {
      const selectedRoleId = e.target.value;
      setRoleId(selectedRoleId);
      const selectedRoleObject = roles.find((r2) => r2.id === selectedRoleId);
      setRoleDescription(selectedRoleObject?.description || "");
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        const role = roles.find((r2) => r2.id === roleId);
        onUpdateUser({ ...user, name, email, roleId, role: role?.name || roleId, status });
      }
    };
    if (!isOpen) {
      return null;
    }
    const noRolesAvailable = roles.length === 0;
    return /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("div", { className: "sm:flex sm:items-start", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "mt-3 text-center sm:mt-0 sm:text-left w-full", children: [
          /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: [
              "Edit User: ",
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("span", { className: "font-bold text-primary", children: user.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "mt-6 space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("label", { htmlFor: "name", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Full Name" }),
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
                "input",
                {
                  type: "text",
                  id: "name",
                  value: name,
                  onChange: (e) => setName(e.target.value),
                  required: true,
                  className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.name ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary`
                }
              ),
              errors.name && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("label", { htmlFor: "email", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Email Address" }),
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
                "input",
                {
                  type: "email",
                  id: "email",
                  value: email,
                  onChange: (e) => setEmail(e.target.value),
                  required: true,
                  className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.email ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary`
                }
              ),
              errors.email && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.email })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("label", { htmlFor: "role", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Role" }),
              /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)(
                "select",
                {
                  id: "role",
                  value: roleId,
                  onChange: handleRoleChange,
                  disabled: noRolesAvailable,
                  className: `mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md disabled:bg-gray-100 dark:disabled:bg-gray-800 ${!userRoleExists ? "border-red-500 text-red-700 dark:text-red-400" : ""}`,
                  children: [
                    noRolesAvailable && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("option", { children: "No roles available" }),
                    !userRoleExists && /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("option", { value: user.roleId, disabled: true, children: [
                      "Invalid Role (",
                      user.role,
                      ")"
                    ] }),
                    roles.map((r2) => /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("option", { value: r2.id, children: r2.name }, r2.id))
                  ]
                }
              ),
              roleDescription && /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("p", { className: `mt-2 text-sm ${!userRoleExists ? "text-red-600" : "text-gray-500 dark:text-gray-400"}`, children: roleDescription })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Status" }),
              /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("fieldset", { className: "mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "space-y-2 sm:flex sm:items-center sm:space-y-0 sm:space-x-10", children: [
                /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("input", { id: "status-active", name: "status", type: "radio", checked: status === "Active", onChange: () => setStatus("Active"), className: "focus:ring-primary h-4 w-4 text-primary border-gray-300" }),
                  /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("label", { htmlFor: "status-active", className: "ml-3 block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Active" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("input", { id: "status-disabled", name: "status", type: "radio", checked: status === "Disabled", onChange: () => setStatus("Disabled"), className: "focus:ring-primary h-4 w-4 text-primary border-gray-300" }),
                  /* @__PURE__ */ (0, import_jsx_runtime15.jsx)("label", { htmlFor: "status-disabled", className: "ml-3 block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Disabled" })
                ] })
              ] }) })
            ] })
          ] })
        ] }) }) }),
        /* @__PURE__ */ (0, import_jsx_runtime15.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
            "button",
            {
              type: "submit",
              disabled: noRolesAvailable || !userRoleExists,
              className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed",
              children: "Save Changes"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(
            "button",
            {
              type: "button",
              onClick: onClose,
              className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm",
              children: "Cancel"
            }
          )
        ] })
      ] }) })
    ] });
  };
  var EditUserModal_default = EditUserModal;

  // components/users/DeleteConfirmationModal.tsx
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var DeleteConfirmationModal = ({ isOpen, onClose, onConfirm, itemName, itemType }) => {
    if (!isOpen) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: [
        /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "sm:flex sm:items-start", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-red-100 dark:bg-red-900/50 sm:mx-0 sm:h-10 sm:w-10", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(ExclamationTriangleIcon, { className: "h-6 w-6 text-red-600 dark:text-red-400", "aria-hidden": "true" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left", children: [
            /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: [
              "Delete ",
              itemType
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("div", { className: "mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
              "Are you sure you want to delete ",
              /* @__PURE__ */ (0, import_jsx_runtime16.jsx)("span", { className: "font-bold", children: itemName }),
              "? This action cannot be undone."
            ] }) })
          ] })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime16.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
            "button",
            {
              type: "button",
              onClick: onConfirm,
              className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm",
              children: "Delete"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
            "button",
            {
              type: "button",
              onClick: onClose,
              className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm",
              children: "Cancel"
            }
          )
        ] })
      ] })
    ] });
  };
  var DeleteConfirmationModal_default = DeleteConfirmationModal;

  // components/users/ConfirmationModal.tsx
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  var ConfirmationModal = ({
    isOpen,
    onClose,
    onConfirm,
    title,
    message,
    confirmButtonText = "Confirm",
    confirmButtonColor = "bg-primary"
  }) => {
    if (!isOpen) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: [
        /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "sm:flex sm:items-start", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "mx-auto flex-shrink-0 flex items-center justify-center h-12 w-12 rounded-full bg-yellow-100 dark:bg-yellow-900/50 sm:mx-0 sm:h-10 sm:w-10", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(ExclamationTriangleIcon, { className: "h-6 w-6 text-yellow-600 dark:text-yellow-400", "aria-hidden": "true" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left", children: [
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: title }),
            /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("div", { className: "mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: message }) })
          ] })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime17.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
            "button",
            {
              type: "button",
              onClick: onConfirm,
              className: `w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 ${confirmButtonColor} text-base font-medium text-white hover:bg-opacity-90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm`,
              children: confirmButtonText
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
            "button",
            {
              type: "button",
              onClick: onClose,
              className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm",
              children: "Cancel"
            }
          )
        ] })
      ] })
    ] });
  };
  var ConfirmationModal_default = ConfirmationModal;

  // components/users/UserManagementPage.tsx
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  var UserManagementPage = () => {
    const { allUsers, roles, addUser, updateUser, deleteUser, user: currentUser2, hasPermission } = useAuth();
    const [isAddModalOpen, setAddModalOpen] = (0, import_react58.useState)(false);
    const [isEditModalOpen, setEditModalOpen] = (0, import_react58.useState)(false);
    const [isDeleteModalOpen, setDeleteModalOpen] = (0, import_react58.useState)(false);
    const [isConfirmStatusModalOpen, setConfirmStatusModalOpen] = (0, import_react58.useState)(false);
    const [isResetPasswordModalOpen, setResetPasswordModalOpen] = (0, import_react58.useState)(false);
    const [editingUser, setEditingUser] = (0, import_react58.useState)(null);
    const [deletingUser, setDeletingUser] = (0, import_react58.useState)(null);
    const [statusChangeUser, setStatusChangeUser] = (0, import_react58.useState)(null);
    const [resetPasswordUser, setResetPasswordUser] = (0, import_react58.useState)(null);
    const handleAddUser = (newUserData) => {
      addUser(newUserData);
      setAddModalOpen(false);
    };
    const handleUpdateUser = (updatedUser) => {
      updateUser(updatedUser);
      setEditModalOpen(false);
      setEditingUser(null);
    };
    const handleConfirmToggleStatus = () => {
      if (statusChangeUser) {
        updateUser({ ...statusChangeUser, status: statusChangeUser.status === "Active" ? "Disabled" : "Active" });
      }
      setConfirmStatusModalOpen(false);
      setStatusChangeUser(null);
    };
    const handleConfirmDelete = () => {
      if (deletingUser) {
        deleteUser(deletingUser.id);
        setDeleteModalOpen(false);
        setDeletingUser(null);
      }
    };
    const handleConfirmResetPassword = () => {
      if (resetPasswordUser) {
        alert(`A password reset link has been sent to ${resetPasswordUser.email}.`);
      }
      setResetPasswordModalOpen(false);
      setResetPasswordUser(null);
    };
    const handleEditClick = (user) => {
      setEditingUser(user);
      setEditModalOpen(true);
    };
    const handleDeleteClick = (user) => {
      setDeletingUser(user);
      setDeleteModalOpen(true);
    };
    const handleToggleStatusClick = (user) => {
      setStatusChangeUser(user);
      setConfirmStatusModalOpen(true);
    };
    const handleResetPasswordClick = (user) => {
      setResetPasswordUser(user);
      setResetPasswordModalOpen(true);
    };
    const StatusBadge2 = ({ status }) => {
      const isActive = status === "Active";
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
        "span",
        {
          className: `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${isActive ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300" : "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300"}`,
          children: [
            isActive ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CheckCircleIcon, { className: "h-4 w-4 mr-1.5" }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(XCircleIcon, { className: "h-4 w-4 mr-1.5" }),
            status
          ]
        }
      );
    };
    const ActionMenu = ({ user }) => {
      const [isOpen, setIsOpen] = (0, import_react58.useState)(false);
      const ref = (0, import_react58.useRef)(null);
      const canUpdate = hasPermission("users:update");
      const canDelete = hasPermission("users:delete");
      const canResetPassword = hasPermission("users:reset_password");
      (0, import_react58.useEffect)(() => {
        const handleClickOutside = (event) => {
          if (ref.current && !ref.current.contains(event.target)) {
            setIsOpen(false);
          }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () => document.removeEventListener("mousedown", handleClickOutside);
      }, []);
      const toggleStatusLabel = user.status === "Active" ? "Disable" : "Enable";
      return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "relative", ref, children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("button", { onClick: () => setIsOpen(!isOpen), className: "text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(EllipsisVerticalIcon, { className: "h-6 w-6" }) }),
        isOpen && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "absolute right-0 mt-2 w-48 origin-top-right rounded-md bg-white dark:bg-dark-card shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none z-10", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "py-1", children: [
          canUpdate && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(import_jsx_runtime18.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("button", { onClick: () => {
              handleEditClick(user);
              setIsOpen(false);
            }, className: "w-full text-left flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(PencilIcon, { className: "h-4 w-4 mr-3" }),
              "Edit"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("button", { onClick: () => {
              handleToggleStatusClick(user);
              setIsOpen(false);
            }, className: "w-full text-left flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700", children: [
              user.status === "Active" ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(XCircleIcon, { className: "h-4 w-4 mr-3" }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(CheckCircleIcon, { className: "h-4 w-4 mr-3" }),
              toggleStatusLabel
            ] })
          ] }),
          canResetPassword && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("button", { onClick: () => {
            handleResetPasswordClick(user);
            setIsOpen(false);
          }, className: "w-full text-left flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(KeyIcon, { className: "h-4 w-4 mr-3" }),
            "Reset Password"
          ] }),
          canDelete && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("button", { onClick: () => {
            handleDeleteClick(user);
            setIsOpen(false);
          }, className: "w-full text-left flex items-center px-4 py-2 text-sm text-red-600 hover:bg-gray-100 dark:hover:bg-gray-700", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(TrashIcon, { className: "h-4 w-4 mr-3" }),
            "Delete"
          ] })
        ] }) })
      ] });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between sm:items-center gap-4 mb-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "User Management" }),
        hasPermission("users:create") && /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)(
          "button",
          {
            onClick: () => setAddModalOpen(true),
            className: "inline-flex items-center justify-center rounded-md border border-transparent bg-primary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(UserPlusIcon, { className: "h-5 w-5 mr-2" }),
              "Add User"
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "bg-white dark:bg-dark-card shadow-md rounded-lg overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "overflow-x-auto hidden md:block", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("table", { className: "min-w-full divide-y divide-gray-200 dark:divide-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("thead", { className: "bg-gray-50 dark:bg-gray-800", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Name" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Role" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Status" }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("th", { scope: "col", className: "relative px-6 py-3", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("span", { className: "sr-only", children: "Actions" }) })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("tbody", { className: "bg-white dark:bg-dark-card divide-y divide-gray-200 dark:divide-gray-700", children: allUsers.map((user) => /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("td", { className: "px-6 py-4 whitespace-nowrap", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex-shrink-0 h-10 w-10", children: user.avatarUrl ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("img", { className: "h-10 w-10 rounded-full object-cover", src: user.avatarUrl, alt: user.name }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(UserCircleIcon, { className: "h-10 w-10 text-gray-300 dark:text-gray-600" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "ml-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "text-sm font-medium text-gray-900 dark:text-white", children: user.name }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: user.email })
              ] })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("td", { className: "px-6 py-4 whitespace-nowrap", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "text-sm text-gray-900 dark:text-gray-300", children: user.role }) }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("td", { className: "px-6 py-4 whitespace-nowrap", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(StatusBadge2, { status: user.status }) }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-right text-sm font-medium", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ActionMenu, { user }) })
          ] }, user.id)) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "md:hidden divide-y divide-gray-200 dark:divide-gray-700", children: allUsers.map((user) => /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center justify-between", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "flex items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "flex-shrink-0 h-10 w-10", children: user.avatarUrl ? /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("img", { className: "h-10 w-10 rounded-full object-cover", src: user.avatarUrl, alt: user.name }) : /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(UserCircleIcon, { className: "h-10 w-10 text-gray-300 dark:text-gray-600" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "ml-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "text-sm font-medium text-gray-900 dark:text-white", children: user.name }),
                /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: user.email })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(ActionMenu, { user })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { className: "mt-4 flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime18.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "text-xs text-gray-500 dark:text-gray-400", children: "Role" }),
              /* @__PURE__ */ (0, import_jsx_runtime18.jsx)("div", { className: "text-sm text-gray-900 dark:text-gray-300", children: user.role })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(StatusBadge2, { status: user.status })
          ] })
        ] }, user.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        AddUserModal_default,
        {
          isOpen: isAddModalOpen,
          onClose: () => setAddModalOpen(false),
          onAddUser: handleAddUser,
          roles
        }
      ),
      editingUser && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        EditUserModal_default,
        {
          isOpen: isEditModalOpen,
          onClose: () => setEditModalOpen(false),
          user: editingUser,
          onUpdateUser: handleUpdateUser,
          roles
        }
      ),
      deletingUser && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        DeleteConfirmationModal_default,
        {
          isOpen: isDeleteModalOpen,
          onClose: () => setDeleteModalOpen(false),
          onConfirm: handleConfirmDelete,
          itemName: deletingUser.name,
          itemType: "user"
        }
      ),
      statusChangeUser && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        ConfirmationModal_default,
        {
          isOpen: isConfirmStatusModalOpen,
          onClose: () => {
            setConfirmStatusModalOpen(false);
            setStatusChangeUser(null);
          },
          onConfirm: handleConfirmToggleStatus,
          title: `Confirm Status Change`,
          message: `Are you sure you want to ${statusChangeUser.status === "Active" ? "disable" : "enable"} the user "${statusChangeUser.name}"?`
        }
      ),
      resetPasswordUser && /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
        ConfirmationModal_default,
        {
          isOpen: isResetPasswordModalOpen,
          onClose: () => {
            setResetPasswordModalOpen(false);
            setResetPasswordUser(null);
          },
          onConfirm: handleConfirmResetPassword,
          title: `Reset Password`,
          message: `Are you sure you want to send a password reset link to "${resetPasswordUser.name}"?`,
          confirmButtonText: "Send Link"
        }
      )
    ] });
  };
  var UserManagementPage_default = UserManagementPage;

  // components/users/UserProfilePage.tsx
  var import_react59 = __toESM(require_react());
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var UserProfilePage = ({ user }) => {
    const [name, setName] = (0, import_react59.useState)(user.name);
    const [mobile, setMobile] = (0, import_react59.useState)(user.mobile || "");
    const [avatarPreview, setAvatarPreview] = (0, import_react59.useState)(user.avatarUrl);
    const fileInputRef = (0, import_react59.useRef)(null);
    const [infoSuccess, setInfoSuccess] = (0, import_react59.useState)("");
    const [infoErrors, setInfoErrors] = (0, import_react59.useState)({});
    const [currentPassword, setCurrentPassword] = (0, import_react59.useState)("");
    const [newPassword, setNewPassword] = (0, import_react59.useState)("");
    const [confirmNewPassword, setConfirmNewPassword] = (0, import_react59.useState)("");
    const [passwordErrors, setPasswordErrors] = (0, import_react59.useState)({});
    const [passwordSuccess, setPasswordSuccess] = (0, import_react59.useState)("");
    const handleAvatarChange = (event) => {
      if (event.target.files && event.target.files[0]) {
        const file = event.target.files[0];
        const reader = new FileReader();
        reader.onloadend = () => {
          setAvatarPreview(reader.result);
        };
        reader.readAsDataURL(file);
      }
    };
    const validateInfo = () => {
      const errors = {};
      if (!name.trim()) {
        errors.name = "Full Name is required.";
      }
      if (mobile && !/^\+?[0-9\s-]{10,15}$/.test(mobile)) {
        errors.mobile = "Please enter a valid mobile number.";
      }
      setInfoErrors(errors);
      return Object.keys(errors).length === 0;
    };
    const handleInfoSubmit = (e) => {
      e.preventDefault();
      setInfoSuccess("");
      if (!validateInfo()) return;
      console.log("Saving user info:", { name, mobile, avatar: avatarPreview });
      setInfoSuccess("Profile information updated successfully!");
      setTimeout(() => setInfoSuccess(""), 3e3);
    };
    const validatePassword = () => {
      const errors = {};
      if (!currentPassword) {
        errors.current = "Current password is required.";
      }
      if (!newPassword) {
        errors.new = "New password is required.";
      } else if (newPassword.length < 8) {
        errors.new = "New password must be at least 8 characters long.";
      }
      if (!confirmNewPassword) {
        errors.confirm = "Please confirm your new password.";
      } else if (newPassword !== confirmNewPassword) {
        errors.confirm = "New passwords do not match.";
      }
      setPasswordErrors(errors);
      return Object.keys(errors).length === 0;
    };
    const handlePasswordSubmit = (e) => {
      e.preventDefault();
      setPasswordSuccess("");
      if (!validatePassword()) return;
      console.log("Changing password...");
      setPasswordSuccess("Password updated successfully!");
      setCurrentPassword("");
      setNewPassword("");
      setConfirmNewPassword("");
      setTimeout(() => setPasswordSuccess(""), 3e3);
    };
    const FormRow = ({ label, children, error }) => /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:py-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 sm:mt-px sm:pt-2", children: label }),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "mt-1 sm:mt-0 sm:col-span-2", children: [
        children,
        error && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "mt-2 text-sm text-red-600 dark:text-red-400", children: error })
      ] })
    ] });
    const TextInput = ({ hasError, ...props }) => /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
      "input",
      {
        ...props,
        className: `block w-full max-w-lg shadow-sm focus:ring-primary focus:border-primary sm:text-sm ${hasError ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white`
      }
    );
    return /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mb-6", children: "User Profile" }),
      /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "space-y-8", children: [
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "bg-white dark:bg-dark-card shadow-md rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("form", { onSubmit: handleInfoSubmit, noValidate: true, children: [
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "px-4 py-5 sm:p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", children: "Personal Information" }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "mt-1 max-w-2xl text-sm text-gray-500 dark:text-gray-400", children: "Update your photo and personal details." }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "mt-6 divide-y divide-gray-200 dark:divide-gray-700", children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(FormRow, { label: "Photo", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "flex items-center", children: [
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("span", { className: "h-24 w-24 rounded-full overflow-hidden bg-gray-100 dark:bg-gray-700", children: avatarPreview ? /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("img", { src: avatarPreview, alt: "Avatar preview", className: "h-full w-full object-cover" }) : /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("svg", { className: "h-full w-full text-gray-300", fill: "currentColor", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("path", { d: "M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z" }) }) }),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
                  "input",
                  {
                    type: "file",
                    ref: fileInputRef,
                    onChange: handleAvatarChange,
                    className: "hidden",
                    accept: "image/*"
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)(
                  "button",
                  {
                    type: "button",
                    onClick: () => fileInputRef.current?.click(),
                    className: "ml-5 bg-white dark:bg-gray-700 py-2 px-3 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-800 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(CameraIcon, { className: "h-5 w-5 mr-2 inline-block" }),
                      "Change"
                    ]
                  }
                )
              ] }) }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(FormRow, { label: "Full Name", error: infoErrors.name, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TextInput, { type: "text", value: name, onChange: (e) => setName(e.target.value), required: true, hasError: !!infoErrors.name }) }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(FormRow, { label: "Email Address", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TextInput, { type: "email", value: user.email, disabled: true, className: "disabled:bg-gray-100 dark:disabled:bg-gray-800 disabled:text-gray-500" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(FormRow, { label: "Mobile Number", error: infoErrors.mobile, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TextInput, { type: "tel", value: mobile, onChange: (e) => setMobile(e.target.value), placeholder: "+971 50 123 4567", hasError: !!infoErrors.mobile }) })
            ] }),
            infoSuccess && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "mt-4 text-sm text-green-600 dark:text-green-400", children: infoSuccess })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "px-4 py-3 bg-gray-50 dark:bg-dark-card/50 text-right sm:px-6 rounded-b-lg", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
            "button",
            {
              type: "submit",
              className: "inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary",
              children: "Save Changes"
            }
          ) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "bg-white dark:bg-dark-card shadow-md rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("form", { onSubmit: handlePasswordSubmit, noValidate: true, children: [
          /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "px-4 py-5 sm:p-6", children: [
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", children: "Change Password" }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "mt-1 max-w-2xl text-sm text-gray-500 dark:text-gray-400", children: "Ensure your account is using a long, random password to stay secure." }),
            /* @__PURE__ */ (0, import_jsx_runtime19.jsxs)("div", { className: "mt-6 divide-y divide-gray-200 dark:divide-gray-700", children: [
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(FormRow, { label: "Current Password", error: passwordErrors.current, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TextInput, { type: "password", value: currentPassword, onChange: (e) => setCurrentPassword(e.target.value), required: true, autoComplete: "current-password", hasError: !!passwordErrors.current }) }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(FormRow, { label: "New Password", error: passwordErrors.new, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TextInput, { type: "password", value: newPassword, onChange: (e) => setNewPassword(e.target.value), required: true, autoComplete: "new-password", hasError: !!passwordErrors.new }) }),
              /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(FormRow, { label: "Confirm New Password", error: passwordErrors.confirm, children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(TextInput, { type: "password", value: confirmNewPassword, onChange: (e) => setConfirmNewPassword(e.target.value), required: true, autoComplete: "new-password", hasError: !!passwordErrors.confirm }) })
            ] }),
            passwordSuccess && /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("p", { className: "mt-4 text-sm text-green-600 dark:text-green-400", children: passwordSuccess })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime19.jsx)("div", { className: "px-4 py-3 bg-gray-50 dark:bg-dark-card/50 text-right sm:px-6 rounded-b-lg", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(
            "button",
            {
              type: "submit",
              className: "inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-primary hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary",
              children: "Update Password"
            }
          ) })
        ] }) })
      ] })
    ] });
  };
  var UserProfilePage_default = UserProfilePage;

  // components/finance/FinancePage.tsx
  var import_react68 = __toESM(require_react());

  // components/finance/PaymentInstructionsTab.tsx
  var import_react61 = __toESM(require_react());

  // components/finance/NewPaymentInstructionModal.tsx
  var import_react60 = __toESM(require_react());
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  var NewPaymentInstructionModal = ({ isOpen, onClose, onAddInstruction }) => {
    const [payee, setPayee] = (0, import_react60.useState)("");
    const [amount, setAmount] = (0, import_react60.useState)("");
    const [dueDate, setDueDate] = (0, import_react60.useState)((/* @__PURE__ */ new Date()).toISOString().split("T")[0]);
    const [isRecurring, setIsRecurring] = (0, import_react60.useState)(false);
    const [nextDueDate, setNextDueDate] = (0, import_react60.useState)("");
    const [balance, setBalance] = (0, import_react60.useState)("");
    const [errors, setErrors] = (0, import_react60.useState)({});
    (0, import_react60.useEffect)(() => {
      if (isOpen) {
        setPayee("");
        setAmount("");
        setDueDate((/* @__PURE__ */ new Date()).toISOString().split("T")[0]);
        setIsRecurring(false);
        setNextDueDate("");
        setBalance("");
        setErrors({});
      }
    }, [isOpen]);
    const validate = () => {
      const newErrors = {};
      if (!payee.trim()) newErrors.payee = "Payee name is required.";
      if (!amount || amount <= 0) newErrors.amount = "A valid positive amount is required.";
      if (!dueDate) newErrors.dueDate = "Due date is required.";
      if (isRecurring) {
        if (!nextDueDate) newErrors.nextDueDate = "Next due date is required for recurring payments.";
        if (balance === "" || balance < 0) newErrors.balance = "A valid balance is required for recurring payments.";
      }
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onAddInstruction({
          payee,
          amount: Number(amount),
          dueDate,
          isRecurring,
          nextDueDate: isRecurring ? nextDueDate : void 0,
          balance: isRecurring ? Number(balance) : void 0
        });
      }
    };
    if (!isOpen) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: "New Payment Instruction" }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "mt-6 space-y-4 max-h-[60vh] overflow-y-auto pr-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("label", { htmlFor: "payee", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Payee" }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("input", { type: "text", id: "payee", value: payee, onChange: (e) => setPayee(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.payee ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.payee && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.payee })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("label", { htmlFor: "amount", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Amount (AED)" }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("input", { type: "number", id: "amount", value: amount, onChange: (e) => setAmount(Number(e.target.value)), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.amount ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.amount && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.amount })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("label", { htmlFor: "due-date", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Due Date" }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("input", { type: "date", id: "due-date", value: dueDate, onChange: (e) => setDueDate(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.dueDate ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.dueDate && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.dueDate })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "flex items-start", children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("div", { className: "flex items-center h-5", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("input", { id: "is-recurring", name: "is-recurring", type: "checkbox", checked: isRecurring, onChange: (e) => setIsRecurring(e.target.checked), className: "focus:ring-primary h-4 w-4 text-primary border-gray-300 dark:border-gray-600 rounded" }) }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "ml-3 text-sm", children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("label", { htmlFor: "is-recurring", className: "font-medium text-gray-700 dark:text-gray-300", children: "Recurring Payment" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: "Is this a repeating payment instruction?" })
              ] })
            ] }),
            isRecurring && /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)(import_jsx_runtime20.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("label", { htmlFor: "next-due-date", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Next Due Date" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("input", { type: "date", id: "next-due-date", value: nextDueDate, onChange: (e) => setNextDueDate(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.nextDueDate ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
                errors.nextDueDate && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.nextDueDate })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("label", { htmlFor: "balance", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Balance Amount (AED)" }),
                /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("input", { type: "number", id: "balance", value: balance, onChange: (e) => setBalance(Number(e.target.value)), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.balance ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
                errors.balance && /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.balance })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime20.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("button", { type: "submit", className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50", children: "Create Instruction" }),
          /* @__PURE__ */ (0, import_jsx_runtime20.jsx)("button", { type: "button", onClick: onClose, className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm", children: "Cancel" })
        ] })
      ] }) })
    ] });
  };
  var NewPaymentInstructionModal_default = NewPaymentInstructionModal;

  // components/finance/TransactionDetailsModal.tsx
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  var TransactionDetailsModal = ({ isOpen, onClose, instruction }) => {
    if (!isOpen) return null;
    const DetailItem = ({ label, value, className }) => /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: label }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("p", { className: `text-sm font-semibold text-gray-900 dark:text-white ${className}`, children: value || "-" })
    ] });
    const HistoryItem = ({ item, isLast }) => {
      let icon, color2;
      switch (item.status) {
        case "Approved":
          icon = /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(CheckCircleIcon, { className: "h-5 w-5 text-white" });
          color2 = "bg-green-500";
          break;
        case "Rejected":
          icon = /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(XCircleIcon, { className: "h-5 w-5 text-white" });
          color2 = "bg-red-500";
          break;
        default:
          icon = /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(ClockIcon, { className: "h-5 w-5 text-white" });
          color2 = "bg-yellow-500";
          break;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("li", { className: "relative pb-6", children: [
        !isLast && /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "absolute top-4 left-4 -ml-px mt-0.5 h-full w-0.5 bg-gray-300 dark:bg-gray-600" }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "relative flex items-start space-x-3", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: `h-8 w-8 rounded-full flex items-center justify-center text-white ${color2}`, children: icon }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "min-w-0 flex-1 pt-1.5", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "text-sm text-gray-700 dark:text-gray-300", children: [
              "Status changed to ",
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { className: "font-medium", children: item.status }),
              " by ",
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("span", { className: "font-medium", children: item.user })
            ] }),
            item.remarks && /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400 mt-1 italic", children: [
              '"',
              item.remarks,
              '"'
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "mt-1 text-xs text-gray-400 dark:text-gray-500", children: item.timestamp })
          ] })
        ] })
      ] });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("div", { className: "relative inline-block bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-2xl sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "flex justify-between items-start", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("h3", { className: "text-xl leading-6 font-bold text-gray-900 dark:text-white", id: "modal-title", children: "Transaction Details" }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400 mt-1", children: [
              "Instruction ID: ",
              instruction.id
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "mt-6 grid grid-cols-1 md:grid-cols-2 gap-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { className: "space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("h4", { className: "text-lg font-medium text-gray-800 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2", children: "Details" }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(DetailItem, { label: "Payee", value: instruction.payee }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(DetailItem, { label: "Amount", value: `${instruction.amount.toFixed(2)} ${instruction.currency}`, className: "text-lg" }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(DetailItem, { label: "Due Date", value: instruction.dueDate }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(DetailItem, { label: "Submitted By", value: instruction.submittedBy }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(DetailItem, { label: "Current Status", value: instruction.status }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(DetailItem, { label: "Recurring", value: instruction.isRecurring ? "Yes" : "No" }),
            instruction.isRecurring && /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)(import_jsx_runtime21.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(DetailItem, { label: "Next Due Date", value: instruction.nextDueDate }),
              /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(DetailItem, { label: "Balance Amount", value: instruction.balance?.toFixed(2) })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime21.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("h4", { className: "text-lg font-medium text-gray-800 dark:text-gray-200 border-b border-gray-200 dark:border-gray-700 pb-2", children: "Approval History" }),
            /* @__PURE__ */ (0, import_jsx_runtime21.jsx)("ul", { className: "mt-4", children: instruction.history.map((item, index) => /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(HistoryItem, { item, isLast: index === instruction.history.length - 1 }, index)) })
          ] })
        ] })
      ] }) })
    ] });
  };
  var TransactionDetailsModal_default = TransactionDetailsModal;

  // components/finance/PaymentInstructionsTab.tsx
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var PaymentInstructionsTab = () => {
    const [instructions, setInstructions] = (0, import_react61.useState)([]);
    const [sortConfig, setSortConfig] = (0, import_react61.useState)({ key: "dueDate", direction: "descending" });
    const [isModalOpen, setIsModalOpen] = (0, import_react61.useState)(false);
    const [isDetailsModalOpen, setDetailsModalOpen] = (0, import_react61.useState)(false);
    const [selectedInstruction, setSelectedInstruction] = (0, import_react61.useState)(null);
    const { user, hasPermission } = useAuth();
    (0, import_react61.useEffect)(() => {
      fetch("/api/finance/instructions").then((res) => res.json()).then(setInstructions);
    }, []);
    const sortedInstructions = (0, import_react61.useMemo)(() => {
      let sortableItems = [...instructions];
      if (sortConfig !== null) {
        sortableItems.sort((a2, b) => {
          if (sortConfig.key === "dueDate") {
            return new Date(a2.dueDate).getTime() - new Date(b.dueDate).getTime();
          }
          if (a2[sortConfig.key] < b[sortConfig.key]) {
            return -1;
          }
          if (a2[sortConfig.key] > b[sortConfig.key]) {
            return 1;
          }
          return 0;
        });
        if (sortConfig.direction === "descending") {
          sortableItems.reverse();
        }
      }
      return sortableItems;
    }, [instructions, sortConfig]);
    const requestSort = (key) => {
      let direction = "ascending";
      if (sortConfig && sortConfig.key === key && sortConfig.direction === "ascending") {
        direction = "descending";
      }
      setSortConfig({ key, direction });
    };
    const handleAction = (id, newStatus) => {
      setInstructions(instructions.map((inst) => {
        if (inst.id === id) {
          return {
            ...inst,
            status: newStatus,
            history: [...inst.history, { status: newStatus, user: user.name, timestamp: (/* @__PURE__ */ new Date()).toLocaleString() }]
          };
        }
        return inst;
      }));
    };
    const handleViewDetails = (instruction) => {
      setSelectedInstruction(instruction);
      setDetailsModalOpen(true);
    };
    const handleAddInstruction = (data) => {
      const newInstruction = {
        ...data,
        id: `PI-${String(Date.now()).slice(-5)}`,
        currency: "AED",
        status: "Pending",
        submittedBy: user.name,
        history: [
          {
            status: "Pending",
            user: user.name,
            timestamp: (/* @__PURE__ */ new Date()).toLocaleString()
          }
        ]
      };
      setInstructions((prev) => [newInstruction, ...prev]);
      setIsModalOpen(false);
    };
    const StatusBadge2 = ({ status }) => {
      let icon, colors;
      switch (status) {
        case "Approved":
          icon = /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(CheckCircleIcon, { className: "h-4 w-4 mr-1.5" });
          colors = "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300";
          break;
        case "Rejected":
          icon = /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(XCircleIcon, { className: "h-4 w-4 mr-1.5" });
          colors = "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300";
          break;
        default:
          icon = /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ClockIcon, { className: "h-4 w-4 mr-1.5" });
          colors = "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300";
      }
      return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("span", { className: `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${colors}`, children: [
        icon,
        status
      ] });
    };
    const SortIndicator = ({ columnKey }) => {
      if (!sortConfig || sortConfig.key !== columnKey) {
        return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ChevronUpDownIcon, { className: "h-4 w-4 ml-1 text-gray-400" });
      }
      return sortConfig.direction === "ascending" ? /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ChevronUpIcon, { className: "h-4 w-4 ml-1" }) : /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(ChevronDownIcon, { className: "h-4 w-4 ml-1" });
    };
    const Actions = ({ inst }) => {
      const canApprove = hasPermission("finance:approve") && inst.amount <= user.financialLimit;
      if (inst.status === "Pending" && canApprove) {
        return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("button", { onClick: () => handleAction(inst.id, "Approved"), className: "p-2 rounded-full bg-green-100 dark:bg-green-900/50 text-green-600 dark:text-green-400 hover:bg-green-200 dark:hover:bg-green-900", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(HandThumbUpIcon, { className: "h-5 w-5" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("button", { onClick: () => handleAction(inst.id, "Rejected"), className: "p-2 rounded-full bg-red-100 dark:bg-red-900/50 text-red-600 dark:text-red-400 hover:bg-red-200 dark:hover:bg-red-900", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(HandThumbDownIcon, { className: "h-5 w-5" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("button", { onClick: () => handleViewDetails(inst), className: "p-2 rounded-full hover:bg-gray-200 dark:hover:bg-gray-700 text-gray-500 dark:text-gray-400", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(EllipsisVerticalIcon, { className: "h-5 w-5" }) })
        ] });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("button", { onClick: () => handleViewDetails(inst), className: "text-primary hover:text-primary/80 text-sm font-medium", children: "View Details" });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "flex justify-end items-center mb-4", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)(
        "button",
        {
          onClick: () => setIsModalOpen(true),
          className: "inline-flex items-center justify-center rounded-md border border-transparent bg-secondary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-secondary/90 focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(PlusIcon, { className: "h-5 w-5 mr-2" }),
            "New Payment Instruction"
          ]
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "bg-white dark:bg-dark-card shadow-md rounded-lg overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "overflow-x-auto hidden md:block", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("table", { className: "min-w-full divide-y divide-gray-200 dark:divide-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("thead", { className: "bg-gray-50 dark:bg-gray-800", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Instruction ID" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Payee" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("button", { onClick: () => requestSort("amount"), className: "flex items-center focus:outline-none", children: [
              "Amount",
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(SortIndicator, { columnKey: "amount" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("button", { onClick: () => requestSort("dueDate"), className: "flex items-center focus:outline-none", children: [
              "Due Date",
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(SortIndicator, { columnKey: "dueDate" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Repeating" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Next Payment" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Status" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Actions" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("tbody", { className: "bg-white dark:bg-dark-card divide-y divide-gray-200 dark:divide-gray-700", children: sortedInstructions.map((inst) => /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("td", { className: "px-6 py-4 whitespace-nowrap", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "text-sm font-medium text-gray-900 dark:text-white", children: inst.id }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
                "By: ",
                inst.submittedBy
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300", children: inst.payee }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("td", { className: "px-6 py-4 whitespace-nowrap", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "text-sm text-gray-900 dark:text-white font-semibold", children: [
                inst.amount.toFixed(2),
                " ",
                inst.currency
              ] }),
              inst.isRecurring && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "text-xs text-blue-500 flex items-center", children: [
                /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(DocumentDuplicateIcon, { className: "h-3 w-3 mr-1" }),
                "Recurring"
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400", children: new Date(inst.dueDate).toLocaleDateString() }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300", children: inst.isRecurring ? /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex items-center", title: "A reminder will be created 3 days before the due date.", children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { className: "mr-2", children: "Yes" }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(BellAlertIcon, { className: "h-5 w-5 text-blue-500" })
            ] }) : "No" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm", children: inst.isRecurring && inst.nextDueDate ? /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "text-gray-900 dark:text-white font-medium", children: new Date(inst.nextDueDate).toLocaleDateString() }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "text-gray-500 dark:text-gray-400", children: [
                inst.balance?.toFixed(2),
                " ",
                inst.currency
              ] })
            ] }) : /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { className: "text-gray-400 dark:text-gray-500", children: "-" }) }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("td", { className: "px-6 py-4 whitespace-nowrap", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(StatusBadge2, { status: inst.status }) }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm font-medium", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Actions, { inst }) })
          ] }, inst.id)) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "md:hidden divide-y divide-gray-200 dark:divide-gray-700", children: sortedInstructions.map((inst) => /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "flex justify-between items-start", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "text-sm font-bold text-gray-900 dark:text-white", children: inst.payee }),
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "text-xs text-gray-500 dark:text-gray-400", children: [
                inst.id,
                " by ",
                inst.submittedBy
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(StatusBadge2, { status: inst.status })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "mt-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "text-lg text-gray-900 dark:text-white font-semibold", children: [
              inst.amount.toFixed(2),
              " ",
              inst.currency
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
              "Due: ",
              new Date(inst.dueDate).toLocaleDateString()
            ] })
          ] }),
          inst.isRecurring && /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { className: "mt-2 text-sm border-t border-gray-200 dark:border-gray-700 pt-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "font-semibold text-blue-600 dark:text-blue-400", children: "Recurring Payment" }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { children: [
              "Next Due: ",
              /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("span", { className: "font-medium", children: inst.nextDueDate ? new Date(inst.nextDueDate).toLocaleDateString() : "" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("div", { children: [
              "Balance: ",
              /* @__PURE__ */ (0, import_jsx_runtime22.jsxs)("span", { className: "font-medium", children: [
                inst.balance?.toFixed(2),
                " ",
                inst.currency
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime22.jsx)("div", { className: "mt-4 flex justify-end", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(Actions, { inst }) })
        ] }, inst.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
        NewPaymentInstructionModal_default,
        {
          isOpen: isModalOpen,
          onClose: () => setIsModalOpen(false),
          onAddInstruction: handleAddInstruction
        }
      ),
      selectedInstruction && /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(
        TransactionDetailsModal_default,
        {
          isOpen: isDetailsModalOpen,
          onClose: () => setDetailsModalOpen(false),
          instruction: selectedInstruction
        }
      )
    ] });
  };
  var PaymentInstructionsTab_default = PaymentInstructionsTab;

  // components/finance/CollectionsTab.tsx
  var import_react65 = __toESM(require_react());

  // components/finance/LogCollectionModal.tsx
  var import_react64 = __toESM(require_react());

  // components/finance/DocumentUpload.tsx
  var import_react63 = __toESM(require_react());

  // components/finance/CameraCaptureModal.tsx
  var import_react62 = __toESM(require_react());
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  var CameraCaptureModal = ({ onCapture, onClose }) => {
    const videoRef = (0, import_react62.useRef)(null);
    const streamRef = (0, import_react62.useRef)(null);
    const [error, setError] = (0, import_react62.useState)(null);
    const stopCamera = (0, import_react62.useCallback)(() => {
      if (streamRef.current) {
        streamRef.current.getTracks().forEach((track) => track.stop());
        streamRef.current = null;
      }
    }, []);
    const startCamera = (0, import_react62.useCallback)(async () => {
      stopCamera();
      setError(null);
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          video: { facingMode: "environment" },
          audio: false
        });
        streamRef.current = stream;
        if (videoRef.current) {
          videoRef.current.srcObject = stream;
        }
      } catch (err) {
        console.error("Error accessing camera:", err);
        setError("Could not access camera. Please check permissions and try again.");
      }
    }, [stopCamera]);
    (0, import_react62.useEffect)(() => {
      startCamera();
      return () => {
        stopCamera();
      };
    }, [startCamera, stopCamera]);
    const handleCapture = () => {
      const video = videoRef.current;
      if (!video) return;
      const canvas = document.createElement("canvas");
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      const context = canvas.getContext("2d");
      if (context) {
        context.drawImage(video, 0, 0, canvas.width, canvas.height);
        canvas.toBlob((blob) => {
          if (blob) {
            const fileName = `capture-${(/* @__PURE__ */ new Date()).toISOString()}.png`;
            const file = new File([blob], fileName, { type: "image/png" });
            onCapture(file);
          }
        }, "image/png");
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "fixed inset-0 z-[100] flex items-center justify-center bg-black bg-opacity-80", "aria-modal": "true", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("div", { className: "relative bg-black rounded-lg shadow-xl w-full max-w-2xl aspect-video overflow-hidden", children: error ? /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "flex flex-col items-center justify-center h-full text-white p-4", children: [
      /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("p", { className: "text-red-400 text-center", children: error }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
        "button",
        {
          onClick: onClose,
          className: "mt-4 inline-flex items-center rounded-md border border-transparent bg-gray-600 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-gray-700",
          children: "Close"
        }
      )
    ] }) : /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)(import_jsx_runtime23.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime23.jsx)("video", { ref: videoRef, autoPlay: true, playsInline: true, className: "w-full h-full object-cover" }),
      /* @__PURE__ */ (0, import_jsx_runtime23.jsxs)("div", { className: "absolute inset-0 flex flex-col justify-between items-center p-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
          "button",
          {
            onClick: onClose,
            className: "self-end p-2 bg-black bg-opacity-50 rounded-full text-white hover:bg-opacity-75",
            "aria-label": "Close camera",
            children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(XMarkIcon, { className: "h-6 w-6" })
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
          "button",
          {
            onClick: handleCapture,
            className: "p-4 bg-white rounded-full shadow-lg hover:bg-gray-200 transition-transform transform hover:scale-110",
            "aria-label": "Capture photo",
            children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(CameraIcon, { className: "h-8 w-8 text-primary" })
          }
        )
      ] })
    ] }) }) });
  };
  var CameraCaptureModal_default = CameraCaptureModal;

  // components/finance/DocumentUpload.tsx
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var DocumentUpload = ({ onFileSelect }) => {
    const [file, setFile] = (0, import_react63.useState)(null);
    const [previewUrl, setPreviewUrl] = (0, import_react63.useState)(null);
    const [hasCamera, setHasCamera] = (0, import_react63.useState)(false);
    const [isCameraOpen, setIsCameraOpen] = (0, import_react63.useState)(false);
    const fileInputRef = (0, import_react63.useRef)(null);
    (0, import_react63.useEffect)(() => {
      setHasCamera(!!(navigator.mediaDevices && navigator.mediaDevices.getUserMedia));
    }, []);
    (0, import_react63.useEffect)(() => {
      let objectUrl = null;
      if (file && file.type.startsWith("image/")) {
        objectUrl = URL.createObjectURL(file);
        setPreviewUrl(objectUrl);
      } else {
        setPreviewUrl(null);
      }
      return () => {
        if (objectUrl) {
          URL.revokeObjectURL(objectUrl);
        }
      };
    }, [file]);
    const handleFileChange = (e) => {
      const selectedFile = e.target.files?.[0] || null;
      setFile(selectedFile);
      onFileSelect(selectedFile);
    };
    const handleCapture = (0, import_react63.useCallback)((capturedFile) => {
      setFile(capturedFile);
      onFileSelect(capturedFile);
      setIsCameraOpen(false);
    }, [onFileSelect]);
    const handleRemove = () => {
      setFile(null);
      onFileSelect(null);
      setPreviewUrl(null);
      if (fileInputRef.current) {
        fileInputRef.current.value = "";
      }
    };
    const commonButtonClass = "w-full sm:w-auto flex-1 inline-flex items-center justify-center rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 shadow-sm hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2";
    return /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "mt-1", children: [
      !file ? /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex flex-col sm:flex-row gap-2", children: [
        hasCamera && /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("button", { type: "button", onClick: () => setIsCameraOpen(true), className: commonButtonClass, children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(CameraIcon, { className: "h-5 w-5 mr-2" }),
          "Take Photo"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("button", { type: "button", onClick: () => fileInputRef.current?.click(), className: commonButtonClass, children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(PaperClipIcon, { className: "h-5 w-5 mr-2" }),
          "Upload Document"
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("input", { type: "file", ref: fileInputRef, hidden: true, onChange: handleFileChange, accept: "image/*,.pdf,.doc,.docx" })
      ] }) : /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex items-center space-x-3 p-2 border border-gray-300 dark:border-gray-600 rounded-md bg-gray-50 dark:bg-gray-700/50", children: [
        previewUrl ? /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("img", { src: previewUrl, alt: "Preview", className: "h-12 w-12 rounded-md object-cover" }) : /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(PaperClipIcon, { className: "h-8 w-8 text-gray-400 flex-shrink-0" }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("div", { className: "flex-grow min-w-0", children: [
          /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("p", { className: "text-sm font-medium text-gray-900 dark:text-white truncate", children: file.name }),
          /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: [
            (file.size / 1024).toFixed(2),
            " KB"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime24.jsx)("button", { type: "button", onClick: handleRemove, className: "text-red-500 hover:text-red-700 flex-shrink-0", children: /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(XCircleIcon, { className: "h-6 w-6" }) })
      ] }),
      isCameraOpen && /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(CameraCaptureModal_default, { onCapture: handleCapture, onClose: () => setIsCameraOpen(false) })
    ] });
  };
  var DocumentUpload_default = DocumentUpload;

  // components/finance/LogCollectionModal.tsx
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var LogCollectionModal = ({ isOpen, onClose, onAddCollection }) => {
    const [project, setProject] = (0, import_react64.useState)("");
    const [payer, setPayer] = (0, import_react64.useState)("");
    const [amount, setAmount] = (0, import_react64.useState)("");
    const [type, setType] = (0, import_react64.useState)("Cash");
    const [date2, setDate] = (0, import_react64.useState)((/* @__PURE__ */ new Date()).toISOString().split("T")[0]);
    const [outstandingAmount, setOutstandingAmount] = (0, import_react64.useState)("");
    const [document2, setDocument] = (0, import_react64.useState)(null);
    const [errors, setErrors] = (0, import_react64.useState)({});
    const [projects, setProjects] = (0, import_react64.useState)([]);
    (0, import_react64.useEffect)(() => {
      if (isOpen) {
        fetch("/api/projects").then((res) => res.json()).then(setProjects);
        setProject("");
        setPayer("");
        setAmount("");
        setType("Cash");
        setDate((/* @__PURE__ */ new Date()).toISOString().split("T")[0]);
        setOutstandingAmount("");
        setDocument(null);
        setErrors({});
      }
    }, [isOpen]);
    const validate = () => {
      const newErrors = {};
      if (!project) newErrors.project = "Project is required.";
      if (!payer.trim()) newErrors.payer = "Payer name is required.";
      if (!amount || amount <= 0) newErrors.amount = "A valid amount is required.";
      if (!date2) newErrors.date = "Collection date is required.";
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onAddCollection({
          project,
          payer,
          amount: Number(amount),
          type,
          date: date2,
          outstandingAmount: outstandingAmount ? Number(outstandingAmount) : void 0,
          document: document2 ?? void 0
        });
      }
    };
    if (!isOpen) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: "Log New Collection" }),
            /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "mt-6 space-y-4 max-h-[60vh] overflow-y-auto pr-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("label", { htmlFor: "collection-project", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Project" }),
              /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("select", { id: "collection-project", value: project, onChange: (e) => setProject(e.target.value), className: `mt-1 block w-full pl-3 pr-10 py-2 text-base ${errors.project ? "border-red-500" : "border-gray-300 dark:border-gray-600"} bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md`, children: [
                /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("option", { value: "", disabled: true, children: "Select a project" }),
                projects.map((p) => /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("option", { value: p.name, children: p.name }, p.id))
              ] }),
              errors.project && /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.project })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("label", { htmlFor: "payer", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Payer" }),
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("input", { type: "text", id: "payer", value: payer, onChange: (e) => setPayer(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.payer ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.payer && /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.payer })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("label", { htmlFor: "amount", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Amount (AED)" }),
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("input", { type: "number", id: "amount", value: amount, onChange: (e) => setAmount(Number(e.target.value)), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.amount ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.amount && /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.amount })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("label", { htmlFor: "outstandingAmount", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Outstanding Amount (Optional)" }),
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("input", { type: "number", id: "outstandingAmount", value: outstandingAmount, onChange: (e) => setOutstandingAmount(Number(e.target.value)), className: "mt-1 block w-full shadow-sm sm:text-sm border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Type" }),
              /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("fieldset", { className: "mt-2 flex space-x-4", children: [
                /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("input", { type: "radio", id: "cash", name: "type", value: "Cash", checked: type === "Cash", onChange: () => setType("Cash"), className: "focus:ring-primary h-4 w-4 text-primary border-gray-300" }),
                  /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("label", { htmlFor: "cash", className: "ml-2 text-sm text-gray-700 dark:text-gray-300", children: "Cash" })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "flex items-center", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("input", { type: "radio", id: "cheque", name: "type", value: "Cheque", checked: type === "Cheque", onChange: () => setType("Cheque"), className: "focus:ring-primary h-4 w-4 text-primary border-gray-300" }),
                  /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("label", { htmlFor: "cheque", className: "ml-2 text-sm text-gray-700 dark:text-gray-300", children: "Cheque" })
                ] })
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("label", { htmlFor: "date", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Collection Date" }),
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("input", { type: "date", id: "date", value: date2, onChange: (e) => setDate(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.date ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.date && /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.date })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Supporting Document" }),
              /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(DocumentUpload_default, { onFileSelect: setDocument })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime25.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("button", { type: "submit", className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50", children: "Log Collection" }),
          /* @__PURE__ */ (0, import_jsx_runtime25.jsx)("button", { type: "button", onClick: onClose, className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm", children: "Cancel" })
        ] })
      ] }) })
    ] });
  };
  var LogCollectionModal_default = LogCollectionModal;

  // components/finance/CollectionsTab.tsx
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var CollectionsTab = () => {
    const [collections, setCollections] = (0, import_react65.useState)([]);
    const [startDate, setStartDate] = (0, import_react65.useState)("");
    const [endDate, setEndDate] = (0, import_react65.useState)("");
    const [sortConfig, setSortConfig] = (0, import_react65.useState)({ key: "date", direction: "descending" });
    const [isModalOpen, setIsModalOpen] = (0, import_react65.useState)(false);
    (0, import_react65.useEffect)(() => {
      fetch("/api/finance/collections").then((res) => res.json()).then(setCollections);
    }, []);
    const sortedCollections = (0, import_react65.useMemo)(() => {
      let sortableItems = [...collections];
      if (sortConfig !== null) {
        sortableItems.sort((a2, b) => {
          if (sortConfig.key === "date") {
            return new Date(a2.date).getTime() - new Date(b.date).getTime();
          }
          if (a2[sortConfig.key] < b[sortConfig.key]) {
            return -1;
          }
          if (a2[sortConfig.key] > b[sortConfig.key]) {
            return 1;
          }
          return 0;
        });
        if (sortConfig.direction === "descending") {
          sortableItems.reverse();
        }
      }
      return sortableItems;
    }, [collections, sortConfig]);
    const requestSort = (key) => {
      let direction = "ascending";
      if (sortConfig && sortConfig.key === key && sortConfig.direction === "ascending") {
        direction = "descending";
      }
      setSortConfig({ key, direction });
    };
    const handleAddCollection = (newCollectionData) => {
      const newCollection = {
        ...newCollectionData,
        id: `C-${Date.now().toString().slice(-4)}`,
        status: "Collected"
      };
      setCollections((prev) => [newCollection, ...prev]);
      setIsModalOpen(false);
    };
    const handleExport = () => {
      const filteredData = sortedCollections.filter((c2) => {
        if (!startDate || !endDate) return true;
        const collectionDate = new Date(c2.date);
        const end = new Date(endDate);
        end.setDate(end.getDate() + 1);
        return collectionDate >= new Date(startDate) && collectionDate < end;
      });
      if (filteredData.length === 0) {
        alert("No data available for the selected date range.");
        return;
      }
      const headers = Object.keys(filteredData[0]).join(",");
      const csvContent = filteredData.map(
        (row) => Object.values(row).join(",")
      ).join("\n");
      const csvData = `data:text/csv;charset=utf-8,${headers}
${csvContent}`;
      const encodedUri = encodeURI(csvData);
      const link = document.createElement("a");
      link.setAttribute("href", encodedUri);
      link.setAttribute("download", "collections_export.csv");
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      console.log(`Exporting ${filteredData.length} collection records...`);
    };
    const StatusBadge2 = ({ status }) => {
      const isDeposited = status === "Deposited";
      return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
        "span",
        {
          className: `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${isDeposited ? "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300" : "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300"}`,
          children: status
        }
      );
    };
    const SortIndicator = ({ columnKey }) => {
      if (!sortConfig || sortConfig.key !== columnKey) {
        return /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ChevronUpDownIcon, { className: "h-4 w-4 ml-1 text-gray-400" });
      }
      return sortConfig.direction === "ascending" ? /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ChevronUpIcon, { className: "h-4 w-4 ml-1" }) : /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ChevronDownIcon, { className: "h-4 w-4 ml-1" });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "flex flex-col md:flex-row justify-between items-center gap-4 mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "flex flex-wrap items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("input", { type: "date", value: startDate, onChange: (e) => setStartDate(e.target.value), className: "bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm px-3 py-2 text-sm text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary" }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("span", { className: "text-gray-500 dark:text-gray-400", children: "to" }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("input", { type: "date", value: endDate, onChange: (e) => setEndDate(e.target.value), className: "bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm px-3 py-2 text-sm text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary" }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("button", { onClick: handleExport, className: "inline-flex items-center justify-center rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 shadow-sm hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(ArrowDownTrayIcon, { className: "h-5 w-5 mr-2" }),
            "Export"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)(
          "button",
          {
            onClick: () => setIsModalOpen(true),
            className: "w-full md:w-auto inline-flex items-center justify-center rounded-md border border-transparent bg-secondary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-secondary/90 focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(PlusIcon, { className: "h-5 w-5 mr-2" }),
              "Log Collection"
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "bg-white dark:bg-dark-card shadow-md rounded-lg overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "overflow-x-auto hidden md:block", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("table", { className: "min-w-full divide-y divide-gray-200 dark:divide-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("thead", { className: "bg-gray-50 dark:bg-gray-800", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Collection ID" }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Project / Payer" }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("button", { onClick: () => requestSort("amount"), className: "flex items-center focus:outline-none", children: [
              "Amount (AED)",
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(SortIndicator, { columnKey: "amount" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Outstanding Amount (AED)" }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("button", { onClick: () => requestSort("date"), className: "flex items-center focus:outline-none", children: [
              "Date",
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(SortIndicator, { columnKey: "date" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Status" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("tbody", { className: "bg-white dark:bg-dark-card divide-y divide-gray-200 dark:divide-gray-700", children: sortedCollections.map((col) => /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("td", { className: "px-6 py-4 whitespace-nowrap", children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "text-sm font-medium text-gray-900 dark:text-white", children: col.id }),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: col.type })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("td", { className: "px-6 py-4 whitespace-nowrap", children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "text-sm text-gray-900 dark:text-gray-300", children: col.project }),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: col.payer })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-900 dark:text-white", children: col.amount.toFixed(2) }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm font-semibold text-red-600 dark:text-red-400", children: col.outstandingAmount?.toFixed(2) ?? "N/A" }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400", children: new Date(col.date).toLocaleDateString() }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("td", { className: "px-6 py-4 whitespace-nowrap", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(StatusBadge2, { status: col.status }) })
          ] }, col.id)) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "md:hidden divide-y divide-gray-200 dark:divide-gray-700", children: sortedCollections.map((col) => /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "flex justify-between items-start", children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "text-sm font-medium text-gray-900 dark:text-white", children: col.project }),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "text-xs text-gray-500 dark:text-gray-400", children: col.payer })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(StatusBadge2, { status: col.status })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "mt-2 grid grid-cols-2 gap-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "text-xs text-gray-500", children: "Amount" }),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "text-sm font-semibold text-gray-900 dark:text-white", children: col.amount.toFixed(2) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "text-xs text-gray-500", children: "Outstanding" }),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "text-sm font-semibold text-red-600 dark:text-red-400", children: col.outstandingAmount?.toFixed(2) ?? "N/A" })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "text-xs text-gray-500", children: "Date" }),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: new Date(col.date).toLocaleDateString() })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime26.jsx)("div", { className: "text-xs text-gray-500", children: "Type" }),
              /* @__PURE__ */ (0, import_jsx_runtime26.jsxs)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
                col.type,
                " (",
                col.id,
                ")"
              ] })
            ] })
          ] })
        ] }, col.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(
        LogCollectionModal_default,
        {
          isOpen: isModalOpen,
          onClose: () => setIsModalOpen(false),
          onAddCollection: handleAddCollection
        }
      )
    ] });
  };
  var CollectionsTab_default = CollectionsTab;

  // components/finance/DepositsTab.tsx
  var import_react67 = __toESM(require_react());

  // components/finance/LogDepositModal.tsx
  var import_react66 = __toESM(require_react());
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  var LogDepositModal = ({ isOpen, onClose, onAddDeposit }) => {
    const [accountHead, setAccountHead] = (0, import_react66.useState)("");
    const [amount, setAmount] = (0, import_react66.useState)("");
    const [date2, setDate] = (0, import_react66.useState)((/* @__PURE__ */ new Date()).toISOString().split("T")[0]);
    const [document2, setDocument] = (0, import_react66.useState)(null);
    const [errors, setErrors] = (0, import_react66.useState)({});
    const [accountHeads, setAccountHeads] = (0, import_react66.useState)([]);
    (0, import_react66.useEffect)(() => {
      if (isOpen) {
        fetch("/api/account-heads").then((res) => res.json()).then(setAccountHeads);
        setAccountHead("");
        setAmount("");
        setDate((/* @__PURE__ */ new Date()).toISOString().split("T")[0]);
        setDocument(null);
        setErrors({});
      }
    }, [isOpen]);
    const activeAccountHeads = accountHeads.filter((acc) => acc.status === "Active");
    const validate = () => {
      const newErrors = {};
      if (!accountHead) newErrors.accountHead = "Account Head is required.";
      if (!amount || amount <= 0) newErrors.amount = "A valid amount is required.";
      if (!date2) newErrors.date = "Deposit date is required.";
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onAddDeposit({
          accountHead,
          amount: Number(amount),
          date: date2,
          document: document2 ?? void 0
        });
      }
    };
    if (!isOpen) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: "Log New Deposit" }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "mt-6 space-y-4 max-h-[60vh] overflow-y-auto pr-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("label", { htmlFor: "deposit-account-head", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Account Head" }),
              /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("select", { id: "deposit-account-head", value: accountHead, onChange: (e) => setAccountHead(e.target.value), className: `mt-1 block w-full pl-3 pr-10 py-2 text-base ${errors.accountHead ? "border-red-500" : "border-gray-300 dark:border-gray-600"} bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md`, children: [
                /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("option", { value: "", disabled: true, children: "Select an account" }),
                activeAccountHeads.map((acc) => /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("option", { value: acc.name, children: [
                  acc.name,
                  " (",
                  acc.bankName,
                  ")"
                ] }, acc.id))
              ] }),
              errors.accountHead && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.accountHead })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("label", { htmlFor: "deposit-amount", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Amount (AED)" }),
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("input", { type: "number", id: "deposit-amount", value: amount, onChange: (e) => setAmount(Number(e.target.value)), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.amount ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.amount && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.amount })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("label", { htmlFor: "deposit-date", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Deposit Date" }),
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("input", { type: "date", id: "deposit-date", value: date2, onChange: (e) => setDate(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.date ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.date && /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.date })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Supporting Document" }),
              /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(DocumentUpload_default, { onFileSelect: setDocument })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime27.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "submit", className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50", children: "Log Deposit" }),
          /* @__PURE__ */ (0, import_jsx_runtime27.jsx)("button", { type: "button", onClick: onClose, className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm", children: "Cancel" })
        ] })
      ] }) })
    ] });
  };
  var LogDepositModal_default = LogDepositModal;

  // components/finance/DepositsTab.tsx
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var DepositsTab = () => {
    const [deposits, setDeposits] = (0, import_react67.useState)([]);
    const [startDate, setStartDate] = (0, import_react67.useState)("");
    const [endDate, setEndDate] = (0, import_react67.useState)("");
    const [sortConfig, setSortConfig] = (0, import_react67.useState)({ key: "date", direction: "descending" });
    const [isModalOpen, setIsModalOpen] = (0, import_react67.useState)(false);
    (0, import_react67.useEffect)(() => {
      fetch("/api/finance/deposits").then((res) => res.json()).then(setDeposits);
    }, []);
    const sortedDeposits = (0, import_react67.useMemo)(() => {
      let sortableItems = [...deposits];
      if (sortConfig !== null) {
        sortableItems.sort((a2, b) => {
          if (sortConfig.key === "date") {
            return new Date(a2.date).getTime() - new Date(b.date).getTime();
          }
          if (a2[sortConfig.key] < b[sortConfig.key]) {
            return -1;
          }
          if (a2[sortConfig.key] > b[sortConfig.key]) {
            return 1;
          }
          return 0;
        });
        if (sortConfig.direction === "descending") {
          sortableItems.reverse();
        }
      }
      return sortableItems;
    }, [deposits, sortConfig]);
    const requestSort = (key) => {
      let direction = "ascending";
      if (sortConfig && sortConfig.key === key && sortConfig.direction === "ascending") {
        direction = "descending";
      }
      setSortConfig({ key, direction });
    };
    const handleAddDeposit = (newDepositData) => {
      const newDeposit = {
        ...newDepositData,
        id: `D-${Date.now().toString().slice(-4)}`,
        status: "Pending"
      };
      setDeposits((prev) => [newDeposit, ...prev]);
      setIsModalOpen(false);
    };
    const handleExport = () => {
      const filteredData = sortedDeposits.filter((d) => {
        if (!startDate || !endDate) return true;
        const depositDate = new Date(d.date);
        const end = new Date(endDate);
        end.setDate(end.getDate() + 1);
        return depositDate >= new Date(startDate) && depositDate < end;
      });
      if (filteredData.length === 0) {
        alert("No data available for the selected date range.");
        return;
      }
      const headers = Object.keys(filteredData[0]).join(",");
      const csvContent = filteredData.map(
        (row) => Object.values(row).join(",")
      ).join("\n");
      const csvData = `data:text/csv;charset=utf-8,${headers}
${csvContent}`;
      const encodedUri = encodeURI(csvData);
      const link = document.createElement("a");
      link.setAttribute("href", encodedUri);
      link.setAttribute("download", "deposits_export.csv");
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
      console.log(`Exporting ${filteredData.length} deposit records...`);
    };
    const StatusBadge2 = ({ status }) => {
      const isConfirmed = status === "Confirmed";
      return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
        "span",
        {
          className: `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${isConfirmed ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300" : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300"}`,
          children: status
        }
      );
    };
    const SortIndicator = ({ columnKey }) => {
      if (!sortConfig || sortConfig.key !== columnKey) {
        return /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ChevronUpDownIcon, { className: "h-4 w-4 ml-1 text-gray-400" });
      }
      return sortConfig.direction === "ascending" ? /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ChevronUpIcon, { className: "h-4 w-4 ml-1" }) : /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ChevronDownIcon, { className: "h-4 w-4 ml-1" });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex flex-col md:flex-row justify-between items-center gap-4 mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex flex-wrap items-center gap-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("input", { type: "date", value: startDate, onChange: (e) => setStartDate(e.target.value), className: "bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm px-3 py-2 text-sm text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary" }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("span", { className: "text-gray-500 dark:text-gray-400", children: "to" }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("input", { type: "date", value: endDate, onChange: (e) => setEndDate(e.target.value), className: "bg-white dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm px-3 py-2 text-sm text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary" }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("button", { onClick: handleExport, className: "inline-flex items-center justify-center rounded-md border border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-200 shadow-sm hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(ArrowDownTrayIcon, { className: "h-5 w-5 mr-2" }),
            "Export"
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)(
          "button",
          {
            onClick: () => setIsModalOpen(true),
            className: "w-full md:w-auto inline-flex items-center justify-center rounded-md border border-transparent bg-secondary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-secondary/90 focus:outline-none focus:ring-2 focus:ring-secondary focus:ring-offset-2",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(PlusIcon, { className: "h-5 w-5 mr-2" }),
              "Log Deposit"
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "bg-white dark:bg-dark-card shadow-md rounded-lg overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "overflow-x-auto hidden md:block", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("table", { className: "min-w-full divide-y divide-gray-200 dark:divide-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("thead", { className: "bg-gray-50 dark:bg-gray-800", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Deposit ID" }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Account Head" }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("button", { onClick: () => requestSort("amount"), className: "flex items-center focus:outline-none", children: [
              "Amount (AED)",
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(SortIndicator, { columnKey: "amount" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("button", { onClick: () => requestSort("date"), className: "flex items-center focus:outline-none", children: [
              "Date",
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(SortIndicator, { columnKey: "date" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("th", { className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Status" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("tbody", { className: "bg-white dark:bg-dark-card divide-y divide-gray-200 dark:divide-gray-700", children: sortedDeposits.map((dep) => /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white", children: dep.id }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300", children: dep.accountHead }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm font-semibold text-gray-900 dark:text-white", children: dep.amount.toFixed(2) }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-gray-400", children: new Date(dep.date).toLocaleDateString() }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("td", { className: "px-6 py-4 whitespace-nowrap", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(StatusBadge2, { status: dep.status }) })
          ] }, dep.id)) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "md:hidden divide-y divide-gray-200 dark:divide-gray-700", children: sortedDeposits.map((dep) => /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "flex justify-between items-start", children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "text-sm font-medium text-gray-900 dark:text-white", children: dep.accountHead }),
              /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "text-xs text-gray-500 dark:text-gray-400", children: [
                "ID: ",
                dep.id
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(StatusBadge2, { status: dep.status })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "mt-2 flex justify-between items-baseline", children: [
            /* @__PURE__ */ (0, import_jsx_runtime28.jsxs)("div", { className: "text-lg font-semibold text-gray-900 dark:text-white", children: [
              dep.amount.toFixed(2),
              " AED"
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime28.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: new Date(dep.date).toLocaleDateString() })
          ] })
        ] }, dep.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
        LogDepositModal_default,
        {
          isOpen: isModalOpen,
          onClose: () => setIsModalOpen(false),
          onAddDeposit: handleAddDeposit
        }
      )
    ] });
  };
  var DepositsTab_default = DepositsTab;

  // components/finance/FinancePage.tsx
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var FinancePage = () => {
    const [activeTab, setActiveTab] = (0, import_react68.useState)("instructions");
    const renderTabContent = () => {
      switch (activeTab) {
        case "instructions":
          return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(PaymentInstructionsTab_default, {});
        case "collections":
          return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(CollectionsTab_default, {});
        case "deposits":
          return /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(DepositsTab_default, {});
        default:
          return null;
      }
    };
    const TabButton = ({ tabId, label }) => /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(
      "button",
      {
        onClick: () => setActiveTab(tabId),
        className: `px-4 py-2 text-sm font-medium rounded-md transition-colors ${activeTab === tabId ? "bg-primary text-white" : "text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-700"}`,
        children: label
      }
    );
    return /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex justify-between items-center mb-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Finance" }),
        /* @__PURE__ */ (0, import_jsx_runtime29.jsxs)("div", { className: "flex items-center space-x-2 bg-gray-100 dark:bg-dark-card p-1 rounded-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TabButton, { tabId: "instructions", label: "Payment Instructions" }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TabButton, { tabId: "collections", label: "Collections" }),
          /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(TabButton, { tabId: "deposits", label: "Deposits" })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime29.jsx)("div", { children: renderTabContent() })
    ] });
  };
  var FinancePage_default = FinancePage;

  // components/jobs/ServiceJobsPage.tsx
  var import_react70 = __toESM(require_react());

  // types.ts
  var currentUser = {
    name: "Mohammed Semeem",
    // Corresponds to the user in MainLayout
    avatarUrl: "https://picsum.photos/seed/semeem/100/100"
  };

  // components/jobs/JobDetailsModal.tsx
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var mockComments = [
    { id: 1, user: { name: "Suju", avatarUrl: "https://picsum.photos/seed/suju/40/40" }, text: "Please check the main valve first, could be a pressure issue.", timestamp: "2h ago" },
    { id: 2, user: { name: "NOUMAN", avatarUrl: "https://picsum.photos/seed/nouman/40/40" }, text: "Will do. I am on my way to the site now.", timestamp: "1h ago" }
  ];
  var JobDetailsModal = ({ isOpen, onClose, job }) => {
    if (!isOpen) return null;
    const handleEscalate = () => {
      alert(`Job ID ${job.id} has been escalated to management. A new communication thread has been created.`);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "relative inline-block bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:max-w-3xl sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex justify-between items-start", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h3", { className: "text-xl leading-6 font-bold text-gray-900 dark:text-white", id: "modal-title", children: job.title }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("p", { className: "text-sm text-gray-500 dark:text-gray-400 mt-1", children: [
              "Job ID: ",
              job.id,
              " | Project: ",
              job.project
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "mt-6 grid grid-cols-1 md:grid-cols-3 gap-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "md:col-span-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h4", { className: "font-semibold text-gray-800 dark:text-gray-200 mb-3", children: "Comments" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("div", { className: "space-y-4", children: mockComments.map((comment) => /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex items-start space-x-3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("img", { src: comment.user.avatarUrl, alt: comment.user.name, className: "h-8 w-8 rounded-full object-cover" }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex-1 bg-gray-100 dark:bg-gray-700 rounded-lg px-4 py-2", children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "flex justify-between items-center", children: [
                  /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { className: "font-semibold text-sm text-gray-900 dark:text-white", children: comment.user.name }),
                  /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("span", { className: "text-xs text-gray-500 dark:text-gray-400", children: comment.timestamp })
                ] }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("p", { className: "text-sm text-gray-800 dark:text-gray-300 mt-1", children: comment.text })
              ] })
            ] }, comment.id)) }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "mt-4 flex items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("img", { src: currentUser.avatarUrl, alt: "current user", className: "h-8 w-8 rounded-full object-cover mr-3" }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "relative flex-grow", children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("input", { type: "text", placeholder: "Add a comment...", className: "w-full pl-4 pr-10 py-2 rounded-lg bg-gray-100 dark:bg-gray-700 border border-transparent focus:outline-none focus:ring-2 focus:ring-primary" }),
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("button", { className: "absolute right-2 top-1/2 -translate-y-1/2 text-gray-400 hover:text-primary", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(PaperClipIcon, { className: "h-5 w-5" }) })
              ] })
            ] })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h4", { className: "font-semibold text-gray-800 dark:text-gray-200 mb-3", children: "Details" }),
            /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "space-y-3 text-sm", children: [
              /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("p", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("strong", { className: "text-gray-600 dark:text-gray-400", children: "Technician:" }),
                " ",
                job.technician.name
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("p", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("strong", { className: "text-gray-600 dark:text-gray-400", children: "Status:" }),
                " ",
                job.status
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("p", { children: [
                /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("strong", { className: "text-gray-600 dark:text-gray-400", children: "Priority:" }),
                " ",
                job.priority
              ] })
            ] }),
            job.status === "Completed" && /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "mt-6", children: [
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h4", { className: "font-semibold text-gray-800 dark:text-gray-200 mb-3", children: "Resolve Job" }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("textarea", { placeholder: "Add mandatory resolution remarks...", rows: 3, className: "w-full p-2 rounded-lg bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 focus:outline-none focus:ring-2 focus:ring-primary" }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("button", { className: "w-full mt-2 rounded-md border border-transparent bg-secondary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-secondary/90", children: "Mark as Resolved" })
            ] }),
            (job.status === "Assigned" || job.status === "In Progress" || job.status === "Completed") && /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)("div", { className: "mt-6", children: [
              /* @__PURE__ */ (0, import_jsx_runtime30.jsx)("h4", { className: "font-semibold text-gray-800 dark:text-gray-200 mb-3", children: "Need Help?" }),
              /* @__PURE__ */ (0, import_jsx_runtime30.jsxs)(
                "button",
                {
                  onClick: handleEscalate,
                  className: "w-full mt-2 flex items-center justify-center rounded-md border border-transparent bg-yellow-500 px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-yellow-600 focus:outline-none focus:ring-2 focus:ring-yellow-500 focus:ring-offset-2",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(ExclamationTriangleIcon, { className: "h-5 w-5 mr-2" }),
                    "Escalate to Management"
                  ]
                }
              )
            ] })
          ] })
        ] })
      ] }) })
    ] });
  };
  var JobDetailsModal_default = JobDetailsModal;

  // components/jobs/CreateJobModal.tsx
  var import_react69 = __toESM(require_react());
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var mockTechnicians = [
    { id: 1, name: "NOUMAN", avatarUrl: "https://picsum.photos/seed/nouman/40/40" },
    { id: 2, name: "Benhur", avatarUrl: "https://picsum.photos/seed/benhur/40/40" },
    { id: 3, name: "Nakul", avatarUrl: "https://picsum.photos/seed/nakul/40/40" }
  ];
  var CreateJobModal = ({ isOpen, onClose, onAddJob }) => {
    const [title, setTitle] = (0, import_react69.useState)("");
    const [project, setProject] = (0, import_react69.useState)("");
    const [technicianName, setTechnicianName] = (0, import_react69.useState)("");
    const [priority, setPriority] = (0, import_react69.useState)("Medium");
    const [errors, setErrors] = (0, import_react69.useState)({});
    const [projects, setProjects] = (0, import_react69.useState)([]);
    (0, import_react69.useEffect)(() => {
      if (isOpen) {
        fetch("/api/projects").then((res) => res.json()).then(setProjects);
        setTitle("");
        setProject("");
        setTechnicianName("");
        setPriority("Medium");
        setErrors({});
      }
    }, [isOpen]);
    const validate = () => {
      const newErrors = {};
      if (!title.trim()) newErrors.title = "Job title is required.";
      if (!project) newErrors.project = "Please select a project.";
      if (!technicianName) newErrors.technicianName = "Please assign a technician.";
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        const selectedTechnician = mockTechnicians.find((t) => t.name === technicianName);
        if (selectedTechnician) {
          onAddJob({
            title,
            project,
            technician: selectedTechnician,
            priority
          });
        }
      }
    };
    if (!isOpen) return null;
    const isFormValid = title.trim() && project && technicianName;
    return /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: "Create New Service Job" }),
            /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "mt-6 space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("label", { htmlFor: "job-title", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Job Title" }),
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("input", { type: "text", id: "job-title", value: title, onChange: (e) => setTitle(e.target.value), required: true, className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.title ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.title && /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.title })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("label", { htmlFor: "project", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Project" }),
              /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("select", { id: "project", value: project, onChange: (e) => setProject(e.target.value), className: `mt-1 block w-full pl-3 pr-10 py-2 text-base ${errors.project ? "border-red-500" : "border-gray-300 dark:border-gray-600"} bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md`, children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("option", { value: "", disabled: true, children: "Select a project" }),
                projects.map((p) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("option", { value: p.name, children: p.name }, p.id))
              ] }),
              errors.project && /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.project })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("label", { htmlFor: "technician", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Assign Technician" }),
              /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("select", { id: "technician", value: technicianName, onChange: (e) => setTechnicianName(e.target.value), className: `mt-1 block w-full pl-3 pr-10 py-2 text-base ${errors.technicianName ? "border-red-500" : "border-gray-300 dark:border-gray-600"} bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md`, children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("option", { value: "", disabled: true, children: "Select a technician" }),
                mockTechnicians.map((t) => /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("option", { value: t.name, children: t.name }, t.id))
              ] }),
              errors.technicianName && /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.technicianName })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("label", { htmlFor: "priority", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Priority" }),
              /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("select", { id: "priority", value: priority, onChange: (e) => setPriority(e.target.value), className: "mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md", children: [
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("option", { children: "Low" }),
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("option", { children: "Medium" }),
                /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("option", { children: "High" })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime31.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("button", { type: "submit", disabled: !isFormValid, className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm disabled:opacity-50 disabled:cursor-not-allowed", children: "Create Job" }),
          /* @__PURE__ */ (0, import_jsx_runtime31.jsx)("button", { type: "button", onClick: onClose, className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm", children: "Cancel" })
        ] })
      ] }) })
    ] });
  };
  var CreateJobModal_default = CreateJobModal;

  // components/jobs/ServiceJobsPage.tsx
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  var PriorityBadge = ({ priority }) => {
    const colors = {
      High: "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300",
      Medium: "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300",
      Low: "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300"
    };
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("span", { className: `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${colors[priority]}`, children: priority });
  };
  var StatusBadge = ({ status }) => {
    const colors = {
      Assigned: "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300",
      "In Progress": "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300",
      Completed: "bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300",
      Resolved: "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300"
    };
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("span", { className: `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${colors[status]}`, children: status });
  };
  var ServiceJobsPage = () => {
    const [jobs, setJobs] = (0, import_react70.useState)([]);
    const [selectedJob, setSelectedJob] = (0, import_react70.useState)(null);
    const [isCreateModalOpen, setCreateModalOpen] = (0, import_react70.useState)(false);
    const [statusFilter, setStatusFilter] = (0, import_react70.useState)("all");
    const [priorityFilter, setPriorityFilter] = (0, import_react70.useState)("all");
    const [sortConfig, setSortConfig] = (0, import_react70.useState)(null);
    (0, import_react70.useEffect)(() => {
      fetch("/api/service-jobs").then((res) => res.json()).then(setJobs);
    }, []);
    const handleSelectJob = (job) => {
      setSelectedJob(job);
    };
    const handleCloseModal = () => {
      setSelectedJob(null);
    };
    const handleAddJob = async (newJobData) => {
      const response = await fetch("/api/service-jobs", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newJobData)
      });
      const newJob = await response.json();
      setJobs((prevJobs) => [newJob, ...prevJobs]);
      setCreateModalOpen(false);
    };
    const filteredAndSortedJobs = (0, import_react70.useMemo)(() => {
      let filteredJobs = [...jobs];
      if (statusFilter !== "all") {
        filteredJobs = filteredJobs.filter((job) => job.status === statusFilter);
      }
      if (priorityFilter !== "all") {
        filteredJobs = filteredJobs.filter((job) => job.priority === priorityFilter);
      }
      if (sortConfig !== null) {
        const priorityOrder = { "High": 1, "Medium": 2, "Low": 3 };
        filteredJobs.sort((a2, b) => {
          let aValue = a2[sortConfig.key];
          let bValue = b[sortConfig.key];
          if (sortConfig.key === "priority") {
            aValue = priorityOrder[a2.priority];
            bValue = priorityOrder[b.priority];
          }
          if (aValue < bValue) {
            return sortConfig.direction === "ascending" ? -1 : 1;
          }
          if (aValue > bValue) {
            return sortConfig.direction === "ascending" ? 1 : -1;
          }
          return 0;
        });
      }
      return filteredJobs;
    }, [jobs, statusFilter, priorityFilter, sortConfig]);
    const requestSort = (key) => {
      let direction = "ascending";
      if (sortConfig && sortConfig.key === key && sortConfig.direction === "ascending") {
        direction = "descending";
      }
      setSortConfig({ key, direction });
    };
    const SortIndicator = ({ columnKey }) => {
      if (!sortConfig || sortConfig.key !== columnKey) {
        return /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(ChevronUpDownIcon, { className: "h-4 w-4 ml-1 text-gray-400" });
      }
      return sortConfig.direction === "ascending" ? /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(ChevronUpIcon, { className: "h-4 w-4 ml-1" }) : /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(ChevronDownIcon, { className: "h-4 w-4 ml-1" });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "h-full flex flex-col", children: [
      /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between sm:items-center gap-4 mb-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Service Jobs" }),
        /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(
          "button",
          {
            onClick: () => setCreateModalOpen(true),
            className: "inline-flex items-center justify-center rounded-md border border-transparent bg-primary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(PlusIcon, { className: "h-5 w-5 mr-2" }),
              "Create New Job"
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "flex flex-col sm:flex-row gap-4 mb-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("label", { htmlFor: "status-filter", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Status" }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(
            "select",
            {
              id: "status-filter",
              value: statusFilter,
              onChange: (e) => setStatusFilter(e.target.value),
              className: "mt-1 block w-full sm:w-auto pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { value: "all", children: "All Statuses" }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { value: "Assigned", children: "Assigned" }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { value: "In Progress", children: "In Progress" }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { value: "Completed", children: "Completed" }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { value: "Resolved", children: "Resolved" })
              ]
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("label", { htmlFor: "priority-filter", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Priority" }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)(
            "select",
            {
              id: "priority-filter",
              value: priorityFilter,
              onChange: (e) => setPriorityFilter(e.target.value),
              className: "mt-1 block w-full sm:w-auto pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { value: "all", children: "All Priorities" }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { value: "Low", children: "Low" }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { value: "Medium", children: "Medium" }),
                /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("option", { value: "High", children: "High" })
              ]
            }
          )
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "bg-white dark:bg-dark-card shadow-md rounded-lg overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "overflow-x-auto hidden md:block", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("table", { className: "min-w-full divide-y divide-gray-200 dark:divide-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("thead", { className: "bg-gray-50 dark:bg-gray-800", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Job / ID" }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("button", { onClick: () => requestSort("project"), className: "flex items-center focus:outline-none", children: [
              "Project",
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(SortIndicator, { columnKey: "project" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Assigned To" }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("button", { onClick: () => requestSort("priority"), className: "flex items-center focus:outline-none", children: [
              "Priority",
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(SortIndicator, { columnKey: "priority" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("button", { onClick: () => requestSort("status"), className: "flex items-center focus:outline-none", children: [
              "Status",
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(SortIndicator, { columnKey: "status" })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("th", { scope: "col", className: "relative px-6 py-3", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("span", { className: "sr-only", children: "Actions" }) })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("tbody", { className: "bg-white dark:bg-dark-card divide-y divide-gray-200 dark:divide-gray-700", children: filteredAndSortedJobs.map((job) => /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("td", { className: "px-6 py-4 whitespace-nowrap", children: [
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "text-sm font-medium text-gray-900 dark:text-white", children: job.title }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: job.id })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300", children: job.project }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("td", { className: "px-6 py-4 whitespace-nowrap", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "flex items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("img", { src: job.technician.avatarUrl, alt: job.technician.name, className: "h-8 w-8 rounded-full object-cover" }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "ml-3 text-sm text-gray-600 dark:text-gray-300", children: job.technician.name })
            ] }) }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("td", { className: "px-6 py-4 whitespace-nowrap", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(PriorityBadge, { priority: job.priority }) }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("td", { className: "px-6 py-4 whitespace-nowrap", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(StatusBadge, { status: job.status }) }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-right text-sm font-medium", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("button", { onClick: () => handleSelectJob(job), className: "text-primary hover:text-primary/80", children: "View Details" }) })
          ] }, job.id)) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "md:hidden divide-y divide-gray-200 dark:divide-gray-700", children: filteredAndSortedJobs.map((job) => /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "flex justify-between items-start", children: [
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-sm font-semibold text-gray-900 dark:text-white", children: job.title }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-xs text-gray-500 dark:text-gray-400", children: job.id })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(PriorityBadge, { priority: job.priority })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "mt-2", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-300", children: job.project }) }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "mt-4 flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime32.jsxs)("div", { className: "flex items-center", children: [
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("img", { src: job.technician.avatarUrl, alt: job.technician.name, className: "h-8 w-8 rounded-full object-cover" }),
              /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "ml-3 text-sm text-gray-600 dark:text-gray-300", children: job.technician.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(StatusBadge, { status: job.status })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("div", { className: "mt-4 text-right", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)("button", { onClick: () => handleSelectJob(job), className: "text-sm font-medium text-primary hover:text-primary/80", children: "View Details \u2192" }) })
        ] }, job.id)) })
      ] }),
      selectedJob && /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
        JobDetailsModal_default,
        {
          job: selectedJob,
          isOpen: !!selectedJob,
          onClose: handleCloseModal
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(
        CreateJobModal_default,
        {
          isOpen: isCreateModalOpen,
          onClose: () => setCreateModalOpen(false),
          onAddJob: handleAddJob
        }
      )
    ] });
  };
  var ServiceJobsPage_default = ServiceJobsPage;

  // components/messages/MessagesPage.tsx
  var import_react73 = __toESM(require_react());

  // components/messages/ChatView.tsx
  var import_react71 = __toESM(require_react());
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var ChatView = ({ thread, onBack, onSendMessage }) => {
    const [summary, setSummary] = (0, import_react71.useState)("");
    const [isLoadingSummary, setIsLoadingSummary] = (0, import_react71.useState)(false);
    const [error, setError] = (0, import_react71.useState)("");
    const [newMessage, setNewMessage] = (0, import_react71.useState)("");
    const handleSummarize = async () => {
      setIsLoadingSummary(true);
      setSummary("");
      setError("");
      try {
        const conversationText = thread.messages.map((m) => `${m.user.name}: ${m.text}`).join("\n");
        const mockApiCall = new Promise((resolve, reject) => {
          setTimeout(() => {
            if (conversationText.length > 10) {
              resolve(`- **Budget Finalization:** Mohammed requested the budget be finalized by EOD.
- **Suhair's Update:** Suhair provided updated figures, noting a new total of AED 1.2M due to material costs.
- **Action Item:** Mohammed needs to review and approve the new budget to proceed with vendor negotiations.`);
            } else {
              reject(new Error("Conversation too short to summarize."));
            }
          }, 1500);
        });
        const summaryText = await mockApiCall;
        setSummary(summaryText);
      } catch (e) {
        console.error("Error generating summary:", e);
        setError(`Failed to generate summary. ${e.message || "Please try again."}`);
      } finally {
        setIsLoadingSummary(false);
      }
    };
    const handleSend = () => {
      if (newMessage.trim()) {
        onSendMessage(thread.id, newMessage.trim());
        setNewMessage("");
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex-1 flex flex-col bg-white dark:bg-dark-bg h-full", children: [
      /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("button", { onClick: onBack, className: "md:hidden text-gray-500 dark:text-gray-400 mr-4", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(ArrowLeftIcon, { className: "h-6 w-6" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h3", { className: "font-bold text-lg text-gray-900 dark:text-white", children: thread.title }),
            /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex items-center space-x-1 mt-1", children: thread.participants.map((p) => /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("img", { src: p.avatarUrl, alt: p.name, title: p.name, className: "h-6 w-6 rounded-full object-cover ring-2 ring-white dark:ring-dark-bg" }, p.name)) })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)(
          "button",
          {
            onClick: handleSummarize,
            disabled: isLoadingSummary,
            className: "inline-flex items-center justify-center rounded-md border border-transparent bg-primary/10 px-4 py-2 text-sm font-medium text-primary shadow-sm hover:bg-primary/20 disabled:opacity-50",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(SparklesIcon, { className: `h-5 w-5 mr-0 sm:mr-2 ${isLoadingSummary ? "animate-spin" : ""}` }),
              /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "hidden sm:inline", children: isLoadingSummary ? "Generating..." : "AI Summarize" })
            ]
          }
        )
      ] }),
      summary && /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "p-4 bg-blue-50 dark:bg-blue-900/20 border-b border-blue-200 dark:border-blue-800", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("h4", { className: "font-semibold text-blue-800 dark:text-blue-300 mb-2", children: "Summary" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "text-sm text-blue-700 dark:text-blue-300 whitespace-pre-wrap", children: summary })
      ] }),
      error && /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "p-4 bg-red-50 dark:bg-red-900/20 text-red-700 dark:text-red-300", children: error }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "flex-1 p-4 space-y-4 overflow-y-auto", children: thread.messages.map((message) => /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-start space-x-3", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("img", { src: message.user.avatarUrl, alt: message.user.name, className: "h-10 w-10 rounded-full object-cover" }),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "flex items-baseline space-x-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "font-bold text-gray-900 dark:text-white", children: message.user.name }),
            /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("span", { className: "text-xs text-gray-500 dark:text-gray-400", children: message.timestamp })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("p", { className: "mt-1 text-gray-700 dark:text-gray-300", children: message.text })
        ] })
      ] }, message.id)) }),
      /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("div", { className: "p-4 border-t border-gray-200 dark:border-gray-700 mt-auto", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "relative", children: [
        /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
          "textarea",
          {
            placeholder: `Message ${thread.title}`,
            rows: 1,
            value: newMessage,
            onChange: (e) => setNewMessage(e.target.value),
            onKeyDown: (e) => {
              if (e.key === "Enter" && !e.shiftKey) {
                e.preventDefault();
                handleSend();
              }
            },
            className: "w-full pl-4 pr-20 py-2 rounded-lg bg-gray-100 dark:bg-gray-700 border border-transparent focus:outline-none focus:ring-2 focus:ring-primary resize-none"
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime33.jsxs)("div", { className: "absolute right-3 top-1/2 -translate-y-1/2 flex items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("button", { className: "text-gray-400 hover:text-primary mr-2", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(PaperClipIcon, { className: "h-6 w-6" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime33.jsx)("button", { onClick: handleSend, className: "p-2 rounded-full bg-primary text-white hover:bg-primary/90 disabled:bg-primary/50", disabled: !newMessage.trim(), children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(PaperAirplaneIcon, { className: "h-5 w-5" }) })
        ] })
      ] }) })
    ] });
  };
  var ChatView_default = ChatView;

  // components/messages/CreateThreadModal.tsx
  var import_react72 = __toESM(require_react());
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  var CreateThreadModal = ({ isOpen, onClose, onSave }) => {
    const [title, setTitle] = (0, import_react72.useState)("");
    const [initialMessage, setInitialMessage] = (0, import_react72.useState)("");
    const [selectedParticipants, setSelectedParticipants] = (0, import_react72.useState)(/* @__PURE__ */ new Set());
    const [errors, setErrors] = (0, import_react72.useState)({});
    const { user: currentUser2, allUsers } = useAuth();
    const availableUsers = allUsers.filter((u) => u.id !== currentUser2?.id);
    (0, import_react72.useEffect)(() => {
      if (isOpen) {
        setTitle("");
        setInitialMessage("");
        setSelectedParticipants(/* @__PURE__ */ new Set());
        setErrors({});
      }
    }, [isOpen]);
    const validate = () => {
      const newErrors = {};
      if (!title.trim()) newErrors.title = "A title is required for the conversation.";
      if (!initialMessage.trim()) newErrors.initialMessage = "An initial message is required.";
      if (selectedParticipants.size === 0) newErrors.participants = "Please select at least one participant.";
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleParticipantToggle = (userId) => {
      setSelectedParticipants((prev) => {
        const newSet = new Set(prev);
        if (newSet.has(userId)) {
          newSet.delete(userId);
        } else {
          newSet.add(userId);
        }
        return newSet;
      });
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate() && currentUser2) {
        const firstMessage = {
          id: Date.now(),
          user: { name: currentUser2.name, avatarUrl: currentUser2.avatarUrl || "" },
          text: initialMessage,
          timestamp: (/* @__PURE__ */ new Date()).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })
        };
        const participants = [
          { name: currentUser2.name, avatarUrl: currentUser2.avatarUrl || "" },
          ...allUsers.filter((u) => selectedParticipants.has(u.id)).map((u) => ({
            name: u.name,
            avatarUrl: u.avatarUrl || ""
          }))
        ];
        onSave({
          title,
          participants,
          messages: [firstMessage]
        });
      }
    };
    if (!isOpen) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: "New Conversation" }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "mt-6 space-y-4 max-h-[60vh] overflow-y-auto pr-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("label", { htmlFor: "thread-title", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Title" }),
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("input", { type: "text", id: "thread-title", value: title, onChange: (e) => setTitle(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.title ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.title && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.title })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("label", { htmlFor: "participants", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Participants" }),
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "mt-2 grid grid-cols-2 gap-2", children: availableUsers.map((user) => /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "relative flex items-start", children: [
                /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "flex items-center h-5", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("input", { id: `user-${user.id}`, type: "checkbox", checked: selectedParticipants.has(user.id), onChange: () => handleParticipantToggle(user.id), className: "focus:ring-primary h-4 w-4 text-primary border-gray-300 rounded" }) }),
                /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("div", { className: "ml-3 text-sm", children: /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("label", { htmlFor: `user-${user.id}`, className: "font-medium text-gray-700 dark:text-gray-300", children: user.name }) })
              ] }, user.id)) }),
              errors.participants && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.participants })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("label", { htmlFor: "initial-message", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Message" }),
              /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("textarea", { id: "initial-message", rows: 4, value: initialMessage, onChange: (e) => setInitialMessage(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.initialMessage ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.initialMessage && /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.initialMessage })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("button", { type: "submit", className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm", children: "Start Conversation" }),
          /* @__PURE__ */ (0, import_jsx_runtime34.jsx)("button", { type: "button", onClick: onClose, className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm", children: "Cancel" })
        ] })
      ] }) })
    ] });
  };
  var CreateThreadModal_default = CreateThreadModal;

  // components/messages/MessagesPage.tsx
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  var MessagesPage = () => {
    const [threads, setThreads] = (0, import_react73.useState)(mockThreads);
    const [selectedThreadId, setSelectedThreadId] = (0, import_react73.useState)(threads.length > 0 ? threads[0].id : null);
    const [isCreateModalOpen, setCreateModalOpen] = (0, import_react73.useState)(false);
    const { user: currentUser2 } = useAuth();
    const handleSendMessage = (threadId, messageText) => {
      if (!currentUser2) return;
      const newMessage = {
        id: Date.now(),
        user: { name: currentUser2.name, avatarUrl: currentUser2.avatarUrl || "" },
        text: messageText,
        timestamp: (/* @__PURE__ */ new Date()).toLocaleTimeString([], { hour: "2-digit", minute: "2-digit" })
      };
      setThreads((prevThreads) => prevThreads.map((thread) => {
        if (thread.id === threadId) {
          return {
            ...thread,
            messages: [...thread.messages, newMessage],
            lastMessage: messageText,
            timestamp: newMessage.timestamp
          };
        }
        return thread;
      }));
    };
    const handleCreateThread = (newThread) => {
      const fullNewThread = {
        ...newThread,
        id: `thread-${Date.now()}`,
        lastMessage: newThread.messages[0]?.text || "No messages yet.",
        timestamp: newThread.messages[0]?.timestamp || (/* @__PURE__ */ new Date()).toLocaleTimeString(),
        unreadCount: 0
      };
      setThreads((prev) => [fullNewThread, ...prev]);
      setSelectedThreadId(fullNewThread.id);
      setCreateModalOpen(false);
    };
    const activeThread = threads.find((t) => t.id === selectedThreadId);
    const ThreadListItem = ({ thread, isActive }) => /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)(
      "li",
      {
        onClick: () => setSelectedThreadId(thread.id),
        className: `p-4 cursor-pointer rounded-lg transition-colors ${isActive ? "bg-primary/10 dark:bg-primary/20" : "hover:bg-gray-100 dark:hover:bg-gray-700/50"}`,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("h3", { className: `font-semibold ${isActive ? "text-primary" : "text-gray-800 dark:text-white"}`, children: thread.title }),
            /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("span", { className: "text-xs text-gray-500 dark:text-gray-400", children: thread.timestamp })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex justify-between items-start mt-1", children: [
            /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("p", { className: "text-sm text-gray-600 dark:text-gray-400 truncate pr-4", children: thread.lastMessage }),
            thread.unreadCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("span", { className: "flex-shrink-0 bg-secondary text-white text-xs font-bold rounded-full h-5 w-5 flex items-center justify-center", children: thread.unreadCount })
          ] })
        ]
      }
    );
    return /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "flex h-[calc(100vh-9rem)] sm:h-[calc(100vh-10rem)] bg-white dark:bg-dark-card shadow-md rounded-lg overflow-hidden", children: [
      /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: `w-full md:w-1/3 md:flex flex-col border-r border-gray-200 dark:border-gray-700 ${selectedThreadId && "hidden"}`, children: [
        /* @__PURE__ */ (0, import_jsx_runtime35.jsxs)("div", { className: "p-4 border-b border-gray-200 dark:border-gray-700 flex justify-between items-center", children: [
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("h2", { className: "text-xl font-bold text-gray-800 dark:text-white", children: "Messages" }),
          /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("button", { onClick: () => setCreateModalOpen(true), className: "p-2 rounded-full text-primary hover:bg-primary/10", children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(PlusIcon, { className: "h-6 w-6" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("ul", { className: "flex-1 overflow-y-auto p-2 space-y-1", children: threads.map((thread) => /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(ThreadListItem, { thread, isActive: thread.id === selectedThreadId }, thread.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("div", { className: `w-full md:w-2/3 flex-col ${selectedThreadId ? "flex" : "hidden md:flex"}`, children: activeThread ? /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(
        ChatView_default,
        {
          thread: activeThread,
          onBack: () => setSelectedThreadId(null),
          onSendMessage: handleSendMessage
        },
        activeThread.id
      ) : /* @__PURE__ */ (0, import_jsx_runtime35.jsx)("div", { className: "flex-1 items-center justify-center text-gray-500 hidden md:flex", children: "Select a conversation" }) }),
      /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(CreateThreadModal_default, { isOpen: isCreateModalOpen, onClose: () => setCreateModalOpen(false), onSave: handleCreateThread })
    ] });
  };
  var MessagesPage_default = MessagesPage;

  // components/projects/ProjectsPage.tsx
  var import_react76 = __toESM(require_react());

  // components/projects/AddProjectModal.tsx
  var import_react74 = __toESM(require_react());
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  var AddProjectModal = ({ isOpen, onClose, onSave }) => {
    const [name, setName] = (0, import_react74.useState)("");
    const [client, setClient] = (0, import_react74.useState)("");
    const [status, setStatus] = (0, import_react74.useState)("Active");
    const [errors, setErrors] = (0, import_react74.useState)({});
    (0, import_react74.useEffect)(() => {
      if (isOpen) {
        setName("");
        setClient("");
        setStatus("Active");
        setErrors({});
      }
    }, [isOpen]);
    const validate = () => {
      const newErrors = {};
      if (!name.trim()) newErrors.name = "Project name is required.";
      if (!client.trim()) newErrors.client = "Client name is required.";
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onSave({ name, client, status });
      }
    };
    if (!isOpen) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: "Add New Project" }),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "mt-6 space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("label", { htmlFor: "project-name", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Project Name" }),
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("input", { type: "text", id: "project-name", value: name, onChange: (e) => setName(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.name ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.name && /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("label", { htmlFor: "project-client", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Client" }),
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("input", { type: "text", id: "project-client", value: client, onChange: (e) => setClient(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.client ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.client && /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.client })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("label", { htmlFor: "project-status", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Status" }),
              /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("select", { id: "project-status", value: status, onChange: (e) => setStatus(e.target.value), className: "mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md", children: [
                /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("option", { children: "Active" }),
                /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("option", { children: "On Hold" }),
                /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("option", { children: "Completed" })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime36.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("button", { type: "submit", className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm", children: "Save Project" }),
          /* @__PURE__ */ (0, import_jsx_runtime36.jsx)("button", { type: "button", onClick: onClose, className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm", children: "Cancel" })
        ] })
      ] }) })
    ] });
  };
  var AddProjectModal_default = AddProjectModal;

  // components/projects/EditProjectModal.tsx
  var import_react75 = __toESM(require_react());
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  var EditProjectModal = ({ isOpen, onClose, onSave, project }) => {
    const [name, setName] = (0, import_react75.useState)("");
    const [client, setClient] = (0, import_react75.useState)("");
    const [status, setStatus] = (0, import_react75.useState)("Active");
    const [errors, setErrors] = (0, import_react75.useState)({});
    (0, import_react75.useEffect)(() => {
      if (isOpen && project) {
        setName(project.name);
        setClient(project.client);
        setStatus(project.status);
        setErrors({});
      }
    }, [isOpen, project]);
    const validate = () => {
      const newErrors = {};
      if (!name.trim()) newErrors.name = "Project name is required.";
      if (!client.trim()) newErrors.client = "Client name is required.";
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onSave({ ...project, name, client, status });
      }
    };
    if (!isOpen) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: "Edit Project" }),
            /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "mt-6 space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("label", { htmlFor: "edit-project-name", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Project Name" }),
              /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("input", { type: "text", id: "edit-project-name", value: name, onChange: (e) => setName(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.name ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.name && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("label", { htmlFor: "edit-project-client", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Client" }),
              /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("input", { type: "text", id: "edit-project-client", value: client, onChange: (e) => setClient(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.client ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.client && /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.client })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("label", { htmlFor: "edit-project-status", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Status" }),
              /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("select", { id: "edit-project-status", value: status, onChange: (e) => setStatus(e.target.value), className: "mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 dark:border-gray-600 bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none focus:ring-primary focus:border-primary sm:text-sm rounded-md", children: [
                /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("option", { children: "Active" }),
                /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("option", { children: "On Hold" }),
                /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("option", { children: "Completed" })
              ] })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime37.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("button", { type: "submit", className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm", children: "Save Changes" }),
          /* @__PURE__ */ (0, import_jsx_runtime37.jsx)("button", { type: "button", onClick: onClose, className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm", children: "Cancel" })
        ] })
      ] }) })
    ] });
  };
  var EditProjectModal_default = EditProjectModal;

  // components/projects/ProjectsPage.tsx
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var ProjectsPage = () => {
    const [projects, setProjects] = (0, import_react76.useState)([]);
    const { hasPermission } = useAuth();
    const [isAddModalOpen, setAddModalOpen] = (0, import_react76.useState)(false);
    const [isEditModalOpen, setEditModalOpen] = (0, import_react76.useState)(false);
    const [isDeleteModalOpen, setDeleteModalOpen] = (0, import_react76.useState)(false);
    const [selectedProject, setSelectedProject] = (0, import_react76.useState)(null);
    (0, import_react76.useEffect)(() => {
      fetch("/api/projects").then((res) => res.json()).then((data) => setProjects(data));
    }, []);
    const handleAddProject = async (newProjectData) => {
      const response = await fetch("/api/projects", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newProjectData)
      });
      const newProject = await response.json();
      setProjects((prev) => [...prev, newProject]);
      setAddModalOpen(false);
    };
    const handleUpdateProject = async (updatedProject) => {
      const response = await fetch(`/api/projects/${updatedProject.id}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(updatedProject)
      });
      const returnedProject = await response.json();
      setProjects((prev) => prev.map((p) => p.id === returnedProject.id ? returnedProject : p));
      setEditModalOpen(false);
      setSelectedProject(null);
    };
    const handleDeleteConfirm = async () => {
      if (selectedProject) {
        await fetch(`/api/projects/${selectedProject.id}`, { method: "DELETE" });
        setProjects((prev) => prev.filter((p) => p.id !== selectedProject.id));
      }
      setDeleteModalOpen(false);
      setSelectedProject(null);
    };
    const StatusBadge2 = ({ status }) => {
      let colors;
      switch (status) {
        case "Active":
          colors = "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300";
          break;
        case "On Hold":
          colors = "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300";
          break;
        case "Completed":
          colors = "bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300";
          break;
        default:
          colors = "bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-300";
      }
      return /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("span", { className: `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${colors}`, children: status });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between sm:items-center gap-4 mb-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Projects" }),
        hasPermission("projects:create") && /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("button", { onClick: () => setAddModalOpen(true), className: "inline-flex items-center justify-center rounded-md border border-transparent bg-primary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(PlusIcon, { className: "h-5 w-5 mr-2" }),
          "Add Project"
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "bg-white dark:bg-dark-card shadow-md rounded-lg overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "overflow-x-auto hidden md:block", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("table", { className: "min-w-full divide-y divide-gray-200 dark:divide-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("thead", { className: "bg-gray-50 dark:bg-gray-800", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Project Name" }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Client" }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Status" }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Actions" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("tbody", { className: "bg-white dark:bg-dark-card divide-y divide-gray-200 dark:divide-gray-700", children: projects.map((proj) => /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("td", { className: "px-6 py-4 whitespace-nowrap", children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "text-sm font-medium text-gray-900 dark:text-white", children: proj.name }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
                "PROJ-",
                proj.id
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-300", children: proj.client }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("td", { className: "px-6 py-4 whitespace-nowrap", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(StatusBadge2, { status: proj.status }) }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm font-medium", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center space-x-4", children: [
              hasPermission("projects:update") && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("button", { onClick: () => {
                setSelectedProject(proj);
                setEditModalOpen(true);
              }, className: "text-primary hover:text-primary/80", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(PencilIcon, { className: "h-5 w-5" }) }),
              hasPermission("projects:delete") && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("button", { onClick: () => {
                setSelectedProject(proj);
                setDeleteModalOpen(true);
              }, className: "text-red-600 hover:text-red-900 dark:text-red-500 dark:hover:text-red-400", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(TrashIcon, { className: "h-5 w-5" }) })
            ] }) })
          ] }, proj.id)) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "md:hidden divide-y divide-gray-200 dark:divide-gray-700", children: projects.map((proj) => /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex justify-between items-start", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "text-sm font-medium text-gray-900 dark:text-white", children: proj.name }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
                "PROJ-",
                proj.id
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(StatusBadge2, { status: proj.status })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "mt-4 flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "text-xs text-gray-500 dark:text-gray-400", children: "Client" }),
              /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("div", { className: "text-sm text-gray-900 dark:text-gray-300", children: proj.client })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime38.jsxs)("div", { className: "flex items-center space-x-4", children: [
              hasPermission("projects:update") && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("button", { onClick: () => {
                setSelectedProject(proj);
                setEditModalOpen(true);
              }, className: "text-primary hover:text-primary/80", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(PencilIcon, { className: "h-5 w-5" }) }),
              hasPermission("projects:delete") && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)("button", { onClick: () => {
                setSelectedProject(proj);
                setDeleteModalOpen(true);
              }, className: "text-red-600 hover:text-red-900 dark:text-red-500 dark:hover:text-red-400", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(TrashIcon, { className: "h-5 w-5" }) })
            ] })
          ] })
        ] }, proj.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(AddProjectModal_default, { isOpen: isAddModalOpen, onClose: () => setAddModalOpen(false), onSave: handleAddProject }),
      selectedProject && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(EditProjectModal_default, { isOpen: isEditModalOpen, onClose: () => setEditModalOpen(false), onSave: handleUpdateProject, project: selectedProject }),
      selectedProject && /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(DeleteConfirmationModal_default, { isOpen: isDeleteModalOpen, onClose: () => setDeleteModalOpen(false), onConfirm: handleDeleteConfirm, itemName: selectedProject.name, itemType: "Project" })
    ] });
  };
  var ProjectsPage_default = ProjectsPage;

  // components/accounts/AccountHeadsPage.tsx
  var import_react79 = __toESM(require_react());

  // components/accounts/AddAccountHeadModal.tsx
  var import_react77 = __toESM(require_react());
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var AddAccountHeadModal = ({ isOpen, onClose, onSave }) => {
    const [name, setName] = (0, import_react77.useState)("");
    const [bankName, setBankName] = (0, import_react77.useState)("");
    const [accountNumber, setAccountNumber] = (0, import_react77.useState)("");
    const [errors, setErrors] = (0, import_react77.useState)({});
    (0, import_react77.useEffect)(() => {
      if (isOpen) {
        setName("");
        setBankName("");
        setAccountNumber("");
        setErrors({});
      }
    }, [isOpen]);
    const validate = () => {
      const newErrors = {};
      if (!name.trim()) newErrors.name = "Account name is required.";
      if (!bankName.trim()) newErrors.bankName = "Bank name is required.";
      if (!accountNumber.trim()) newErrors.accountNumber = "Account number is required.";
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onSave({ name, bankName, accountNumber, status: "Pending Approval" });
      }
    };
    if (!isOpen) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: "Add New Account Head" }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { className: "mt-1 text-sm text-gray-500 dark:text-gray-400", children: "New account heads require admin approval before becoming active." }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "mt-6 space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("label", { htmlFor: "account-name", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Account Name" }),
              /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { type: "text", id: "account-name", value: name, onChange: (e) => setName(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.name ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.name && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("label", { htmlFor: "bank-name", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Bank Name" }),
              /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { type: "text", id: "bank-name", value: bankName, onChange: (e) => setBankName(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.bankName ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.bankName && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.bankName })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("label", { htmlFor: "account-number", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Account Number" }),
              /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("input", { type: "text", id: "account-number", value: accountNumber, onChange: (e) => setAccountNumber(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.accountNumber ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.accountNumber && /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.accountNumber })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime39.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("button", { type: "submit", className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm", children: "Submit for Approval" }),
          /* @__PURE__ */ (0, import_jsx_runtime39.jsx)("button", { type: "button", onClick: onClose, className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm", children: "Cancel" })
        ] })
      ] }) })
    ] });
  };
  var AddAccountHeadModal_default = AddAccountHeadModal;

  // components/accounts/EditAccountHeadModal.tsx
  var import_react78 = __toESM(require_react());
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  var EditAccountHeadModal = ({ isOpen, onClose, onSave, accountHead }) => {
    const [name, setName] = (0, import_react78.useState)("");
    const [bankName, setBankName] = (0, import_react78.useState)("");
    const [accountNumber, setAccountNumber] = (0, import_react78.useState)("");
    const [errors, setErrors] = (0, import_react78.useState)({});
    (0, import_react78.useEffect)(() => {
      if (isOpen && accountHead) {
        setName(accountHead.name);
        setBankName(accountHead.bankName);
        setAccountNumber(accountHead.accountNumber);
        setErrors({});
      }
    }, [isOpen, accountHead]);
    const validate = () => {
      const newErrors = {};
      if (!name.trim()) newErrors.name = "Account name is required.";
      if (!bankName.trim()) newErrors.bankName = "Bank name is required.";
      if (!accountNumber.trim()) newErrors.accountNumber = "Account number is required.";
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onSave({ ...accountHead, name, bankName, accountNumber });
      }
    };
    if (!isOpen) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: "Edit Account Head" }),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "mt-6 space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("label", { htmlFor: "edit-account-name", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Account Name" }),
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("input", { type: "text", id: "edit-account-name", value: name, onChange: (e) => setName(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.name ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.name && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.name })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("label", { htmlFor: "edit-bank-name", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Bank Name" }),
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("input", { type: "text", id: "edit-bank-name", value: bankName, onChange: (e) => setBankName(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.bankName ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.bankName && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.bankName })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("label", { htmlFor: "edit-account-number", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Account Number" }),
              /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("input", { type: "text", id: "edit-account-number", value: accountNumber, onChange: (e) => setAccountNumber(e.target.value), className: `mt-1 block w-full shadow-sm sm:text-sm ${errors.accountNumber ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary` }),
              errors.accountNumber && /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.accountNumber })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime40.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("button", { type: "submit", className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm", children: "Save Changes" }),
          /* @__PURE__ */ (0, import_jsx_runtime40.jsx)("button", { type: "button", onClick: onClose, className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm", children: "Cancel" })
        ] })
      ] }) })
    ] });
  };
  var EditAccountHeadModal_default = EditAccountHeadModal;

  // components/accounts/AccountHeadsPage.tsx
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var AccountHeadsPage = () => {
    const [accounts, setAccounts] = (0, import_react79.useState)([]);
    const { hasPermission } = useAuth();
    const [isAddModalOpen, setAddModalOpen] = (0, import_react79.useState)(false);
    const [isEditModalOpen, setEditModalOpen] = (0, import_react79.useState)(false);
    const [isDeleteModalOpen, setDeleteModalOpen] = (0, import_react79.useState)(false);
    const [isApproveModalOpen, setApproveModalOpen] = (0, import_react79.useState)(false);
    const [selectedAccount, setSelectedAccount] = (0, import_react79.useState)(null);
    (0, import_react79.useEffect)(() => {
      fetch("/api/account-heads").then((res) => res.json()).then(setAccounts);
    }, []);
    const handleApproveConfirm = () => {
      if (selectedAccount) {
        setAccounts(accounts.map((acc) => acc.id === selectedAccount.id ? { ...acc, status: "Active" } : acc));
      }
      setApproveModalOpen(false);
      setSelectedAccount(null);
    };
    const handleAddAccount = async (newAccountData) => {
      const response = await fetch("/api/account-heads", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newAccountData)
      });
      const newAccount = await response.json();
      setAccounts([...accounts, newAccount]);
      setAddModalOpen(false);
    };
    const handleUpdateAccount = (updatedAccount) => {
      setAccounts(accounts.map((acc) => acc.id === updatedAccount.id ? updatedAccount : acc));
      setEditModalOpen(false);
      setSelectedAccount(null);
    };
    const handleDeleteConfirm = () => {
      if (selectedAccount) {
        setAccounts(accounts.filter((acc) => acc.id !== selectedAccount.id));
      }
      setDeleteModalOpen(false);
      setSelectedAccount(null);
    };
    const StatusBadge2 = ({ status }) => {
      const isActive = status === "Active";
      return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)(
        "span",
        {
          className: `inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${isActive ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300" : "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300"}`,
          children: [
            isActive ? /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(CheckCircleIcon, { className: "h-4 w-4 mr-1.5" }) : /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(ClockIcon, { className: "h-4 w-4 mr-1.5" }),
            status
          ]
        }
      );
    };
    return /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between sm:items-center gap-4 mb-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Account Heads" }),
        hasPermission("accounts:create") && /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("button", { onClick: () => setAddModalOpen(true), className: "inline-flex items-center justify-center rounded-md border border-transparent bg-primary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2", children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(PlusIcon, { className: "h-5 w-5 mr-2" }),
          "Add Account Head"
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "bg-white dark:bg-dark-card shadow-md rounded-lg overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "overflow-x-auto hidden md:block", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("table", { className: "min-w-full divide-y divide-gray-200 dark:divide-gray-700", children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("thead", { className: "bg-gray-50 dark:bg-gray-800", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Account Name" }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Bank Details" }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Status" }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("th", { scope: "col", className: "px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider", children: "Actions" })
          ] }) }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("tbody", { className: "bg-white dark:bg-dark-card divide-y divide-gray-200 dark:divide-gray-700", children: accounts.map((acc) => /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("tr", { children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("td", { className: "px-6 py-4 whitespace-nowrap", children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "text-sm font-medium text-gray-900 dark:text-white", children: acc.name }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
                "ID: ",
                acc.id
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("td", { className: "px-6 py-4 whitespace-nowrap", children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "text-sm text-gray-900 dark:text-gray-300", children: acc.bankName }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: acc.accountNumber })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("td", { className: "px-6 py-4 whitespace-nowrap", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(StatusBadge2, { status: acc.status }) }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("td", { className: "px-6 py-4 whitespace-nowrap text-sm font-medium", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex items-center space-x-4", children: [
              acc.status === "Pending Approval" && hasPermission("finance:approve") && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("button", { onClick: () => {
                setSelectedAccount(acc);
                setApproveModalOpen(true);
              }, className: "text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-300", children: "Approve" }),
              hasPermission("accounts:update") && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("button", { onClick: () => {
                setSelectedAccount(acc);
                setEditModalOpen(true);
              }, className: "text-primary hover:text-primary/80", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(PencilIcon, { className: "h-5 w-5" }) }),
              hasPermission("accounts:delete") && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("button", { onClick: () => {
                setSelectedAccount(acc);
                setDeleteModalOpen(true);
              }, className: "text-red-600 hover:text-red-900 dark:text-red-500 dark:hover:text-red-400", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(TrashIcon, { className: "h-5 w-5" }) })
            ] }) })
          ] }, acc.id)) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "md:hidden divide-y divide-gray-200 dark:divide-gray-700", children: accounts.map((acc) => /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "p-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "flex justify-between items-start", children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "text-sm font-medium text-gray-900 dark:text-white", children: acc.name }),
              /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: [
                "ID: ",
                acc.id
              ] })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(StatusBadge2, { status: acc.status })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "mt-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "text-sm text-gray-900 dark:text-gray-300", children: acc.bankName }),
            /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("div", { className: "text-sm text-gray-500 dark:text-gray-400", children: acc.accountNumber })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime41.jsxs)("div", { className: "mt-4 flex items-center space-x-4", children: [
            acc.status === "Pending Approval" && hasPermission("finance:approve") && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("button", { onClick: () => {
              setSelectedAccount(acc);
              setApproveModalOpen(true);
            }, className: "text-sm font-semibold text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-300", children: "Approve" }),
            hasPermission("accounts:update") && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("button", { onClick: () => {
              setSelectedAccount(acc);
              setEditModalOpen(true);
            }, className: "text-primary hover:text-primary/80", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(PencilIcon, { className: "h-5 w-5" }) }),
            hasPermission("accounts:delete") && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)("button", { onClick: () => {
              setSelectedAccount(acc);
              setDeleteModalOpen(true);
            }, className: "text-red-600 hover:text-red-900 dark:text-red-500 dark:hover:text-red-400", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(TrashIcon, { className: "h-5 w-5" }) })
          ] })
        ] }, acc.id)) })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(AddAccountHeadModal_default, { isOpen: isAddModalOpen, onClose: () => setAddModalOpen(false), onSave: handleAddAccount }),
      selectedAccount && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(EditAccountHeadModal_default, { isOpen: isEditModalOpen, onClose: () => setEditModalOpen(false), onSave: handleUpdateAccount, accountHead: selectedAccount }),
      selectedAccount && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(DeleteConfirmationModal_default, { isOpen: isDeleteModalOpen, onClose: () => setDeleteModalOpen(false), onConfirm: handleDeleteConfirm, itemName: selectedAccount.name, itemType: "Account Head" }),
      selectedAccount && /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(ConfirmationModal_default, { isOpen: isApproveModalOpen, onClose: () => setApproveModalOpen(false), onConfirm: handleApproveConfirm, title: "Approve Account Head", message: `Are you sure you want to approve the account head "${selectedAccount.name}"?`, confirmButtonText: "Approve" })
    ] });
  };
  var AccountHeadsPage_default = AccountHeadsPage;

  // components/settings/SettingsPage.tsx
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var SettingsPage = ({ isDarkMode, onToggleDarkMode }) => {
    const FormRow = ({ label, children, description }) => /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "sm:grid sm:grid-cols-3 sm:gap-4 sm:items-start sm:py-5 border-b border-gray-200 dark:border-gray-700", children: [
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("label", { className: "block text-sm font-medium text-gray-700 dark:text-gray-300 sm:mt-px sm:pt-2", children: label }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "mt-1 sm:mt-0 sm:col-span-2", children: [
        children,
        description && /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("p", { className: "mt-2 text-sm text-gray-500", children: description })
      ] })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white mb-6", children: "Settings" }),
      /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("div", { className: "bg-white dark:bg-dark-card shadow-md rounded-lg", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "px-4 py-5 sm:p-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", children: "General Settings" }),
        /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "mt-6", children: [
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(FormRow, { label: "Company Name", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)("input", { type: "text", defaultValue: "TabdeelGlob", className: "block w-full max-w-lg shadow-sm focus:ring-primary focus:border-primary sm:text-sm border-gray-300 dark:border-gray-600 rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white" }) }),
          /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(FormRow, { label: "Theme", description: "Choose between a light or dark interface.", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsxs)("div", { className: "flex items-center space-x-2", children: [
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(SunIcon, { className: `h-6 w-6 ${!isDarkMode ? "text-primary" : "text-gray-400"}` }),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
              "button",
              {
                type: "button",
                onClick: onToggleDarkMode,
                className: `${isDarkMode ? "bg-primary" : "bg-gray-200 dark:bg-gray-600"} relative inline-flex flex-shrink-0 h-6 w-11 border-2 border-transparent rounded-full cursor-pointer transition-colors ease-in-out duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary`,
                role: "switch",
                "aria-checked": isDarkMode,
                children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(
                  "span",
                  {
                    "aria-hidden": "true",
                    className: `${isDarkMode ? "translate-x-5" : "translate-x-0"} pointer-events-none inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200`
                  }
                )
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(MoonIcon, { className: `h-6 w-6 ${isDarkMode ? "text-primary" : "text-gray-400"}` })
          ] }) })
        ] })
      ] }) })
    ] });
  };
  var SettingsPage_default = SettingsPage;

  // components/tasks/TaskManagementPage.tsx
  var import_react81 = __toESM(require_react());

  // components/tasks/AddTaskModal.tsx
  var import_react80 = __toESM(require_react());
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var AddTaskModal = ({ isOpen, onClose, onSave }) => {
    const [description, setDescription] = (0, import_react80.useState)("");
    const [deadline, setDeadline] = (0, import_react80.useState)("");
    const [errors, setErrors] = (0, import_react80.useState)();
    (0, import_react80.useEffect)(() => {
      if (isOpen) {
        setDescription("");
        setDeadline((/* @__PURE__ */ new Date()).toISOString().split("T")[0]);
        setErrors({});
      }
    }, [isOpen]);
    const validate = () => {
      const newErrors = {};
      if (!description.trim()) newErrors.description = "Task description is required.";
      if (!deadline) newErrors.deadline = "A deadline is required.";
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onSave({ description, deadline });
        onClose();
      }
    };
    if (!isOpen) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: "Add New Task" }),
            /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "mt-6 space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("label", { htmlFor: "task-description", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Task Description" }),
              /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
                "textarea",
                {
                  id: "task-description",
                  rows: 3,
                  value: description,
                  onChange: (e) => setDescription(e.target.value),
                  className: `mt-1 block w-full shadow-sm sm:text-sm ${errors?.description ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary`
                }
              ),
              errors?.description && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.description })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("label", { htmlFor: "task-deadline", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Deadline" }),
              /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
                "input",
                {
                  type: "date",
                  id: "task-deadline",
                  value: deadline,
                  onChange: (e) => setDeadline(e.target.value),
                  className: `mt-1 block w-full shadow-sm sm:text-sm ${errors?.deadline ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary`
                }
              ),
              errors?.deadline && /* @__PURE__ */ (0, import_jsx_runtime43.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.deadline })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime43.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
            "button",
            {
              type: "submit",
              className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm",
              children: "Save Task"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
            "button",
            {
              type: "button",
              onClick: onClose,
              className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm",
              children: "Cancel"
            }
          )
        ] })
      ] }) })
    ] });
  };
  var AddTaskModal_default = AddTaskModal;

  // components/tasks/TaskManagementPage.tsx
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  var TaskManagementPage = ({ tasks, onAddTask, onToggleTask }) => {
    const [isModalOpen, setIsModalOpen] = (0, import_react81.useState)(false);
    const { incompleteTasks, completedTasks } = (0, import_react81.useMemo)(() => {
      const incomplete = [];
      const completed2 = [];
      tasks.forEach((task2) => {
        if (task2.isCompleted) {
          completed2.push(task2);
        } else {
          incomplete.push(task2);
        }
      });
      return { incompleteTasks: incomplete, completedTasks: completed2 };
    }, [tasks]);
    const TaskItem = ({ task: task2 }) => /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex items-center p-3 bg-white dark:bg-dark-card rounded-lg shadow-sm hover:shadow-md transition-shadow", children: [
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
        "input",
        {
          type: "checkbox",
          checked: task2.isCompleted,
          onChange: () => onToggleTask(task2.id),
          className: "h-5 w-5 rounded border-gray-300 text-primary focus:ring-primary cursor-pointer",
          "aria-label": `Mark task "${task2.description}" as ${task2.isCompleted ? "incomplete" : "complete"}`
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "ml-4 flex-grow", children: [
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("p", { className: `text-sm font-medium text-gray-900 dark:text-white ${task2.isCompleted ? "line-through text-gray-500 dark:text-gray-400" : ""}`, children: task2.description }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("p", { className: `text-xs text-gray-500 dark:text-gray-400 ${task2.isCompleted ? "line-through" : ""}`, children: [
          "Due: ",
          task2.deadline
        ] })
      ] })
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between sm:items-center gap-4 mb-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "My Tasks" }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)(
          "button",
          {
            onClick: () => setIsModalOpen(true),
            className: "inline-flex items-center justify-center rounded-md border border-transparent bg-primary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(PlusIcon, { className: "h-5 w-5 mr-2" }),
              "Add Task"
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { className: "space-y-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("h2", { className: "text-xl font-semibold text-gray-700 dark:text-gray-300 mb-3", children: "Incomplete" }),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "space-y-3", children: incompleteTasks.length > 0 ? incompleteTasks.map((task2) => /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(TaskItem, { task: task2 }, task2.id)) : /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: "No pending tasks. Great job!" }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime44.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("h2", { className: "text-xl font-semibold text-gray-700 dark:text-gray-300 mb-3", children: "Completed" }),
          /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("div", { className: "space-y-3", children: completedTasks.length > 0 ? completedTasks.map((task2) => /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(TaskItem, { task: task2 }, task2.id)) : /* @__PURE__ */ (0, import_jsx_runtime44.jsx)("p", { className: "text-gray-500 dark:text-gray-400", children: "No tasks completed yet." }) })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(
        AddTaskModal_default,
        {
          isOpen: isModalOpen,
          onClose: () => setIsModalOpen(false),
          onSave: onAddTask
        }
      )
    ] });
  };
  var TaskManagementPage_default = TaskManagementPage;

  // components/announcements/AnnouncementsPage.tsx
  var import_react83 = __toESM(require_react());

  // components/announcements/CreateAnnouncementModal.tsx
  var import_react82 = __toESM(require_react());
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  var CreateAnnouncementModal = ({ isOpen, onClose, onSave }) => {
    const [title, setTitle] = (0, import_react82.useState)("");
    const [content, setContent] = (0, import_react82.useState)("");
    const [errors, setErrors] = (0, import_react82.useState)();
    (0, import_react82.useEffect)(() => {
      if (isOpen) {
        setTitle("");
        setContent("");
        setErrors({});
      }
    }, [isOpen]);
    const validate = () => {
      const newErrors = {};
      if (!title.trim()) newErrors.title = "Title is required.";
      if (!content.trim()) newErrors.content = "Content is required.";
      setErrors(newErrors);
      return Object.keys(newErrors).length === 0;
    };
    const handleSubmit = (e) => {
      e.preventDefault();
      if (validate()) {
        onSave({ title, content });
        onClose();
      }
    };
    if (!isOpen) return null;
    return /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "fixed inset-0 z-50 flex items-center justify-center overflow-y-auto", "aria-labelledby": "modal-title", role: "dialog", "aria-modal": "true", children: [
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity", "aria-hidden": "true", onClick: onClose }),
      /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("div", { className: "relative inline-block align-bottom bg-white dark:bg-dark-card rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("form", { onSubmit: handleSubmit, noValidate: true, children: [
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "bg-white dark:bg-dark-card px-4 pt-5 pb-4 sm:p-6 sm:pb-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "flex justify-between items-center", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("h3", { className: "text-lg leading-6 font-medium text-gray-900 dark:text-white", id: "modal-title", children: "Create Announcement" }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("button", { type: "button", onClick: onClose, className: "text-gray-400 hover:text-gray-500", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(XMarkIcon, { className: "h-6 w-6" }) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "mt-6 space-y-4", children: [
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { htmlFor: "announcement-title", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Title" }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
                "input",
                {
                  type: "text",
                  id: "announcement-title",
                  value: title,
                  onChange: (e) => setTitle(e.target.value),
                  className: `mt-1 block w-full shadow-sm sm:text-sm ${errors?.title ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary`
                }
              ),
              errors?.title && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.title })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { children: [
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("label", { htmlFor: "announcement-content", className: "block text-sm font-medium text-gray-700 dark:text-gray-300", children: "Content" }),
              /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
                "textarea",
                {
                  id: "announcement-content",
                  rows: 5,
                  value: content,
                  onChange: (e) => setContent(e.target.value),
                  className: `mt-1 block w-full shadow-sm sm:text-sm ${errors?.content ? "border-red-500" : "border-gray-300 dark:border-gray-600"} rounded-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-primary focus:border-primary`
                }
              ),
              errors?.content && /* @__PURE__ */ (0, import_jsx_runtime45.jsx)("p", { className: "mt-1 text-sm text-red-600 dark:text-red-400", children: errors.content })
            ] })
          ] })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime45.jsxs)("div", { className: "bg-gray-50 dark:bg-dark-card/50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse rounded-b-lg", children: [
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
            "button",
            {
              type: "submit",
              className: "w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary text-base font-medium text-white hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary sm:ml-3 sm:w-auto sm:text-sm",
              children: "Publish"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
            "button",
            {
              type: "button",
              onClick: onClose,
              className: "mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:w-auto sm:text-sm",
              children: "Cancel"
            }
          )
        ] })
      ] }) })
    ] });
  };
  var CreateAnnouncementModal_default = CreateAnnouncementModal;

  // components/announcements/AnnouncementsPage.tsx
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  var AnnouncementsPage = ({ announcements, onAddAnnouncement }) => {
    const [isModalOpen, setIsModalOpen] = (0, import_react83.useState)(false);
    const { hasPermission } = useAuth();
    const canCreate = hasPermission("announcements:create");
    return /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { children: [
      /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex flex-col sm:flex-row justify-between sm:items-center gap-4 mb-6", children: [
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h1", { className: "text-3xl font-bold text-gray-800 dark:text-white", children: "Company Announcements" }),
        canCreate && /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)(
          "button",
          {
            onClick: () => setIsModalOpen(true),
            className: "inline-flex items-center justify-center rounded-md border border-transparent bg-primary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(PlusIcon, { className: "h-5 w-5 mr-2" }),
              "Create Announcement"
            ]
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "space-y-6", children: announcements.map((ann) => /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "bg-white dark:bg-dark-card shadow-md rounded-lg p-6", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex items-start space-x-4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("div", { className: "flex-shrink-0 h-10 w-10 rounded-full bg-primary/10 flex items-center justify-center", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(MegaphoneIcon, { className: "h-6 w-6 text-primary" }) }),
        /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex-1", children: [
          /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex justify-between items-baseline", children: [
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("h2", { className: "text-xl font-bold text-gray-900 dark:text-white", children: ann.title }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("p", { className: "text-sm text-gray-500 dark:text-gray-400", children: ann.timestamp })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime46.jsxs)("div", { className: "flex items-center space-x-2 mt-1 mb-3", children: [
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("img", { src: ann.author.avatarUrl, alt: ann.author.name, className: "h-6 w-6 rounded-full" }),
            /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("span", { className: "text-sm font-medium text-gray-700 dark:text-gray-300", children: ann.author.name })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime46.jsx)("p", { className: "text-gray-700 dark:text-gray-300 whitespace-pre-wrap", children: ann.content })
        ] })
      ] }) }, ann.id)) }),
      canCreate && /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
        CreateAnnouncementModal_default,
        {
          isOpen: isModalOpen,
          onClose: () => setIsModalOpen(false),
          onSave: onAddAnnouncement
        }
      )
    ] });
  };
  var AnnouncementsPage_default = AnnouncementsPage;

  // components/layout/MainLayout.tsx
  var import_jsx_runtime47 = __toESM(require_jsx_runtime());
  var MainLayout = ({ onLogout, isDarkMode, toggleDarkMode }) => {
    const [activePage, setActivePage] = (0, import_react84.useState)("dashboard");
    const [tasks, setTasks] = (0, import_react84.useState)([]);
    const [announcements, setAnnouncements] = (0, import_react84.useState)([]);
    const [isSidebarOpen, setSidebarOpen] = (0, import_react84.useState)(false);
    const { user, originalUser, switchUser } = useAuth();
    (0, import_react84.useEffect)(() => {
      fetch("/api/tasks").then((res) => res.json()).then(setTasks);
      fetch("/api/announcements").then((res) => res.json()).then(setAnnouncements);
    }, []);
    const handleAddTask = async (taskData) => {
      const response = await fetch("/api/tasks", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(taskData)
      });
      const newTask = await response.json();
      setTasks((prev) => [newTask, ...prev]);
    };
    const handleToggleTask = async (taskId) => {
      setTasks(
        (prev) => prev.map(
          (task2) => task2.id === taskId ? { ...task2, isCompleted: !task2.isCompleted } : task2
        )
      );
      await fetch(`/api/tasks/${taskId}/toggle`, { method: "PUT" });
    };
    const handleAddAnnouncement = async (announcementData) => {
      if (!user) return;
      const newAnnouncementData = {
        ...announcementData,
        author: {
          name: user.name,
          avatarUrl: user.avatarUrl || ""
        }
      };
      const response = await fetch("/api/announcements", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(newAnnouncementData)
      });
      const newAnnouncement = await response.json();
      setAnnouncements((prev) => [newAnnouncement, ...prev]);
    };
    if (!user) {
      return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("div", { children: "Loading..." });
    }
    const isImpersonating = originalUser && user.id !== originalUser.id;
    const handleNavigate = (page) => {
      setActivePage(page);
      setSidebarOpen(false);
    };
    const renderContent2 = () => {
      switch (activePage) {
        case "finance":
          return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(FinancePage_default, {});
        case "service-jobs":
          return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ServiceJobsPage_default, {});
        case "messages":
          return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(MessagesPage_default, {});
        case "tasks":
          return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(TaskManagementPage_default, { tasks, onAddTask: handleAddTask, onToggleTask: handleToggleTask });
        case "users":
          return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(UserManagementPage_default, {});
        case "profile":
          return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(UserProfilePage_default, { user });
        case "roles":
          return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(RoleManagementPage_default, {});
        case "projects":
          return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ProjectsPage_default, {});
        case "account-heads":
          return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(AccountHeadsPage_default, {});
        case "settings":
          return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(SettingsPage_default, { isDarkMode, onToggleDarkMode: toggleDarkMode });
        case "announcements":
          return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(AnnouncementsPage_default, { announcements, onAddAnnouncement: handleAddAnnouncement });
        case "dashboard":
        default:
          return /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(DashboardPage_default, { onNavigate: handleNavigate, announcements });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex h-screen bg-light-bg dark:bg-dark-bg text-light-text dark:text-dark-text overflow-hidden", children: [
      /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Sidebar_default, { activePage, onNavigate: handleNavigate, isOpen: isSidebarOpen, setOpen: setSidebarOpen }),
      /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "flex-1 flex flex-col overflow-hidden", children: [
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(Header_default, { user, tasks, onLogout, onNavigate: handleNavigate, onToggleSidebar: () => setSidebarOpen(!isSidebarOpen) }),
        isImpersonating && /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("div", { className: "bg-yellow-100 dark:bg-yellow-900/50 border-b-2 border-yellow-500 text-yellow-800 dark:text-yellow-300 px-4 py-2 text-center text-sm font-semibold flex items-center justify-center gap-4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(ExclamationTriangleIcon, { className: "h-5 w-5" }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("span", { children: [
            "Viewing as ",
            /* @__PURE__ */ (0, import_jsx_runtime47.jsxs)("strong", { children: [
              user.name,
              " (",
              user.role,
              ")"
            ] }),
            "."
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(
            "button",
            {
              onClick: () => switchUser(originalUser.id),
              className: "underline hover:text-yellow-600 dark:hover:text-yellow-200",
              children: "Return to Admin View"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime47.jsx)("main", { className: "flex-1 overflow-x-hidden overflow-y-auto bg-light-bg dark:bg-dark-bg p-4 sm:p-6 lg:p-8", children: renderContent2() })
      ] })
    ] });
  };
  var MainLayout_default = MainLayout;

  // components/common/ErrorBoundary.tsx
  var import_react85 = __toESM(require_react());

  // components/common/ErrorFallback.tsx
  var import_jsx_runtime48 = __toESM(require_jsx_runtime());
  var ErrorFallback = ({ onRetry }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime48.jsxs)("div", { className: "flex flex-col items-center justify-center h-screen text-center p-8 bg-light-bg dark:bg-dark-bg text-light-text dark:text-dark-text", children: [
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(ExclamationTriangleIcon, { className: "h-16 w-16 text-red-500 mb-4" }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("h2", { className: "text-2xl font-bold text-gray-800 dark:text-white mb-2 font-header", children: "Oops! Something went wrong." }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)("p", { className: "text-gray-600 dark:text-gray-400 mb-6 max-w-md", children: "We've encountered an unexpected issue. Please try again. If the problem persists, please contact support." }),
      /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(
        "button",
        {
          onClick: onRetry,
          className: "inline-flex items-center justify-center rounded-md border border-transparent bg-primary px-6 py-3 text-base font-medium text-white shadow-sm hover:bg-primary/90 focus:outline-none focus:ring-2 focus:ring-primary focus:ring-offset-2",
          children: "Try Again"
        }
      )
    ] });
  };
  var ErrorFallback_default = ErrorFallback;

  // components/common/ErrorBoundary.tsx
  var import_jsx_runtime49 = __toESM(require_jsx_runtime());
  var ErrorBoundary = class extends import_react85.Component {
    constructor() {
      super(...arguments);
      this.state = {
        hasError: false
      };
      this.handleRetry = () => {
        this.setState({ hasError: false });
      };
    }
    static getDerivedStateFromError(_) {
      return { hasError: true };
    }
    componentDidCatch(error, errorInfo) {
      console.error("Uncaught error:", error, errorInfo);
    }
    render() {
      if (this.state.hasError) {
        return /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(ErrorFallback_default, { onRetry: this.handleRetry });
      }
      return this.props.children;
    }
  };
  var ErrorBoundary_default = ErrorBoundary;

  // App.tsx
  var import_jsx_runtime50 = __toESM(require_jsx_runtime());
  var App = () => {
    const [isAuthenticated, setIsAuthenticated] = (0, import_react86.useState)(false);
    const [isDarkMode, setDarkMode] = (0, import_react86.useState)(() => {
      if (typeof window !== "undefined" && window.localStorage) {
        return localStorage.getItem("theme") === "dark";
      }
      return false;
    });
    (0, import_react86.useEffect)(() => {
      const root2 = window.document.documentElement;
      if (isDarkMode) {
        root2.classList.add("dark");
        localStorage.setItem("theme", "dark");
      } else {
        root2.classList.remove("dark");
        localStorage.setItem("theme", "light");
      }
    }, [isDarkMode]);
    const handleLogin = (0, import_react86.useCallback)(() => {
      setIsAuthenticated(true);
    }, []);
    const handleLogout = (0, import_react86.useCallback)(() => {
      setIsAuthenticated(false);
    }, []);
    const toggleDarkMode = (0, import_react86.useCallback)(() => {
      setDarkMode((prevMode) => !prevMode);
    }, []);
    if (!isAuthenticated) {
      return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(LoginPage_default, { onLogin: handleLogin });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(AuthProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(ErrorBoundary_default, { children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(MainLayout_default, { onLogout: handleLogout, isDarkMode, toggleDarkMode }) }) });
  };
  var App_default = App;

  // index.tsx
  var import_jsx_runtime51 = __toESM(require_jsx_runtime());
  var rootElement = document.getElementById("root");
  if (!rootElement) {
    throw new Error("Could not find root element to mount to");
  }
  var root = import_client.default.createRoot(rootElement);
  root.render(
    /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(import_react87.default.StrictMode, { children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(App_default, {}) })
  );
})();
/*! Bundled license information:

react/cjs/react.production.js:
  (**
   * @license React
   * react.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

scheduler/cjs/scheduler.production.js:
  (**
   * @license React
   * scheduler.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.production.js:
  (**
   * @license React
   * react-dom.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom-client.production.js:
  (**
   * @license React
   * react-dom-client.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react/cjs/react-jsx-runtime.production.js:
  (**
   * @license React
   * react-jsx-runtime.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-is/cjs/react-is.production.js:
  (**
   * @license React
   * react-is.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim.production.js:
  (**
   * @license React
   * use-sync-external-store-shim.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

decimal.js-light/decimal.js:
  (*! decimal.js-light v2.5.1 https://github.com/MikeMcl/decimal.js-light/LICENCE *)

use-sync-external-store/cjs/use-sync-external-store-with-selector.production.js:
  (**
   * @license React
   * use-sync-external-store-with-selector.production.js
   *
   * Copyright (c) Meta Platforms, Inc. and affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
